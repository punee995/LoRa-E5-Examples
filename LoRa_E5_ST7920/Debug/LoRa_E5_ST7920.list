
LoRa_E5_ST7920.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073dc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  08007520  08007520  00017520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_6x12_tr 000003c7  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  0800835b  0800835b  0001835b  2**0
                  ALLOC
  5 .ARM          00000000  0800835c  0800835c  000201dc  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800835c  0800835c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001dc  20000000  08008364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000518  200001dc  08008540  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006f4  08008540  000206f4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046f1c  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004003  00000000  00000000  00067122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  0006b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  0006c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004d07  00000000  00000000  0006dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015569  00000000  00000000  00072aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad61d  00000000  00000000  00088010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013562d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006da0  00000000  00000000  00135680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08007504 	.word	0x08007504

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08007504 	.word	0x08007504

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <delay_us>:
{
	HAL_TIM_Base_Start(&htim1);  // change this according to ur setup
}

void delay_us (uint16_t delay)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <delay_us+0x2c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
 8000b6a:	bf00      	nop
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <delay_us+0x2c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3f9      	bcc.n	8000b6c <delay_us+0x14>
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000694 	.word	0x20000694

08000b88 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bac:	68fb      	ldr	r3, [r7, #12]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	2004      	movs	r0, #4
 8000bce:	f7ff ffdb 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ffd8 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff ffd5 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7920_RST_Pin|ST7920_SCLK_Pin|ST7920_SID_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <MX_GPIO_Init+0xac>)
 8000be6:	f000 fe73 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7920_CS_GPIO_Port, ST7920_CS_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2101      	movs	r1, #1
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 fe6d 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f000 fe66 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ST7920_RST_Pin|ST7920_SCLK_Pin|ST7920_SID_Pin;
 8000c04:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000c08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c12:	2302      	movs	r3, #2
 8000c14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_GPIO_Init+0xac>)
 8000c1c:	f000 fcf8 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ST7920_CS_Pin;
 8000c20:	2301      	movs	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ST7920_CS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f000 fcea 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 8000c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f000 fcdb 	bl	8001610 <HAL_GPIO_Init>

}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	48000400 	.word	0x48000400

08000c68 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c78:	f023 0218 	bic.w	r2, r3, #24
 8000c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 fb3d 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f887 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f7ff ff89 	bl	8000bb8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ca6:	f000 faa5 	bl	80011f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Enable 3V3 For Sensor
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f000 fe0c 	bl	80018d0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000cb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbc:	f000 fba2 	bl	8001404 <HAL_Delay>

  //
  u8g2_Setup_st7920_s_128x64_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, u8g2_gpio_and_delay_stm32); // init u8g2 structure
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <main+0xf8>)
 8000cc2:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <main+0xfc>)
 8000cc4:	4933      	ldr	r1, [pc, #204]	; (8000d94 <main+0x100>)
 8000cc6:	4834      	ldr	r0, [pc, #208]	; (8000d98 <main+0x104>)
 8000cc8:	f002 fa8e 	bl	80031e8 <u8g2_Setup_st7920_s_128x64_f>
  u8g2_InitDisplay(&u8g2);
 8000ccc:	4832      	ldr	r0, [pc, #200]	; (8000d98 <main+0x104>)
 8000cce:	f003 fe8b 	bl	80049e8 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4830      	ldr	r0, [pc, #192]	; (8000d98 <main+0x104>)
 8000cd6:	f003 fe96 	bl	8004a06 <u8x8_SetPowerSave>

  u8g2_ClearBuffer(&u8g2);
 8000cda:	482f      	ldr	r0, [pc, #188]	; (8000d98 <main+0x104>)
 8000cdc:	f002 f9f3 	bl	80030c6 <u8g2_ClearBuffer>
  u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 8000ce0:	492e      	ldr	r1, [pc, #184]	; (8000d9c <main+0x108>)
 8000ce2:	482d      	ldr	r0, [pc, #180]	; (8000d98 <main+0x104>)
 8000ce4:	f002 fff8 	bl	8003cd8 <u8g2_SetFont>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  u8g2_ClearBuffer(&u8g2);
 8000ce8:	482b      	ldr	r0, [pc, #172]	; (8000d98 <main+0x104>)
 8000cea:	f002 f9ec 	bl	80030c6 <u8g2_ClearBuffer>
	  u8g2_DrawXBM(&u8g2, 34, 2, 60, 60, hourglass_full);
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <main+0x10c>)
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	233c      	movs	r3, #60	; 0x3c
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	233c      	movs	r3, #60	; 0x3c
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	2122      	movs	r1, #34	; 0x22
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <main+0x104>)
 8000cfe:	f002 f99f 	bl	8003040 <u8g2_DrawXBM>
	  u8g2_SendBuffer(&u8g2);
 8000d02:	4825      	ldr	r0, [pc, #148]	; (8000d98 <main+0x104>)
 8000d04:	f002 fa52 	bl	80031ac <u8g2_SendBuffer>
	  HAL_Delay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f000 fb7a 	bl	8001404 <HAL_Delay>

	  u8g2_ClearBuffer(&u8g2);
 8000d10:	4821      	ldr	r0, [pc, #132]	; (8000d98 <main+0x104>)
 8000d12:	f002 f9d8 	bl	80030c6 <u8g2_ClearBuffer>
	  u8g2_DrawXBM(&u8g2, 34, 2, 60, 60, hourglass_half);
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <main+0x110>)
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	233c      	movs	r3, #60	; 0x3c
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	233c      	movs	r3, #60	; 0x3c
 8000d20:	2202      	movs	r2, #2
 8000d22:	2122      	movs	r1, #34	; 0x22
 8000d24:	481c      	ldr	r0, [pc, #112]	; (8000d98 <main+0x104>)
 8000d26:	f002 f98b 	bl	8003040 <u8g2_DrawXBM>
	  u8g2_SendBuffer(&u8g2);
 8000d2a:	481b      	ldr	r0, [pc, #108]	; (8000d98 <main+0x104>)
 8000d2c:	f002 fa3e 	bl	80031ac <u8g2_SendBuffer>
	  HAL_Delay(1000);
 8000d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d34:	f000 fb66 	bl	8001404 <HAL_Delay>

	  u8g2_ClearBuffer(&u8g2);
 8000d38:	4817      	ldr	r0, [pc, #92]	; (8000d98 <main+0x104>)
 8000d3a:	f002 f9c4 	bl	80030c6 <u8g2_ClearBuffer>
	  u8g2_DrawXBM(&u8g2, 34, 2, 60, 60, hourglass_empty);
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <main+0x114>)
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	233c      	movs	r3, #60	; 0x3c
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	233c      	movs	r3, #60	; 0x3c
 8000d48:	2202      	movs	r2, #2
 8000d4a:	2122      	movs	r1, #34	; 0x22
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <main+0x104>)
 8000d4e:	f002 f977 	bl	8003040 <u8g2_DrawXBM>
	  u8g2_SendBuffer(&u8g2);
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <main+0x104>)
 8000d54:	f002 fa2a 	bl	80031ac <u8g2_SendBuffer>
	  HAL_Delay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f000 fb52 	bl	8001404 <HAL_Delay>

	  // set font and write hello world
	  u8g2_ClearBuffer(&u8g2);
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <main+0x104>)
 8000d62:	f002 f9b0 	bl	80030c6 <u8g2_ClearBuffer>
	  u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 8000d66:	490d      	ldr	r1, [pc, #52]	; (8000d9c <main+0x108>)
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <main+0x104>)
 8000d6a:	f002 ffb5 	bl	8003cd8 <u8g2_SetFont>
	  u8g2_DrawStr(&u8g2, 2,17,"Hello World!");
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <main+0x118>)
 8000d70:	2211      	movs	r2, #17
 8000d72:	2102      	movs	r1, #2
 8000d74:	4808      	ldr	r0, [pc, #32]	; (8000d98 <main+0x104>)
 8000d76:	f002 ff11 	bl	8003b9c <u8g2_DrawStr>
	  u8g2_SendBuffer(&u8g2);
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <main+0x104>)
 8000d7c:	f002 fa16 	bl	80031ac <u8g2_SendBuffer>
	  HAL_Delay(5000);
 8000d80:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d84:	f000 fb3e 	bl	8001404 <HAL_Delay>
	  u8g2_ClearBuffer(&u8g2);
 8000d88:	e7ae      	b.n	8000ce8 <main+0x54>
 8000d8a:	bf00      	nop
 8000d8c:	08000e65 	.word	0x08000e65
 8000d90:	08004365 	.word	0x08004365
 8000d94:	08007b6c 	.word	0x08007b6c
 8000d98:	200001f8 	.word	0x200001f8
 8000d9c:	08007f94 	.word	0x08007f94
 8000da0:	0800790c 	.word	0x0800790c
 8000da4:	0800772c 	.word	0x0800772c
 8000da8:	0800754c 	.word	0x0800754c
 8000dac:	08007520 	.word	0x08007520

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09a      	sub	sp, #104	; 0x68
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2248      	movs	r2, #72	; 0x48
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 feda 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dd6:	f000 fd93 	bl	8001900 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ff44 	bl	8000c68 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <SystemClock_Config+0xb0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <SystemClock_Config+0xb0>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <SystemClock_Config+0xb0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000dfc:	2324      	movs	r3, #36	; 0x24
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e00:	2381      	movs	r3, #129	; 0x81
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000e0c:	23b0      	movs	r3, #176	; 0xb0
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 f805 	bl	8001e28 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e24:	f000 f8d6 	bl	8000fd4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000e28:	234f      	movs	r3, #79	; 0x4f
 8000e2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fb88 	bl	800255c <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e52:	f000 f8bf 	bl	8000fd4 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3768      	adds	r7, #104	; 0x68
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	58000400 	.word	0x58000400

08000e64 <u8g2_gpio_and_delay_stm32>:

/* USER CODE BEGIN 4 */
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	72fb      	strb	r3, [r7, #11]
 8000e72:	4613      	mov	r3, r2
 8000e74:	72bb      	strb	r3, [r7, #10]
		switch(msg){
 8000e76:	7afb      	ldrb	r3, [r7, #11]
 8000e78:	3b28      	subs	r3, #40	; 0x28
 8000e7a:	2b26      	cmp	r3, #38	; 0x26
 8000e7c:	f200 80a0 	bhi.w	8000fc0 <u8g2_gpio_and_delay_stm32+0x15c>
 8000e80:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <u8g2_gpio_and_delay_stm32+0x24>)
 8000e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e86:	bf00      	nop
 8000e88:	08000f25 	.word	0x08000f25
 8000e8c:	08000f2b 	.word	0x08000f2b
 8000e90:	08000f35 	.word	0x08000f35
 8000e94:	08000f3d 	.word	0x08000f3d
 8000e98:	08000fc1 	.word	0x08000fc1
 8000e9c:	08000fc1 	.word	0x08000fc1
 8000ea0:	08000fc1 	.word	0x08000fc1
 8000ea4:	08000fc1 	.word	0x08000fc1
 8000ea8:	08000fc1 	.word	0x08000fc1
 8000eac:	08000fc1 	.word	0x08000fc1
 8000eb0:	08000fc1 	.word	0x08000fc1
 8000eb4:	08000fc1 	.word	0x08000fc1
 8000eb8:	08000fc1 	.word	0x08000fc1
 8000ebc:	08000fc1 	.word	0x08000fc1
 8000ec0:	08000fc1 	.word	0x08000fc1
 8000ec4:	08000fc1 	.word	0x08000fc1
 8000ec8:	08000fc1 	.word	0x08000fc1
 8000ecc:	08000fc1 	.word	0x08000fc1
 8000ed0:	08000fc1 	.word	0x08000fc1
 8000ed4:	08000fc1 	.word	0x08000fc1
 8000ed8:	08000fc1 	.word	0x08000fc1
 8000edc:	08000fc1 	.word	0x08000fc1
 8000ee0:	08000fc1 	.word	0x08000fc1
 8000ee4:	08000fc1 	.word	0x08000fc1
 8000ee8:	08000f41 	.word	0x08000f41
 8000eec:	08000f5f 	.word	0x08000f5f
 8000ef0:	08000fc1 	.word	0x08000fc1
 8000ef4:	08000fc1 	.word	0x08000fc1
 8000ef8:	08000fc1 	.word	0x08000fc1
 8000efc:	08000fc1 	.word	0x08000fc1
 8000f00:	08000fc1 	.word	0x08000fc1
 8000f04:	08000fc1 	.word	0x08000fc1
 8000f08:	08000fc1 	.word	0x08000fc1
 8000f0c:	08000fc1 	.word	0x08000fc1
 8000f10:	08000fc5 	.word	0x08000fc5
 8000f14:	08000fa3 	.word	0x08000fa3
 8000f18:	08000fc1 	.word	0x08000fc1
 8000f1c:	08000fc1 	.word	0x08000fc1
 8000f20:	08000f81 	.word	0x08000f81

		//Function which implements a delay, arg_int contains the amount of ms
		case U8X8_MSG_GPIO_AND_DELAY_INIT:
			MX_GPIO_Init();
 8000f24:	f7ff fe48 	bl	8000bb8 <MX_GPIO_Init>
		break;
 8000f28:	e04d      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
		//Function which implements a delay, arg_int contains the amount of ms
		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000f2a:	7abb      	ldrb	r3, [r7, #10]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fa69 	bl	8001404 <HAL_Delay>
		break;
 8000f32:	e048      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
		//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
		delay_us(10);
 8000f34:	200a      	movs	r0, #10
 8000f36:	f7ff fe0f 	bl	8000b58 <delay_us>
		break;
 8000f3a:	e044      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
		//Function which delays 100ns
		case U8X8_MSG_DELAY_100NANO:
		__NOP();
 8000f3c:	bf00      	nop

		break;
 8000f3e:	e042      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
		//Function to define the logic level of the clockline
		case U8X8_MSG_GPIO_SPI_CLOCK:
			if (arg_int) ST7920_SCLK_1;
 8000f40:	7abb      	ldrb	r3, [r7, #10]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <u8g2_gpio_and_delay_stm32+0xee>
 8000f46:	2201      	movs	r2, #1
 8000f48:	2120      	movs	r1, #32
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <u8g2_gpio_and_delay_stm32+0x16c>)
 8000f4c:	f000 fcc0 	bl	80018d0 <HAL_GPIO_WritePin>
			else ST7920_SCLK_0;

		break;
 8000f50:	e039      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
			else ST7920_SCLK_0;
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <u8g2_gpio_and_delay_stm32+0x16c>)
 8000f58:	f000 fcba 	bl	80018d0 <HAL_GPIO_WritePin>
		break;
 8000f5c:	e033      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
		//Function to define the logic level of the data line to the display
		case U8X8_MSG_GPIO_SPI_DATA:
			if (arg_int) ST7920_SID_1;
 8000f5e:	7abb      	ldrb	r3, [r7, #10]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <u8g2_gpio_and_delay_stm32+0x10e>
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <u8g2_gpio_and_delay_stm32+0x16c>)
 8000f6c:	f000 fcb0 	bl	80018d0 <HAL_GPIO_WritePin>
			else ST7920_SID_0;

		break;
 8000f70:	e029      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
			else ST7920_SID_0;
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <u8g2_gpio_and_delay_stm32+0x16c>)
 8000f7a:	f000 fca9 	bl	80018d0 <HAL_GPIO_WritePin>
		break;
 8000f7e:	e022      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>

		// Function to define the logic level of the CS line
		case U8X8_MSG_GPIO_CS1:
			if (arg_int) ST7920_CS_1	;
 8000f80:	7abb      	ldrb	r3, [r7, #10]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <u8g2_gpio_and_delay_stm32+0x130>
 8000f86:	2201      	movs	r2, #1
 8000f88:	2101      	movs	r1, #1
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f000 fc9f 	bl	80018d0 <HAL_GPIO_WritePin>
			else ST7920_CS_0;

		break;
 8000f92:	e018      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
			else ST7920_CS_0;
 8000f94:	2200      	movs	r2, #0
 8000f96:	2101      	movs	r1, #1
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f000 fc98 	bl	80018d0 <HAL_GPIO_WritePin>
		break;
 8000fa0:	e011      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
		case U8X8_MSG_GPIO_DC:

		break;
		//Function to define the logic level of the RESET line
		case U8X8_MSG_GPIO_RESET:
			if (arg_int) ST7920_RST_1;
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <u8g2_gpio_and_delay_stm32+0x150>
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2110      	movs	r1, #16
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <u8g2_gpio_and_delay_stm32+0x16c>)
 8000fae:	f000 fc8f 	bl	80018d0 <HAL_GPIO_WritePin>
			else ST7920_RST_0;

		break;
 8000fb2:	e008      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>
			else ST7920_RST_0;
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <u8g2_gpio_and_delay_stm32+0x16c>)
 8000fba:	f000 fc89 	bl	80018d0 <HAL_GPIO_WritePin>
		break;
 8000fbe:	e002      	b.n	8000fc6 <u8g2_gpio_and_delay_stm32+0x162>

		default:
			return 0; //A message was received which is not implemented, return 0 to indicate an error
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e001      	b.n	8000fc8 <u8g2_gpio_and_delay_stm32+0x164>
		break;
 8000fc4:	bf00      	nop
	}

	return 1; // command processed successfully.
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>

08000fde <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <BusFault_Handler+0x4>

08001002 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f9cc 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	return 1;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <_kill>:

int _kill(int pid, int sig)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001050:	f003 fd68 	bl	8004b24 <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	2216      	movs	r2, #22
 8001058:	601a      	str	r2, [r3, #0]
	return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_exit>:

void _exit (int status)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800106e:	f04f 31ff 	mov.w	r1, #4294967295
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffe7 	bl	8001046 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001078:	e7fe      	b.n	8001078 <_exit+0x12>

0800107a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e00a      	b.n	80010a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800108c:	f3af 8000 	nop.w
 8001090:	4601      	mov	r1, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	60ba      	str	r2, [r7, #8]
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf0      	blt.n	800108c <_read+0x12>
	}

return len;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e009      	b.n	80010da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60ba      	str	r2, [r7, #8]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbf1      	blt.n	80010c6 <_write+0x12>
	}
	return len;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_close>:

int _close(int file)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	return -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001112:	605a      	str	r2, [r3, #4]
	return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <_isatty>:

int _isatty(int file)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f003 fcd2 	bl	8004b24 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20008000 	.word	0x20008000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	20000278 	.word	0x20000278
 80011b4:	200006f8 	.word	0x200006f8

080011b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_TIM1_Init+0xa0>)
 8001214:	4a20      	ldr	r2, [pc, #128]	; (8001298 <MX_TIM1_Init+0xa4>)
 8001216:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM1_Init+0xa0>)
 800121a:	222f      	movs	r2, #47	; 0x2f
 800121c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_TIM1_Init+0xa0>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM1_Init+0xa0>)
 8001226:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800122a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM1_Init+0xa0>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_TIM1_Init+0xa0>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_TIM1_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <MX_TIM1_Init+0xa0>)
 8001240:	f001 fc1a 	bl	8002a78 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800124a:	f7ff fec3 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <MX_TIM1_Init+0xa0>)
 800125c:	f001 fc63 	bl	8002b26 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001266:	f7ff feb5 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_TIM1_Init+0xa0>)
 800127c:	f001 fe14 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001286:	f7ff fea5 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000694 	.word	0x20000694
 8001298:	40012c00 	.word	0x40012c00

0800129c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_TIM_Base_MspInit+0x24>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d103      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012b2:	f7ff ff87 	bl	80011c4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012c00 	.word	0x40012c00

080012c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c8:	f7ff ff76 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012f2:	f003 fc1d 	bl	8004b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f6:	f7ff fccd 	bl	8000c94 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   r0, =_estack
 80012fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001308:	08008364 	.word	0x08008364
  ldr r2, =_sbss
 800130c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001310:	200006f4 	.word	0x200006f4

08001314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
 8001324:	f000 f942 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001328:	f001 fadc 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800132c:	4603      	mov	r3, r0
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_Init+0x3c>)
 8001330:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f810 	bl	8001358 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	e001      	b.n	8001348 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001344:	f7ff fe4b 	bl	8000fde <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001348:	79fb      	ldrb	r3, [r7, #7]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d024      	beq.n	80013b6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800136c:	f001 faba 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_InitTick+0x6c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f936 	bl	80015f6 <HAL_SYSTICK_Config>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10f      	bne.n	80013b0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d809      	bhi.n	80013aa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001396:	2200      	movs	r2, #0
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	f04f 30ff 	mov.w	r0, #4294967295
 800139e:	f000 f910 	bl	80015c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_InitTick+0x70>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e007      	b.n	80013ba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e004      	b.n	80013ba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x1c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x20>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x20>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000008 	.word	0x20000008
 80013ec:	200006e0 	.word	0x200006e0

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_GetTick+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	200006e0 	.word	0x200006e0

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff fff0 	bl	80013f0 <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffe0 	bl	80013f0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff49 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff60 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff92 	bl	8001504 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff61 	bl	80014b0 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb2 	bl	8001568 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161e:	e140      	b.n	80018a2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8132 	beq.w	800189c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d005      	beq.n	8001650 <HAL_GPIO_Init+0x40>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001686:	2201      	movs	r2, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d017      	beq.n	80016ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d123      	bne.n	8001742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0203 	and.w	r2, r3, #3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 808c 	beq.w	800189c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001784:	4a4e      	ldr	r2, [pc, #312]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	2207      	movs	r2, #7
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1bc>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a44      	ldr	r2, [pc, #272]	; (80018c4 <HAL_GPIO_Init+0x2b4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1b8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a43      	ldr	r2, [pc, #268]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1b4>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_Init+0x1be>
 80017c4:	2307      	movs	r3, #7
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x1be>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_Init+0x1be>
 80017cc:	2300      	movs	r3, #0
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	f002 0203 	and.w	r2, r2, #3
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	4093      	lsls	r3, r2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017de:	4938      	ldr	r1, [pc, #224]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 80017ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017f2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 800181c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001820:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f47f aeb7 	bne.w	8001620 <HAL_GPIO_Init+0x10>
  }
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	58000800 	.word	0x58000800

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_PWR_EnableBkUpAccess+0x18>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	58000400 	.word	0x58000400

0800191c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_PWREx_GetVoltageRange+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001944:	d101      	bne.n	800194a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	58000400 	.word	0x58000400

08001958 <LL_RCC_HSE_EnableTcxo>:
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <LL_RCC_HSE_DisableTcxo>:
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a2:	d101      	bne.n	80019a8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_HSE_Enable>:
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <LL_RCC_HSE_Disable>:
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_HSE_IsReady>:
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019fc:	d101      	bne.n	8001a02 <LL_RCC_HSE_IsReady+0x18>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_RCC_HSE_IsReady+0x1a>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_HSI_Enable>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_HSI_Disable>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_HSI_IsReady>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d101      	bne.n	8001a5c <LL_RCC_HSI_IsReady+0x18>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_RCC_HSI_IsReady+0x1a>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d101      	bne.n	8001aa6 <LL_RCC_LSE_IsReady+0x18>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_RCC_LSE_IsReady+0x1a>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d101      	bne.n	8001b08 <LL_RCC_LSI_IsReady+0x18>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <LL_RCC_LSI_IsReady+0x1a>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d101      	bne.n	8001b60 <LL_RCC_MSI_IsReady+0x16>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_RCC_MSI_IsReady+0x18>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d101      	bne.n	8001b80 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d34:	d101      	bne.n	8001d3a <LL_RCC_PLL_IsReady+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_RCC_PLL_IsReady+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d101      	bne.n	8001db6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d101      	bne.n	8001dda <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df6:	d101      	bne.n	8001dfc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e18:	d101      	bne.n	8001e1e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e38a      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3a:	f7ff fee4 	bl	8001c06 <LL_RCC_GetSysClkSource>
 8001e3e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e40:	f7ff ffa2 	bl	8001d88 <LL_RCC_PLL_GetMainSource>
 8001e44:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80c9 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3e>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d17b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d178      	bne.n	8001f58 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e66:	f7ff fe70 	bl	8001b4a <LL_RCC_MSI_IsReady>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x54>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e369      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x72>
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e98:	e006      	b.n	8001ea8 <HAL_RCC_OscConfig+0x80>
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d222      	bcs.n	8001ef2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fd2b 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e347      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fe64 	bl	8001bb8 <LL_RCC_MSI_SetCalibTrimming>
 8001ef0:	e021      	b.n	8001f36 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe4b 	bl	8001bb8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fcf0 	bl	800290c <RCC_SetFlashLatencyFromMSIRange>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e30c      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f36:	f000 fcd5 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4ab4      	ldr	r2, [pc, #720]	; (8002210 <HAL_RCC_OscConfig+0x3e8>)
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f40:	4bb4      	ldr	r3, [pc, #720]	; (8002214 <HAL_RCC_OscConfig+0x3ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fa07 	bl	8001358 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d047      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	e2fb      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d02c      	beq.n	8001fba <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f60:	f7ff fdd7 	bl	8001b12 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa44 	bl	80013f0 <HAL_GetTick>
 8001f68:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa40 	bl	80013f0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e2e8      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f7e:	f7ff fde4 	bl	8001b4a <LL_RCC_MSI_IsReady>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f1      	beq.n	8001f6c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fe00 	bl	8001bb8 <LL_RCC_MSI_SetCalibTrimming>
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fba:	f7ff fdb8 	bl	8001b2e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fa17 	bl	80013f0 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fa13 	bl	80013f0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e2bb      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fd8:	f7ff fdb7 	bl	8001b4a <LL_RCC_MSI_IsReady>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f1      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x19e>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d05f      	beq.n	80020b2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x1dc>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d10d      	bne.n	800201a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10a      	bne.n	800201a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	f7ff fcf1 	bl	80019ea <LL_RCC_HSE_IsReady>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d050      	beq.n	80020b0 <HAL_RCC_OscConfig+0x288>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d14c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e29a      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0x218>
 800203a:	f7ff fcba 	bl	80019b2 <LL_RCC_HSE_Enable>
 800203e:	e00d      	b.n	800205c <HAL_RCC_OscConfig+0x234>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002048:	d104      	bne.n	8002054 <HAL_RCC_OscConfig+0x22c>
 800204a:	f7ff fc85 	bl	8001958 <LL_RCC_HSE_EnableTcxo>
 800204e:	f7ff fcb0 	bl	80019b2 <LL_RCC_HSE_Enable>
 8002052:	e003      	b.n	800205c <HAL_RCC_OscConfig+0x234>
 8002054:	f7ff fcbb 	bl	80019ce <LL_RCC_HSE_Disable>
 8002058:	f7ff fc8c 	bl	8001974 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f9c4 	bl	80013f0 <HAL_GetTick>
 8002068:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff f9c0 	bl	80013f0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e268      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800207e:	f7ff fcb4 	bl	80019ea <LL_RCC_HSE_IsReady>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f1      	beq.n	800206c <HAL_RCC_OscConfig+0x244>
 8002088:	e013      	b.n	80020b2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff f9b1 	bl	80013f0 <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002092:	f7ff f9ad 	bl	80013f0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e255      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80020a4:	f7ff fca1 	bl	80019ea <LL_RCC_HSE_IsReady>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f1      	bne.n	8002092 <HAL_RCC_OscConfig+0x26a>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d04b      	beq.n	8002156 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_OscConfig+0x2a8>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d113      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d110      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	f7ff fcb8 	bl	8001a44 <LL_RCC_HSI_IsReady>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2be>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e234      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fcbb 	bl	8001a66 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f0:	e031      	b.n	8002156 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fa:	f7ff fc87 	bl	8001a0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f977 	bl	80013f0 <HAL_GetTick>
 8002102:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff f973 	bl	80013f0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e21b      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002118:	f7ff fc94 	bl	8001a44 <LL_RCC_HSI_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f1      	beq.n	8002106 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fc9d 	bl	8001a66 <LL_RCC_HSI_SetCalibTrimming>
 800212c:	e013      	b.n	8002156 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	f7ff fc7b 	bl	8001a28 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f95d 	bl	80013f0 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f959 	bl	80013f0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e201      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800214c:	f7ff fc7a 	bl	8001a44 <LL_RCC_HSI_IsReady>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f1      	bne.n	800213a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06e      	beq.n	8002240 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d056      	beq.n	8002218 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	429a      	cmp	r2, r3
 8002180:	d031      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1da      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80021a4:	f7ff fc94 	bl	8001ad0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a8:	f7ff f922 	bl	80013f0 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff f91e 	bl	80013f0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b11      	cmp	r3, #17
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1c6      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80021c2:	f7ff fc95 	bl	8001af0 <LL_RCC_LSI_IsReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f1      	bne.n	80021b0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	f023 0210 	bic.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	f7ff fc63 	bl	8001ab0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7ff f901 	bl	80013f0 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f2:	f7ff f8fd 	bl	80013f0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b11      	cmp	r3, #17
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1a5      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002204:	f7ff fc74 	bl	8001af0 <LL_RCC_LSI_IsReady>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f1      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3ca>
 800220e:	e017      	b.n	8002240 <HAL_RCC_OscConfig+0x418>
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002218:	f7ff fc5a 	bl	8001ad0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff f8e8 	bl	80013f0 <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff f8e4 	bl	80013f0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b11      	cmp	r3, #17
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e18c      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002236:	f7ff fc5b 	bl	8001af0 <LL_RCC_LSI_IsReady>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f1      	bne.n	8002224 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80d8 	beq.w	80023fe <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800224e:	f7ff fb71 	bl	8001934 <LL_PWR_IsEnabledBkUpAccess>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002258:	f7ff fb52 	bl	8001900 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225c:	f7ff f8c8 	bl	80013f0 <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7ff f8c4 	bl	80013f0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e16c      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002276:	f7ff fb5d 	bl	8001934 <LL_PWR_IsEnabledBkUpAccess>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f1      	beq.n	8002264 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d07b      	beq.n	8002380 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b85      	cmp	r3, #133	; 0x85
 800228e:	d003      	beq.n	8002298 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d109      	bne.n	80022ac <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff f8a0 	bl	80013f0 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7ff f892 	bl	80013f0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e138      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022de:	f7ff fbd6 	bl	8001a8e <LL_RCC_LSE_IsReady>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ef      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b81      	cmp	r3, #129	; 0x81
 80022ee:	d003      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b85      	cmp	r3, #133	; 0x85
 80022f6:	d121      	bne.n	800233c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff f87a 	bl	80013f0 <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff f86c 	bl	80013f0 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e112      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ec      	beq.n	8002314 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800233a:	e060      	b.n	80023fe <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff f858 	bl	80013f0 <HAL_GetTick>
 8002340:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800234e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002356:	e00a      	b.n	800236e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7ff f84a 	bl	80013f0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0f0      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ec      	bne.n	8002358 <HAL_RCC_OscConfig+0x530>
 800237e:	e03e      	b.n	80023fe <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff f836 	bl	80013f0 <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f7ff f828 	bl	80013f0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0ce      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ec      	bne.n	800239c <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7ff f815 	bl	80013f0 <HAL_GetTick>
 80023c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff f807 	bl	80013f0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0ad      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023f4:	f7ff fb4b 	bl	8001a8e <LL_RCC_LSE_IsReady>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ef      	bne.n	80023de <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a3 	beq.w	800254e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d076      	beq.n	80024fc <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	2b02      	cmp	r3, #2
 8002414:	d14b      	bne.n	80024ae <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	f7ff fc76 	bl	8001d06 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe ffe9 	bl	80013f0 <HAL_GetTick>
 800241e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe ffe5 	bl	80013f0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b0a      	cmp	r3, #10
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e08d      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002434:	f7ff fc75 	bl	8001d22 <LL_RCC_PLL_IsReady>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f1      	bne.n	8002422 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	4b44      	ldr	r3, [pc, #272]	; (8002558 <HAL_RCC_OscConfig+0x730>)
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002456:	0212      	lsls	r2, r2, #8
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800246a:	430a      	orrs	r2, r1
 800246c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002470:	4313      	orrs	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	f7ff fc39 	bl	8001cea <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe ffb2 	bl	80013f0 <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe ffae 	bl	80013f0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e056      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80024a2:	f7ff fc3e 	bl	8001d22 <LL_RCC_PLL_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f1      	beq.n	8002490 <HAL_RCC_OscConfig+0x668>
 80024ac:	e04f      	b.n	800254e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	f7ff fc2a 	bl	8001d06 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024bc:	f023 0303 	bic.w	r3, r3, #3
 80024c0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024cc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff8b 	bl	80013f0 <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe ff87 	bl	80013f0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e02f      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80024f0:	f7ff fc17 	bl	8001d22 <LL_RCC_PLL_IsReady>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f1      	bne.n	80024de <HAL_RCC_OscConfig+0x6b6>
 80024fa:	e028      	b.n	800254e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e023      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	429a      	cmp	r2, r3
 800251c:	d115      	bne.n	800254a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	429a      	cmp	r2, r3
 800252a:	d10e      	bne.n	800254a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	429a      	cmp	r2, r3
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	11c1808c 	.word	0x11c1808c

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e10f      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b89      	ldr	r3, [pc, #548]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d91b      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4984      	ldr	r1, [pc, #528]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258e:	f7fe ff2f 	bl	80013f0 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002596:	f7fe ff2b 	bl	80013f0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0f3      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a8:	4b7b      	ldr	r3, [pc, #492]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d1ef      	bne.n	8002596 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb28 	bl	8001c1c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025cc:	f7fe ff10 	bl	80013f0 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025d4:	f7fe ff0c 	bl	80013f0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0d4      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025e6:	f7ff fbda 	bl	8001d9e <LL_RCC_IsActiveFlag_HPRE>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f1      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d016      	beq.n	800262a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb1e 	bl	8001c42 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002606:	f7fe fef3 	bl	80013f0 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800260e:	f7fe feef 	bl	80013f0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0b7      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002620:	f7ff fbce 	bl	8001dc0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f1      	beq.n	800260e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fb17 	bl	8001c6e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002640:	f7fe fed6 	bl	80013f0 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002648:	f7fe fed2 	bl	80013f0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e09a      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800265a:	f7ff fbc3 	bl	8001de4 <LL_RCC_IsActiveFlag_PPRE1>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f1      	beq.n	8002648 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d017      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fb0c 	bl	8001c94 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800267c:	f7fe feb8 	bl	80013f0 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002684:	f7fe feb4 	bl	80013f0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e07c      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002696:	f7ff fbb6 	bl	8001e06 <LL_RCC_IsActiveFlag_PPRE2>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f1      	beq.n	8002684 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026b4:	f7ff f999 	bl	80019ea <LL_RCC_HSE_IsReady>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11e      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e066      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026ca:	f7ff fb2a 	bl	8001d22 <LL_RCC_PLL_IsReady>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e05b      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026e0:	f7ff fa33 	bl	8001b4a <LL_RCC_MSI_IsReady>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e050      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026ee:	f7ff f9a9 	bl	8001a44 <LL_RCC_HSI_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e049      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fa6d 	bl	8001be0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002706:	f7fe fe73 	bl	80013f0 <HAL_GetTick>
 800270a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270c:	e00a      	b.n	8002724 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270e:	f7fe fe6f 	bl	80013f0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e035      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002724:	f7ff fa6f 	bl	8001c06 <LL_RCC_GetSysClkSource>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1ec      	bne.n	800270e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d21b      	bcs.n	800277a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4913      	ldr	r1, [pc, #76]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002752:	f7fe fe4d 	bl	80013f0 <HAL_GetTick>
 8002756:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002758:	e008      	b.n	800276c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800275a:	f7fe fe49 	bl	80013f0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e011      	b.n	8002790 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x23c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d1ef      	bne.n	800275a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800277a:	f000 f8b3 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 800277e:	4603      	mov	r3, r0
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_RCC_ClockConfig+0x240>)
 8002782:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_ClockConfig+0x244>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fde5 	bl	8001358 <HAL_InitTick>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	58004000 	.word	0x58004000
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	f7ff fa28 	bl	8001c06 <LL_RCC_GetSysClkSource>
 80027b6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b8:	f7ff fae6 	bl	8001d88 <LL_RCC_PLL_GetMainSource>
 80027bc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d139      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d136      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80027d0:	f7ff f9cb 	bl	8001b6a <LL_RCC_MSI_IsEnabledRangeSelect>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0x62>
 80027da:	f7ff f9c6 	bl	8001b6a <LL_RCC_MSI_IsEnabledRangeSelect>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x4e>
 80027e4:	f7ff f9d1 	bl	8001b8a <LL_RCC_MSI_GetRange>
 80027e8:	4603      	mov	r3, r0
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	e005      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x5a>
 80027f2:	f7ff f9d5 	bl	8001ba0 <LL_RCC_MSI_GetRangeAfterStandby>
 80027f6:	4603      	mov	r3, r0
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	e014      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x8c>
 8002806:	f7ff f9b0 	bl	8001b6a <LL_RCC_MSI_IsEnabledRangeSelect>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d106      	bne.n	800281e <HAL_RCC_GetSysClockFreq+0x7a>
 8002810:	f7ff f9bb 	bl	8001b8a <LL_RCC_MSI_GetRange>
 8002814:	4603      	mov	r3, r0
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	e005      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
 800281e:	f7ff f9bf 	bl	8001ba0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002822:	4603      	mov	r3, r0
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x134>)
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d115      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800283c:	e012      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d102      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_GetSysClockFreq+0x138>)
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e00c      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d109      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002850:	f7ff f89e 	bl	8001990 <LL_RCC_HSE_IsEnabledDiv2>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCC_GetSysClockFreq+0x138>)
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e001      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002862:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	f7ff f9cf 	bl	8001c06 <LL_RCC_GetSysClkSource>
 8002868:	4603      	mov	r3, r0
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d12f      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800286e:	f7ff fa8b 	bl	8001d88 <LL_RCC_PLL_GetMainSource>
 8002872:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0xde>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d003      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0xe4>
 8002880:	e00d      	b.n	800289e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_RCC_GetSysClockFreq+0x138>)
 8002884:	60fb      	str	r3, [r7, #12]
        break;
 8002886:	e00d      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002888:	f7ff f882 	bl	8001990 <LL_RCC_HSE_IsEnabledDiv2>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_GetSysClockFreq+0x138>)
 8002894:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002896:	e005      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800289a:	60fb      	str	r3, [r7, #12]
        break;
 800289c:	e002      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	60fb      	str	r3, [r7, #12]
        break;
 80028a2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80028a4:	f7ff fa4e 	bl	8001d44 <LL_RCC_PLL_GetN>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	fb03 f402 	mul.w	r4, r3, r2
 80028b0:	f7ff fa5f 	bl	8001d72 <LL_RCC_PLL_GetDivider>
 80028b4:	4603      	mov	r3, r0
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	3301      	adds	r3, #1
 80028ba:	fbb4 f4f3 	udiv	r4, r4, r3
 80028be:	f7ff fa4d 	bl	8001d5c <LL_RCC_PLL_GetR>
 80028c2:	4603      	mov	r3, r0
 80028c4:	0f5b      	lsrs	r3, r3, #29
 80028c6:	3301      	adds	r3, #1
 80028c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80028cc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028ce:	697b      	ldr	r3, [r7, #20]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	08007b2c 	.word	0x08007b2c
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	01e84800 	.word	0x01e84800

080028e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b598      	push	{r3, r4, r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028e8:	f7ff ff5c 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 80028ec:	4604      	mov	r4, r0
 80028ee:	f7ff f9e4 	bl	8001cba <LL_RCC_GetAHBPrescaler>
 80028f2:	4603      	mov	r3, r0
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a03      	ldr	r2, [pc, #12]	; (8002908 <HAL_RCC_GetHCLKFreq+0x24>)
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd98      	pop	{r3, r4, r7, pc}
 8002908:	08007aec 	.word	0x08007aec

0800290c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002924:	f7ff f9d4 	bl	8001cd0 <LL_RCC_GetAHB3Prescaler>
 8002928:	4603      	mov	r3, r0
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9c      	lsrs	r4, r3, #18
 8002948:	f7fe ffe8 	bl	800191c <HAL_PWREx_GetVoltageRange>
 800294c:	4603      	mov	r3, r0
 800294e:	4619      	mov	r1, r3
 8002950:	4620      	mov	r0, r4
 8002952:	f000 f80b 	bl	800296c <RCC_SetFlashLatency>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	08007b2c 	.word	0x08007b2c
 8002964:	08007aec 	.word	0x08007aec
 8002968:	431bde83 	.word	0x431bde83

0800296c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002976:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <RCC_SetFlashLatency+0xfc>)
 8002978:	f107 0320 	add.w	r3, r7, #32
 800297c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002980:	6018      	str	r0, [r3, #0]
 8002982:	3304      	adds	r3, #4
 8002984:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002986:	4a39      	ldr	r2, [pc, #228]	; (8002a6c <RCC_SetFlashLatency+0x100>)
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002990:	6018      	str	r0, [r3, #0]
 8002992:	3304      	adds	r3, #4
 8002994:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002996:	4a36      	ldr	r2, [pc, #216]	; (8002a70 <RCC_SetFlashLatency+0x104>)
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	ca07      	ldmia	r2, {r0, r1, r2}
 800299e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029a2:	2300      	movs	r3, #0
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d11d      	bne.n	80029ea <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
 80029b2:	e016      	b.n	80029e2 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029bc:	4413      	add	r3, r2
 80029be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d808      	bhi.n	80029dc <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029d2:	4413      	add	r3, r2
 80029d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80029da:	e023      	b.n	8002a24 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	3301      	adds	r3, #1
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d9e5      	bls.n	80029b4 <RCC_SetFlashLatency+0x48>
 80029e8:	e01c      	b.n	8002a24 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ee:	e016      	b.n	8002a1e <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029f8:	4413      	add	r3, r2
 80029fa:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d808      	bhi.n	8002a18 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a0e:	4413      	add	r3, r2
 8002a10:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a16:	e005      	b.n	8002a24 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d9e5      	bls.n	80029f0 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <RCC_SetFlashLatency+0x108>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	4911      	ldr	r1, [pc, #68]	; (8002a74 <RCC_SetFlashLatency+0x108>)
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a34:	f7fe fcdc 	bl	80013f0 <HAL_GetTick>
 8002a38:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a3a:	e008      	b.n	8002a4e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a3c:	f7fe fcd8 	bl	80013f0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e007      	b.n	8002a5e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <RCC_SetFlashLatency+0x108>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1ef      	bne.n	8002a3c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3738      	adds	r7, #56	; 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	08007530 	.word	0x08007530
 8002a6c:	08007538 	.word	0x08007538
 8002a70:	08007540 	.word	0x08007540
 8002a74:	58004000 	.word	0x58004000

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e049      	b.n	8002b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fbfc 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 f8fc 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_ConfigClockSource+0x18>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e0b5      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x184>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002b5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	d03e      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xd4>
 8002b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b80:	f200 8087 	bhi.w	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	f000 8085 	beq.w	8002c96 <HAL_TIM_ConfigClockSource+0x170>
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	d87f      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002b92:	2b70      	cmp	r3, #112	; 0x70
 8002b94:	d01a      	beq.n	8002bcc <HAL_TIM_ConfigClockSource+0xa6>
 8002b96:	2b70      	cmp	r3, #112	; 0x70
 8002b98:	d87b      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	2b60      	cmp	r3, #96	; 0x60
 8002b9c:	d050      	beq.n	8002c40 <HAL_TIM_ConfigClockSource+0x11a>
 8002b9e:	2b60      	cmp	r3, #96	; 0x60
 8002ba0:	d877      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba2:	2b50      	cmp	r3, #80	; 0x50
 8002ba4:	d03c      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0xfa>
 8002ba6:	2b50      	cmp	r3, #80	; 0x50
 8002ba8:	d873      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d058      	beq.n	8002c60 <HAL_TIM_ConfigClockSource+0x13a>
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d86f      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb2:	2b30      	cmp	r3, #48	; 0x30
 8002bb4:	d064      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb6:	2b30      	cmp	r3, #48	; 0x30
 8002bb8:	d86b      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d060      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x15a>
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d867      	bhi.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d05c      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d05a      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bca:	e062      	b.n	8002c92 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f000 f945 	bl	8002e6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e04e      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f000 f92e 	bl	8002e6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c1c:	609a      	str	r2, [r3, #8]
      break;
 8002c1e:	e03b      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f000 f8a3 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2150      	movs	r1, #80	; 0x50
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f8fa 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c3e:	e02b      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f000 f8c1 	bl	8002dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2160      	movs	r1, #96	; 0x60
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f8ea 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c5e:	e01b      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f000 f883 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f8da 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c7e:	e00b      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 f8d1 	bl	8002e32 <TIM_ITRx_SetConfig>
        break;
 8002c90:	e002      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x20>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_Base_SetConfig+0x52>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0x52>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <TIM_Base_SetConfig+0xbc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0x52>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d108      	bne.n	8002d18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <TIM_Base_SetConfig+0xa0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <TIM_Base_SetConfig+0xbc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <TIM_Base_SetConfig+0xa0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d103      	bne.n	8002d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	615a      	str	r2, [r3, #20]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800

08002d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0201 	bic.w	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 030a 	bic.w	r3, r3, #10
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 0210 	bic.w	r2, r3, #16
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f043 0307 	orr.w	r3, r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	021a      	lsls	r2, r3, #8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e04a      	b.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ef0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d10c      	bne.n	8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00

08002f64 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	70fb      	strb	r3, [r7, #3]
 8002f76:	460b      	mov	r3, r1
 8002f78:	70bb      	strb	r3, [r7, #2]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002f84:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8002f86:	7bbb      	ldrb	r3, [r7, #14]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	787b      	ldrb	r3, [r7, #1]
 8002f98:	4413      	add	r3, r2
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	78bb      	ldrb	r3, [r7, #2]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	78ba      	ldrb	r2, [r7, #2]
 8002fa4:	78f9      	ldrb	r1, [r7, #3]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4603      	mov	r3, r0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fff3 	bl	8003f96 <u8g2_IsIntersection>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d040      	beq.n	8003038 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8002fba:	e035      	b.n	8003028 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7bba      	ldrb	r2, [r7, #14]
 8002fce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002fd2:	78ba      	ldrb	r2, [r7, #2]
 8002fd4:	78f9      	ldrb	r1, [r7, #3]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 ff88 	bl	8003ef2 <u8g2_DrawHVLine>
 8002fe2:	e010      	b.n	8003006 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7b7a      	ldrb	r2, [r7, #13]
 8002ff2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002ff6:	78ba      	ldrb	r2, [r7, #2]
 8002ff8:	78f9      	ldrb	r1, [r7, #3]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2301      	movs	r3, #1
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 ff76 	bl	8003ef2 <u8g2_DrawHVLine>
    }
    x++;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	3301      	adds	r3, #1
 800300a:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      b++;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	3301      	adds	r3, #1
 8003020:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8003022:	787b      	ldrb	r3, [r7, #1]
 8003024:	3b01      	subs	r3, #1
 8003026:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1c6      	bne.n	8002fbc <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7bba      	ldrb	r2, [r7, #14]
 8003032:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8003036:	e000      	b.n	800303a <u8g2_DrawHXBM+0xd6>
    return;
 8003038:	bf00      	nop
}
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	70fb      	strb	r3, [r7, #3]
 8003052:	460b      	mov	r3, r1
 8003054:	70bb      	strb	r3, [r7, #2]
 8003056:	4613      	mov	r3, r2
 8003058:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 800305a:	787b      	ldrb	r3, [r7, #1]
 800305c:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3307      	adds	r3, #7
 8003062:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	4413      	add	r3, r2
 8003070:	b2d8      	uxtb	r0, r3
 8003072:	78ba      	ldrb	r2, [r7, #2]
 8003074:	7e3b      	ldrb	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	b2db      	uxtb	r3, r3
 800307a:	78ba      	ldrb	r2, [r7, #2]
 800307c:	78f9      	ldrb	r1, [r7, #3]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	4603      	mov	r3, r0
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 ff87 	bl	8003f96 <u8g2_IsIntersection>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d017      	beq.n	80030be <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800308e:	e012      	b.n	80030b6 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8003090:	7878      	ldrb	r0, [r7, #1]
 8003092:	78ba      	ldrb	r2, [r7, #2]
 8003094:	78f9      	ldrb	r1, [r7, #3]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff61 	bl	8002f64 <u8g2_DrawHXBM>
    bitmap += blen;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	61fb      	str	r3, [r7, #28]
    y++;
 80030aa:	78bb      	ldrb	r3, [r7, #2]
 80030ac:	3301      	adds	r3, #1
 80030ae:	70bb      	strb	r3, [r7, #2]
    h--;
 80030b0:	7e3b      	ldrb	r3, [r7, #24]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 80030b6:	7e3b      	ldrb	r3, [r7, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e9      	bne.n	8003090 <u8g2_DrawXBM+0x50>
 80030bc:	e000      	b.n	80030c0 <u8g2_DrawXBM+0x80>
    return;
 80030be:	bf00      	nop
  }
}
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	7c1b      	ldrb	r3, [r3, #16]
 80030d4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030dc:	461a      	mov	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f001 fd3f 	bl	8004b78 <memset>
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af02      	add	r7, sp, #8
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	70fb      	strb	r3, [r7, #3]
 800310e:	4613      	mov	r3, r2
 8003110:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	7c1b      	ldrb	r3, [r3, #16]
 8003118:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	b29b      	uxth	r3, r3
 8003128:	89ba      	ldrh	r2, [r7, #12]
 800312a:	fb12 f303 	smulbb	r3, r2, r3
 800312e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003130:	89bb      	ldrh	r3, [r7, #12]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003136:	89bb      	ldrh	r3, [r7, #12]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4413      	add	r3, r2
 800313c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800313e:	7bf9      	ldrb	r1, [r7, #15]
 8003140:	78ba      	ldrb	r2, [r7, #2]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	460b      	mov	r3, r1
 8003148:	2100      	movs	r1, #0
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f001 fc1b 	bl	8004986 <u8x8_DrawTile>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800316a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003172:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	7c5b      	ldrb	r3, [r3, #17]
 800317a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800317c:	7bba      	ldrb	r2, [r7, #14]
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ffbd 	bl	8003102 <u8g2_send_tile_row>
    src_row++;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	3301      	adds	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800318e:	7bbb      	ldrb	r3, [r7, #14]
 8003190:	3301      	adds	r3, #1
 8003192:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	429a      	cmp	r2, r3
 800319a:	d203      	bcs.n	80031a4 <u8g2_send_buffer+0x4c>
 800319c:	7bba      	ldrb	r2, [r7, #14]
 800319e:	7b3b      	ldrb	r3, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3eb      	bcc.n	800317c <u8g2_send_buffer+0x24>
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffcf 	bl	8003158 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f001 fc34 	bl	8004a28 <u8x8_RefreshDisplay>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2208      	movs	r2, #8
 80031d4:	701a      	strb	r2, [r3, #0]
  return buf;
 80031d6:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <u8g2_m_16_8_f+0x1c>)
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000027c 	.word	0x2000027c

080031e8 <u8g2_Setup_st7920_s_128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* st7920 f */
void u8g2_Setup_st7920_s_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7920_128x64, u8x8_cad_st7920_spi, byte_cb, gpio_and_delay_cb);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a0b      	ldr	r2, [pc, #44]	; (800322c <u8g2_Setup_st7920_s_128x64_f+0x44>)
 80031fe:	490c      	ldr	r1, [pc, #48]	; (8003230 <u8g2_Setup_st7920_s_128x64_f+0x48>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f001 fc71 	bl	8004ae8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003206:	f107 0313 	add.w	r3, r7, #19
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ffdc 	bl	80031c8 <u8g2_m_16_8_f>
 8003210:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 8003212:	7cfa      	ldrb	r2, [r7, #19]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <u8g2_Setup_st7920_s_128x64_f+0x4c>)
 800321a:	6979      	ldr	r1, [r7, #20]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 ff6e 	bl	80040fe <u8g2_SetupBuffer>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	0800461d 	.word	0x0800461d
 8003230:	080048a9 	.word	0x080048a9
 8003234:	08003fed 	.word	0x08003fed

08003238 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	781b      	ldrb	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	81fb      	strh	r3, [r7, #14]
    font++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3301      	adds	r3, #1
 8003278:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b29a      	uxth	r2, r3
 8003286:	89fb      	ldrh	r3, [r7, #14]
 8003288:	4413      	add	r3, r2
 800328a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800328c:	89fb      	ldrh	r3, [r7, #14]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80032a2:	2100      	movs	r1, #0
 80032a4:	6838      	ldr	r0, [r7, #0]
 80032a6:	f7ff ffc7 	bl	8003238 <u8g2_font_get_byte>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80032b2:	2101      	movs	r1, #1
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f7ff ffbf 	bl	8003238 <u8g2_font_get_byte>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80032c2:	2102      	movs	r1, #2
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f7ff ffb7 	bl	8003238 <u8g2_font_get_byte>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80032d2:	2103      	movs	r1, #3
 80032d4:	6838      	ldr	r0, [r7, #0]
 80032d6:	f7ff ffaf 	bl	8003238 <u8g2_font_get_byte>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80032e2:	2104      	movs	r1, #4
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f7ff ffa7 	bl	8003238 <u8g2_font_get_byte>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80032f2:	2105      	movs	r1, #5
 80032f4:	6838      	ldr	r0, [r7, #0]
 80032f6:	f7ff ff9f 	bl	8003238 <u8g2_font_get_byte>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003302:	2106      	movs	r1, #6
 8003304:	6838      	ldr	r0, [r7, #0]
 8003306:	f7ff ff97 	bl	8003238 <u8g2_font_get_byte>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003312:	2107      	movs	r1, #7
 8003314:	6838      	ldr	r0, [r7, #0]
 8003316:	f7ff ff8f 	bl	8003238 <u8g2_font_get_byte>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003322:	2108      	movs	r1, #8
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	f7ff ff87 	bl	8003238 <u8g2_font_get_byte>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003332:	2109      	movs	r1, #9
 8003334:	6838      	ldr	r0, [r7, #0]
 8003336:	f7ff ff7f 	bl	8003238 <u8g2_font_get_byte>
 800333a:	4603      	mov	r3, r0
 800333c:	b25a      	sxtb	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003342:	210a      	movs	r1, #10
 8003344:	6838      	ldr	r0, [r7, #0]
 8003346:	f7ff ff77 	bl	8003238 <u8g2_font_get_byte>
 800334a:	4603      	mov	r3, r0
 800334c:	b25a      	sxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003352:	210b      	movs	r1, #11
 8003354:	6838      	ldr	r0, [r7, #0]
 8003356:	f7ff ff6f 	bl	8003238 <u8g2_font_get_byte>
 800335a:	4603      	mov	r3, r0
 800335c:	b25a      	sxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003362:	210c      	movs	r1, #12
 8003364:	6838      	ldr	r0, [r7, #0]
 8003366:	f7ff ff67 	bl	8003238 <u8g2_font_get_byte>
 800336a:	4603      	mov	r3, r0
 800336c:	b25a      	sxtb	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003372:	210d      	movs	r1, #13
 8003374:	6838      	ldr	r0, [r7, #0]
 8003376:	f7ff ff5f 	bl	8003238 <u8g2_font_get_byte>
 800337a:	4603      	mov	r3, r0
 800337c:	b25a      	sxtb	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003382:	210e      	movs	r1, #14
 8003384:	6838      	ldr	r0, [r7, #0]
 8003386:	f7ff ff57 	bl	8003238 <u8g2_font_get_byte>
 800338a:	4603      	mov	r3, r0
 800338c:	b25a      	sxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003392:	210f      	movs	r1, #15
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f7ff ff4f 	bl	8003238 <u8g2_font_get_byte>
 800339a:	4603      	mov	r3, r0
 800339c:	b25a      	sxtb	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80033a2:	2110      	movs	r1, #16
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f7ff ff47 	bl	8003238 <u8g2_font_get_byte>
 80033aa:	4603      	mov	r3, r0
 80033ac:	b25a      	sxtb	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80033b2:	2111      	movs	r1, #17
 80033b4:	6838      	ldr	r0, [r7, #0]
 80033b6:	f7ff ff50 	bl	800325a <u8g2_font_get_word>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80033c2:	2113      	movs	r1, #19
 80033c4:	6838      	ldr	r0, [r7, #0]
 80033c6:	f7ff ff48 	bl	800325a <u8g2_font_get_word>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80033d2:	2115      	movs	r1, #21
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f7ff ff40 	bl	800325a <u8g2_font_get_word>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	82da      	strh	r2, [r3, #22]
#endif
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7a9b      	ldrb	r3, [r3, #10]
 80033fa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	7b7b      	ldrb	r3, [r7, #13]
 8003408:	fa42 f303 	asr.w	r3, r2, r3
 800340c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800340e:	7b7b      	ldrb	r3, [r7, #13]
 8003410:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003412:	7bba      	ldrb	r2, [r7, #14]
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	4413      	add	r3, r2
 8003418:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800341a:	7bbb      	ldrb	r3, [r7, #14]
 800341c:	2b07      	cmp	r3, #7
 800341e:	d91a      	bls.n	8003456 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003420:	2308      	movs	r3, #8
 8003422:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003424:	7b3a      	ldrb	r2, [r7, #12]
 8003426:	7b7b      	ldrb	r3, [r7, #13]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	7b3b      	ldrb	r3, [r7, #12]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	b25a      	sxtb	r2, r3
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	4313      	orrs	r3, r2
 800344c:	b25b      	sxtb	r3, r3
 800344e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	3b08      	subs	r3, #8
 8003454:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	b2da      	uxtb	r2, r3
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4013      	ands	r3, r2
 800346a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7bba      	ldrb	r2, [r7, #14]
 8003470:	729a      	strb	r2, [r3, #10]
  return val;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffab 	bl	80033ea <u8g2_font_decode_get_unsigned_bits>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003498:	2301      	movs	r3, #1
 800349a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	3b01      	subs	r3, #1
 80034a0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80034a2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	73fb      	strb	r3, [r7, #15]
  return v;
 80034b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80034c4:	b490      	push	{r4, r7}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4604      	mov	r4, r0
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	71fb      	strb	r3, [r7, #7]
 80034d6:	4603      	mov	r3, r0
 80034d8:	71bb      	strb	r3, [r7, #6]
 80034da:	460b      	mov	r3, r1
 80034dc:	717b      	strb	r3, [r7, #5]
 80034de:	4613      	mov	r3, r2
 80034e0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80034e2:	793b      	ldrb	r3, [r7, #4]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d010      	beq.n	800350a <u8g2_add_vector_y+0x46>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	dc13      	bgt.n	8003514 <u8g2_add_vector_y+0x50>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <u8g2_add_vector_y+0x32>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d005      	beq.n	8003500 <u8g2_add_vector_y+0x3c>
 80034f4:	e00e      	b.n	8003514 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80034f6:	797a      	ldrb	r2, [r7, #5]
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4413      	add	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
      break;
 80034fe:	e00e      	b.n	800351e <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8003500:	79ba      	ldrb	r2, [r7, #6]
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	4413      	add	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
      break;
 8003508:	e009      	b.n	800351e <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 800350a:	797b      	ldrb	r3, [r7, #5]
 800350c:	79fa      	ldrb	r2, [r7, #7]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	71fb      	strb	r3, [r7, #7]
      break;
 8003512:	e004      	b.n	800351e <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8003514:	79bb      	ldrb	r3, [r7, #6]
 8003516:	79fa      	ldrb	r2, [r7, #7]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	71fb      	strb	r3, [r7, #7]
      break;      
 800351c:	bf00      	nop
  }
  return dy;
 800351e:	79fb      	ldrb	r3, [r7, #7]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bc90      	pop	{r4, r7}
 8003528:	4770      	bx	lr

0800352a <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800352a:	b490      	push	{r4, r7}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4604      	mov	r4, r0
 8003532:	4608      	mov	r0, r1
 8003534:	4611      	mov	r1, r2
 8003536:	461a      	mov	r2, r3
 8003538:	4623      	mov	r3, r4
 800353a:	71fb      	strb	r3, [r7, #7]
 800353c:	4603      	mov	r3, r0
 800353e:	71bb      	strb	r3, [r7, #6]
 8003540:	460b      	mov	r3, r1
 8003542:	717b      	strb	r3, [r7, #5]
 8003544:	4613      	mov	r3, r2
 8003546:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8003548:	793b      	ldrb	r3, [r7, #4]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d010      	beq.n	8003570 <u8g2_add_vector_x+0x46>
 800354e:	2b02      	cmp	r3, #2
 8003550:	dc13      	bgt.n	800357a <u8g2_add_vector_x+0x50>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <u8g2_add_vector_x+0x32>
 8003556:	2b01      	cmp	r3, #1
 8003558:	d005      	beq.n	8003566 <u8g2_add_vector_x+0x3c>
 800355a:	e00e      	b.n	800357a <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 800355c:	79ba      	ldrb	r2, [r7, #6]
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4413      	add	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
      break;
 8003564:	e00e      	b.n	8003584 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8003566:	797b      	ldrb	r3, [r7, #5]
 8003568:	79fa      	ldrb	r2, [r7, #7]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	71fb      	strb	r3, [r7, #7]
      break;
 800356e:	e009      	b.n	8003584 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8003570:	79bb      	ldrb	r3, [r7, #6]
 8003572:	79fa      	ldrb	r2, [r7, #7]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	71fb      	strb	r3, [r7, #7]
      break;
 8003578:	e004      	b.n	8003584 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 800357a:	797a      	ldrb	r2, [r7, #5]
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	4413      	add	r3, r2
 8003580:	71fb      	strb	r3, [r7, #7]
      break;      
 8003582:	bf00      	nop
  }
  return dx;
 8003584:	79fb      	ldrb	r3, [r7, #7]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bc90      	pop	{r4, r7}
 800358e:	4770      	bx	lr

08003590 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
 800359c:	4613      	mov	r3, r2
 800359e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3350      	adds	r3, #80	; 0x50
 80035a4:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80035b0:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80035b8:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035c0:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	7d7b      	ldrb	r3, [r7, #21]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80035ce:	7dfa      	ldrb	r2, [r7, #23]
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d201      	bcs.n	80035da <u8g2_font_decode_len+0x4a>
      current = cnt;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	795b      	ldrb	r3, [r3, #5]
 80035e4:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80035e6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80035ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	7b9b      	ldrb	r3, [r3, #14]
 80035f2:	7bb8      	ldrb	r0, [r7, #14]
 80035f4:	f7ff ff99 	bl	800352a <u8g2_add_vector_x>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80035fc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003600:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	7b9b      	ldrb	r3, [r3, #14]
 8003608:	7b78      	ldrb	r0, [r7, #13]
 800360a:	f7ff ff5b 	bl	80034c4 <u8g2_add_vector_y>
 800360e:	4603      	mov	r3, r0
 8003610:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003612:	78bb      	ldrb	r3, [r7, #2]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00f      	beq.n	8003638 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	7b1a      	ldrb	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, 
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	7b9b      	ldrb	r3, [r3, #14]
 8003626:	7db8      	ldrb	r0, [r7, #22]
 8003628:	7b7a      	ldrb	r2, [r7, #13]
 800362a:	7bb9      	ldrb	r1, [r7, #14]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4603      	mov	r3, r0
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fc5e 	bl	8003ef2 <u8g2_DrawHVLine>
 8003636:	e012      	b.n	800365e <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	7adb      	ldrb	r3, [r3, #11]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10e      	bne.n	800365e <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	7b5a      	ldrb	r2, [r3, #13]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, 
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	7b9b      	ldrb	r3, [r3, #14]
 800364e:	7db8      	ldrb	r0, [r7, #22]
 8003650:	7b7a      	ldrb	r2, [r7, #13]
 8003652:	7bb9      	ldrb	r1, [r7, #14]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	4603      	mov	r3, r0
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fc4a 	bl	8003ef2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800365e:	7dfa      	ldrb	r2, [r7, #23]
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	429a      	cmp	r2, r3
 8003664:	d309      	bcc.n	800367a <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8003666:	7dfa      	ldrb	r2, [r7, #23]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	757b      	strb	r3, [r7, #21]
    ly++;
 8003672:	7d3b      	ldrb	r3, [r7, #20]
 8003674:	3301      	adds	r3, #1
 8003676:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003678:	e79f      	b.n	80035ba <u8g2_font_decode_len+0x2a>
      break;
 800367a:	bf00      	nop
  }
  lx += cnt;
 800367c:	7d7a      	ldrb	r2, [r7, #21]
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	4413      	add	r3, r2
 8003682:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003684:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 800368c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	71da      	strb	r2, [r3, #7]
  
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3350      	adds	r3, #80	; 0x50
 80036aa:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fe92 	bl	80033ea <u8g2_font_decode_get_unsigned_bits>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b25a      	sxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80036d4:	4619      	mov	r1, r3
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fe87 	bl	80033ea <u8g2_font_decode_get_unsigned_bits>
 80036dc:	4603      	mov	r3, r0
 80036de:	b25a      	sxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	7b1b      	ldrb	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	735a      	strb	r2, [r3, #13]
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3350      	adds	r3, #80	; 0x50
 800371a:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffbc 	bl	800369c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800372a:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003732:	4619      	mov	r1, r3
 8003734:	6938      	ldr	r0, [r7, #16]
 8003736:	f7ff fea2 	bl	800347e <u8g2_font_decode_get_signed_bits>
 800373a:	4603      	mov	r3, r0
 800373c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8003744:	4619      	mov	r1, r3
 8003746:	6938      	ldr	r0, [r7, #16]
 8003748:	f7ff fe99 	bl	800347e <u8g2_font_decode_get_signed_bits>
 800374c:	4603      	mov	r3, r0
 800374e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003756:	4619      	mov	r1, r3
 8003758:	6938      	ldr	r0, [r7, #16]
 800375a:	f7ff fe90 	bl	800347e <u8g2_font_decode_get_signed_bits>
 800375e:	4603      	mov	r3, r0
 8003760:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f340 80cf 	ble.w	800390c <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	7918      	ldrb	r0, [r3, #4]
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	7b7b      	ldrb	r3, [r7, #13]
 8003776:	4413      	add	r3, r2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	425b      	negs	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	b25a      	sxtb	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	7b9b      	ldrb	r3, [r3, #14]
 8003784:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003788:	f7ff fecf 	bl	800352a <u8g2_add_vector_x>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	7958      	ldrb	r0, [r3, #5]
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	7b7b      	ldrb	r3, [r7, #13]
 800379c:	4413      	add	r3, r2
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	425b      	negs	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	b25a      	sxtb	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	7b9b      	ldrb	r3, [r3, #14]
 80037aa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80037ae:	f7ff fe89 	bl	80034c4 <u8g2_add_vector_y>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	791b      	ldrb	r3, [r3, #4]
 80037be:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	795b      	ldrb	r3, [r3, #5]
 80037c4:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80037ca:	7d7b      	ldrb	r3, [r7, #21]
 80037cc:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	7b9b      	ldrb	r3, [r3, #14]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d852      	bhi.n	800387c <u8g2_font_decode_glyph+0x170>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <u8g2_font_decode_glyph+0xd0>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	08003805 	.word	0x08003805
 80037e4:	08003829 	.word	0x08003829
 80037e8:	08003859 	.word	0x08003859
      {
	case 0:
	    x1 += decode->glyph_width;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	7dbb      	ldrb	r3, [r7, #22]
 80037f6:	4413      	add	r3, r2
 80037f8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	7d3b      	ldrb	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	753b      	strb	r3, [r7, #20]
	    break;
 8003802:	e03b      	b.n	800387c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	7dfa      	ldrb	r2, [r7, #23]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	3301      	adds	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003812:	7dbb      	ldrb	r3, [r7, #22]
 8003814:	3301      	adds	r3, #1
 8003816:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	7d3b      	ldrb	r3, [r7, #20]
 8003822:	4413      	add	r3, r2
 8003824:	753b      	strb	r3, [r7, #20]
	    break;
 8003826:	e029      	b.n	800387c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	7dfa      	ldrb	r2, [r7, #23]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	3301      	adds	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800383c:	7dbb      	ldrb	r3, [r7, #22]
 800383e:	3301      	adds	r3, #1
 8003840:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	7d7a      	ldrb	r2, [r7, #21]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800384a:	7d7b      	ldrb	r3, [r7, #21]
 800384c:	3301      	adds	r3, #1
 800384e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003850:	7d3b      	ldrb	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003856:	e011      	b.n	800387c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	7dbb      	ldrb	r3, [r7, #22]
 800385c:	4413      	add	r3, r2
 800385e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	7d7a      	ldrb	r2, [r7, #21]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800386e:	7d7b      	ldrb	r3, [r7, #21]
 8003870:	3301      	adds	r3, #1
 8003872:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003874:	7d3b      	ldrb	r3, [r7, #20]
 8003876:	3301      	adds	r3, #1
 8003878:	753b      	strb	r3, [r7, #20]
	    break;	  
 800387a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800387c:	7db8      	ldrb	r0, [r7, #22]
 800387e:	7d7a      	ldrb	r2, [r7, #21]
 8003880:	7df9      	ldrb	r1, [r7, #23]
 8003882:	7d3b      	ldrb	r3, [r7, #20]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	4603      	mov	r3, r0
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fb84 	bl	8003f96 <u8g2_IsIntersection>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <u8g2_font_decode_glyph+0x18e>
	return d;
 8003894:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003898:	e03a      	b.n	8003910 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2200      	movs	r2, #0
 800389e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2200      	movs	r2, #0
 80038a4:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80038ac:	4619      	mov	r1, r3
 80038ae:	6938      	ldr	r0, [r7, #16]
 80038b0:	f7ff fd9b 	bl	80033ea <u8g2_font_decode_get_unsigned_bits>
 80038b4:	4603      	mov	r3, r0
 80038b6:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80038be:	4619      	mov	r1, r3
 80038c0:	6938      	ldr	r0, [r7, #16]
 80038c2:	f7ff fd92 	bl	80033ea <u8g2_font_decode_get_unsigned_bits>
 80038c6:	4603      	mov	r3, r0
 80038c8:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	2200      	movs	r2, #0
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe5d 	bl	8003590 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80038d6:	7abb      	ldrb	r3, [r7, #10]
 80038d8:	2201      	movs	r2, #1
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff fe57 	bl	8003590 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80038e2:	2101      	movs	r1, #1
 80038e4:	6938      	ldr	r0, [r7, #16]
 80038e6:	f7ff fd80 	bl	80033ea <u8g2_font_decode_get_unsigned_bits>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ec      	bne.n	80038ca <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80038f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	dd00      	ble.n	8003900 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80038fe:	e7d2      	b.n	80038a6 <u8g2_font_decode_glyph+0x19a>
	break;
 8003900:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	7b1a      	ldrb	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  return d;
 800390c:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3317      	adds	r3, #23
 800392e:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	2bff      	cmp	r3, #255	; 0xff
 8003934:	d82a      	bhi.n	800398c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d907      	bls.n	800394c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e009      	b.n	8003960 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d906      	bls.n	8003960 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d036      	beq.n	80039d8 <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	887a      	ldrh	r2, [r7, #2]
 8003972:	429a      	cmp	r2, r3
 8003974:	d102      	bne.n	800397c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3302      	adds	r3, #2
 800397a:	e031      	b.n	80039e0 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3301      	adds	r3, #1
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800398a:	e7e9      	b.n	8003960 <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 80039a0:	897b      	ldrh	r3, [r7, #10]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 80039b4:	897b      	ldrh	r3, [r7, #10]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 80039ba:	897a      	ldrh	r2, [r7, #10]
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d102      	bne.n	80039c8 <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3303      	adds	r3, #3
 80039c6:	e00b      	b.n	80039e0 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3302      	adds	r3, #2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 80039d6:	e7e0      	b.n	800399a <u8g2_font_get_glyph_data+0x82>
	break;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <u8g2_font_get_glyph_data+0xc6>
	break;
 80039dc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	4608      	mov	r0, r1
 80039f4:	4611      	mov	r1, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	70fb      	strb	r3, [r7, #3]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70bb      	strb	r3, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  u8g2->font_decode.target_y = y;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	78ba      	ldrb	r2, [r7, #2]
 8003a14:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003a18:	883b      	ldrh	r3, [r7, #0]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ff7b 	bl	8003918 <u8g2_font_get_glyph_data>
 8003a22:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe6d 	bl	800370c <u8g2_font_decode_glyph>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	70fb      	strb	r3, [r7, #3]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70bb      	strb	r3, [r7, #2]
 8003a56:	4613      	mov	r3, r2
 8003a58:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d833      	bhi.n	8003acc <u8g2_DrawGlyph+0x8c>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <u8g2_DrawGlyph+0x2c>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a91 	.word	0x08003a91
 8003a74:	08003aa5 	.word	0x08003aa5
 8003a78:	08003ab9 	.word	0x08003ab9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	70bb      	strb	r3, [r7, #2]
      break;
 8003a8e:	e01d      	b.n	8003acc <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	70fb      	strb	r3, [r7, #3]
      break;
 8003aa2:	e013      	b.n	8003acc <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	78bb      	ldrb	r3, [r7, #2]
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	70bb      	strb	r3, [r7, #2]
      break;
 8003ab6:	e009      	b.n	8003acc <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	70fb      	strb	r3, [r7, #3]
      break;
 8003aca:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003acc:	883b      	ldrh	r3, [r7, #0]
 8003ace:	78ba      	ldrb	r2, [r7, #2]
 8003ad0:	78f9      	ldrb	r1, [r7, #3]
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff89 	bl	80039ea <u8g2_font_draw_glyph>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop

08003ae4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	72fb      	strb	r3, [r7, #11]
 8003af2:	4613      	mov	r3, r2
 8003af4:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fbec 	bl	80042d4 <u8x8_utf8_init>
  sum = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	4611      	mov	r1, r2
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	4798      	blx	r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003b12:	8abb      	ldrh	r3, [r7, #20]
 8003b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d038      	beq.n	8003b8e <u8g2_draw_string+0xaa>
      break;
    str++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003b22:	8abb      	ldrh	r3, [r7, #20]
 8003b24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d0e9      	beq.n	8003b00 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003b2c:	8abb      	ldrh	r3, [r7, #20]
 8003b2e:	7aba      	ldrb	r2, [r7, #10]
 8003b30:	7af9      	ldrb	r1, [r7, #11]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff ff84 	bl	8003a40 <u8g2_DrawGlyph>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d81e      	bhi.n	8003b84 <u8g2_draw_string+0xa0>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <u8g2_draw_string+0x68>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b67 	.word	0x08003b67
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	08003b7b 	.word	0x08003b7b
      {
	case 0:
	  x += delta;
 8003b5c:	7afa      	ldrb	r2, [r7, #11]
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	4413      	add	r3, r2
 8003b62:	72fb      	strb	r3, [r7, #11]
	  break;
 8003b64:	e00e      	b.n	8003b84 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8003b66:	7aba      	ldrb	r2, [r7, #10]
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	72bb      	strb	r3, [r7, #10]
	  break;
 8003b6e:	e009      	b.n	8003b84 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003b70:	7afa      	ldrb	r2, [r7, #11]
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	72fb      	strb	r3, [r7, #11]
	  break;
 8003b78:	e004      	b.n	8003b84 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003b7a:	7aba      	ldrb	r2, [r7, #10]
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	72bb      	strb	r3, [r7, #10]
	  break;
 8003b82:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8003b84:	7dfa      	ldrb	r2, [r7, #23]
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	4413      	add	r3, r2
 8003b8a:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003b8c:	e7b8      	b.n	8003b00 <u8g2_draw_string+0x1c>
      break;
 8003b8e:	bf00      	nop
    }
  }
  return sum;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop

08003b9c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	72fb      	strb	r3, [r7, #11]
 8003baa:	4613      	mov	r3, r2
 8003bac:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a06      	ldr	r2, [pc, #24]	; (8003bcc <u8g2_DrawStr+0x30>)
 8003bb2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003bb4:	7aba      	ldrb	r2, [r7, #10]
 8003bb6:	7af9      	ldrb	r1, [r7, #11]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff ff92 	bl	8003ae4 <u8g2_draw_string>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	080042ef 	.word	0x080042ef

08003bd0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05d      	beq.n	8003c9c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f993 206d 	ldrsb.w	r2, [r3, #109]	; 0x6d
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f993 206e 	ldrsb.w	r2, [r3, #110]	; 0x6e
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04d      	beq.n	8003c9e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d11c      	bne.n	8003c46 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f993 2079 	ldrsb.w	r2, [r3, #121]	; 0x79
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f993 306f 	ldrsb.w	r3, [r3, #111]	; 0x6f
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	da05      	bge.n	8003c28 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f993 206f 	ldrsb.w	r2, [r3, #111]	; 0x6f
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f993 207a 	ldrsb.w	r2, [r3, #122]	; 0x7a
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8003c34:	429a      	cmp	r2, r3
 8003c36:	dd32      	ble.n	8003c9e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8003c44:	e02b      	b.n	8003c9e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f993 3079 	ldrsb.w	r3, [r3, #121]	; 0x79
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003c54:	4619      	mov	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8003c5c:	440b      	add	r3, r1
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	da0d      	bge.n	8003c7e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f993 207a 	ldrsb.w	r2, [r3, #122]	; 0x7a
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	dd07      	ble.n	8003c9e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f993 206c 	ldrsb.w	r2, [r3, #108]	; 0x6c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8003c9a:	e000      	b.n	8003c9e <u8g2_UpdateRefHeight+0xce>
    return;
 8003c9c:	bf00      	nop
  }  
}
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  return 0;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
	...

08003cbc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <u8g2_SetFontPosBaseline+0x18>)
 8003cc8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	08003ca7 	.word	0x08003ca7

08003cd8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d00b      	beq.n	8003d04 <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	649a      	str	r2, [r3, #72]	; 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3360      	adds	r3, #96	; 0x60
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff facd 	bl	8003298 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ff66 	bl	8003bd0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003d26:	7dfa      	ldrb	r2, [r7, #23]
 8003d28:	7dbb      	ldrb	r3, [r7, #22]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d911      	bls.n	8003d52 <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003d2e:	7dfa      	ldrb	r2, [r7, #23]
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d208      	bcs.n	8003d48 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	75bb      	strb	r3, [r7, #22]
      b--;
 8003d3a:	7dbb      	ldrb	r3, [r7, #22]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	7dba      	ldrb	r2, [r7, #22]
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e004      	b.n	8003d52 <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	7dfa      	ldrb	r2, [r7, #23]
 8003d50:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003d52:	7dfa      	ldrb	r2, [r7, #23]
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d301      	bcc.n	8003d5e <u8g2_clip_intersection+0x52>
    return 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e00c      	b.n	8003d78 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 8003d5e:	7dbb      	ldrb	r3, [r7, #22]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <u8g2_clip_intersection+0x5c>
    return 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e007      	b.n	8003d78 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 8003d68:	7dba      	ldrb	r2, [r7, #22]
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d902      	bls.n	8003d76 <u8g2_clip_intersection+0x6a>
    *bp = d;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	79fa      	ldrb	r2, [r7, #7]
 8003d74:	701a      	strb	r2, [r3, #0]
    
  return 1;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003d82:	b5b0      	push	{r4, r5, r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	70fb      	strb	r3, [r7, #3]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70bb      	strb	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 403b 	ldrb.w	r4, [r3, #59]	; 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a


  if ( dir == 0 )
 8003da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11a      	bne.n	8003de6 <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 8003db0:	78bb      	ldrb	r3, [r7, #2]
 8003db2:	429c      	cmp	r4, r3
 8003db4:	d93d      	bls.n	8003e32 <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	73fb      	strb	r3, [r7, #15]
    a += len;
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 8003dc4:	f107 010f 	add.w	r1, r7, #15
 8003dc8:	1cfb      	adds	r3, r7, #3
 8003dca:	462a      	mov	r2, r5
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff9d 	bl	8003d0c <u8g2_clip_intersection>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d02e      	beq.n	8003e36 <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	707b      	strb	r3, [r7, #1]
    len -= x;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	787a      	ldrb	r2, [r7, #1]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	707b      	strb	r3, [r7, #1]
 8003de4:	e019      	b.n	8003e1a <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	429d      	cmp	r5, r3
 8003dea:	d926      	bls.n	8003e3a <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 8003dec:	78bb      	ldrb	r3, [r7, #2]
 8003dee:	73fb      	strb	r3, [r7, #15]
    a += len;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	787b      	ldrb	r3, [r7, #1]
 8003df4:	4413      	add	r3, r2
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 8003dfa:	f107 010f 	add.w	r1, r7, #15
 8003dfe:	1cbb      	adds	r3, r7, #2
 8003e00:	4622      	mov	r2, r4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff82 	bl	8003d0c <u8g2_clip_intersection>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	707b      	strb	r3, [r7, #1]
    len -= y;
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	787a      	ldrb	r2, [r7, #1]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003e1e:	78f9      	ldrb	r1, [r7, #3]
 8003e20:	78ba      	ldrb	r2, [r7, #2]
 8003e22:	7878      	ldrb	r0, [r7, #1]
 8003e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	47a0      	blx	r4
 8003e30:	e006      	b.n	8003e40 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8003e32:	bf00      	nop
 8003e34:	e004      	b.n	8003e40 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8003e3e:	bf00      	nop
}
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bdb0      	pop	{r4, r5, r7, pc}

08003e46 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003e46:	b590      	push	{r4, r7, lr}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	4608      	mov	r0, r1
 8003e50:	4611      	mov	r1, r2
 8003e52:	461a      	mov	r2, r3
 8003e54:	4603      	mov	r3, r0
 8003e56:	70fb      	strb	r3, [r7, #3]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70bb      	strb	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	78ba      	ldrb	r2, [r7, #2]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 8003e70:	787b      	ldrb	r3, [r7, #1]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d116      	bne.n	8003ea4 <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d233      	bcs.n	8003eea <u8g2_draw_hv_line_4dir+0xa4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003e88:	78ba      	ldrb	r2, [r7, #2]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d22d      	bcs.n	8003eea <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003e92:	7878      	ldrb	r0, [r7, #1]
 8003e94:	78ba      	ldrb	r2, [r7, #2]
 8003e96:	78f9      	ldrb	r1, [r7, #3]
 8003e98:	7e3b      	ldrb	r3, [r7, #24]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	47a0      	blx	r4
    return;
 8003ea2:	e022      	b.n	8003eea <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 8003ea4:	7e3b      	ldrb	r3, [r7, #24]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d107      	bne.n	8003eba <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	70fb      	strb	r3, [r7, #3]
    x++;
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	70fb      	strb	r3, [r7, #3]
 8003eb8:	e009      	b.n	8003ece <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 8003eba:	7e3b      	ldrb	r3, [r7, #24]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d106      	bne.n	8003ece <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 8003ec0:	78ba      	ldrb	r2, [r7, #2]
 8003ec2:	787b      	ldrb	r3, [r7, #1]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	70bb      	strb	r3, [r7, #2]
    y++;
 8003ec8:	78bb      	ldrb	r3, [r7, #2]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 8003ece:	7e3b      	ldrb	r3, [r7, #24]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003ed6:	7878      	ldrb	r0, [r7, #1]
 8003ed8:	78ba      	ldrb	r2, [r7, #2]
 8003eda:	78f9      	ldrb	r1, [r7, #3]
 8003edc:	7e3b      	ldrb	r3, [r7, #24]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ff4d 	bl	8003d82 <u8g2_draw_hv_line_2dir>
 8003ee8:	e000      	b.n	8003eec <u8g2_draw_hv_line_4dir+0xa6>
    return;
 8003eea:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}

08003ef2 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003ef2:	b590      	push	{r4, r7, lr}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af02      	add	r7, sp, #8
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	461a      	mov	r2, r3
 8003f00:	4603      	mov	r3, r0
 8003f02:	70fb      	strb	r3, [r7, #3]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70bb      	strb	r3, [r7, #2]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8003f0c:	787b      	ldrb	r3, [r7, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	685c      	ldr	r4, [r3, #4]
 8003f18:	7878      	ldrb	r0, [r7, #1]
 8003f1a:	78ba      	ldrb	r2, [r7, #2]
 8003f1c:	78f9      	ldrb	r1, [r7, #3]
 8003f1e:	7e3b      	ldrb	r3, [r7, #24]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4603      	mov	r3, r0
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	47a0      	blx	r4
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003f30:	b490      	push	{r4, r7}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4623      	mov	r3, r4
 8003f40:	71fb      	strb	r3, [r7, #7]
 8003f42:	4603      	mov	r3, r0
 8003f44:	71bb      	strb	r3, [r7, #6]
 8003f46:	460b      	mov	r3, r1
 8003f48:	717b      	strb	r3, [r7, #5]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8003f4e:	797a      	ldrb	r2, [r7, #5]
 8003f50:	79bb      	ldrb	r3, [r7, #6]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d20d      	bcs.n	8003f72 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003f56:	793a      	ldrb	r2, [r7, #4]
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d901      	bls.n	8003f62 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e014      	b.n	8003f8c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003f62:	797a      	ldrb	r2, [r7, #5]
 8003f64:	793b      	ldrb	r3, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d901      	bls.n	8003f6e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e00e      	b.n	8003f8c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e00c      	b.n	8003f8c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003f72:	793a      	ldrb	r2, [r7, #4]
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d907      	bls.n	8003f8a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003f7a:	797a      	ldrb	r2, [r7, #5]
 8003f7c:	793b      	ldrb	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d901      	bls.n	8003f86 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e002      	b.n	8003f8c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003f8a:	2300      	movs	r3, #0
    }
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc90      	pop	{r4, r7}
 8003f94:	4770      	bx	lr

08003f96 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	70fb      	strb	r3, [r7, #3]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70bb      	strb	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8003fbc:	7c3b      	ldrb	r3, [r7, #16]
 8003fbe:	78ba      	ldrb	r2, [r7, #2]
 8003fc0:	f7ff ffb6 	bl	8003f30 <u8g2_is_intersection_decision_tree>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <u8g2_IsIntersection+0x38>
    return 0; 
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e00a      	b.n	8003fe4 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8003fda:	787b      	ldrb	r3, [r7, #1]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	f7ff ffa7 	bl	8003f30 <u8g2_is_intersection_decision_tree>
 8003fe2:	4603      	mov	r3, r0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <u8g2_ll_hvline_horizontal_right_lsb>:
  asumption: 
    all clipping done
*/

void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	70fb      	strb	r3, [r7, #3]
 8003ffe:	460b      	mov	r3, r1
 8004000:	70bb      	strb	r3, [r7, #2]
 8004002:	4613      	mov	r3, r2
 8004004:	707b      	strb	r3, [r7, #1]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	7c1b      	ldrb	r3, [r3, #16]
 800400c:	74bb      	strb	r3, [r7, #18]

  bit_pos = x;		/* overflow truncate is ok here... */
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	747b      	strb	r3, [r7, #17]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004012:	7c7b      	ldrb	r3, [r7, #17]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	747b      	strb	r3, [r7, #17]
  mask = 128;
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	74fb      	strb	r3, [r7, #19]
  mask >>= bit_pos;
 800401e:	7cfa      	ldrb	r2, [r7, #19]
 8004020:	7c7b      	ldrb	r3, [r7, #17]
 8004022:	fa42 f303 	asr.w	r3, r2, r3
 8004026:	74fb      	strb	r3, [r7, #19]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004028:	78bb      	ldrb	r3, [r7, #2]
 800402a:	81fb      	strh	r3, [r7, #14]
  offset *= tile_width;
 800402c:	7cbb      	ldrb	r3, [r7, #18]
 800402e:	b29b      	uxth	r3, r3
 8004030:	89fa      	ldrh	r2, [r7, #14]
 8004032:	fb12 f303 	smulbb	r3, r2, r3
 8004036:	81fb      	strh	r3, [r7, #14]
  offset += x>>3;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	08db      	lsrs	r3, r3, #3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	b29a      	uxth	r2, r3
 8004040:	89fb      	ldrh	r3, [r7, #14]
 8004042:	4413      	add	r3, r2
 8004044:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4413      	add	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8004054:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d129      	bne.n	80040b0 <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004062:	2b01      	cmp	r3, #1
 8004064:	d806      	bhi.n	8004074 <u8g2_ll_hvline_horizontal_right_lsb+0x88>
	*ptr |= mask;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	4313      	orrs	r3, r2
 800406e:	b2da      	uxtb	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800407a:	2b01      	cmp	r3, #1
 800407c:	d006      	beq.n	800408c <u8g2_ll_hvline_horizontal_right_lsb+0xa0>
	*ptr ^= mask;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	4053      	eors	r3, r2
 8004086:	b2da      	uxtb	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	74fb      	strb	r3, [r7, #19]
      if ( mask == 0 )
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d104      	bne.n	80040a2 <u8g2_ll_hvline_horizontal_right_lsb+0xb6>
      {
	mask = 128;
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	74fb      	strb	r3, [r7, #19]
        ptr++;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3301      	adds	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
      }
      
      //x++;
      len--;
 80040a2:	787b      	ldrb	r3, [r7, #1]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80040a8:	787b      	ldrb	r3, [r7, #1]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1d6      	bne.n	800405c <u8g2_ll_hvline_horizontal_right_lsb+0x70>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 80040ae:	e021      	b.n	80040f4 <u8g2_ll_hvline_horizontal_right_lsb+0x108>
      if ( u8g2->draw_color <= 1 )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d806      	bhi.n	80040c8 <u8g2_ll_hvline_horizontal_right_lsb+0xdc>
	*ptr |= mask;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d006      	beq.n	80040e0 <u8g2_ll_hvline_horizontal_right_lsb+0xf4>
	*ptr ^= mask;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	4053      	eors	r3, r2
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 80040e0:	7cbb      	ldrb	r3, [r7, #18]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4413      	add	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
      len--;
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80040ee:	787b      	ldrb	r3, [r7, #1]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1dd      	bne.n	80040b0 <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	649a      	str	r2, [r3, #72]	; 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	79fa      	ldrb	r2, [r7, #7]
 8004124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  u8g2->bitmap_transparency = 0;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  u8g2->draw_color = 1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  u8g2->is_auto_page_clear = 1;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  
  u8g2->cb = u8g2_cb;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update(u8g2);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff fdab 	bl	8003cbc <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
#endif
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004184:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	7c1b      	ldrb	r3, [r3, #16]
 800419a:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b1f      	cmp	r3, #31
 80041a0:	d901      	bls.n	80041a6 <u8g2_update_dimension_common+0x30>
    t = 31;
 80041a2:	231f      	movs	r3, #31
 80041a4:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ba:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041d0:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80041da:	4413      	add	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	7c52      	ldrb	r2, [r2, #17]
 80041e2:	4293      	cmp	r3, r2
 80041e4:	dd07      	ble.n	80041f6 <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	7c5a      	ldrb	r2, [r3, #17]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	4413      	add	r3, r2
 800421e:	b2da      	uxtb	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	22f0      	movs	r2, #240	; 0xf0
 800422a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	8a9b      	ldrh	r3, [r3, #20]
 8004234:	2bf0      	cmp	r3, #240	; 0xf0
 8004236:	d806      	bhi.n	8004246 <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	8a9b      	ldrh	r3, [r3, #20]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	8adb      	ldrh	r3, [r3, #22]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff ff85 	bl	8004176 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	70fb      	strb	r3, [r7, #3]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70bb      	strb	r3, [r7, #2]
 80042b6:	4613      	mov	r3, r2
 80042b8:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 80042ba:	7878      	ldrb	r0, [r7, #1]
 80042bc:	78ba      	ldrb	r2, [r7, #2]
 80042be:	78f9      	ldrb	r1, [r7, #3]
 80042c0:	7c3b      	ldrb	r3, [r7, #16]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fdbd 	bl	8003e46 <u8g2_draw_hv_line_4dir>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	460b      	mov	r3, r1
 80042f8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <u8x8_ascii_next+0x18>
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2b0a      	cmp	r3, #10
 8004304:	d102      	bne.n	800430c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800430a:	e001      	b.n	8004310 <u8x8_ascii_next+0x22>
  return b;
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	b29b      	uxth	r3, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800431a:	b590      	push	{r4, r7, lr}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	460b      	mov	r3, r1
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691c      	ldr	r4, [r3, #16]
 800432c:	7afa      	ldrb	r2, [r7, #11]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2117      	movs	r1, #23
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	47a0      	blx	r4
 8004336:	4603      	mov	r3, r0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bd90      	pop	{r4, r7, pc}

08004340 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800434c:	1cfb      	adds	r3, r7, #3
 800434e:	461a      	mov	r2, r3
 8004350:	2101      	movs	r1, #1
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ffe1 	bl	800431a <u8x8_byte_SendBytes>
 8004358:	4603      	mov	r3, r0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	72fb      	strb	r3, [r7, #11]
 8004372:	4613      	mov	r3, r2
 8004374:	72bb      	strb	r3, [r7, #10]
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	7b1b      	ldrb	r3, [r3, #12]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
  uint8_t not_takeover_edge = 1 - takeover_edge;
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	f1c3 0301 	rsb	r3, r3, #1
 8004388:	75bb      	strb	r3, [r7, #22]
 
  switch(msg)
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	3b14      	subs	r3, #20
 800438e:	2b0c      	cmp	r3, #12
 8004390:	f200 80a4 	bhi.w	80044dc <u8x8_byte_4wire_sw_spi+0x178>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <u8x8_byte_4wire_sw_spi+0x38>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	0800445f 	.word	0x0800445f
 80043a0:	080044dd 	.word	0x080044dd
 80043a4:	080044dd 	.word	0x080044dd
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	08004495 	.word	0x08004495
 80043b0:	080044b9 	.word	0x080044b9
 80043b4:	080044dd 	.word	0x080044dd
 80043b8:	080044dd 	.word	0x080044dd
 80043bc:	080044dd 	.word	0x080044dd
 80043c0:	080044dd 	.word	0x080044dd
 80043c4:	080044dd 	.word	0x080044dd
 80043c8:	080044dd 	.word	0x080044dd
 80043cc:	08004487 	.word	0x08004487
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	61bb      	str	r3, [r7, #24]
      while( arg_int > 0 )
 80043d4:	e03f      	b.n	8004456 <u8x8_byte_4wire_sw_spi+0xf2>
      {
	b = *data;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	77bb      	strb	r3, [r7, #30]
	data++;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	3301      	adds	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
	arg_int--;
 80043e2:	7abb      	ldrb	r3, [r7, #10]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	72bb      	strb	r3, [r7, #10]
	for( i = 0; i < 8; i++ )
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e030      	b.n	8004450 <u8x8_byte_4wire_sw_spi+0xec>
	{
	  if ( b & 128 )
 80043ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da05      	bge.n	8004402 <u8x8_byte_4wire_sw_spi+0x9e>
	    u8x8_gpio_SetSPIData(u8x8, 1);
 80043f6:	2201      	movs	r2, #1
 80043f8:	2141      	movs	r1, #65	; 0x41
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fb23 	bl	8004a46 <u8x8_gpio_call>
 8004400:	e004      	b.n	800440c <u8x8_byte_4wire_sw_spi+0xa8>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2141      	movs	r1, #65	; 0x41
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fb1d 	bl	8004a46 <u8x8_gpio_call>
	  b <<= 1;
 800440c:	7fbb      	ldrb	r3, [r7, #30]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	77bb      	strb	r3, [r7, #30]
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8004412:	7dbb      	ldrb	r3, [r7, #22]
 8004414:	461a      	mov	r2, r3
 8004416:	2140      	movs	r1, #64	; 0x40
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fb14 	bl	8004a46 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	799b      	ldrb	r3, [r3, #6]
 8004424:	461a      	mov	r2, r3
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fb0c 	bl	8004a46 <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	461a      	mov	r2, r3
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fb06 	bl	8004a46 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	79db      	ldrb	r3, [r3, #7]
 8004440:	461a      	mov	r2, r3
 8004442:	212c      	movs	r1, #44	; 0x2c
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fafe 	bl	8004a46 <u8x8_gpio_call>
	for( i = 0; i < 8; i++ )
 800444a:	7ffb      	ldrb	r3, [r7, #31]
 800444c:	3301      	adds	r3, #1
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	7ffb      	ldrb	r3, [r7, #31]
 8004452:	2b07      	cmp	r3, #7
 8004454:	d9cb      	bls.n	80043ee <u8x8_byte_4wire_sw_spi+0x8a>
      while( arg_int > 0 )
 8004456:	7abb      	ldrb	r3, [r7, #10]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1bc      	bne.n	80043d6 <u8x8_byte_4wire_sw_spi+0x72>
	}    
      }
      break;
 800445c:	e040      	b.n	80044e0 <u8x8_byte_4wire_sw_spi+0x17c>
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	461a      	mov	r2, r3
 8004466:	2149      	movs	r1, #73	; 0x49
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 faec 	bl	8004a46 <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	7b1b      	ldrb	r3, [r3, #12]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	2140      	movs	r1, #64	; 0x40
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fae1 	bl	8004a46 <u8x8_gpio_call>
      break;
 8004484:	e02c      	b.n	80044e0 <u8x8_byte_4wire_sw_spi+0x17c>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8004486:	7abb      	ldrb	r3, [r7, #10]
 8004488:	461a      	mov	r2, r3
 800448a:	214a      	movs	r1, #74	; 0x4a
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fada 	bl	8004a46 <u8x8_gpio_call>
      break;
 8004492:	e025      	b.n	80044e0 <u8x8_byte_4wire_sw_spi+0x17c>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	2149      	movs	r1, #73	; 0x49
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fad1 	bl	8004a46 <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	695c      	ldr	r4, [r3, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	789a      	ldrb	r2, [r3, #2]
 80044ae:	2300      	movs	r3, #0
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	47a0      	blx	r4
      break;
 80044b6:	e013      	b.n	80044e0 <u8x8_byte_4wire_sw_spi+0x17c>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	695c      	ldr	r4, [r3, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	78da      	ldrb	r2, [r3, #3]
 80044c2:	2300      	movs	r3, #0
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	461a      	mov	r2, r3
 80044d2:	2149      	movs	r1, #73	; 0x49
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fab6 	bl	8004a46 <u8x8_gpio_call>
      break;
 80044da:	e001      	b.n	80044e0 <u8x8_byte_4wire_sw_spi+0x17c>
    default:
      return 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <u8x8_byte_4wire_sw_spi+0x17e>
  }
  return 1;
 80044e0:	2301      	movs	r3, #1
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	bf00      	nop

080044ec <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68dc      	ldr	r4, [r3, #12]
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	2300      	movs	r3, #0
 8004500:	2115      	movs	r1, #21
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	47a0      	blx	r4
 8004506:	4603      	mov	r3, r0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}

08004510 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	460b      	mov	r3, r1
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68dc      	ldr	r4, [r3, #12]
 8004522:	7afa      	ldrb	r2, [r7, #11]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2117      	movs	r1, #23
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	47a0      	blx	r4
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}

08004536 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004536:	b590      	push	{r4, r7, lr}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68dc      	ldr	r4, [r3, #12]
 8004542:	2300      	movs	r3, #0
 8004544:	2200      	movs	r2, #0
 8004546:	2118      	movs	r1, #24
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	47a0      	blx	r4
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bd90      	pop	{r4, r7, pc}

08004556 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004556:	b590      	push	{r4, r7, lr}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68dc      	ldr	r4, [r3, #12]
 8004562:	2300      	movs	r3, #0
 8004564:	2200      	movs	r2, #0
 8004566:	2119      	movs	r1, #25
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	47a0      	blx	r4
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bd90      	pop	{r4, r7, pc}

08004576 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004576:	b590      	push	{r4, r7, lr}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	73fb      	strb	r3, [r7, #15]
    data++;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2bfe      	cmp	r3, #254	; 0xfe
 8004590:	d031      	beq.n	80045f6 <u8x8_cad_SendSequence+0x80>
 8004592:	2bfe      	cmp	r3, #254	; 0xfe
 8004594:	dc3d      	bgt.n	8004612 <u8x8_cad_SendSequence+0x9c>
 8004596:	2b19      	cmp	r3, #25
 8004598:	dc3b      	bgt.n	8004612 <u8x8_cad_SendSequence+0x9c>
 800459a:	2b18      	cmp	r3, #24
 800459c:	da23      	bge.n	80045e6 <u8x8_cad_SendSequence+0x70>
 800459e:	2b16      	cmp	r3, #22
 80045a0:	dc02      	bgt.n	80045a8 <u8x8_cad_SendSequence+0x32>
 80045a2:	2b15      	cmp	r3, #21
 80045a4:	da03      	bge.n	80045ae <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80045a6:	e034      	b.n	8004612 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80045a8:	2b17      	cmp	r3, #23
 80045aa:	d00e      	beq.n	80045ca <u8x8_cad_SendSequence+0x54>
	return;
 80045ac:	e031      	b.n	8004612 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68dc      	ldr	r4, [r3, #12]
 80045b8:	7bba      	ldrb	r2, [r7, #14]
 80045ba:	7bf9      	ldrb	r1, [r7, #15]
 80045bc:	2300      	movs	r3, #0
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	47a0      	blx	r4
	  data++;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	603b      	str	r3, [r7, #0]
	  break;
 80045c8:	e022      	b.n	8004610 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80045d0:	f107 030e 	add.w	r3, r7, #14
 80045d4:	461a      	mov	r2, r3
 80045d6:	2101      	movs	r1, #1
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff99 	bl	8004510 <u8x8_cad_SendData>
	  data++;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	603b      	str	r3, [r7, #0]
	  break;
 80045e4:	e014      	b.n	8004610 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68dc      	ldr	r4, [r3, #12]
 80045ea:	7bf9      	ldrb	r1, [r7, #15]
 80045ec:	2300      	movs	r3, #0
 80045ee:	2200      	movs	r2, #0
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	47a0      	blx	r4
	  break;
 80045f4:	e00c      	b.n	8004610 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	461a      	mov	r2, r3
 8004600:	2129      	movs	r1, #41	; 0x29
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa1f 	bl	8004a46 <u8x8_gpio_call>
	  data++;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	603b      	str	r3, [r7, #0]
	  break;
 800460e:	bf00      	nop
    cmd = *data;
 8004610:	e7b6      	b.n	8004580 <u8x8_cad_SendSequence+0xa>
	return;
 8004612:	bf00      	nop
    }
  }
}
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bd90      	pop	{r4, r7, pc}
	...

0800461c <u8x8_cad_st7920_spi>:
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	72fb      	strb	r3, [r7, #11]
 800462a:	4613      	mov	r3, r2
 800462c:	72bb      	strb	r3, [r7, #10]
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 800462e:	7afb      	ldrb	r3, [r7, #11]
 8004630:	3b14      	subs	r3, #20
 8004632:	2b05      	cmp	r3, #5
 8004634:	f200 80a8 	bhi.w	8004788 <u8x8_cad_st7920_spi+0x16c>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <u8x8_cad_st7920_spi+0x24>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004777 	.word	0x08004777
 8004644:	08004659 	.word	0x08004659
 8004648:	0800469f 	.word	0x0800469f
 800464c:	080046c7 	.word	0x080046c7
 8004650:	08004777 	.word	0x08004777
 8004654:	08004777 	.word	0x08004777
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8004658:	21f8      	movs	r1, #248	; 0xf8
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fe70 	bl	8004340 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8004660:	2201      	movs	r2, #1
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f9ee 	bl	8004a46 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 800466a:	7abb      	ldrb	r3, [r7, #10]
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff fe63 	bl	8004340 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 800467a:	2201      	movs	r2, #1
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f9e1 	bl	8004a46 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8004684:	7abb      	ldrb	r3, [r7, #10]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	b2db      	uxtb	r3, r3
 800468a:	4619      	mov	r1, r3
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fe57 	bl	8004340 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8004692:	2201      	movs	r2, #1
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f9d5 	bl	8004a46 <u8x8_gpio_call>
      break;
 800469c:	e076      	b.n	800478c <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 800469e:	21f8      	movs	r1, #248	; 0xf8
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff fe4d 	bl	8004340 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 80046a6:	7abb      	ldrb	r3, [r7, #10]
 80046a8:	f023 030f 	bic.w	r3, r3, #15
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4619      	mov	r1, r3
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff fe45 	bl	8004340 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 80046b6:	7abb      	ldrb	r3, [r7, #10]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fe3e 	bl	8004340 <u8x8_byte_SendByte>
      break;
 80046c4:	e062      	b.n	800478c <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_DATA:
    
      u8x8_byte_SendByte(u8x8, 0x0fa);
 80046c6:	21fa      	movs	r1, #250	; 0xfa
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fe39 	bl	8004340 <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 80046ce:	2201      	movs	r2, #1
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f9b7 	bl	8004a46 <u8x8_gpio_call>

      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	61fb      	str	r3, [r7, #28]
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 80046dc:	e026      	b.n	800472c <u8x8_cad_st7920_spi+0x110>
      {
	i = 8;
 80046de:	2308      	movs	r3, #8
 80046e0:	76fb      	strb	r3, [r7, #27]
	ptr = buf;
 80046e2:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <u8x8_cad_st7920_spi+0x17c>)
 80046e4:	617b      	str	r3, [r7, #20]
	do
	{
	  b = *data++;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	61fa      	str	r2, [r7, #28]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b & 0x0f0;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	617a      	str	r2, [r7, #20]
 80046f6:	7cfa      	ldrb	r2, [r7, #19]
 80046f8:	f022 020f 	bic.w	r2, r2, #15
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
	  b <<= 4;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	617a      	str	r2, [r7, #20]
 800470c:	7cfa      	ldrb	r2, [r7, #19]
 800470e:	701a      	strb	r2, [r3, #0]
	  i--;
 8004710:	7efb      	ldrb	r3, [r7, #27]
 8004712:	3b01      	subs	r3, #1
 8004714:	76fb      	strb	r3, [r7, #27]
	} while( i > 0 );
 8004716:	7efb      	ldrb	r3, [r7, #27]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e4      	bne.n	80046e6 <u8x8_cad_st7920_spi+0xca>
	arg_int -= 8;
 800471c:	7abb      	ldrb	r3, [r7, #10]
 800471e:	3b08      	subs	r3, #8
 8004720:	72bb      	strb	r3, [r7, #10]
	u8x8_byte_SendBytes(u8x8, 16, buf); 
 8004722:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <u8x8_cad_st7920_spi+0x17c>)
 8004724:	2110      	movs	r1, #16
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff fdf7 	bl	800431a <u8x8_byte_SendBytes>
      while( arg_int >= 8 )
 800472c:	7abb      	ldrb	r3, [r7, #10]
 800472e:	2b07      	cmp	r3, #7
 8004730:	d8d5      	bhi.n	80046de <u8x8_cad_st7920_spi+0xc2>
      }
      
    
      while( arg_int > 0 )
 8004732:	e017      	b.n	8004764 <u8x8_cad_st7920_spi+0x148>
      {
	b = *data;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	74fb      	strb	r3, [r7, #19]
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	f023 030f 	bic.w	r3, r3, #15
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff fdfb 	bl	8004340 <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b << 4);
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	b2db      	uxtb	r3, r3
 8004750:	4619      	mov	r1, r3
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fdf4 	bl	8004340 <u8x8_byte_SendByte>
	data++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
	arg_int--;
 800475e:	7abb      	ldrb	r3, [r7, #10]
 8004760:	3b01      	subs	r3, #1
 8004762:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8004764:	7abb      	ldrb	r3, [r7, #10]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e4      	bne.n	8004734 <u8x8_cad_st7920_spi+0x118>
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 800476a:	2201      	movs	r2, #1
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f969 	bl	8004a46 <u8x8_gpio_call>
      break;
 8004774:	e00a      	b.n	800478c <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691c      	ldr	r4, [r3, #16]
 800477a:	7aba      	ldrb	r2, [r7, #10]
 800477c:	7af9      	ldrb	r1, [r7, #11]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	47a0      	blx	r4
 8004784:	4603      	mov	r3, r0
 8004786:	e002      	b.n	800478e <u8x8_cad_st7920_spi+0x172>
    default:
      return 0;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <u8x8_cad_st7920_spi+0x172>
  }
  return 1;
 800478c:	2301      	movs	r3, #1
}
 800478e:	4618      	mov	r0, r3
 8004790:	3724      	adds	r7, #36	; 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd90      	pop	{r4, r7, pc}
 8004796:	bf00      	nop
 8004798:	2000067c 	.word	0x2000067c

0800479c <u8x8_d_st7920_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	72fb      	strb	r3, [r7, #11]
 80047aa:	4613      	mov	r3, r2
 80047ac:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c, i;
  uint8_t *ptr;
  switch(msg)
 80047ae:	7afb      	ldrb	r3, [r7, #11]
 80047b0:	2b0f      	cmp	r3, #15
 80047b2:	d01b      	beq.n	80047ec <u8x8_d_st7920_common+0x50>
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	dc6a      	bgt.n	800488e <u8x8_d_st7920_common+0xf2>
 80047b8:	2b0a      	cmp	r3, #10
 80047ba:	d002      	beq.n	80047c2 <u8x8_d_st7920_common+0x26>
 80047bc:	2b0b      	cmp	r3, #11
 80047be:	d008      	beq.n	80047d2 <u8x8_d_st7920_common+0x36>
 80047c0:	e065      	b.n	800488e <u8x8_d_st7920_common+0xf2>
    /*
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f8a2 	bl	800490c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
 80047c8:	4934      	ldr	r1, [pc, #208]	; (800489c <u8x8_d_st7920_common+0x100>)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fed3 	bl	8004576 <u8x8_cad_SendSequence>
      break;
 80047d0:	e05f      	b.n	8004892 <u8x8_d_st7920_common+0xf6>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80047d2:	7abb      	ldrb	r3, [r7, #10]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <u8x8_d_st7920_common+0x46>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
 80047d8:	4931      	ldr	r1, [pc, #196]	; (80048a0 <u8x8_d_st7920_common+0x104>)
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff fecb 	bl	8004576 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
      break;
 80047e0:	e057      	b.n	8004892 <u8x8_d_st7920_common+0xf6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
 80047e2:	4930      	ldr	r1, [pc, #192]	; (80048a4 <u8x8_d_st7920_common+0x108>)
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fec6 	bl	8004576 <u8x8_cad_SendSequence>
      break;
 80047ea:	e052      	b.n	8004892 <u8x8_d_st7920_common+0xf6>
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	799b      	ldrb	r3, [r3, #6]
 80047f0:	77bb      	strb	r3, [r7, #30]
      y*=8;
 80047f2:	7fbb      	ldrb	r3, [r7, #30]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	77bb      	strb	r3, [r7, #30]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	795b      	ldrb	r3, [r3, #5]
 80047fc:	77fb      	strb	r3, [r7, #31]
      x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only every second tile */
 80047fe:	7ffb      	ldrb	r3, [r7, #31]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	77fb      	strb	r3, [r7, #31]
    
      if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 8004804:	7fbb      	ldrb	r3, [r7, #30]
 8004806:	2b1f      	cmp	r3, #31
 8004808:	d905      	bls.n	8004816 <u8x8_d_st7920_common+0x7a>
      {
	y-=32;
 800480a:	7fbb      	ldrb	r3, [r7, #30]
 800480c:	3b20      	subs	r3, #32
 800480e:	77bb      	strb	r3, [r7, #30]
	x+=8;
 8004810:	7ffb      	ldrb	r3, [r7, #31]
 8004812:	3308      	adds	r3, #8
 8004814:	77fb      	strb	r3, [r7, #31]
      }
    
      u8x8_cad_StartTransfer(u8x8);
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff fe8d 	bl	8004536 <u8x8_cad_StartTransfer>
	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
	
	TODO: Consider arg_int, however arg_int is not used by u8g2
      */
      c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	61bb      	str	r3, [r7, #24]
      /* The following byte is sent to allow the ST7920 to sync up with the data */
      /* it solves some issues with garbage data */
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 8004828:	213e      	movs	r1, #62	; 0x3e
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f7ff fe5e 	bl	80044ec <u8x8_cad_SendCmd>
      for( i = 0; i < 8; i++ )
 8004830:	2300      	movs	r3, #0
 8004832:	777b      	strb	r3, [r7, #29]
 8004834:	e024      	b.n	8004880 <u8x8_d_st7920_common+0xe4>
      {
	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 8004836:	7fba      	ldrb	r2, [r7, #30]
 8004838:	7f7b      	ldrb	r3, [r7, #29]
 800483a:	4413      	add	r3, r2
 800483c:	b2db      	uxtb	r3, r3
 800483e:	b25b      	sxtb	r3, r3
 8004840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004844:	b25b      	sxtb	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	4619      	mov	r1, r3
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fe4e 	bl	80044ec <u8x8_cad_SendCmd>
	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 8004850:	7ffb      	ldrb	r3, [r7, #31]
 8004852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004856:	b2db      	uxtb	r3, r3
 8004858:	4619      	mov	r1, r3
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fe46 	bl	80044ec <u8x8_cad_SendCmd>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	791b      	ldrb	r3, [r3, #4]
 8004864:	75fb      	strb	r3, [r7, #23]

	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one line of data */
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff fe4f 	bl	8004510 <u8x8_cad_SendData>
	ptr += c;
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4413      	add	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 800487a:	7f7b      	ldrb	r3, [r7, #29]
 800487c:	3301      	adds	r3, #1
 800487e:	777b      	strb	r3, [r7, #29]
 8004880:	7f7b      	ldrb	r3, [r7, #29]
 8004882:	2b07      	cmp	r3, #7
 8004884:	d9d7      	bls.n	8004836 <u8x8_d_st7920_common+0x9a>
	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
      }

      u8x8_cad_EndTransfer(u8x8);
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff fe65 	bl	8004556 <u8x8_cad_EndTransfer>

      break;
 800488c:	e001      	b.n	8004892 <u8x8_d_st7920_common+0xf6>
    default:
      return 0;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <u8x8_d_st7920_common+0xf8>
  }
  return 1;
 8004892:	2301      	movs	r3, #1
}
 8004894:	4618      	mov	r0, r3
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	08007b74 	.word	0x08007b74
 80048a0:	08007b88 	.word	0x08007b88
 80048a4:	08007b90 	.word	0x08007b90

080048a8 <u8x8_d_st7920_128x64>:
  }
  return 1;
}

uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	72fb      	strb	r3, [r7, #11]
 80048b6:	4613      	mov	r3, r2
 80048b8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80048ba:	7afb      	ldrb	r3, [r7, #11]
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d106      	bne.n	80048ce <u8x8_d_st7920_128x64+0x26>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 80048c0:	4908      	ldr	r1, [pc, #32]	; (80048e4 <u8x8_d_st7920_128x64+0x3c>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f810 	bl	80048e8 <u8x8_d_helper_display_setup_memory>
      break;
 80048c8:	bf00      	nop
    default:
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e006      	b.n	80048dc <u8x8_d_st7920_128x64+0x34>
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 80048ce:	7aba      	ldrb	r2, [r7, #10]
 80048d0:	7af9      	ldrb	r1, [r7, #11]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff ff61 	bl	800479c <u8x8_d_st7920_common>
 80048da:	4603      	mov	r3, r0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	08007b98 	.word	0x08007b98

080048e8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	7c9a      	ldrb	r2, [r3, #18]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	779a      	strb	r2, [r3, #30]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695c      	ldr	r4, [r3, #20]
 8004918:	2300      	movs	r3, #0
 800491a:	2200      	movs	r2, #0
 800491c:	2128      	movs	r1, #40	; 0x28
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68dc      	ldr	r4, [r3, #12]
 8004926:	2300      	movs	r3, #0
 8004928:	2200      	movs	r2, #0
 800492a:	2114      	movs	r1, #20
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004930:	2201      	movs	r2, #1
 8004932:	214b      	movs	r1, #75	; 0x4b
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f886 	bl	8004a46 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	461a      	mov	r2, r3
 8004942:	2129      	movs	r1, #41	; 0x29
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f87e 	bl	8004a46 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	214b      	movs	r1, #75	; 0x4b
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f879 	bl	8004a46 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	791b      	ldrb	r3, [r3, #4]
 800495a:	461a      	mov	r2, r3
 800495c:	2129      	movs	r1, #41	; 0x29
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f871 	bl	8004a46 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004964:	2201      	movs	r2, #1
 8004966:	214b      	movs	r1, #75	; 0x4b
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f86c 	bl	8004a46 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	795b      	ldrb	r3, [r3, #5]
 8004974:	461a      	mov	r2, r3
 8004976:	2129      	movs	r1, #41	; 0x29
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f864 	bl	8004a46 <u8x8_gpio_call>
}    
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}

08004986 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004986:	b590      	push	{r4, r7, lr}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	4608      	mov	r0, r1
 8004990:	4611      	mov	r1, r2
 8004992:	461a      	mov	r2, r3
 8004994:	4603      	mov	r3, r0
 8004996:	70fb      	strb	r3, [r7, #3]
 8004998:	460b      	mov	r3, r1
 800499a:	70bb      	strb	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80049a4:	78bb      	ldrb	r3, [r7, #2]
 80049a6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689c      	ldr	r4, [r3, #8]
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	2201      	movs	r2, #1
 80049ba:	210f      	movs	r1, #15
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	47a0      	blx	r4
 80049c0:	4603      	mov	r3, r0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd90      	pop	{r4, r7, pc}

080049ca <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80049ca:	b590      	push	{r4, r7, lr}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689c      	ldr	r4, [r3, #8]
 80049d6:	2300      	movs	r3, #0
 80049d8:	2200      	movs	r2, #0
 80049da:	2109      	movs	r1, #9
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	47a0      	blx	r4
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd90      	pop	{r4, r7, pc}

080049e8 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689c      	ldr	r4, [r3, #8]
 80049f4:	2300      	movs	r3, #0
 80049f6:	2200      	movs	r2, #0
 80049f8:	210a      	movs	r1, #10
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	47a0      	blx	r4
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd90      	pop	{r4, r7, pc}

08004a06 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004a06:	b590      	push	{r4, r7, lr}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689c      	ldr	r4, [r3, #8]
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	210b      	movs	r1, #11
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	47a0      	blx	r4
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}

08004a28 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689c      	ldr	r4, [r3, #8]
 8004a34:	2300      	movs	r3, #0
 8004a36:	2200      	movs	r2, #0
 8004a38:	2110      	movs	r1, #16
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	47a0      	blx	r4
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd90      	pop	{r4, r7, pc}

08004a46 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004a46:	b590      	push	{r4, r7, lr}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	70fb      	strb	r3, [r7, #3]
 8004a52:	4613      	mov	r3, r2
 8004a54:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695c      	ldr	r4, [r3, #20]
 8004a5a:	78ba      	ldrb	r2, [r7, #2]
 8004a5c:	78f9      	ldrb	r1, [r7, #3]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	47a0      	blx	r4
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	72fb      	strb	r3, [r7, #11]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
	...

08004a8c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <u8x8_SetupDefaults+0x58>)
 8004a9e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <u8x8_SetupDefaults+0x58>)
 8004aa4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <u8x8_SetupDefaults+0x58>)
 8004aaa:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <u8x8_SetupDefaults+0x58>)
 8004ab0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->i2c_address = 255;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	22ff      	movs	r2, #255	; 0xff
 8004acc:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	22ff      	movs	r2, #255	; 0xff
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	08004a6d 	.word	0x08004a6d

08004ae8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ffc8 	bl	8004a8c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff ff58 	bl	80049ca <u8x8_SetupMemory>
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <__errno>:
 8004b24:	4b01      	ldr	r3, [pc, #4]	; (8004b2c <__errno+0x8>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	4d0d      	ldr	r5, [pc, #52]	; (8004b68 <__libc_init_array+0x38>)
 8004b34:	4c0d      	ldr	r4, [pc, #52]	; (8004b6c <__libc_init_array+0x3c>)
 8004b36:	1b64      	subs	r4, r4, r5
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	4d0b      	ldr	r5, [pc, #44]	; (8004b70 <__libc_init_array+0x40>)
 8004b42:	4c0c      	ldr	r4, [pc, #48]	; (8004b74 <__libc_init_array+0x44>)
 8004b44:	f002 fcde 	bl	8007504 <_init>
 8004b48:	1b64      	subs	r4, r4, r5
 8004b4a:	10a4      	asrs	r4, r4, #2
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	0800835c 	.word	0x0800835c
 8004b6c:	0800835c 	.word	0x0800835c
 8004b70:	0800835c 	.word	0x0800835c
 8004b74:	08008360 	.word	0x08008360

08004b78 <memset>:
 8004b78:	4402      	add	r2, r0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <__cvt>:
 8004b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	461f      	mov	r7, r3
 8004b92:	4614      	mov	r4, r2
 8004b94:	bfb8      	it	lt
 8004b96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b9e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004ba2:	bfb6      	itet	lt
 8004ba4:	461f      	movlt	r7, r3
 8004ba6:	2300      	movge	r3, #0
 8004ba8:	232d      	movlt	r3, #45	; 0x2d
 8004baa:	7013      	strb	r3, [r2, #0]
 8004bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bae:	f023 0820 	bic.w	r8, r3, #32
 8004bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bb6:	d005      	beq.n	8004bc4 <__cvt+0x3c>
 8004bb8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004bbc:	d100      	bne.n	8004bc0 <__cvt+0x38>
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e000      	b.n	8004bc6 <__cvt+0x3e>
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	aa07      	add	r2, sp, #28
 8004bc8:	9204      	str	r2, [sp, #16]
 8004bca:	aa06      	add	r2, sp, #24
 8004bcc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bd0:	e9cd 3500 	strd	r3, r5, [sp]
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	f000 fcbe 	bl	8005558 <_dtoa_r>
 8004bdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004be0:	4606      	mov	r6, r0
 8004be2:	d102      	bne.n	8004bea <__cvt+0x62>
 8004be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004be6:	07db      	lsls	r3, r3, #31
 8004be8:	d522      	bpl.n	8004c30 <__cvt+0xa8>
 8004bea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bee:	eb06 0905 	add.w	r9, r6, r5
 8004bf2:	d110      	bne.n	8004c16 <__cvt+0x8e>
 8004bf4:	7833      	ldrb	r3, [r6, #0]
 8004bf6:	2b30      	cmp	r3, #48	; 0x30
 8004bf8:	d10a      	bne.n	8004c10 <__cvt+0x88>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4639      	mov	r1, r7
 8004c02:	f7fb ff39 	bl	8000a78 <__aeabi_dcmpeq>
 8004c06:	b918      	cbnz	r0, 8004c10 <__cvt+0x88>
 8004c08:	f1c5 0501 	rsb	r5, r5, #1
 8004c0c:	f8ca 5000 	str.w	r5, [sl]
 8004c10:	f8da 3000 	ldr.w	r3, [sl]
 8004c14:	4499      	add	r9, r3
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4639      	mov	r1, r7
 8004c1e:	f7fb ff2b 	bl	8000a78 <__aeabi_dcmpeq>
 8004c22:	b108      	cbz	r0, 8004c28 <__cvt+0xa0>
 8004c24:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c28:	2230      	movs	r2, #48	; 0x30
 8004c2a:	9b07      	ldr	r3, [sp, #28]
 8004c2c:	454b      	cmp	r3, r9
 8004c2e:	d307      	bcc.n	8004c40 <__cvt+0xb8>
 8004c30:	9b07      	ldr	r3, [sp, #28]
 8004c32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c34:	1b9b      	subs	r3, r3, r6
 8004c36:	4630      	mov	r0, r6
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	b008      	add	sp, #32
 8004c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c40:	1c59      	adds	r1, r3, #1
 8004c42:	9107      	str	r1, [sp, #28]
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e7f0      	b.n	8004c2a <__cvt+0xa2>

08004c48 <__exponent>:
 8004c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	bfb8      	it	lt
 8004c50:	4249      	neglt	r1, r1
 8004c52:	f803 2b02 	strb.w	r2, [r3], #2
 8004c56:	bfb4      	ite	lt
 8004c58:	222d      	movlt	r2, #45	; 0x2d
 8004c5a:	222b      	movge	r2, #43	; 0x2b
 8004c5c:	2909      	cmp	r1, #9
 8004c5e:	7042      	strb	r2, [r0, #1]
 8004c60:	dd2a      	ble.n	8004cb8 <__exponent+0x70>
 8004c62:	f10d 0407 	add.w	r4, sp, #7
 8004c66:	46a4      	mov	ip, r4
 8004c68:	270a      	movs	r7, #10
 8004c6a:	46a6      	mov	lr, r4
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c72:	fb07 1516 	mls	r5, r7, r6, r1
 8004c76:	3530      	adds	r5, #48	; 0x30
 8004c78:	2a63      	cmp	r2, #99	; 0x63
 8004c7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c82:	4631      	mov	r1, r6
 8004c84:	dcf1      	bgt.n	8004c6a <__exponent+0x22>
 8004c86:	3130      	adds	r1, #48	; 0x30
 8004c88:	f1ae 0502 	sub.w	r5, lr, #2
 8004c8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c90:	1c44      	adds	r4, r0, #1
 8004c92:	4629      	mov	r1, r5
 8004c94:	4561      	cmp	r1, ip
 8004c96:	d30a      	bcc.n	8004cae <__exponent+0x66>
 8004c98:	f10d 0209 	add.w	r2, sp, #9
 8004c9c:	eba2 020e 	sub.w	r2, r2, lr
 8004ca0:	4565      	cmp	r5, ip
 8004ca2:	bf88      	it	hi
 8004ca4:	2200      	movhi	r2, #0
 8004ca6:	4413      	add	r3, r2
 8004ca8:	1a18      	subs	r0, r3, r0
 8004caa:	b003      	add	sp, #12
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cb6:	e7ed      	b.n	8004c94 <__exponent+0x4c>
 8004cb8:	2330      	movs	r3, #48	; 0x30
 8004cba:	3130      	adds	r1, #48	; 0x30
 8004cbc:	7083      	strb	r3, [r0, #2]
 8004cbe:	70c1      	strb	r1, [r0, #3]
 8004cc0:	1d03      	adds	r3, r0, #4
 8004cc2:	e7f1      	b.n	8004ca8 <__exponent+0x60>

08004cc4 <_printf_float>:
 8004cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	b091      	sub	sp, #68	; 0x44
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	461f      	mov	r7, r3
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	f001 fb23 	bl	8006320 <_localeconv_r>
 8004cda:	6803      	ldr	r3, [r0, #0]
 8004cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fb fa4e 	bl	8000180 <strlen>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	930e      	str	r3, [sp, #56]	; 0x38
 8004ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cec:	900a      	str	r0, [sp, #40]	; 0x28
 8004cee:	3307      	adds	r3, #7
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	f103 0208 	add.w	r2, r3, #8
 8004cf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004cfc:	f8d4 b000 	ldr.w	fp, [r4]
 8004d00:	f8c8 2000 	str.w	r2, [r8]
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d0c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004d10:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d18:	4b9c      	ldr	r3, [pc, #624]	; (8004f8c <_printf_float+0x2c8>)
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7fb fedc 	bl	8000adc <__aeabi_dcmpun>
 8004d24:	bb70      	cbnz	r0, 8004d84 <_printf_float+0xc0>
 8004d26:	4b99      	ldr	r3, [pc, #612]	; (8004f8c <_printf_float+0x2c8>)
 8004d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7fb feb6 	bl	8000aa0 <__aeabi_dcmple>
 8004d34:	bb30      	cbnz	r0, 8004d84 <_printf_float+0xc0>
 8004d36:	2200      	movs	r2, #0
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	f7fb fea5 	bl	8000a8c <__aeabi_dcmplt>
 8004d42:	b110      	cbz	r0, 8004d4a <_printf_float+0x86>
 8004d44:	232d      	movs	r3, #45	; 0x2d
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4a:	4b91      	ldr	r3, [pc, #580]	; (8004f90 <_printf_float+0x2cc>)
 8004d4c:	4891      	ldr	r0, [pc, #580]	; (8004f94 <_printf_float+0x2d0>)
 8004d4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d52:	bf94      	ite	ls
 8004d54:	4698      	movls	r8, r3
 8004d56:	4680      	movhi	r8, r0
 8004d58:	2303      	movs	r3, #3
 8004d5a:	6123      	str	r3, [r4, #16]
 8004d5c:	f02b 0304 	bic.w	r3, fp, #4
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	f04f 0a00 	mov.w	sl, #0
 8004d66:	9700      	str	r7, [sp, #0]
 8004d68:	4633      	mov	r3, r6
 8004d6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f9d2 	bl	8005118 <_printf_common>
 8004d74:	3001      	adds	r0, #1
 8004d76:	f040 808f 	bne.w	8004e98 <_printf_float+0x1d4>
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7e:	b011      	add	sp, #68	; 0x44
 8004d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d84:	4642      	mov	r2, r8
 8004d86:	4653      	mov	r3, sl
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	f7fb fea6 	bl	8000adc <__aeabi_dcmpun>
 8004d90:	b140      	cbz	r0, 8004da4 <_printf_float+0xe0>
 8004d92:	f1ba 0f00 	cmp.w	sl, #0
 8004d96:	bfbc      	itt	lt
 8004d98:	232d      	movlt	r3, #45	; 0x2d
 8004d9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d9e:	487e      	ldr	r0, [pc, #504]	; (8004f98 <_printf_float+0x2d4>)
 8004da0:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <_printf_float+0x2d8>)
 8004da2:	e7d4      	b.n	8004d4e <_printf_float+0x8a>
 8004da4:	6863      	ldr	r3, [r4, #4]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004dac:	d142      	bne.n	8004e34 <_printf_float+0x170>
 8004dae:	2306      	movs	r3, #6
 8004db0:	6063      	str	r3, [r4, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	9206      	str	r2, [sp, #24]
 8004db6:	aa0e      	add	r2, sp, #56	; 0x38
 8004db8:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004dbc:	aa0d      	add	r2, sp, #52	; 0x34
 8004dbe:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004dc2:	9203      	str	r2, [sp, #12]
 8004dc4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004dc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	4653      	mov	r3, sl
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	910b      	str	r1, [sp, #44]	; 0x2c
 8004dda:	f7ff fed5 	bl	8004b88 <__cvt>
 8004dde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004de0:	2947      	cmp	r1, #71	; 0x47
 8004de2:	4680      	mov	r8, r0
 8004de4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004de6:	d108      	bne.n	8004dfa <_printf_float+0x136>
 8004de8:	1cc8      	adds	r0, r1, #3
 8004dea:	db02      	blt.n	8004df2 <_printf_float+0x12e>
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	4299      	cmp	r1, r3
 8004df0:	dd40      	ble.n	8004e74 <_printf_float+0x1b0>
 8004df2:	f1a9 0902 	sub.w	r9, r9, #2
 8004df6:	fa5f f989 	uxtb.w	r9, r9
 8004dfa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004dfe:	d81f      	bhi.n	8004e40 <_printf_float+0x17c>
 8004e00:	3901      	subs	r1, #1
 8004e02:	464a      	mov	r2, r9
 8004e04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e08:	910d      	str	r1, [sp, #52]	; 0x34
 8004e0a:	f7ff ff1d 	bl	8004c48 <__exponent>
 8004e0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e10:	1813      	adds	r3, r2, r0
 8004e12:	2a01      	cmp	r2, #1
 8004e14:	4682      	mov	sl, r0
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	dc02      	bgt.n	8004e20 <_printf_float+0x15c>
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	07d2      	lsls	r2, r2, #31
 8004e1e:	d501      	bpl.n	8004e24 <_printf_float+0x160>
 8004e20:	3301      	adds	r3, #1
 8004e22:	6123      	str	r3, [r4, #16]
 8004e24:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d09c      	beq.n	8004d66 <_printf_float+0xa2>
 8004e2c:	232d      	movs	r3, #45	; 0x2d
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e32:	e798      	b.n	8004d66 <_printf_float+0xa2>
 8004e34:	2947      	cmp	r1, #71	; 0x47
 8004e36:	d1bc      	bne.n	8004db2 <_printf_float+0xee>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ba      	bne.n	8004db2 <_printf_float+0xee>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e7b7      	b.n	8004db0 <_printf_float+0xec>
 8004e40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e44:	d118      	bne.n	8004e78 <_printf_float+0x1b4>
 8004e46:	2900      	cmp	r1, #0
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	dd0b      	ble.n	8004e64 <_printf_float+0x1a0>
 8004e4c:	6121      	str	r1, [r4, #16]
 8004e4e:	b913      	cbnz	r3, 8004e56 <_printf_float+0x192>
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	07d0      	lsls	r0, r2, #31
 8004e54:	d502      	bpl.n	8004e5c <_printf_float+0x198>
 8004e56:	3301      	adds	r3, #1
 8004e58:	440b      	add	r3, r1
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e5e:	f04f 0a00 	mov.w	sl, #0
 8004e62:	e7df      	b.n	8004e24 <_printf_float+0x160>
 8004e64:	b913      	cbnz	r3, 8004e6c <_printf_float+0x1a8>
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	07d2      	lsls	r2, r2, #31
 8004e6a:	d501      	bpl.n	8004e70 <_printf_float+0x1ac>
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	e7f4      	b.n	8004e5a <_printf_float+0x196>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e7f2      	b.n	8004e5a <_printf_float+0x196>
 8004e74:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	db05      	blt.n	8004e8a <_printf_float+0x1c6>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	6121      	str	r1, [r4, #16]
 8004e82:	07d8      	lsls	r0, r3, #31
 8004e84:	d5ea      	bpl.n	8004e5c <_printf_float+0x198>
 8004e86:	1c4b      	adds	r3, r1, #1
 8004e88:	e7e7      	b.n	8004e5a <_printf_float+0x196>
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	bfd4      	ite	le
 8004e8e:	f1c1 0202 	rsble	r2, r1, #2
 8004e92:	2201      	movgt	r2, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	e7e0      	b.n	8004e5a <_printf_float+0x196>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	055a      	lsls	r2, r3, #21
 8004e9c:	d407      	bmi.n	8004eae <_printf_float+0x1ea>
 8004e9e:	6923      	ldr	r3, [r4, #16]
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d12b      	bne.n	8004f04 <_printf_float+0x240>
 8004eac:	e765      	b.n	8004d7a <_printf_float+0xb6>
 8004eae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004eb2:	f240 80dc 	bls.w	800506e <_printf_float+0x3aa>
 8004eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f7fb fddb 	bl	8000a78 <__aeabi_dcmpeq>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d033      	beq.n	8004f2e <_printf_float+0x26a>
 8004ec6:	4a36      	ldr	r2, [pc, #216]	; (8004fa0 <_printf_float+0x2dc>)
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f af52 	beq.w	8004d7a <_printf_float+0xb6>
 8004ed6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eda:	429a      	cmp	r2, r3
 8004edc:	db02      	blt.n	8004ee4 <_printf_float+0x220>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	07d8      	lsls	r0, r3, #31
 8004ee2:	d50f      	bpl.n	8004f04 <_printf_float+0x240>
 8004ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee8:	4631      	mov	r1, r6
 8004eea:	4628      	mov	r0, r5
 8004eec:	47b8      	blx	r7
 8004eee:	3001      	adds	r0, #1
 8004ef0:	f43f af43 	beq.w	8004d7a <_printf_float+0xb6>
 8004ef4:	f04f 0800 	mov.w	r8, #0
 8004ef8:	f104 091a 	add.w	r9, r4, #26
 8004efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004efe:	3b01      	subs	r3, #1
 8004f00:	4543      	cmp	r3, r8
 8004f02:	dc09      	bgt.n	8004f18 <_printf_float+0x254>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	079b      	lsls	r3, r3, #30
 8004f08:	f100 8101 	bmi.w	800510e <_printf_float+0x44a>
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bfb8      	it	lt
 8004f14:	4618      	movlt	r0, r3
 8004f16:	e732      	b.n	8004d7e <_printf_float+0xba>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	464a      	mov	r2, r9
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af29 	beq.w	8004d7a <_printf_float+0xb6>
 8004f28:	f108 0801 	add.w	r8, r8, #1
 8004f2c:	e7e6      	b.n	8004efc <_printf_float+0x238>
 8004f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dc37      	bgt.n	8004fa4 <_printf_float+0x2e0>
 8004f34:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <_printf_float+0x2dc>)
 8004f36:	2301      	movs	r3, #1
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	f43f af1b 	beq.w	8004d7a <_printf_float+0xb6>
 8004f44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d102      	bne.n	8004f52 <_printf_float+0x28e>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	07d9      	lsls	r1, r3, #31
 8004f50:	d5d8      	bpl.n	8004f04 <_printf_float+0x240>
 8004f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f56:	4631      	mov	r1, r6
 8004f58:	4628      	mov	r0, r5
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f43f af0c 	beq.w	8004d7a <_printf_float+0xb6>
 8004f62:	f04f 0900 	mov.w	r9, #0
 8004f66:	f104 0a1a 	add.w	sl, r4, #26
 8004f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f6c:	425b      	negs	r3, r3
 8004f6e:	454b      	cmp	r3, r9
 8004f70:	dc01      	bgt.n	8004f76 <_printf_float+0x2b2>
 8004f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f74:	e794      	b.n	8004ea0 <_printf_float+0x1dc>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4652      	mov	r2, sl
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	47b8      	blx	r7
 8004f80:	3001      	adds	r0, #1
 8004f82:	f43f aefa 	beq.w	8004d7a <_printf_float+0xb6>
 8004f86:	f109 0901 	add.w	r9, r9, #1
 8004f8a:	e7ee      	b.n	8004f6a <_printf_float+0x2a6>
 8004f8c:	7fefffff 	.word	0x7fefffff
 8004f90:	08007bb4 	.word	0x08007bb4
 8004f94:	08007bb8 	.word	0x08007bb8
 8004f98:	08007bc0 	.word	0x08007bc0
 8004f9c:	08007bbc 	.word	0x08007bbc
 8004fa0:	08007bc4 	.word	0x08007bc4
 8004fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bfa8      	it	ge
 8004fac:	461a      	movge	r2, r3
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	4691      	mov	r9, r2
 8004fb2:	dc37      	bgt.n	8005024 <_printf_float+0x360>
 8004fb4:	f04f 0b00 	mov.w	fp, #0
 8004fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fbc:	f104 021a 	add.w	r2, r4, #26
 8004fc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fc4:	ebaa 0309 	sub.w	r3, sl, r9
 8004fc8:	455b      	cmp	r3, fp
 8004fca:	dc33      	bgt.n	8005034 <_printf_float+0x370>
 8004fcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	db3b      	blt.n	800504c <_printf_float+0x388>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	07da      	lsls	r2, r3, #31
 8004fd8:	d438      	bmi.n	800504c <_printf_float+0x388>
 8004fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fde:	eba2 030a 	sub.w	r3, r2, sl
 8004fe2:	eba2 0901 	sub.w	r9, r2, r1
 8004fe6:	4599      	cmp	r9, r3
 8004fe8:	bfa8      	it	ge
 8004fea:	4699      	movge	r9, r3
 8004fec:	f1b9 0f00 	cmp.w	r9, #0
 8004ff0:	dc34      	bgt.n	800505c <_printf_float+0x398>
 8004ff2:	f04f 0800 	mov.w	r8, #0
 8004ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ffa:	f104 0a1a 	add.w	sl, r4, #26
 8004ffe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	eba3 0309 	sub.w	r3, r3, r9
 8005008:	4543      	cmp	r3, r8
 800500a:	f77f af7b 	ble.w	8004f04 <_printf_float+0x240>
 800500e:	2301      	movs	r3, #1
 8005010:	4652      	mov	r2, sl
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f aeae 	beq.w	8004d7a <_printf_float+0xb6>
 800501e:	f108 0801 	add.w	r8, r8, #1
 8005022:	e7ec      	b.n	8004ffe <_printf_float+0x33a>
 8005024:	4613      	mov	r3, r2
 8005026:	4631      	mov	r1, r6
 8005028:	4642      	mov	r2, r8
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	d1c0      	bne.n	8004fb4 <_printf_float+0x2f0>
 8005032:	e6a2      	b.n	8004d7a <_printf_float+0xb6>
 8005034:	2301      	movs	r3, #1
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	920b      	str	r2, [sp, #44]	; 0x2c
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	f43f ae9b 	beq.w	8004d7a <_printf_float+0xb6>
 8005044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005046:	f10b 0b01 	add.w	fp, fp, #1
 800504a:	e7b9      	b.n	8004fc0 <_printf_float+0x2fc>
 800504c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005050:	4631      	mov	r1, r6
 8005052:	4628      	mov	r0, r5
 8005054:	47b8      	blx	r7
 8005056:	3001      	adds	r0, #1
 8005058:	d1bf      	bne.n	8004fda <_printf_float+0x316>
 800505a:	e68e      	b.n	8004d7a <_printf_float+0xb6>
 800505c:	464b      	mov	r3, r9
 800505e:	eb08 020a 	add.w	r2, r8, sl
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	d1c2      	bne.n	8004ff2 <_printf_float+0x32e>
 800506c:	e685      	b.n	8004d7a <_printf_float+0xb6>
 800506e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005070:	2a01      	cmp	r2, #1
 8005072:	dc01      	bgt.n	8005078 <_printf_float+0x3b4>
 8005074:	07db      	lsls	r3, r3, #31
 8005076:	d537      	bpl.n	80050e8 <_printf_float+0x424>
 8005078:	2301      	movs	r3, #1
 800507a:	4642      	mov	r2, r8
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f ae79 	beq.w	8004d7a <_printf_float+0xb6>
 8005088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f ae71 	beq.w	8004d7a <_printf_float+0xb6>
 8005098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800509c:	2200      	movs	r2, #0
 800509e:	2300      	movs	r3, #0
 80050a0:	f7fb fcea 	bl	8000a78 <__aeabi_dcmpeq>
 80050a4:	b9d8      	cbnz	r0, 80050de <_printf_float+0x41a>
 80050a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050a8:	f108 0201 	add.w	r2, r8, #1
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	47b8      	blx	r7
 80050b4:	3001      	adds	r0, #1
 80050b6:	d10e      	bne.n	80050d6 <_printf_float+0x412>
 80050b8:	e65f      	b.n	8004d7a <_printf_float+0xb6>
 80050ba:	2301      	movs	r3, #1
 80050bc:	464a      	mov	r2, r9
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f ae58 	beq.w	8004d7a <_printf_float+0xb6>
 80050ca:	f108 0801 	add.w	r8, r8, #1
 80050ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d0:	3b01      	subs	r3, #1
 80050d2:	4543      	cmp	r3, r8
 80050d4:	dcf1      	bgt.n	80050ba <_printf_float+0x3f6>
 80050d6:	4653      	mov	r3, sl
 80050d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050dc:	e6e1      	b.n	8004ea2 <_printf_float+0x1de>
 80050de:	f04f 0800 	mov.w	r8, #0
 80050e2:	f104 091a 	add.w	r9, r4, #26
 80050e6:	e7f2      	b.n	80050ce <_printf_float+0x40a>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4642      	mov	r2, r8
 80050ec:	e7df      	b.n	80050ae <_printf_float+0x3ea>
 80050ee:	2301      	movs	r3, #1
 80050f0:	464a      	mov	r2, r9
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	f43f ae3e 	beq.w	8004d7a <_printf_float+0xb6>
 80050fe:	f108 0801 	add.w	r8, r8, #1
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005106:	1a5b      	subs	r3, r3, r1
 8005108:	4543      	cmp	r3, r8
 800510a:	dcf0      	bgt.n	80050ee <_printf_float+0x42a>
 800510c:	e6fe      	b.n	8004f0c <_printf_float+0x248>
 800510e:	f04f 0800 	mov.w	r8, #0
 8005112:	f104 0919 	add.w	r9, r4, #25
 8005116:	e7f4      	b.n	8005102 <_printf_float+0x43e>

08005118 <_printf_common>:
 8005118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	4616      	mov	r6, r2
 800511e:	4699      	mov	r9, r3
 8005120:	688a      	ldr	r2, [r1, #8]
 8005122:	690b      	ldr	r3, [r1, #16]
 8005124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005128:	4293      	cmp	r3, r2
 800512a:	bfb8      	it	lt
 800512c:	4613      	movlt	r3, r2
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005134:	4607      	mov	r7, r0
 8005136:	460c      	mov	r4, r1
 8005138:	b10a      	cbz	r2, 800513e <_printf_common+0x26>
 800513a:	3301      	adds	r3, #1
 800513c:	6033      	str	r3, [r6, #0]
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	0699      	lsls	r1, r3, #26
 8005142:	bf42      	ittt	mi
 8005144:	6833      	ldrmi	r3, [r6, #0]
 8005146:	3302      	addmi	r3, #2
 8005148:	6033      	strmi	r3, [r6, #0]
 800514a:	6825      	ldr	r5, [r4, #0]
 800514c:	f015 0506 	ands.w	r5, r5, #6
 8005150:	d106      	bne.n	8005160 <_printf_common+0x48>
 8005152:	f104 0a19 	add.w	sl, r4, #25
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	6832      	ldr	r2, [r6, #0]
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	42ab      	cmp	r3, r5
 800515e:	dc26      	bgt.n	80051ae <_printf_common+0x96>
 8005160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005164:	1e13      	subs	r3, r2, #0
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	bf18      	it	ne
 800516a:	2301      	movne	r3, #1
 800516c:	0692      	lsls	r2, r2, #26
 800516e:	d42b      	bmi.n	80051c8 <_printf_common+0xb0>
 8005170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005174:	4649      	mov	r1, r9
 8005176:	4638      	mov	r0, r7
 8005178:	47c0      	blx	r8
 800517a:	3001      	adds	r0, #1
 800517c:	d01e      	beq.n	80051bc <_printf_common+0xa4>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	68e5      	ldr	r5, [r4, #12]
 8005182:	6832      	ldr	r2, [r6, #0]
 8005184:	f003 0306 	and.w	r3, r3, #6
 8005188:	2b04      	cmp	r3, #4
 800518a:	bf08      	it	eq
 800518c:	1aad      	subeq	r5, r5, r2
 800518e:	68a3      	ldr	r3, [r4, #8]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	bf0c      	ite	eq
 8005194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005198:	2500      	movne	r5, #0
 800519a:	4293      	cmp	r3, r2
 800519c:	bfc4      	itt	gt
 800519e:	1a9b      	subgt	r3, r3, r2
 80051a0:	18ed      	addgt	r5, r5, r3
 80051a2:	2600      	movs	r6, #0
 80051a4:	341a      	adds	r4, #26
 80051a6:	42b5      	cmp	r5, r6
 80051a8:	d11a      	bne.n	80051e0 <_printf_common+0xc8>
 80051aa:	2000      	movs	r0, #0
 80051ac:	e008      	b.n	80051c0 <_printf_common+0xa8>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4652      	mov	r2, sl
 80051b2:	4649      	mov	r1, r9
 80051b4:	4638      	mov	r0, r7
 80051b6:	47c0      	blx	r8
 80051b8:	3001      	adds	r0, #1
 80051ba:	d103      	bne.n	80051c4 <_printf_common+0xac>
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c4:	3501      	adds	r5, #1
 80051c6:	e7c6      	b.n	8005156 <_printf_common+0x3e>
 80051c8:	18e1      	adds	r1, r4, r3
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	2030      	movs	r0, #48	; 0x30
 80051ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d2:	4422      	add	r2, r4
 80051d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051dc:	3302      	adds	r3, #2
 80051de:	e7c7      	b.n	8005170 <_printf_common+0x58>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4622      	mov	r2, r4
 80051e4:	4649      	mov	r1, r9
 80051e6:	4638      	mov	r0, r7
 80051e8:	47c0      	blx	r8
 80051ea:	3001      	adds	r0, #1
 80051ec:	d0e6      	beq.n	80051bc <_printf_common+0xa4>
 80051ee:	3601      	adds	r6, #1
 80051f0:	e7d9      	b.n	80051a6 <_printf_common+0x8e>
	...

080051f4 <_printf_i>:
 80051f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f8:	460c      	mov	r4, r1
 80051fa:	4691      	mov	r9, r2
 80051fc:	7e27      	ldrb	r7, [r4, #24]
 80051fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005200:	2f78      	cmp	r7, #120	; 0x78
 8005202:	4680      	mov	r8, r0
 8005204:	469a      	mov	sl, r3
 8005206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800520a:	d807      	bhi.n	800521c <_printf_i+0x28>
 800520c:	2f62      	cmp	r7, #98	; 0x62
 800520e:	d80a      	bhi.n	8005226 <_printf_i+0x32>
 8005210:	2f00      	cmp	r7, #0
 8005212:	f000 80d8 	beq.w	80053c6 <_printf_i+0x1d2>
 8005216:	2f58      	cmp	r7, #88	; 0x58
 8005218:	f000 80a3 	beq.w	8005362 <_printf_i+0x16e>
 800521c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005224:	e03a      	b.n	800529c <_printf_i+0xa8>
 8005226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800522a:	2b15      	cmp	r3, #21
 800522c:	d8f6      	bhi.n	800521c <_printf_i+0x28>
 800522e:	a001      	add	r0, pc, #4	; (adr r0, 8005234 <_printf_i+0x40>)
 8005230:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005234:	0800528d 	.word	0x0800528d
 8005238:	080052a1 	.word	0x080052a1
 800523c:	0800521d 	.word	0x0800521d
 8005240:	0800521d 	.word	0x0800521d
 8005244:	0800521d 	.word	0x0800521d
 8005248:	0800521d 	.word	0x0800521d
 800524c:	080052a1 	.word	0x080052a1
 8005250:	0800521d 	.word	0x0800521d
 8005254:	0800521d 	.word	0x0800521d
 8005258:	0800521d 	.word	0x0800521d
 800525c:	0800521d 	.word	0x0800521d
 8005260:	080053ad 	.word	0x080053ad
 8005264:	080052d1 	.word	0x080052d1
 8005268:	0800538f 	.word	0x0800538f
 800526c:	0800521d 	.word	0x0800521d
 8005270:	0800521d 	.word	0x0800521d
 8005274:	080053cf 	.word	0x080053cf
 8005278:	0800521d 	.word	0x0800521d
 800527c:	080052d1 	.word	0x080052d1
 8005280:	0800521d 	.word	0x0800521d
 8005284:	0800521d 	.word	0x0800521d
 8005288:	08005397 	.word	0x08005397
 800528c:	680b      	ldr	r3, [r1, #0]
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	600a      	str	r2, [r1, #0]
 8005294:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529c:	2301      	movs	r3, #1
 800529e:	e0a3      	b.n	80053e8 <_printf_i+0x1f4>
 80052a0:	6825      	ldr	r5, [r4, #0]
 80052a2:	6808      	ldr	r0, [r1, #0]
 80052a4:	062e      	lsls	r6, r5, #24
 80052a6:	f100 0304 	add.w	r3, r0, #4
 80052aa:	d50a      	bpl.n	80052c2 <_printf_i+0xce>
 80052ac:	6805      	ldr	r5, [r0, #0]
 80052ae:	600b      	str	r3, [r1, #0]
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	da03      	bge.n	80052bc <_printf_i+0xc8>
 80052b4:	232d      	movs	r3, #45	; 0x2d
 80052b6:	426d      	negs	r5, r5
 80052b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052bc:	485e      	ldr	r0, [pc, #376]	; (8005438 <_printf_i+0x244>)
 80052be:	230a      	movs	r3, #10
 80052c0:	e019      	b.n	80052f6 <_printf_i+0x102>
 80052c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052c6:	6805      	ldr	r5, [r0, #0]
 80052c8:	600b      	str	r3, [r1, #0]
 80052ca:	bf18      	it	ne
 80052cc:	b22d      	sxthne	r5, r5
 80052ce:	e7ef      	b.n	80052b0 <_printf_i+0xbc>
 80052d0:	680b      	ldr	r3, [r1, #0]
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	1d18      	adds	r0, r3, #4
 80052d6:	6008      	str	r0, [r1, #0]
 80052d8:	0628      	lsls	r0, r5, #24
 80052da:	d501      	bpl.n	80052e0 <_printf_i+0xec>
 80052dc:	681d      	ldr	r5, [r3, #0]
 80052de:	e002      	b.n	80052e6 <_printf_i+0xf2>
 80052e0:	0669      	lsls	r1, r5, #25
 80052e2:	d5fb      	bpl.n	80052dc <_printf_i+0xe8>
 80052e4:	881d      	ldrh	r5, [r3, #0]
 80052e6:	4854      	ldr	r0, [pc, #336]	; (8005438 <_printf_i+0x244>)
 80052e8:	2f6f      	cmp	r7, #111	; 0x6f
 80052ea:	bf0c      	ite	eq
 80052ec:	2308      	moveq	r3, #8
 80052ee:	230a      	movne	r3, #10
 80052f0:	2100      	movs	r1, #0
 80052f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052f6:	6866      	ldr	r6, [r4, #4]
 80052f8:	60a6      	str	r6, [r4, #8]
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	bfa2      	ittt	ge
 80052fe:	6821      	ldrge	r1, [r4, #0]
 8005300:	f021 0104 	bicge.w	r1, r1, #4
 8005304:	6021      	strge	r1, [r4, #0]
 8005306:	b90d      	cbnz	r5, 800530c <_printf_i+0x118>
 8005308:	2e00      	cmp	r6, #0
 800530a:	d04d      	beq.n	80053a8 <_printf_i+0x1b4>
 800530c:	4616      	mov	r6, r2
 800530e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005312:	fb03 5711 	mls	r7, r3, r1, r5
 8005316:	5dc7      	ldrb	r7, [r0, r7]
 8005318:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800531c:	462f      	mov	r7, r5
 800531e:	42bb      	cmp	r3, r7
 8005320:	460d      	mov	r5, r1
 8005322:	d9f4      	bls.n	800530e <_printf_i+0x11a>
 8005324:	2b08      	cmp	r3, #8
 8005326:	d10b      	bne.n	8005340 <_printf_i+0x14c>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	07df      	lsls	r7, r3, #31
 800532c:	d508      	bpl.n	8005340 <_printf_i+0x14c>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	6861      	ldr	r1, [r4, #4]
 8005332:	4299      	cmp	r1, r3
 8005334:	bfde      	ittt	le
 8005336:	2330      	movle	r3, #48	; 0x30
 8005338:	f806 3c01 	strble.w	r3, [r6, #-1]
 800533c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005340:	1b92      	subs	r2, r2, r6
 8005342:	6122      	str	r2, [r4, #16]
 8005344:	f8cd a000 	str.w	sl, [sp]
 8005348:	464b      	mov	r3, r9
 800534a:	aa03      	add	r2, sp, #12
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff fee2 	bl	8005118 <_printf_common>
 8005354:	3001      	adds	r0, #1
 8005356:	d14c      	bne.n	80053f2 <_printf_i+0x1fe>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	b004      	add	sp, #16
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	4835      	ldr	r0, [pc, #212]	; (8005438 <_printf_i+0x244>)
 8005364:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	680e      	ldr	r6, [r1, #0]
 800536c:	061f      	lsls	r7, r3, #24
 800536e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005372:	600e      	str	r6, [r1, #0]
 8005374:	d514      	bpl.n	80053a0 <_printf_i+0x1ac>
 8005376:	07d9      	lsls	r1, r3, #31
 8005378:	bf44      	itt	mi
 800537a:	f043 0320 	orrmi.w	r3, r3, #32
 800537e:	6023      	strmi	r3, [r4, #0]
 8005380:	b91d      	cbnz	r5, 800538a <_printf_i+0x196>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	2310      	movs	r3, #16
 800538c:	e7b0      	b.n	80052f0 <_printf_i+0xfc>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f043 0320 	orr.w	r3, r3, #32
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	2378      	movs	r3, #120	; 0x78
 8005398:	4828      	ldr	r0, [pc, #160]	; (800543c <_printf_i+0x248>)
 800539a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800539e:	e7e3      	b.n	8005368 <_printf_i+0x174>
 80053a0:	065e      	lsls	r6, r3, #25
 80053a2:	bf48      	it	mi
 80053a4:	b2ad      	uxthmi	r5, r5
 80053a6:	e7e6      	b.n	8005376 <_printf_i+0x182>
 80053a8:	4616      	mov	r6, r2
 80053aa:	e7bb      	b.n	8005324 <_printf_i+0x130>
 80053ac:	680b      	ldr	r3, [r1, #0]
 80053ae:	6826      	ldr	r6, [r4, #0]
 80053b0:	6960      	ldr	r0, [r4, #20]
 80053b2:	1d1d      	adds	r5, r3, #4
 80053b4:	600d      	str	r5, [r1, #0]
 80053b6:	0635      	lsls	r5, r6, #24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0x1cc>
 80053bc:	6018      	str	r0, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_printf_i+0x1d2>
 80053c0:	0671      	lsls	r1, r6, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0x1c8>
 80053c4:	8018      	strh	r0, [r3, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	4616      	mov	r6, r2
 80053cc:	e7ba      	b.n	8005344 <_printf_i+0x150>
 80053ce:	680b      	ldr	r3, [r1, #0]
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	600a      	str	r2, [r1, #0]
 80053d4:	681e      	ldr	r6, [r3, #0]
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	2100      	movs	r1, #0
 80053da:	4630      	mov	r0, r6
 80053dc:	f7fa fed8 	bl	8000190 <memchr>
 80053e0:	b108      	cbz	r0, 80053e6 <_printf_i+0x1f2>
 80053e2:	1b80      	subs	r0, r0, r6
 80053e4:	6060      	str	r0, [r4, #4]
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	e7a8      	b.n	8005344 <_printf_i+0x150>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0ab      	beq.n	8005358 <_printf_i+0x164>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	079b      	lsls	r3, r3, #30
 8005404:	d413      	bmi.n	800542e <_printf_i+0x23a>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e7a4      	b.n	800535c <_printf_i+0x168>
 8005412:	2301      	movs	r3, #1
 8005414:	4632      	mov	r2, r6
 8005416:	4649      	mov	r1, r9
 8005418:	4640      	mov	r0, r8
 800541a:	47d0      	blx	sl
 800541c:	3001      	adds	r0, #1
 800541e:	d09b      	beq.n	8005358 <_printf_i+0x164>
 8005420:	3501      	adds	r5, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	42ab      	cmp	r3, r5
 800542a:	dcf2      	bgt.n	8005412 <_printf_i+0x21e>
 800542c:	e7eb      	b.n	8005406 <_printf_i+0x212>
 800542e:	2500      	movs	r5, #0
 8005430:	f104 0619 	add.w	r6, r4, #25
 8005434:	e7f5      	b.n	8005422 <_printf_i+0x22e>
 8005436:	bf00      	nop
 8005438:	08007bc6 	.word	0x08007bc6
 800543c:	08007bd7 	.word	0x08007bd7

08005440 <quorem>:
 8005440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	6903      	ldr	r3, [r0, #16]
 8005446:	690c      	ldr	r4, [r1, #16]
 8005448:	42a3      	cmp	r3, r4
 800544a:	4607      	mov	r7, r0
 800544c:	f2c0 8081 	blt.w	8005552 <quorem+0x112>
 8005450:	3c01      	subs	r4, #1
 8005452:	f101 0814 	add.w	r8, r1, #20
 8005456:	f100 0514 	add.w	r5, r0, #20
 800545a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005468:	3301      	adds	r3, #1
 800546a:	429a      	cmp	r2, r3
 800546c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005474:	fbb2 f6f3 	udiv	r6, r2, r3
 8005478:	d331      	bcc.n	80054de <quorem+0x9e>
 800547a:	f04f 0e00 	mov.w	lr, #0
 800547e:	4640      	mov	r0, r8
 8005480:	46ac      	mov	ip, r5
 8005482:	46f2      	mov	sl, lr
 8005484:	f850 2b04 	ldr.w	r2, [r0], #4
 8005488:	b293      	uxth	r3, r2
 800548a:	fb06 e303 	mla	r3, r6, r3, lr
 800548e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005492:	b29b      	uxth	r3, r3
 8005494:	ebaa 0303 	sub.w	r3, sl, r3
 8005498:	0c12      	lsrs	r2, r2, #16
 800549a:	f8dc a000 	ldr.w	sl, [ip]
 800549e:	fb06 e202 	mla	r2, r6, r2, lr
 80054a2:	fa13 f38a 	uxtah	r3, r3, sl
 80054a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054aa:	fa1f fa82 	uxth.w	sl, r2
 80054ae:	f8dc 2000 	ldr.w	r2, [ip]
 80054b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80054b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054c0:	4581      	cmp	r9, r0
 80054c2:	f84c 3b04 	str.w	r3, [ip], #4
 80054c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054ca:	d2db      	bcs.n	8005484 <quorem+0x44>
 80054cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80054d0:	b92b      	cbnz	r3, 80054de <quorem+0x9e>
 80054d2:	9b01      	ldr	r3, [sp, #4]
 80054d4:	3b04      	subs	r3, #4
 80054d6:	429d      	cmp	r5, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	d32e      	bcc.n	800553a <quorem+0xfa>
 80054dc:	613c      	str	r4, [r7, #16]
 80054de:	4638      	mov	r0, r7
 80054e0:	f001 f9b8 	bl	8006854 <__mcmp>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	db24      	blt.n	8005532 <quorem+0xf2>
 80054e8:	3601      	adds	r6, #1
 80054ea:	4628      	mov	r0, r5
 80054ec:	f04f 0c00 	mov.w	ip, #0
 80054f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80054f4:	f8d0 e000 	ldr.w	lr, [r0]
 80054f8:	b293      	uxth	r3, r2
 80054fa:	ebac 0303 	sub.w	r3, ip, r3
 80054fe:	0c12      	lsrs	r2, r2, #16
 8005500:	fa13 f38e 	uxtah	r3, r3, lr
 8005504:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800550c:	b29b      	uxth	r3, r3
 800550e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005512:	45c1      	cmp	r9, r8
 8005514:	f840 3b04 	str.w	r3, [r0], #4
 8005518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800551c:	d2e8      	bcs.n	80054f0 <quorem+0xb0>
 800551e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005526:	b922      	cbnz	r2, 8005532 <quorem+0xf2>
 8005528:	3b04      	subs	r3, #4
 800552a:	429d      	cmp	r5, r3
 800552c:	461a      	mov	r2, r3
 800552e:	d30a      	bcc.n	8005546 <quorem+0x106>
 8005530:	613c      	str	r4, [r7, #16]
 8005532:	4630      	mov	r0, r6
 8005534:	b003      	add	sp, #12
 8005536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	3b04      	subs	r3, #4
 800553e:	2a00      	cmp	r2, #0
 8005540:	d1cc      	bne.n	80054dc <quorem+0x9c>
 8005542:	3c01      	subs	r4, #1
 8005544:	e7c7      	b.n	80054d6 <quorem+0x96>
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	3b04      	subs	r3, #4
 800554a:	2a00      	cmp	r2, #0
 800554c:	d1f0      	bne.n	8005530 <quorem+0xf0>
 800554e:	3c01      	subs	r4, #1
 8005550:	e7eb      	b.n	800552a <quorem+0xea>
 8005552:	2000      	movs	r0, #0
 8005554:	e7ee      	b.n	8005534 <quorem+0xf4>
	...

08005558 <_dtoa_r>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800555e:	b099      	sub	sp, #100	; 0x64
 8005560:	4616      	mov	r6, r2
 8005562:	461f      	mov	r7, r3
 8005564:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005568:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800556c:	4605      	mov	r5, r0
 800556e:	b974      	cbnz	r4, 800558e <_dtoa_r+0x36>
 8005570:	2010      	movs	r0, #16
 8005572:	f000 fedd 	bl	8006330 <malloc>
 8005576:	4602      	mov	r2, r0
 8005578:	6268      	str	r0, [r5, #36]	; 0x24
 800557a:	b920      	cbnz	r0, 8005586 <_dtoa_r+0x2e>
 800557c:	4ba8      	ldr	r3, [pc, #672]	; (8005820 <_dtoa_r+0x2c8>)
 800557e:	21ea      	movs	r1, #234	; 0xea
 8005580:	48a8      	ldr	r0, [pc, #672]	; (8005824 <_dtoa_r+0x2cc>)
 8005582:	f001 fc45 	bl	8006e10 <__assert_func>
 8005586:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800558a:	6004      	str	r4, [r0, #0]
 800558c:	60c4      	str	r4, [r0, #12]
 800558e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005590:	6819      	ldr	r1, [r3, #0]
 8005592:	b151      	cbz	r1, 80055aa <_dtoa_r+0x52>
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	604a      	str	r2, [r1, #4]
 8005598:	2301      	movs	r3, #1
 800559a:	4093      	lsls	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 ff1c 	bl	80063dc <_Bfree>
 80055a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	1e3b      	subs	r3, r7, #0
 80055ac:	bfb9      	ittee	lt
 80055ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	9305      	strlt	r3, [sp, #20]
 80055b4:	2300      	movge	r3, #0
 80055b6:	f8c8 3000 	strge.w	r3, [r8]
 80055ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80055be:	4b9a      	ldr	r3, [pc, #616]	; (8005828 <_dtoa_r+0x2d0>)
 80055c0:	bfbc      	itt	lt
 80055c2:	2201      	movlt	r2, #1
 80055c4:	f8c8 2000 	strlt.w	r2, [r8]
 80055c8:	ea33 0309 	bics.w	r3, r3, r9
 80055cc:	d119      	bne.n	8005602 <_dtoa_r+0xaa>
 80055ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055da:	4333      	orrs	r3, r6
 80055dc:	f000 8581 	beq.w	80060e2 <_dtoa_r+0xb8a>
 80055e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055e2:	b953      	cbnz	r3, 80055fa <_dtoa_r+0xa2>
 80055e4:	4b91      	ldr	r3, [pc, #580]	; (800582c <_dtoa_r+0x2d4>)
 80055e6:	e022      	b.n	800562e <_dtoa_r+0xd6>
 80055e8:	4b91      	ldr	r3, [pc, #580]	; (8005830 <_dtoa_r+0x2d8>)
 80055ea:	9308      	str	r3, [sp, #32]
 80055ec:	3308      	adds	r3, #8
 80055ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	9808      	ldr	r0, [sp, #32]
 80055f4:	b019      	add	sp, #100	; 0x64
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	4b8c      	ldr	r3, [pc, #560]	; (800582c <_dtoa_r+0x2d4>)
 80055fc:	9308      	str	r3, [sp, #32]
 80055fe:	3303      	adds	r3, #3
 8005600:	e7f5      	b.n	80055ee <_dtoa_r+0x96>
 8005602:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005606:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800560a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	f7fb fa31 	bl	8000a78 <__aeabi_dcmpeq>
 8005616:	4680      	mov	r8, r0
 8005618:	b158      	cbz	r0, 8005632 <_dtoa_r+0xda>
 800561a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800561c:	2301      	movs	r3, #1
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 855a 	beq.w	80060dc <_dtoa_r+0xb84>
 8005628:	4882      	ldr	r0, [pc, #520]	; (8005834 <_dtoa_r+0x2dc>)
 800562a:	6018      	str	r0, [r3, #0]
 800562c:	1e43      	subs	r3, r0, #1
 800562e:	9308      	str	r3, [sp, #32]
 8005630:	e7df      	b.n	80055f2 <_dtoa_r+0x9a>
 8005632:	ab16      	add	r3, sp, #88	; 0x58
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	ab17      	add	r3, sp, #92	; 0x5c
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4628      	mov	r0, r5
 800563c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005640:	f001 f9ae 	bl	80069a0 <__d2b>
 8005644:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005648:	4682      	mov	sl, r0
 800564a:	2c00      	cmp	r4, #0
 800564c:	d07e      	beq.n	800574c <_dtoa_r+0x1f4>
 800564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005650:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800565c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005660:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005664:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005668:	4b73      	ldr	r3, [pc, #460]	; (8005838 <_dtoa_r+0x2e0>)
 800566a:	2200      	movs	r2, #0
 800566c:	f7fa fde4 	bl	8000238 <__aeabi_dsub>
 8005670:	a365      	add	r3, pc, #404	; (adr r3, 8005808 <_dtoa_r+0x2b0>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa ff97 	bl	80005a8 <__aeabi_dmul>
 800567a:	a365      	add	r3, pc, #404	; (adr r3, 8005810 <_dtoa_r+0x2b8>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fddc 	bl	800023c <__adddf3>
 8005684:	4606      	mov	r6, r0
 8005686:	4620      	mov	r0, r4
 8005688:	460f      	mov	r7, r1
 800568a:	f7fa ff23 	bl	80004d4 <__aeabi_i2d>
 800568e:	a362      	add	r3, pc, #392	; (adr r3, 8005818 <_dtoa_r+0x2c0>)
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fa ff88 	bl	80005a8 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4630      	mov	r0, r6
 800569e:	4639      	mov	r1, r7
 80056a0:	f7fa fdcc 	bl	800023c <__adddf3>
 80056a4:	4606      	mov	r6, r0
 80056a6:	460f      	mov	r7, r1
 80056a8:	f7fb fa2e 	bl	8000b08 <__aeabi_d2iz>
 80056ac:	2200      	movs	r2, #0
 80056ae:	4681      	mov	r9, r0
 80056b0:	2300      	movs	r3, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	f7fb f9e9 	bl	8000a8c <__aeabi_dcmplt>
 80056ba:	b148      	cbz	r0, 80056d0 <_dtoa_r+0x178>
 80056bc:	4648      	mov	r0, r9
 80056be:	f7fa ff09 	bl	80004d4 <__aeabi_i2d>
 80056c2:	4632      	mov	r2, r6
 80056c4:	463b      	mov	r3, r7
 80056c6:	f7fb f9d7 	bl	8000a78 <__aeabi_dcmpeq>
 80056ca:	b908      	cbnz	r0, 80056d0 <_dtoa_r+0x178>
 80056cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80056d0:	f1b9 0f16 	cmp.w	r9, #22
 80056d4:	d857      	bhi.n	8005786 <_dtoa_r+0x22e>
 80056d6:	4b59      	ldr	r3, [pc, #356]	; (800583c <_dtoa_r+0x2e4>)
 80056d8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056e4:	f7fb f9d2 	bl	8000a8c <__aeabi_dcmplt>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d04e      	beq.n	800578a <_dtoa_r+0x232>
 80056ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80056f0:	2300      	movs	r3, #0
 80056f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80056f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056f6:	1b1c      	subs	r4, r3, r4
 80056f8:	1e63      	subs	r3, r4, #1
 80056fa:	9309      	str	r3, [sp, #36]	; 0x24
 80056fc:	bf45      	ittet	mi
 80056fe:	f1c4 0301 	rsbmi	r3, r4, #1
 8005702:	9306      	strmi	r3, [sp, #24]
 8005704:	2300      	movpl	r3, #0
 8005706:	2300      	movmi	r3, #0
 8005708:	bf4c      	ite	mi
 800570a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800570c:	9306      	strpl	r3, [sp, #24]
 800570e:	f1b9 0f00 	cmp.w	r9, #0
 8005712:	db3c      	blt.n	800578e <_dtoa_r+0x236>
 8005714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005716:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800571a:	444b      	add	r3, r9
 800571c:	9309      	str	r3, [sp, #36]	; 0x24
 800571e:	2300      	movs	r3, #0
 8005720:	930a      	str	r3, [sp, #40]	; 0x28
 8005722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005724:	2b09      	cmp	r3, #9
 8005726:	f200 808d 	bhi.w	8005844 <_dtoa_r+0x2ec>
 800572a:	2b05      	cmp	r3, #5
 800572c:	bfc4      	itt	gt
 800572e:	3b04      	subgt	r3, #4
 8005730:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005734:	f1a3 0302 	sub.w	r3, r3, #2
 8005738:	bfcc      	ite	gt
 800573a:	2400      	movgt	r4, #0
 800573c:	2401      	movle	r4, #1
 800573e:	2b03      	cmp	r3, #3
 8005740:	f200 808c 	bhi.w	800585c <_dtoa_r+0x304>
 8005744:	e8df f003 	tbb	[pc, r3]
 8005748:	5b4d4f2d 	.word	0x5b4d4f2d
 800574c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005750:	441c      	add	r4, r3
 8005752:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005756:	2b20      	cmp	r3, #32
 8005758:	bfc3      	ittte	gt
 800575a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800575e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005762:	fa09 f303 	lslgt.w	r3, r9, r3
 8005766:	f1c3 0320 	rsble	r3, r3, #32
 800576a:	bfc6      	itte	gt
 800576c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005770:	4318      	orrgt	r0, r3
 8005772:	fa06 f003 	lslle.w	r0, r6, r3
 8005776:	f7fa fe9d 	bl	80004b4 <__aeabi_ui2d>
 800577a:	2301      	movs	r3, #1
 800577c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005780:	3c01      	subs	r4, #1
 8005782:	9313      	str	r3, [sp, #76]	; 0x4c
 8005784:	e770      	b.n	8005668 <_dtoa_r+0x110>
 8005786:	2301      	movs	r3, #1
 8005788:	e7b3      	b.n	80056f2 <_dtoa_r+0x19a>
 800578a:	900f      	str	r0, [sp, #60]	; 0x3c
 800578c:	e7b2      	b.n	80056f4 <_dtoa_r+0x19c>
 800578e:	9b06      	ldr	r3, [sp, #24]
 8005790:	eba3 0309 	sub.w	r3, r3, r9
 8005794:	9306      	str	r3, [sp, #24]
 8005796:	f1c9 0300 	rsb	r3, r9, #0
 800579a:	930a      	str	r3, [sp, #40]	; 0x28
 800579c:	2300      	movs	r3, #0
 800579e:	930e      	str	r3, [sp, #56]	; 0x38
 80057a0:	e7bf      	b.n	8005722 <_dtoa_r+0x1ca>
 80057a2:	2300      	movs	r3, #0
 80057a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dc5a      	bgt.n	8005862 <_dtoa_r+0x30a>
 80057ac:	f04f 0b01 	mov.w	fp, #1
 80057b0:	f8cd b008 	str.w	fp, [sp, #8]
 80057b4:	465b      	mov	r3, fp
 80057b6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80057ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80057bc:	2200      	movs	r2, #0
 80057be:	6042      	str	r2, [r0, #4]
 80057c0:	2204      	movs	r2, #4
 80057c2:	f102 0614 	add.w	r6, r2, #20
 80057c6:	429e      	cmp	r6, r3
 80057c8:	6841      	ldr	r1, [r0, #4]
 80057ca:	d950      	bls.n	800586e <_dtoa_r+0x316>
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 fdc5 	bl	800635c <_Balloc>
 80057d2:	9008      	str	r0, [sp, #32]
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d14e      	bne.n	8005876 <_dtoa_r+0x31e>
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <_dtoa_r+0x2e8>)
 80057da:	4602      	mov	r2, r0
 80057dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80057e0:	e6ce      	b.n	8005580 <_dtoa_r+0x28>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e7de      	b.n	80057a4 <_dtoa_r+0x24c>
 80057e6:	2300      	movs	r3, #0
 80057e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057ec:	eb09 0b03 	add.w	fp, r9, r3
 80057f0:	f10b 0301 	add.w	r3, fp, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	bfb8      	it	lt
 80057fa:	2301      	movlt	r3, #1
 80057fc:	e7dd      	b.n	80057ba <_dtoa_r+0x262>
 80057fe:	2301      	movs	r3, #1
 8005800:	e7f2      	b.n	80057e8 <_dtoa_r+0x290>
 8005802:	bf00      	nop
 8005804:	f3af 8000 	nop.w
 8005808:	636f4361 	.word	0x636f4361
 800580c:	3fd287a7 	.word	0x3fd287a7
 8005810:	8b60c8b3 	.word	0x8b60c8b3
 8005814:	3fc68a28 	.word	0x3fc68a28
 8005818:	509f79fb 	.word	0x509f79fb
 800581c:	3fd34413 	.word	0x3fd34413
 8005820:	08007bf5 	.word	0x08007bf5
 8005824:	08007c0c 	.word	0x08007c0c
 8005828:	7ff00000 	.word	0x7ff00000
 800582c:	08007bf1 	.word	0x08007bf1
 8005830:	08007be8 	.word	0x08007be8
 8005834:	08007bc5 	.word	0x08007bc5
 8005838:	3ff80000 	.word	0x3ff80000
 800583c:	08007d68 	.word	0x08007d68
 8005840:	08007c6b 	.word	0x08007c6b
 8005844:	2401      	movs	r4, #1
 8005846:	2300      	movs	r3, #0
 8005848:	9322      	str	r3, [sp, #136]	; 0x88
 800584a:	940b      	str	r4, [sp, #44]	; 0x2c
 800584c:	f04f 3bff 	mov.w	fp, #4294967295
 8005850:	2200      	movs	r2, #0
 8005852:	f8cd b008 	str.w	fp, [sp, #8]
 8005856:	2312      	movs	r3, #18
 8005858:	9223      	str	r2, [sp, #140]	; 0x8c
 800585a:	e7ae      	b.n	80057ba <_dtoa_r+0x262>
 800585c:	2301      	movs	r3, #1
 800585e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005860:	e7f4      	b.n	800584c <_dtoa_r+0x2f4>
 8005862:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005866:	f8cd b008 	str.w	fp, [sp, #8]
 800586a:	465b      	mov	r3, fp
 800586c:	e7a5      	b.n	80057ba <_dtoa_r+0x262>
 800586e:	3101      	adds	r1, #1
 8005870:	6041      	str	r1, [r0, #4]
 8005872:	0052      	lsls	r2, r2, #1
 8005874:	e7a5      	b.n	80057c2 <_dtoa_r+0x26a>
 8005876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005878:	9a08      	ldr	r2, [sp, #32]
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	9b02      	ldr	r3, [sp, #8]
 800587e:	2b0e      	cmp	r3, #14
 8005880:	f200 80a8 	bhi.w	80059d4 <_dtoa_r+0x47c>
 8005884:	2c00      	cmp	r4, #0
 8005886:	f000 80a5 	beq.w	80059d4 <_dtoa_r+0x47c>
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	dd34      	ble.n	80058fa <_dtoa_r+0x3a2>
 8005890:	4a9a      	ldr	r2, [pc, #616]	; (8005afc <_dtoa_r+0x5a4>)
 8005892:	f009 030f 	and.w	r3, r9, #15
 8005896:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800589a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800589e:	f419 7f80 	tst.w	r9, #256	; 0x100
 80058a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80058a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80058aa:	d016      	beq.n	80058da <_dtoa_r+0x382>
 80058ac:	4b94      	ldr	r3, [pc, #592]	; (8005b00 <_dtoa_r+0x5a8>)
 80058ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058b6:	f7fa ffa1 	bl	80007fc <__aeabi_ddiv>
 80058ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058be:	f004 040f 	and.w	r4, r4, #15
 80058c2:	2703      	movs	r7, #3
 80058c4:	4e8e      	ldr	r6, [pc, #568]	; (8005b00 <_dtoa_r+0x5a8>)
 80058c6:	b954      	cbnz	r4, 80058de <_dtoa_r+0x386>
 80058c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d0:	f7fa ff94 	bl	80007fc <__aeabi_ddiv>
 80058d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058d8:	e029      	b.n	800592e <_dtoa_r+0x3d6>
 80058da:	2702      	movs	r7, #2
 80058dc:	e7f2      	b.n	80058c4 <_dtoa_r+0x36c>
 80058de:	07e1      	lsls	r1, r4, #31
 80058e0:	d508      	bpl.n	80058f4 <_dtoa_r+0x39c>
 80058e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058ea:	f7fa fe5d 	bl	80005a8 <__aeabi_dmul>
 80058ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058f2:	3701      	adds	r7, #1
 80058f4:	1064      	asrs	r4, r4, #1
 80058f6:	3608      	adds	r6, #8
 80058f8:	e7e5      	b.n	80058c6 <_dtoa_r+0x36e>
 80058fa:	f000 80a5 	beq.w	8005a48 <_dtoa_r+0x4f0>
 80058fe:	f1c9 0400 	rsb	r4, r9, #0
 8005902:	4b7e      	ldr	r3, [pc, #504]	; (8005afc <_dtoa_r+0x5a4>)
 8005904:	4e7e      	ldr	r6, [pc, #504]	; (8005b00 <_dtoa_r+0x5a8>)
 8005906:	f004 020f 	and.w	r2, r4, #15
 800590a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005916:	f7fa fe47 	bl	80005a8 <__aeabi_dmul>
 800591a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800591e:	1124      	asrs	r4, r4, #4
 8005920:	2300      	movs	r3, #0
 8005922:	2702      	movs	r7, #2
 8005924:	2c00      	cmp	r4, #0
 8005926:	f040 8084 	bne.w	8005a32 <_dtoa_r+0x4da>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1d2      	bne.n	80058d4 <_dtoa_r+0x37c>
 800592e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 808b 	beq.w	8005a4c <_dtoa_r+0x4f4>
 8005936:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800593a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800593e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005942:	4b70      	ldr	r3, [pc, #448]	; (8005b04 <_dtoa_r+0x5ac>)
 8005944:	2200      	movs	r2, #0
 8005946:	f7fb f8a1 	bl	8000a8c <__aeabi_dcmplt>
 800594a:	2800      	cmp	r0, #0
 800594c:	d07e      	beq.n	8005a4c <_dtoa_r+0x4f4>
 800594e:	9b02      	ldr	r3, [sp, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d07b      	beq.n	8005a4c <_dtoa_r+0x4f4>
 8005954:	f1bb 0f00 	cmp.w	fp, #0
 8005958:	dd38      	ble.n	80059cc <_dtoa_r+0x474>
 800595a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800595e:	4b6a      	ldr	r3, [pc, #424]	; (8005b08 <_dtoa_r+0x5b0>)
 8005960:	2200      	movs	r2, #0
 8005962:	f7fa fe21 	bl	80005a8 <__aeabi_dmul>
 8005966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800596a:	f109 38ff 	add.w	r8, r9, #4294967295
 800596e:	3701      	adds	r7, #1
 8005970:	465c      	mov	r4, fp
 8005972:	4638      	mov	r0, r7
 8005974:	f7fa fdae 	bl	80004d4 <__aeabi_i2d>
 8005978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800597c:	f7fa fe14 	bl	80005a8 <__aeabi_dmul>
 8005980:	4b62      	ldr	r3, [pc, #392]	; (8005b0c <_dtoa_r+0x5b4>)
 8005982:	2200      	movs	r2, #0
 8005984:	f7fa fc5a 	bl	800023c <__adddf3>
 8005988:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800598c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005990:	9611      	str	r6, [sp, #68]	; 0x44
 8005992:	2c00      	cmp	r4, #0
 8005994:	d15d      	bne.n	8005a52 <_dtoa_r+0x4fa>
 8005996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800599a:	4b5d      	ldr	r3, [pc, #372]	; (8005b10 <_dtoa_r+0x5b8>)
 800599c:	2200      	movs	r2, #0
 800599e:	f7fa fc4b 	bl	8000238 <__aeabi_dsub>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059ac:	4633      	mov	r3, r6
 80059ae:	f7fb f88b 	bl	8000ac8 <__aeabi_dcmpgt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f040 829e 	bne.w	8005ef4 <_dtoa_r+0x99c>
 80059b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059c2:	f7fb f863 	bl	8000a8c <__aeabi_dcmplt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f040 8292 	bne.w	8005ef0 <_dtoa_r+0x998>
 80059cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80059d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f2c0 8153 	blt.w	8005c82 <_dtoa_r+0x72a>
 80059dc:	f1b9 0f0e 	cmp.w	r9, #14
 80059e0:	f300 814f 	bgt.w	8005c82 <_dtoa_r+0x72a>
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <_dtoa_r+0x5a4>)
 80059e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80059ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f280 80db 	bge.w	8005bb0 <_dtoa_r+0x658>
 80059fa:	9b02      	ldr	r3, [sp, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f300 80d7 	bgt.w	8005bb0 <_dtoa_r+0x658>
 8005a02:	f040 8274 	bne.w	8005eee <_dtoa_r+0x996>
 8005a06:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <_dtoa_r+0x5b8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0e:	f7fa fdcb 	bl	80005a8 <__aeabi_dmul>
 8005a12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a16:	f7fb f84d 	bl	8000ab4 <__aeabi_dcmpge>
 8005a1a:	9c02      	ldr	r4, [sp, #8]
 8005a1c:	4626      	mov	r6, r4
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f040 824a 	bne.w	8005eb8 <_dtoa_r+0x960>
 8005a24:	9f08      	ldr	r7, [sp, #32]
 8005a26:	2331      	movs	r3, #49	; 0x31
 8005a28:	f807 3b01 	strb.w	r3, [r7], #1
 8005a2c:	f109 0901 	add.w	r9, r9, #1
 8005a30:	e246      	b.n	8005ec0 <_dtoa_r+0x968>
 8005a32:	07e2      	lsls	r2, r4, #31
 8005a34:	d505      	bpl.n	8005a42 <_dtoa_r+0x4ea>
 8005a36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a3a:	f7fa fdb5 	bl	80005a8 <__aeabi_dmul>
 8005a3e:	3701      	adds	r7, #1
 8005a40:	2301      	movs	r3, #1
 8005a42:	1064      	asrs	r4, r4, #1
 8005a44:	3608      	adds	r6, #8
 8005a46:	e76d      	b.n	8005924 <_dtoa_r+0x3cc>
 8005a48:	2702      	movs	r7, #2
 8005a4a:	e770      	b.n	800592e <_dtoa_r+0x3d6>
 8005a4c:	9c02      	ldr	r4, [sp, #8]
 8005a4e:	46c8      	mov	r8, r9
 8005a50:	e78f      	b.n	8005972 <_dtoa_r+0x41a>
 8005a52:	9908      	ldr	r1, [sp, #32]
 8005a54:	4b29      	ldr	r3, [pc, #164]	; (8005afc <_dtoa_r+0x5a4>)
 8005a56:	4421      	add	r1, r4
 8005a58:	9112      	str	r1, [sp, #72]	; 0x48
 8005a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d055      	beq.n	8005b18 <_dtoa_r+0x5c0>
 8005a6c:	4929      	ldr	r1, [pc, #164]	; (8005b14 <_dtoa_r+0x5bc>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f7fa fec4 	bl	80007fc <__aeabi_ddiv>
 8005a74:	463b      	mov	r3, r7
 8005a76:	4632      	mov	r2, r6
 8005a78:	f7fa fbde 	bl	8000238 <__aeabi_dsub>
 8005a7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a80:	9f08      	ldr	r7, [sp, #32]
 8005a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a86:	f7fb f83f 	bl	8000b08 <__aeabi_d2iz>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	f7fa fd22 	bl	80004d4 <__aeabi_i2d>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a98:	f7fa fbce 	bl	8000238 <__aeabi_dsub>
 8005a9c:	3430      	adds	r4, #48	; 0x30
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005aa6:	f807 4b01 	strb.w	r4, [r7], #1
 8005aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aae:	f7fa ffed 	bl	8000a8c <__aeabi_dcmplt>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d174      	bne.n	8005ba0 <_dtoa_r+0x648>
 8005ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aba:	4912      	ldr	r1, [pc, #72]	; (8005b04 <_dtoa_r+0x5ac>)
 8005abc:	2000      	movs	r0, #0
 8005abe:	f7fa fbbb 	bl	8000238 <__aeabi_dsub>
 8005ac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ac6:	f7fa ffe1 	bl	8000a8c <__aeabi_dcmplt>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	f040 80b6 	bne.w	8005c3c <_dtoa_r+0x6e4>
 8005ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ad2:	429f      	cmp	r7, r3
 8005ad4:	f43f af7a 	beq.w	80059cc <_dtoa_r+0x474>
 8005ad8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <_dtoa_r+0x5b0>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f7fa fd62 	bl	80005a8 <__aeabi_dmul>
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <_dtoa_r+0x5b0>)
 8005ae6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aea:	2200      	movs	r2, #0
 8005aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005af0:	f7fa fd5a 	bl	80005a8 <__aeabi_dmul>
 8005af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af8:	e7c3      	b.n	8005a82 <_dtoa_r+0x52a>
 8005afa:	bf00      	nop
 8005afc:	08007d68 	.word	0x08007d68
 8005b00:	08007d40 	.word	0x08007d40
 8005b04:	3ff00000 	.word	0x3ff00000
 8005b08:	40240000 	.word	0x40240000
 8005b0c:	401c0000 	.word	0x401c0000
 8005b10:	40140000 	.word	0x40140000
 8005b14:	3fe00000 	.word	0x3fe00000
 8005b18:	4630      	mov	r0, r6
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	f7fa fd44 	bl	80005a8 <__aeabi_dmul>
 8005b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b26:	9c08      	ldr	r4, [sp, #32]
 8005b28:	9314      	str	r3, [sp, #80]	; 0x50
 8005b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b2e:	f7fa ffeb 	bl	8000b08 <__aeabi_d2iz>
 8005b32:	9015      	str	r0, [sp, #84]	; 0x54
 8005b34:	f7fa fcce 	bl	80004d4 <__aeabi_i2d>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b40:	f7fa fb7a 	bl	8000238 <__aeabi_dsub>
 8005b44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b46:	3330      	adds	r3, #48	; 0x30
 8005b48:	f804 3b01 	strb.w	r3, [r4], #1
 8005b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	4606      	mov	r6, r0
 8005b52:	460f      	mov	r7, r1
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	d124      	bne.n	8005ba4 <_dtoa_r+0x64c>
 8005b5a:	4bb2      	ldr	r3, [pc, #712]	; (8005e24 <_dtoa_r+0x8cc>)
 8005b5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b60:	f7fa fb6c 	bl	800023c <__adddf3>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4639      	mov	r1, r7
 8005b6c:	f7fa ffac 	bl	8000ac8 <__aeabi_dcmpgt>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d162      	bne.n	8005c3a <_dtoa_r+0x6e2>
 8005b74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b78:	49aa      	ldr	r1, [pc, #680]	; (8005e24 <_dtoa_r+0x8cc>)
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f7fa fb5c 	bl	8000238 <__aeabi_dsub>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4630      	mov	r0, r6
 8005b86:	4639      	mov	r1, r7
 8005b88:	f7fa ff80 	bl	8000a8c <__aeabi_dcmplt>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	f43f af1d 	beq.w	80059cc <_dtoa_r+0x474>
 8005b92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b94:	1e7b      	subs	r3, r7, #1
 8005b96:	9314      	str	r3, [sp, #80]	; 0x50
 8005b98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005b9c:	2b30      	cmp	r3, #48	; 0x30
 8005b9e:	d0f8      	beq.n	8005b92 <_dtoa_r+0x63a>
 8005ba0:	46c1      	mov	r9, r8
 8005ba2:	e03a      	b.n	8005c1a <_dtoa_r+0x6c2>
 8005ba4:	4ba0      	ldr	r3, [pc, #640]	; (8005e28 <_dtoa_r+0x8d0>)
 8005ba6:	f7fa fcff 	bl	80005a8 <__aeabi_dmul>
 8005baa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bae:	e7bc      	b.n	8005b2a <_dtoa_r+0x5d2>
 8005bb0:	9f08      	ldr	r7, [sp, #32]
 8005bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bba:	f7fa fe1f 	bl	80007fc <__aeabi_ddiv>
 8005bbe:	f7fa ffa3 	bl	8000b08 <__aeabi_d2iz>
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	f7fa fc86 	bl	80004d4 <__aeabi_i2d>
 8005bc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bcc:	f7fa fcec 	bl	80005a8 <__aeabi_dmul>
 8005bd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bdc:	f7fa fb2c 	bl	8000238 <__aeabi_dsub>
 8005be0:	f807 6b01 	strb.w	r6, [r7], #1
 8005be4:	9e08      	ldr	r6, [sp, #32]
 8005be6:	9b02      	ldr	r3, [sp, #8]
 8005be8:	1bbe      	subs	r6, r7, r6
 8005bea:	42b3      	cmp	r3, r6
 8005bec:	d13a      	bne.n	8005c64 <_dtoa_r+0x70c>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	f7fa fb23 	bl	800023c <__adddf3>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c02:	f7fa ff61 	bl	8000ac8 <__aeabi_dcmpgt>
 8005c06:	bb58      	cbnz	r0, 8005c60 <_dtoa_r+0x708>
 8005c08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c10:	f7fa ff32 	bl	8000a78 <__aeabi_dcmpeq>
 8005c14:	b108      	cbz	r0, 8005c1a <_dtoa_r+0x6c2>
 8005c16:	07e1      	lsls	r1, r4, #31
 8005c18:	d422      	bmi.n	8005c60 <_dtoa_r+0x708>
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	f000 fbdd 	bl	80063dc <_Bfree>
 8005c22:	2300      	movs	r3, #0
 8005c24:	703b      	strb	r3, [r7, #0]
 8005c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c28:	f109 0001 	add.w	r0, r9, #1
 8005c2c:	6018      	str	r0, [r3, #0]
 8005c2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f43f acde 	beq.w	80055f2 <_dtoa_r+0x9a>
 8005c36:	601f      	str	r7, [r3, #0]
 8005c38:	e4db      	b.n	80055f2 <_dtoa_r+0x9a>
 8005c3a:	4627      	mov	r7, r4
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	461f      	mov	r7, r3
 8005c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c44:	2a39      	cmp	r2, #57	; 0x39
 8005c46:	d107      	bne.n	8005c58 <_dtoa_r+0x700>
 8005c48:	9a08      	ldr	r2, [sp, #32]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d1f7      	bne.n	8005c3e <_dtoa_r+0x6e6>
 8005c4e:	9908      	ldr	r1, [sp, #32]
 8005c50:	2230      	movs	r2, #48	; 0x30
 8005c52:	f108 0801 	add.w	r8, r8, #1
 8005c56:	700a      	strb	r2, [r1, #0]
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	3201      	adds	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e79f      	b.n	8005ba0 <_dtoa_r+0x648>
 8005c60:	46c8      	mov	r8, r9
 8005c62:	e7eb      	b.n	8005c3c <_dtoa_r+0x6e4>
 8005c64:	4b70      	ldr	r3, [pc, #448]	; (8005e28 <_dtoa_r+0x8d0>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	f7fa fc9e 	bl	80005a8 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2300      	movs	r3, #0
 8005c78:	f7fa fefe 	bl	8000a78 <__aeabi_dcmpeq>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d098      	beq.n	8005bb2 <_dtoa_r+0x65a>
 8005c80:	e7cb      	b.n	8005c1a <_dtoa_r+0x6c2>
 8005c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	f000 80d1 	beq.w	8005e2c <_dtoa_r+0x8d4>
 8005c8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c8c:	2a01      	cmp	r2, #1
 8005c8e:	f300 80af 	bgt.w	8005df0 <_dtoa_r+0x898>
 8005c92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	f000 80a7 	beq.w	8005de8 <_dtoa_r+0x890>
 8005c9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ca0:	9f06      	ldr	r7, [sp, #24]
 8005ca2:	9a06      	ldr	r2, [sp, #24]
 8005ca4:	441a      	add	r2, r3
 8005ca6:	9206      	str	r2, [sp, #24]
 8005ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005caa:	2101      	movs	r1, #1
 8005cac:	441a      	add	r2, r3
 8005cae:	4628      	mov	r0, r5
 8005cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8005cb2:	f000 fc4d 	bl	8006550 <__i2b>
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	2f00      	cmp	r7, #0
 8005cba:	dd0c      	ble.n	8005cd6 <_dtoa_r+0x77e>
 8005cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dd09      	ble.n	8005cd6 <_dtoa_r+0x77e>
 8005cc2:	42bb      	cmp	r3, r7
 8005cc4:	9a06      	ldr	r2, [sp, #24]
 8005cc6:	bfa8      	it	ge
 8005cc8:	463b      	movge	r3, r7
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	9206      	str	r2, [sp, #24]
 8005cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd0:	1aff      	subs	r7, r7, r3
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd8:	b1f3      	cbz	r3, 8005d18 <_dtoa_r+0x7c0>
 8005cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a9 	beq.w	8005e34 <_dtoa_r+0x8dc>
 8005ce2:	2c00      	cmp	r4, #0
 8005ce4:	dd10      	ble.n	8005d08 <_dtoa_r+0x7b0>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4622      	mov	r2, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 fcec 	bl	80066c8 <__pow5mult>
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fc40 	bl	800657c <__multiply>
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	4680      	mov	r8, r0
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fb6b 	bl	80063dc <_Bfree>
 8005d06:	46c2      	mov	sl, r8
 8005d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d0a:	1b1a      	subs	r2, r3, r4
 8005d0c:	d004      	beq.n	8005d18 <_dtoa_r+0x7c0>
 8005d0e:	4651      	mov	r1, sl
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 fcd9 	bl	80066c8 <__pow5mult>
 8005d16:	4682      	mov	sl, r0
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fc18 	bl	8006550 <__i2b>
 8005d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	4604      	mov	r4, r0
 8005d26:	f340 8087 	ble.w	8005e38 <_dtoa_r+0x8e0>
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 fcca 	bl	80066c8 <__pow5mult>
 8005d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	4604      	mov	r4, r0
 8005d3a:	f340 8080 	ble.w	8005e3e <_dtoa_r+0x8e6>
 8005d3e:	f04f 0800 	mov.w	r8, #0
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d48:	6918      	ldr	r0, [r3, #16]
 8005d4a:	f000 fbb3 	bl	80064b4 <__hi0bits>
 8005d4e:	f1c0 0020 	rsb	r0, r0, #32
 8005d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d54:	4418      	add	r0, r3
 8005d56:	f010 001f 	ands.w	r0, r0, #31
 8005d5a:	f000 8092 	beq.w	8005e82 <_dtoa_r+0x92a>
 8005d5e:	f1c0 0320 	rsb	r3, r0, #32
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	f340 808a 	ble.w	8005e7c <_dtoa_r+0x924>
 8005d68:	f1c0 001c 	rsb	r0, r0, #28
 8005d6c:	9b06      	ldr	r3, [sp, #24]
 8005d6e:	4403      	add	r3, r0
 8005d70:	9306      	str	r3, [sp, #24]
 8005d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d74:	4403      	add	r3, r0
 8005d76:	4407      	add	r7, r0
 8005d78:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dd05      	ble.n	8005d8c <_dtoa_r+0x834>
 8005d80:	4651      	mov	r1, sl
 8005d82:	461a      	mov	r2, r3
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 fcf9 	bl	800677c <__lshift>
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	dd05      	ble.n	8005d9e <_dtoa_r+0x846>
 8005d92:	4621      	mov	r1, r4
 8005d94:	461a      	mov	r2, r3
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fcf0 	bl	800677c <__lshift>
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d070      	beq.n	8005e86 <_dtoa_r+0x92e>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4650      	mov	r0, sl
 8005da8:	f000 fd54 	bl	8006854 <__mcmp>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	da6a      	bge.n	8005e86 <_dtoa_r+0x92e>
 8005db0:	2300      	movs	r3, #0
 8005db2:	4651      	mov	r1, sl
 8005db4:	220a      	movs	r2, #10
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 fb32 	bl	8006420 <__multadd>
 8005dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dbe:	f109 39ff 	add.w	r9, r9, #4294967295
 8005dc2:	4682      	mov	sl, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8193 	beq.w	80060f0 <_dtoa_r+0xb98>
 8005dca:	4631      	mov	r1, r6
 8005dcc:	2300      	movs	r3, #0
 8005dce:	220a      	movs	r2, #10
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 fb25 	bl	8006420 <__multadd>
 8005dd6:	f1bb 0f00 	cmp.w	fp, #0
 8005dda:	4606      	mov	r6, r0
 8005ddc:	f300 8093 	bgt.w	8005f06 <_dtoa_r+0x9ae>
 8005de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	dc57      	bgt.n	8005e96 <_dtoa_r+0x93e>
 8005de6:	e08e      	b.n	8005f06 <_dtoa_r+0x9ae>
 8005de8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dee:	e756      	b.n	8005c9e <_dtoa_r+0x746>
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	1e5c      	subs	r4, r3, #1
 8005df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	bfbf      	itttt	lt
 8005dfa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005dfc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005dfe:	1ae2      	sublt	r2, r4, r3
 8005e00:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e02:	bfb6      	itet	lt
 8005e04:	189b      	addlt	r3, r3, r2
 8005e06:	1b1c      	subge	r4, r3, r4
 8005e08:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e0a:	9b02      	ldr	r3, [sp, #8]
 8005e0c:	bfb8      	it	lt
 8005e0e:	2400      	movlt	r4, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bfb9      	ittee	lt
 8005e14:	9b06      	ldrlt	r3, [sp, #24]
 8005e16:	9a02      	ldrlt	r2, [sp, #8]
 8005e18:	9f06      	ldrge	r7, [sp, #24]
 8005e1a:	9b02      	ldrge	r3, [sp, #8]
 8005e1c:	bfbc      	itt	lt
 8005e1e:	1a9f      	sublt	r7, r3, r2
 8005e20:	2300      	movlt	r3, #0
 8005e22:	e73e      	b.n	8005ca2 <_dtoa_r+0x74a>
 8005e24:	3fe00000 	.word	0x3fe00000
 8005e28:	40240000 	.word	0x40240000
 8005e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e2e:	9f06      	ldr	r7, [sp, #24]
 8005e30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e32:	e741      	b.n	8005cb8 <_dtoa_r+0x760>
 8005e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e36:	e76a      	b.n	8005d0e <_dtoa_r+0x7b6>
 8005e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	dc19      	bgt.n	8005e72 <_dtoa_r+0x91a>
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	b9bb      	cbnz	r3, 8005e72 <_dtoa_r+0x91a>
 8005e42:	9b05      	ldr	r3, [sp, #20]
 8005e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e48:	b99b      	cbnz	r3, 8005e72 <_dtoa_r+0x91a>
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e50:	0d1b      	lsrs	r3, r3, #20
 8005e52:	051b      	lsls	r3, r3, #20
 8005e54:	b183      	cbz	r3, 8005e78 <_dtoa_r+0x920>
 8005e56:	9b06      	ldr	r3, [sp, #24]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	9306      	str	r3, [sp, #24]
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	3301      	adds	r3, #1
 8005e60:	9309      	str	r3, [sp, #36]	; 0x24
 8005e62:	f04f 0801 	mov.w	r8, #1
 8005e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f af6a 	bne.w	8005d42 <_dtoa_r+0x7ea>
 8005e6e:	2001      	movs	r0, #1
 8005e70:	e76f      	b.n	8005d52 <_dtoa_r+0x7fa>
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	e7f6      	b.n	8005e66 <_dtoa_r+0x90e>
 8005e78:	4698      	mov	r8, r3
 8005e7a:	e7f4      	b.n	8005e66 <_dtoa_r+0x90e>
 8005e7c:	f43f af7d 	beq.w	8005d7a <_dtoa_r+0x822>
 8005e80:	4618      	mov	r0, r3
 8005e82:	301c      	adds	r0, #28
 8005e84:	e772      	b.n	8005d6c <_dtoa_r+0x814>
 8005e86:	9b02      	ldr	r3, [sp, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dc36      	bgt.n	8005efa <_dtoa_r+0x9a2>
 8005e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	dd33      	ble.n	8005efa <_dtoa_r+0x9a2>
 8005e92:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005e96:	f1bb 0f00 	cmp.w	fp, #0
 8005e9a:	d10d      	bne.n	8005eb8 <_dtoa_r+0x960>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	465b      	mov	r3, fp
 8005ea0:	2205      	movs	r2, #5
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fabc 	bl	8006420 <__multadd>
 8005ea8:	4601      	mov	r1, r0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4650      	mov	r0, sl
 8005eae:	f000 fcd1 	bl	8006854 <__mcmp>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	f73f adb6 	bgt.w	8005a24 <_dtoa_r+0x4cc>
 8005eb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eba:	9f08      	ldr	r7, [sp, #32]
 8005ebc:	ea6f 0903 	mvn.w	r9, r3
 8005ec0:	f04f 0800 	mov.w	r8, #0
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fa88 	bl	80063dc <_Bfree>
 8005ecc:	2e00      	cmp	r6, #0
 8005ece:	f43f aea4 	beq.w	8005c1a <_dtoa_r+0x6c2>
 8005ed2:	f1b8 0f00 	cmp.w	r8, #0
 8005ed6:	d005      	beq.n	8005ee4 <_dtoa_r+0x98c>
 8005ed8:	45b0      	cmp	r8, r6
 8005eda:	d003      	beq.n	8005ee4 <_dtoa_r+0x98c>
 8005edc:	4641      	mov	r1, r8
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 fa7c 	bl	80063dc <_Bfree>
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 fa78 	bl	80063dc <_Bfree>
 8005eec:	e695      	b.n	8005c1a <_dtoa_r+0x6c2>
 8005eee:	2400      	movs	r4, #0
 8005ef0:	4626      	mov	r6, r4
 8005ef2:	e7e1      	b.n	8005eb8 <_dtoa_r+0x960>
 8005ef4:	46c1      	mov	r9, r8
 8005ef6:	4626      	mov	r6, r4
 8005ef8:	e594      	b.n	8005a24 <_dtoa_r+0x4cc>
 8005efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005efc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80fc 	beq.w	80060fe <_dtoa_r+0xba6>
 8005f06:	2f00      	cmp	r7, #0
 8005f08:	dd05      	ble.n	8005f16 <_dtoa_r+0x9be>
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	463a      	mov	r2, r7
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 fc34 	bl	800677c <__lshift>
 8005f14:	4606      	mov	r6, r0
 8005f16:	f1b8 0f00 	cmp.w	r8, #0
 8005f1a:	d05c      	beq.n	8005fd6 <_dtoa_r+0xa7e>
 8005f1c:	6871      	ldr	r1, [r6, #4]
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 fa1c 	bl	800635c <_Balloc>
 8005f24:	4607      	mov	r7, r0
 8005f26:	b928      	cbnz	r0, 8005f34 <_dtoa_r+0x9dc>
 8005f28:	4b7f      	ldr	r3, [pc, #508]	; (8006128 <_dtoa_r+0xbd0>)
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f30:	f7ff bb26 	b.w	8005580 <_dtoa_r+0x28>
 8005f34:	6932      	ldr	r2, [r6, #16]
 8005f36:	3202      	adds	r2, #2
 8005f38:	0092      	lsls	r2, r2, #2
 8005f3a:	f106 010c 	add.w	r1, r6, #12
 8005f3e:	300c      	adds	r0, #12
 8005f40:	f000 f9fe 	bl	8006340 <memcpy>
 8005f44:	2201      	movs	r2, #1
 8005f46:	4639      	mov	r1, r7
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 fc17 	bl	800677c <__lshift>
 8005f4e:	9b08      	ldr	r3, [sp, #32]
 8005f50:	3301      	adds	r3, #1
 8005f52:	9302      	str	r3, [sp, #8]
 8005f54:	9b08      	ldr	r3, [sp, #32]
 8005f56:	445b      	add	r3, fp
 8005f58:	930a      	str	r3, [sp, #40]	; 0x28
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	46b0      	mov	r8, r6
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	4606      	mov	r6, r0
 8005f66:	9b02      	ldr	r3, [sp, #8]
 8005f68:	4621      	mov	r1, r4
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005f70:	f7ff fa66 	bl	8005440 <quorem>
 8005f74:	4603      	mov	r3, r0
 8005f76:	3330      	adds	r3, #48	; 0x30
 8005f78:	9004      	str	r0, [sp, #16]
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f80:	f000 fc68 	bl	8006854 <__mcmp>
 8005f84:	4632      	mov	r2, r6
 8005f86:	9006      	str	r0, [sp, #24]
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 fc7e 	bl	800688c <__mdiff>
 8005f90:	68c2      	ldr	r2, [r0, #12]
 8005f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f94:	4607      	mov	r7, r0
 8005f96:	bb02      	cbnz	r2, 8005fda <_dtoa_r+0xa82>
 8005f98:	4601      	mov	r1, r0
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	f000 fc5a 	bl	8006854 <__mcmp>
 8005fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005fac:	f000 fa16 	bl	80063dc <_Bfree>
 8005fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fb4:	9f02      	ldr	r7, [sp, #8]
 8005fb6:	ea43 0102 	orr.w	r1, r3, r2
 8005fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc0:	d10d      	bne.n	8005fde <_dtoa_r+0xa86>
 8005fc2:	2b39      	cmp	r3, #57	; 0x39
 8005fc4:	d027      	beq.n	8006016 <_dtoa_r+0xabe>
 8005fc6:	9a06      	ldr	r2, [sp, #24]
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	dd01      	ble.n	8005fd0 <_dtoa_r+0xa78>
 8005fcc:	9b04      	ldr	r3, [sp, #16]
 8005fce:	3331      	adds	r3, #49	; 0x31
 8005fd0:	f88b 3000 	strb.w	r3, [fp]
 8005fd4:	e776      	b.n	8005ec4 <_dtoa_r+0x96c>
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	e7b9      	b.n	8005f4e <_dtoa_r+0x9f6>
 8005fda:	2201      	movs	r2, #1
 8005fdc:	e7e2      	b.n	8005fa4 <_dtoa_r+0xa4c>
 8005fde:	9906      	ldr	r1, [sp, #24]
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	db04      	blt.n	8005fee <_dtoa_r+0xa96>
 8005fe4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005fe6:	4301      	orrs	r1, r0
 8005fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fea:	4301      	orrs	r1, r0
 8005fec:	d120      	bne.n	8006030 <_dtoa_r+0xad8>
 8005fee:	2a00      	cmp	r2, #0
 8005ff0:	ddee      	ble.n	8005fd0 <_dtoa_r+0xa78>
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	9302      	str	r3, [sp, #8]
 8005ffa:	f000 fbbf 	bl	800677c <__lshift>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4682      	mov	sl, r0
 8006002:	f000 fc27 	bl	8006854 <__mcmp>
 8006006:	2800      	cmp	r0, #0
 8006008:	9b02      	ldr	r3, [sp, #8]
 800600a:	dc02      	bgt.n	8006012 <_dtoa_r+0xaba>
 800600c:	d1e0      	bne.n	8005fd0 <_dtoa_r+0xa78>
 800600e:	07da      	lsls	r2, r3, #31
 8006010:	d5de      	bpl.n	8005fd0 <_dtoa_r+0xa78>
 8006012:	2b39      	cmp	r3, #57	; 0x39
 8006014:	d1da      	bne.n	8005fcc <_dtoa_r+0xa74>
 8006016:	2339      	movs	r3, #57	; 0x39
 8006018:	f88b 3000 	strb.w	r3, [fp]
 800601c:	463b      	mov	r3, r7
 800601e:	461f      	mov	r7, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006026:	2a39      	cmp	r2, #57	; 0x39
 8006028:	d050      	beq.n	80060cc <_dtoa_r+0xb74>
 800602a:	3201      	adds	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e749      	b.n	8005ec4 <_dtoa_r+0x96c>
 8006030:	2a00      	cmp	r2, #0
 8006032:	dd03      	ble.n	800603c <_dtoa_r+0xae4>
 8006034:	2b39      	cmp	r3, #57	; 0x39
 8006036:	d0ee      	beq.n	8006016 <_dtoa_r+0xabe>
 8006038:	3301      	adds	r3, #1
 800603a:	e7c9      	b.n	8005fd0 <_dtoa_r+0xa78>
 800603c:	9a02      	ldr	r2, [sp, #8]
 800603e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006040:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006044:	428a      	cmp	r2, r1
 8006046:	d02a      	beq.n	800609e <_dtoa_r+0xb46>
 8006048:	4651      	mov	r1, sl
 800604a:	2300      	movs	r3, #0
 800604c:	220a      	movs	r2, #10
 800604e:	4628      	mov	r0, r5
 8006050:	f000 f9e6 	bl	8006420 <__multadd>
 8006054:	45b0      	cmp	r8, r6
 8006056:	4682      	mov	sl, r0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	f04f 020a 	mov.w	r2, #10
 8006060:	4641      	mov	r1, r8
 8006062:	4628      	mov	r0, r5
 8006064:	d107      	bne.n	8006076 <_dtoa_r+0xb1e>
 8006066:	f000 f9db 	bl	8006420 <__multadd>
 800606a:	4680      	mov	r8, r0
 800606c:	4606      	mov	r6, r0
 800606e:	9b02      	ldr	r3, [sp, #8]
 8006070:	3301      	adds	r3, #1
 8006072:	9302      	str	r3, [sp, #8]
 8006074:	e777      	b.n	8005f66 <_dtoa_r+0xa0e>
 8006076:	f000 f9d3 	bl	8006420 <__multadd>
 800607a:	4631      	mov	r1, r6
 800607c:	4680      	mov	r8, r0
 800607e:	2300      	movs	r3, #0
 8006080:	220a      	movs	r2, #10
 8006082:	4628      	mov	r0, r5
 8006084:	f000 f9cc 	bl	8006420 <__multadd>
 8006088:	4606      	mov	r6, r0
 800608a:	e7f0      	b.n	800606e <_dtoa_r+0xb16>
 800608c:	f1bb 0f00 	cmp.w	fp, #0
 8006090:	9a08      	ldr	r2, [sp, #32]
 8006092:	bfcc      	ite	gt
 8006094:	465f      	movgt	r7, fp
 8006096:	2701      	movle	r7, #1
 8006098:	4417      	add	r7, r2
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	4651      	mov	r1, sl
 80060a0:	2201      	movs	r2, #1
 80060a2:	4628      	mov	r0, r5
 80060a4:	9302      	str	r3, [sp, #8]
 80060a6:	f000 fb69 	bl	800677c <__lshift>
 80060aa:	4621      	mov	r1, r4
 80060ac:	4682      	mov	sl, r0
 80060ae:	f000 fbd1 	bl	8006854 <__mcmp>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	dcb2      	bgt.n	800601c <_dtoa_r+0xac4>
 80060b6:	d102      	bne.n	80060be <_dtoa_r+0xb66>
 80060b8:	9b02      	ldr	r3, [sp, #8]
 80060ba:	07db      	lsls	r3, r3, #31
 80060bc:	d4ae      	bmi.n	800601c <_dtoa_r+0xac4>
 80060be:	463b      	mov	r3, r7
 80060c0:	461f      	mov	r7, r3
 80060c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060c6:	2a30      	cmp	r2, #48	; 0x30
 80060c8:	d0fa      	beq.n	80060c0 <_dtoa_r+0xb68>
 80060ca:	e6fb      	b.n	8005ec4 <_dtoa_r+0x96c>
 80060cc:	9a08      	ldr	r2, [sp, #32]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d1a5      	bne.n	800601e <_dtoa_r+0xac6>
 80060d2:	2331      	movs	r3, #49	; 0x31
 80060d4:	f109 0901 	add.w	r9, r9, #1
 80060d8:	7013      	strb	r3, [r2, #0]
 80060da:	e6f3      	b.n	8005ec4 <_dtoa_r+0x96c>
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <_dtoa_r+0xbd4>)
 80060de:	f7ff baa6 	b.w	800562e <_dtoa_r+0xd6>
 80060e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f47f aa7f 	bne.w	80055e8 <_dtoa_r+0x90>
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <_dtoa_r+0xbd8>)
 80060ec:	f7ff ba9f 	b.w	800562e <_dtoa_r+0xd6>
 80060f0:	f1bb 0f00 	cmp.w	fp, #0
 80060f4:	dc03      	bgt.n	80060fe <_dtoa_r+0xba6>
 80060f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	f73f aecc 	bgt.w	8005e96 <_dtoa_r+0x93e>
 80060fe:	9f08      	ldr	r7, [sp, #32]
 8006100:	4621      	mov	r1, r4
 8006102:	4650      	mov	r0, sl
 8006104:	f7ff f99c 	bl	8005440 <quorem>
 8006108:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800610c:	f807 3b01 	strb.w	r3, [r7], #1
 8006110:	9a08      	ldr	r2, [sp, #32]
 8006112:	1aba      	subs	r2, r7, r2
 8006114:	4593      	cmp	fp, r2
 8006116:	ddb9      	ble.n	800608c <_dtoa_r+0xb34>
 8006118:	4651      	mov	r1, sl
 800611a:	2300      	movs	r3, #0
 800611c:	220a      	movs	r2, #10
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f97e 	bl	8006420 <__multadd>
 8006124:	4682      	mov	sl, r0
 8006126:	e7eb      	b.n	8006100 <_dtoa_r+0xba8>
 8006128:	08007c6b 	.word	0x08007c6b
 800612c:	08007bc4 	.word	0x08007bc4
 8006130:	08007be8 	.word	0x08007be8

08006134 <std>:
 8006134:	2300      	movs	r3, #0
 8006136:	b510      	push	{r4, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	e9c0 3300 	strd	r3, r3, [r0]
 800613e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006142:	6083      	str	r3, [r0, #8]
 8006144:	8181      	strh	r1, [r0, #12]
 8006146:	6643      	str	r3, [r0, #100]	; 0x64
 8006148:	81c2      	strh	r2, [r0, #14]
 800614a:	6183      	str	r3, [r0, #24]
 800614c:	4619      	mov	r1, r3
 800614e:	2208      	movs	r2, #8
 8006150:	305c      	adds	r0, #92	; 0x5c
 8006152:	f7fe fd11 	bl	8004b78 <memset>
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <std+0x38>)
 8006158:	6263      	str	r3, [r4, #36]	; 0x24
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <std+0x3c>)
 800615c:	62a3      	str	r3, [r4, #40]	; 0x28
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x40>)
 8006160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x44>)
 8006164:	6224      	str	r4, [r4, #32]
 8006166:	6323      	str	r3, [r4, #48]	; 0x30
 8006168:	bd10      	pop	{r4, pc}
 800616a:	bf00      	nop
 800616c:	08006be5 	.word	0x08006be5
 8006170:	08006c07 	.word	0x08006c07
 8006174:	08006c3f 	.word	0x08006c3f
 8006178:	08006c63 	.word	0x08006c63

0800617c <_cleanup_r>:
 800617c:	4901      	ldr	r1, [pc, #4]	; (8006184 <_cleanup_r+0x8>)
 800617e:	f000 b8af 	b.w	80062e0 <_fwalk_reent>
 8006182:	bf00      	nop
 8006184:	08006f79 	.word	0x08006f79

08006188 <__sfmoreglue>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	1e4a      	subs	r2, r1, #1
 800618c:	2568      	movs	r5, #104	; 0x68
 800618e:	4355      	muls	r5, r2
 8006190:	460e      	mov	r6, r1
 8006192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006196:	f000 fcbb 	bl	8006b10 <_malloc_r>
 800619a:	4604      	mov	r4, r0
 800619c:	b140      	cbz	r0, 80061b0 <__sfmoreglue+0x28>
 800619e:	2100      	movs	r1, #0
 80061a0:	e9c0 1600 	strd	r1, r6, [r0]
 80061a4:	300c      	adds	r0, #12
 80061a6:	60a0      	str	r0, [r4, #8]
 80061a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061ac:	f7fe fce4 	bl	8004b78 <memset>
 80061b0:	4620      	mov	r0, r4
 80061b2:	bd70      	pop	{r4, r5, r6, pc}

080061b4 <__sfp_lock_acquire>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__sfp_lock_acquire+0x8>)
 80061b6:	f000 b8b8 	b.w	800632a <__retarget_lock_acquire_recursive>
 80061ba:	bf00      	nop
 80061bc:	200006ec 	.word	0x200006ec

080061c0 <__sfp_lock_release>:
 80061c0:	4801      	ldr	r0, [pc, #4]	; (80061c8 <__sfp_lock_release+0x8>)
 80061c2:	f000 b8b3 	b.w	800632c <__retarget_lock_release_recursive>
 80061c6:	bf00      	nop
 80061c8:	200006ec 	.word	0x200006ec

080061cc <__sinit_lock_acquire>:
 80061cc:	4801      	ldr	r0, [pc, #4]	; (80061d4 <__sinit_lock_acquire+0x8>)
 80061ce:	f000 b8ac 	b.w	800632a <__retarget_lock_acquire_recursive>
 80061d2:	bf00      	nop
 80061d4:	200006e7 	.word	0x200006e7

080061d8 <__sinit_lock_release>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__sinit_lock_release+0x8>)
 80061da:	f000 b8a7 	b.w	800632c <__retarget_lock_release_recursive>
 80061de:	bf00      	nop
 80061e0:	200006e7 	.word	0x200006e7

080061e4 <__sinit>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4604      	mov	r4, r0
 80061e8:	f7ff fff0 	bl	80061cc <__sinit_lock_acquire>
 80061ec:	69a3      	ldr	r3, [r4, #24]
 80061ee:	b11b      	cbz	r3, 80061f8 <__sinit+0x14>
 80061f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f4:	f7ff bff0 	b.w	80061d8 <__sinit_lock_release>
 80061f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061fc:	6523      	str	r3, [r4, #80]	; 0x50
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <__sinit+0x68>)
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <__sinit+0x6c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	62a2      	str	r2, [r4, #40]	; 0x28
 8006206:	42a3      	cmp	r3, r4
 8006208:	bf04      	itt	eq
 800620a:	2301      	moveq	r3, #1
 800620c:	61a3      	streq	r3, [r4, #24]
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f820 	bl	8006254 <__sfp>
 8006214:	6060      	str	r0, [r4, #4]
 8006216:	4620      	mov	r0, r4
 8006218:	f000 f81c 	bl	8006254 <__sfp>
 800621c:	60a0      	str	r0, [r4, #8]
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f818 	bl	8006254 <__sfp>
 8006224:	2200      	movs	r2, #0
 8006226:	60e0      	str	r0, [r4, #12]
 8006228:	2104      	movs	r1, #4
 800622a:	6860      	ldr	r0, [r4, #4]
 800622c:	f7ff ff82 	bl	8006134 <std>
 8006230:	68a0      	ldr	r0, [r4, #8]
 8006232:	2201      	movs	r2, #1
 8006234:	2109      	movs	r1, #9
 8006236:	f7ff ff7d 	bl	8006134 <std>
 800623a:	68e0      	ldr	r0, [r4, #12]
 800623c:	2202      	movs	r2, #2
 800623e:	2112      	movs	r1, #18
 8006240:	f7ff ff78 	bl	8006134 <std>
 8006244:	2301      	movs	r3, #1
 8006246:	61a3      	str	r3, [r4, #24]
 8006248:	e7d2      	b.n	80061f0 <__sinit+0xc>
 800624a:	bf00      	nop
 800624c:	08007bb0 	.word	0x08007bb0
 8006250:	0800617d 	.word	0x0800617d

08006254 <__sfp>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	4607      	mov	r7, r0
 8006258:	f7ff ffac 	bl	80061b4 <__sfp_lock_acquire>
 800625c:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <__sfp+0x84>)
 800625e:	681e      	ldr	r6, [r3, #0]
 8006260:	69b3      	ldr	r3, [r6, #24]
 8006262:	b913      	cbnz	r3, 800626a <__sfp+0x16>
 8006264:	4630      	mov	r0, r6
 8006266:	f7ff ffbd 	bl	80061e4 <__sinit>
 800626a:	3648      	adds	r6, #72	; 0x48
 800626c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006270:	3b01      	subs	r3, #1
 8006272:	d503      	bpl.n	800627c <__sfp+0x28>
 8006274:	6833      	ldr	r3, [r6, #0]
 8006276:	b30b      	cbz	r3, 80062bc <__sfp+0x68>
 8006278:	6836      	ldr	r6, [r6, #0]
 800627a:	e7f7      	b.n	800626c <__sfp+0x18>
 800627c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006280:	b9d5      	cbnz	r5, 80062b8 <__sfp+0x64>
 8006282:	4b16      	ldr	r3, [pc, #88]	; (80062dc <__sfp+0x88>)
 8006284:	60e3      	str	r3, [r4, #12]
 8006286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800628a:	6665      	str	r5, [r4, #100]	; 0x64
 800628c:	f000 f84c 	bl	8006328 <__retarget_lock_init_recursive>
 8006290:	f7ff ff96 	bl	80061c0 <__sfp_lock_release>
 8006294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800629c:	6025      	str	r5, [r4, #0]
 800629e:	61a5      	str	r5, [r4, #24]
 80062a0:	2208      	movs	r2, #8
 80062a2:	4629      	mov	r1, r5
 80062a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062a8:	f7fe fc66 	bl	8004b78 <memset>
 80062ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062b4:	4620      	mov	r0, r4
 80062b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b8:	3468      	adds	r4, #104	; 0x68
 80062ba:	e7d9      	b.n	8006270 <__sfp+0x1c>
 80062bc:	2104      	movs	r1, #4
 80062be:	4638      	mov	r0, r7
 80062c0:	f7ff ff62 	bl	8006188 <__sfmoreglue>
 80062c4:	4604      	mov	r4, r0
 80062c6:	6030      	str	r0, [r6, #0]
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d1d5      	bne.n	8006278 <__sfp+0x24>
 80062cc:	f7ff ff78 	bl	80061c0 <__sfp_lock_release>
 80062d0:	230c      	movs	r3, #12
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	e7ee      	b.n	80062b4 <__sfp+0x60>
 80062d6:	bf00      	nop
 80062d8:	08007bb0 	.word	0x08007bb0
 80062dc:	ffff0001 	.word	0xffff0001

080062e0 <_fwalk_reent>:
 80062e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e4:	4606      	mov	r6, r0
 80062e6:	4688      	mov	r8, r1
 80062e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062ec:	2700      	movs	r7, #0
 80062ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062f2:	f1b9 0901 	subs.w	r9, r9, #1
 80062f6:	d505      	bpl.n	8006304 <_fwalk_reent+0x24>
 80062f8:	6824      	ldr	r4, [r4, #0]
 80062fa:	2c00      	cmp	r4, #0
 80062fc:	d1f7      	bne.n	80062ee <_fwalk_reent+0xe>
 80062fe:	4638      	mov	r0, r7
 8006300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006304:	89ab      	ldrh	r3, [r5, #12]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d907      	bls.n	800631a <_fwalk_reent+0x3a>
 800630a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800630e:	3301      	adds	r3, #1
 8006310:	d003      	beq.n	800631a <_fwalk_reent+0x3a>
 8006312:	4629      	mov	r1, r5
 8006314:	4630      	mov	r0, r6
 8006316:	47c0      	blx	r8
 8006318:	4307      	orrs	r7, r0
 800631a:	3568      	adds	r5, #104	; 0x68
 800631c:	e7e9      	b.n	80062f2 <_fwalk_reent+0x12>
	...

08006320 <_localeconv_r>:
 8006320:	4800      	ldr	r0, [pc, #0]	; (8006324 <_localeconv_r+0x4>)
 8006322:	4770      	bx	lr
 8006324:	20000160 	.word	0x20000160

08006328 <__retarget_lock_init_recursive>:
 8006328:	4770      	bx	lr

0800632a <__retarget_lock_acquire_recursive>:
 800632a:	4770      	bx	lr

0800632c <__retarget_lock_release_recursive>:
 800632c:	4770      	bx	lr
	...

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 bbeb 	b.w	8006b10 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	2000000c 	.word	0x2000000c

08006340 <memcpy>:
 8006340:	440a      	add	r2, r1
 8006342:	4291      	cmp	r1, r2
 8006344:	f100 33ff 	add.w	r3, r0, #4294967295
 8006348:	d100      	bne.n	800634c <memcpy+0xc>
 800634a:	4770      	bx	lr
 800634c:	b510      	push	{r4, lr}
 800634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006356:	4291      	cmp	r1, r2
 8006358:	d1f9      	bne.n	800634e <memcpy+0xe>
 800635a:	bd10      	pop	{r4, pc}

0800635c <_Balloc>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
 8006364:	b976      	cbnz	r6, 8006384 <_Balloc+0x28>
 8006366:	2010      	movs	r0, #16
 8006368:	f7ff ffe2 	bl	8006330 <malloc>
 800636c:	4602      	mov	r2, r0
 800636e:	6260      	str	r0, [r4, #36]	; 0x24
 8006370:	b920      	cbnz	r0, 800637c <_Balloc+0x20>
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <_Balloc+0x78>)
 8006374:	4818      	ldr	r0, [pc, #96]	; (80063d8 <_Balloc+0x7c>)
 8006376:	2166      	movs	r1, #102	; 0x66
 8006378:	f000 fd4a 	bl	8006e10 <__assert_func>
 800637c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006380:	6006      	str	r6, [r0, #0]
 8006382:	60c6      	str	r6, [r0, #12]
 8006384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006386:	68f3      	ldr	r3, [r6, #12]
 8006388:	b183      	cbz	r3, 80063ac <_Balloc+0x50>
 800638a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006392:	b9b8      	cbnz	r0, 80063c4 <_Balloc+0x68>
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f605 	lsl.w	r6, r1, r5
 800639a:	1d72      	adds	r2, r6, #5
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fb5a 	bl	8006a58 <_calloc_r>
 80063a4:	b160      	cbz	r0, 80063c0 <_Balloc+0x64>
 80063a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063aa:	e00e      	b.n	80063ca <_Balloc+0x6e>
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	2104      	movs	r1, #4
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fb51 	bl	8006a58 <_calloc_r>
 80063b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b8:	60f0      	str	r0, [r6, #12]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e4      	bne.n	800638a <_Balloc+0x2e>
 80063c0:	2000      	movs	r0, #0
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	6802      	ldr	r2, [r0, #0]
 80063c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ca:	2300      	movs	r3, #0
 80063cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063d0:	e7f7      	b.n	80063c2 <_Balloc+0x66>
 80063d2:	bf00      	nop
 80063d4:	08007bf5 	.word	0x08007bf5
 80063d8:	08007cdc 	.word	0x08007cdc

080063dc <_Bfree>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b976      	cbnz	r6, 8006404 <_Bfree+0x28>
 80063e6:	2010      	movs	r0, #16
 80063e8:	f7ff ffa2 	bl	8006330 <malloc>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6268      	str	r0, [r5, #36]	; 0x24
 80063f0:	b920      	cbnz	r0, 80063fc <_Bfree+0x20>
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <_Bfree+0x3c>)
 80063f4:	4809      	ldr	r0, [pc, #36]	; (800641c <_Bfree+0x40>)
 80063f6:	218a      	movs	r1, #138	; 0x8a
 80063f8:	f000 fd0a 	bl	8006e10 <__assert_func>
 80063fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006400:	6006      	str	r6, [r0, #0]
 8006402:	60c6      	str	r6, [r0, #12]
 8006404:	b13c      	cbz	r4, 8006416 <_Bfree+0x3a>
 8006406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006408:	6862      	ldr	r2, [r4, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006410:	6021      	str	r1, [r4, #0]
 8006412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	08007bf5 	.word	0x08007bf5
 800641c:	08007cdc 	.word	0x08007cdc

08006420 <__multadd>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	690e      	ldr	r6, [r1, #16]
 8006426:	4607      	mov	r7, r0
 8006428:	4698      	mov	r8, r3
 800642a:	460c      	mov	r4, r1
 800642c:	f101 0014 	add.w	r0, r1, #20
 8006430:	2300      	movs	r3, #0
 8006432:	6805      	ldr	r5, [r0, #0]
 8006434:	b2a9      	uxth	r1, r5
 8006436:	fb02 8101 	mla	r1, r2, r1, r8
 800643a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800643e:	0c2d      	lsrs	r5, r5, #16
 8006440:	fb02 c505 	mla	r5, r2, r5, ip
 8006444:	b289      	uxth	r1, r1
 8006446:	3301      	adds	r3, #1
 8006448:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800644c:	429e      	cmp	r6, r3
 800644e:	f840 1b04 	str.w	r1, [r0], #4
 8006452:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006456:	dcec      	bgt.n	8006432 <__multadd+0x12>
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d022      	beq.n	80064a4 <__multadd+0x84>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	42b3      	cmp	r3, r6
 8006462:	dc19      	bgt.n	8006498 <__multadd+0x78>
 8006464:	6861      	ldr	r1, [r4, #4]
 8006466:	4638      	mov	r0, r7
 8006468:	3101      	adds	r1, #1
 800646a:	f7ff ff77 	bl	800635c <_Balloc>
 800646e:	4605      	mov	r5, r0
 8006470:	b928      	cbnz	r0, 800647e <__multadd+0x5e>
 8006472:	4602      	mov	r2, r0
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <__multadd+0x8c>)
 8006476:	480e      	ldr	r0, [pc, #56]	; (80064b0 <__multadd+0x90>)
 8006478:	21b5      	movs	r1, #181	; 0xb5
 800647a:	f000 fcc9 	bl	8006e10 <__assert_func>
 800647e:	6922      	ldr	r2, [r4, #16]
 8006480:	3202      	adds	r2, #2
 8006482:	f104 010c 	add.w	r1, r4, #12
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	300c      	adds	r0, #12
 800648a:	f7ff ff59 	bl	8006340 <memcpy>
 800648e:	4621      	mov	r1, r4
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa3 	bl	80063dc <_Bfree>
 8006496:	462c      	mov	r4, r5
 8006498:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800649c:	3601      	adds	r6, #1
 800649e:	f8c3 8014 	str.w	r8, [r3, #20]
 80064a2:	6126      	str	r6, [r4, #16]
 80064a4:	4620      	mov	r0, r4
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064aa:	bf00      	nop
 80064ac:	08007c6b 	.word	0x08007c6b
 80064b0:	08007cdc 	.word	0x08007cdc

080064b4 <__hi0bits>:
 80064b4:	0c02      	lsrs	r2, r0, #16
 80064b6:	0412      	lsls	r2, r2, #16
 80064b8:	4603      	mov	r3, r0
 80064ba:	b9ca      	cbnz	r2, 80064f0 <__hi0bits+0x3c>
 80064bc:	0403      	lsls	r3, r0, #16
 80064be:	2010      	movs	r0, #16
 80064c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064c4:	bf04      	itt	eq
 80064c6:	021b      	lsleq	r3, r3, #8
 80064c8:	3008      	addeq	r0, #8
 80064ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064ce:	bf04      	itt	eq
 80064d0:	011b      	lsleq	r3, r3, #4
 80064d2:	3004      	addeq	r0, #4
 80064d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064d8:	bf04      	itt	eq
 80064da:	009b      	lsleq	r3, r3, #2
 80064dc:	3002      	addeq	r0, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	db05      	blt.n	80064ee <__hi0bits+0x3a>
 80064e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064e6:	f100 0001 	add.w	r0, r0, #1
 80064ea:	bf08      	it	eq
 80064ec:	2020      	moveq	r0, #32
 80064ee:	4770      	bx	lr
 80064f0:	2000      	movs	r0, #0
 80064f2:	e7e5      	b.n	80064c0 <__hi0bits+0xc>

080064f4 <__lo0bits>:
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	4602      	mov	r2, r0
 80064f8:	f013 0007 	ands.w	r0, r3, #7
 80064fc:	d00b      	beq.n	8006516 <__lo0bits+0x22>
 80064fe:	07d9      	lsls	r1, r3, #31
 8006500:	d422      	bmi.n	8006548 <__lo0bits+0x54>
 8006502:	0798      	lsls	r0, r3, #30
 8006504:	bf49      	itett	mi
 8006506:	085b      	lsrmi	r3, r3, #1
 8006508:	089b      	lsrpl	r3, r3, #2
 800650a:	2001      	movmi	r0, #1
 800650c:	6013      	strmi	r3, [r2, #0]
 800650e:	bf5c      	itt	pl
 8006510:	6013      	strpl	r3, [r2, #0]
 8006512:	2002      	movpl	r0, #2
 8006514:	4770      	bx	lr
 8006516:	b299      	uxth	r1, r3
 8006518:	b909      	cbnz	r1, 800651e <__lo0bits+0x2a>
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	2010      	movs	r0, #16
 800651e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006522:	bf04      	itt	eq
 8006524:	0a1b      	lsreq	r3, r3, #8
 8006526:	3008      	addeq	r0, #8
 8006528:	0719      	lsls	r1, r3, #28
 800652a:	bf04      	itt	eq
 800652c:	091b      	lsreq	r3, r3, #4
 800652e:	3004      	addeq	r0, #4
 8006530:	0799      	lsls	r1, r3, #30
 8006532:	bf04      	itt	eq
 8006534:	089b      	lsreq	r3, r3, #2
 8006536:	3002      	addeq	r0, #2
 8006538:	07d9      	lsls	r1, r3, #31
 800653a:	d403      	bmi.n	8006544 <__lo0bits+0x50>
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	f100 0001 	add.w	r0, r0, #1
 8006542:	d003      	beq.n	800654c <__lo0bits+0x58>
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4770      	bx	lr
 8006548:	2000      	movs	r0, #0
 800654a:	4770      	bx	lr
 800654c:	2020      	movs	r0, #32
 800654e:	4770      	bx	lr

08006550 <__i2b>:
 8006550:	b510      	push	{r4, lr}
 8006552:	460c      	mov	r4, r1
 8006554:	2101      	movs	r1, #1
 8006556:	f7ff ff01 	bl	800635c <_Balloc>
 800655a:	4602      	mov	r2, r0
 800655c:	b928      	cbnz	r0, 800656a <__i2b+0x1a>
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <__i2b+0x24>)
 8006560:	4805      	ldr	r0, [pc, #20]	; (8006578 <__i2b+0x28>)
 8006562:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006566:	f000 fc53 	bl	8006e10 <__assert_func>
 800656a:	2301      	movs	r3, #1
 800656c:	6144      	str	r4, [r0, #20]
 800656e:	6103      	str	r3, [r0, #16]
 8006570:	bd10      	pop	{r4, pc}
 8006572:	bf00      	nop
 8006574:	08007c6b 	.word	0x08007c6b
 8006578:	08007cdc 	.word	0x08007cdc

0800657c <__multiply>:
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	4614      	mov	r4, r2
 8006582:	690a      	ldr	r2, [r1, #16]
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	bfb8      	it	lt
 800658a:	460b      	movlt	r3, r1
 800658c:	460d      	mov	r5, r1
 800658e:	bfbc      	itt	lt
 8006590:	4625      	movlt	r5, r4
 8006592:	461c      	movlt	r4, r3
 8006594:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006598:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800659c:	68ab      	ldr	r3, [r5, #8]
 800659e:	6869      	ldr	r1, [r5, #4]
 80065a0:	eb0a 0709 	add.w	r7, sl, r9
 80065a4:	42bb      	cmp	r3, r7
 80065a6:	b085      	sub	sp, #20
 80065a8:	bfb8      	it	lt
 80065aa:	3101      	addlt	r1, #1
 80065ac:	f7ff fed6 	bl	800635c <_Balloc>
 80065b0:	b930      	cbnz	r0, 80065c0 <__multiply+0x44>
 80065b2:	4602      	mov	r2, r0
 80065b4:	4b42      	ldr	r3, [pc, #264]	; (80066c0 <__multiply+0x144>)
 80065b6:	4843      	ldr	r0, [pc, #268]	; (80066c4 <__multiply+0x148>)
 80065b8:	f240 115d 	movw	r1, #349	; 0x15d
 80065bc:	f000 fc28 	bl	8006e10 <__assert_func>
 80065c0:	f100 0614 	add.w	r6, r0, #20
 80065c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065c8:	4633      	mov	r3, r6
 80065ca:	2200      	movs	r2, #0
 80065cc:	4543      	cmp	r3, r8
 80065ce:	d31e      	bcc.n	800660e <__multiply+0x92>
 80065d0:	f105 0c14 	add.w	ip, r5, #20
 80065d4:	f104 0314 	add.w	r3, r4, #20
 80065d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	ebac 0205 	sub.w	r2, ip, r5
 80065e6:	3a15      	subs	r2, #21
 80065e8:	f022 0203 	bic.w	r2, r2, #3
 80065ec:	3204      	adds	r2, #4
 80065ee:	f105 0115 	add.w	r1, r5, #21
 80065f2:	458c      	cmp	ip, r1
 80065f4:	bf38      	it	cc
 80065f6:	2204      	movcc	r2, #4
 80065f8:	9201      	str	r2, [sp, #4]
 80065fa:	9a02      	ldr	r2, [sp, #8]
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d808      	bhi.n	8006614 <__multiply+0x98>
 8006602:	2f00      	cmp	r7, #0
 8006604:	dc55      	bgt.n	80066b2 <__multiply+0x136>
 8006606:	6107      	str	r7, [r0, #16]
 8006608:	b005      	add	sp, #20
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	f843 2b04 	str.w	r2, [r3], #4
 8006612:	e7db      	b.n	80065cc <__multiply+0x50>
 8006614:	f8b3 a000 	ldrh.w	sl, [r3]
 8006618:	f1ba 0f00 	cmp.w	sl, #0
 800661c:	d020      	beq.n	8006660 <__multiply+0xe4>
 800661e:	f105 0e14 	add.w	lr, r5, #20
 8006622:	46b1      	mov	r9, r6
 8006624:	2200      	movs	r2, #0
 8006626:	f85e 4b04 	ldr.w	r4, [lr], #4
 800662a:	f8d9 b000 	ldr.w	fp, [r9]
 800662e:	b2a1      	uxth	r1, r4
 8006630:	fa1f fb8b 	uxth.w	fp, fp
 8006634:	fb0a b101 	mla	r1, sl, r1, fp
 8006638:	4411      	add	r1, r2
 800663a:	f8d9 2000 	ldr.w	r2, [r9]
 800663e:	0c24      	lsrs	r4, r4, #16
 8006640:	0c12      	lsrs	r2, r2, #16
 8006642:	fb0a 2404 	mla	r4, sl, r4, r2
 8006646:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800664a:	b289      	uxth	r1, r1
 800664c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006650:	45f4      	cmp	ip, lr
 8006652:	f849 1b04 	str.w	r1, [r9], #4
 8006656:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800665a:	d8e4      	bhi.n	8006626 <__multiply+0xaa>
 800665c:	9901      	ldr	r1, [sp, #4]
 800665e:	5072      	str	r2, [r6, r1]
 8006660:	9a03      	ldr	r2, [sp, #12]
 8006662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006666:	3304      	adds	r3, #4
 8006668:	f1b9 0f00 	cmp.w	r9, #0
 800666c:	d01f      	beq.n	80066ae <__multiply+0x132>
 800666e:	6834      	ldr	r4, [r6, #0]
 8006670:	f105 0114 	add.w	r1, r5, #20
 8006674:	46b6      	mov	lr, r6
 8006676:	f04f 0a00 	mov.w	sl, #0
 800667a:	880a      	ldrh	r2, [r1, #0]
 800667c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006680:	fb09 b202 	mla	r2, r9, r2, fp
 8006684:	4492      	add	sl, r2
 8006686:	b2a4      	uxth	r4, r4
 8006688:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800668c:	f84e 4b04 	str.w	r4, [lr], #4
 8006690:	f851 4b04 	ldr.w	r4, [r1], #4
 8006694:	f8be 2000 	ldrh.w	r2, [lr]
 8006698:	0c24      	lsrs	r4, r4, #16
 800669a:	fb09 2404 	mla	r4, r9, r4, r2
 800669e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066a2:	458c      	cmp	ip, r1
 80066a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066a8:	d8e7      	bhi.n	800667a <__multiply+0xfe>
 80066aa:	9a01      	ldr	r2, [sp, #4]
 80066ac:	50b4      	str	r4, [r6, r2]
 80066ae:	3604      	adds	r6, #4
 80066b0:	e7a3      	b.n	80065fa <__multiply+0x7e>
 80066b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1a5      	bne.n	8006606 <__multiply+0x8a>
 80066ba:	3f01      	subs	r7, #1
 80066bc:	e7a1      	b.n	8006602 <__multiply+0x86>
 80066be:	bf00      	nop
 80066c0:	08007c6b 	.word	0x08007c6b
 80066c4:	08007cdc 	.word	0x08007cdc

080066c8 <__pow5mult>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4615      	mov	r5, r2
 80066ce:	f012 0203 	ands.w	r2, r2, #3
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	d007      	beq.n	80066e8 <__pow5mult+0x20>
 80066d8:	4c25      	ldr	r4, [pc, #148]	; (8006770 <__pow5mult+0xa8>)
 80066da:	3a01      	subs	r2, #1
 80066dc:	2300      	movs	r3, #0
 80066de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066e2:	f7ff fe9d 	bl	8006420 <__multadd>
 80066e6:	4607      	mov	r7, r0
 80066e8:	10ad      	asrs	r5, r5, #2
 80066ea:	d03d      	beq.n	8006768 <__pow5mult+0xa0>
 80066ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066ee:	b97c      	cbnz	r4, 8006710 <__pow5mult+0x48>
 80066f0:	2010      	movs	r0, #16
 80066f2:	f7ff fe1d 	bl	8006330 <malloc>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6270      	str	r0, [r6, #36]	; 0x24
 80066fa:	b928      	cbnz	r0, 8006708 <__pow5mult+0x40>
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <__pow5mult+0xac>)
 80066fe:	481e      	ldr	r0, [pc, #120]	; (8006778 <__pow5mult+0xb0>)
 8006700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006704:	f000 fb84 	bl	8006e10 <__assert_func>
 8006708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800670c:	6004      	str	r4, [r0, #0]
 800670e:	60c4      	str	r4, [r0, #12]
 8006710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006718:	b94c      	cbnz	r4, 800672e <__pow5mult+0x66>
 800671a:	f240 2171 	movw	r1, #625	; 0x271
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ff16 	bl	8006550 <__i2b>
 8006724:	2300      	movs	r3, #0
 8006726:	f8c8 0008 	str.w	r0, [r8, #8]
 800672a:	4604      	mov	r4, r0
 800672c:	6003      	str	r3, [r0, #0]
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	07eb      	lsls	r3, r5, #31
 8006734:	d50a      	bpl.n	800674c <__pow5mult+0x84>
 8006736:	4639      	mov	r1, r7
 8006738:	4622      	mov	r2, r4
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ff1e 	bl	800657c <__multiply>
 8006740:	4639      	mov	r1, r7
 8006742:	4680      	mov	r8, r0
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff fe49 	bl	80063dc <_Bfree>
 800674a:	4647      	mov	r7, r8
 800674c:	106d      	asrs	r5, r5, #1
 800674e:	d00b      	beq.n	8006768 <__pow5mult+0xa0>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	b938      	cbnz	r0, 8006764 <__pow5mult+0x9c>
 8006754:	4622      	mov	r2, r4
 8006756:	4621      	mov	r1, r4
 8006758:	4630      	mov	r0, r6
 800675a:	f7ff ff0f 	bl	800657c <__multiply>
 800675e:	6020      	str	r0, [r4, #0]
 8006760:	f8c0 9000 	str.w	r9, [r0]
 8006764:	4604      	mov	r4, r0
 8006766:	e7e4      	b.n	8006732 <__pow5mult+0x6a>
 8006768:	4638      	mov	r0, r7
 800676a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676e:	bf00      	nop
 8006770:	08007e30 	.word	0x08007e30
 8006774:	08007bf5 	.word	0x08007bf5
 8006778:	08007cdc 	.word	0x08007cdc

0800677c <__lshift>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	6849      	ldr	r1, [r1, #4]
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	4607      	mov	r7, r0
 800678e:	4691      	mov	r9, r2
 8006790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006794:	f108 0601 	add.w	r6, r8, #1
 8006798:	42b3      	cmp	r3, r6
 800679a:	db0b      	blt.n	80067b4 <__lshift+0x38>
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fddd 	bl	800635c <_Balloc>
 80067a2:	4605      	mov	r5, r0
 80067a4:	b948      	cbnz	r0, 80067ba <__lshift+0x3e>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b28      	ldr	r3, [pc, #160]	; (800684c <__lshift+0xd0>)
 80067aa:	4829      	ldr	r0, [pc, #164]	; (8006850 <__lshift+0xd4>)
 80067ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067b0:	f000 fb2e 	bl	8006e10 <__assert_func>
 80067b4:	3101      	adds	r1, #1
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	e7ee      	b.n	8006798 <__lshift+0x1c>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f100 0114 	add.w	r1, r0, #20
 80067c0:	f100 0210 	add.w	r2, r0, #16
 80067c4:	4618      	mov	r0, r3
 80067c6:	4553      	cmp	r3, sl
 80067c8:	db33      	blt.n	8006832 <__lshift+0xb6>
 80067ca:	6920      	ldr	r0, [r4, #16]
 80067cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067d0:	f104 0314 	add.w	r3, r4, #20
 80067d4:	f019 091f 	ands.w	r9, r9, #31
 80067d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067e0:	d02b      	beq.n	800683a <__lshift+0xbe>
 80067e2:	f1c9 0e20 	rsb	lr, r9, #32
 80067e6:	468a      	mov	sl, r1
 80067e8:	2200      	movs	r2, #0
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	fa00 f009 	lsl.w	r0, r0, r9
 80067f0:	4302      	orrs	r2, r0
 80067f2:	f84a 2b04 	str.w	r2, [sl], #4
 80067f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fa:	459c      	cmp	ip, r3
 80067fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006800:	d8f3      	bhi.n	80067ea <__lshift+0x6e>
 8006802:	ebac 0304 	sub.w	r3, ip, r4
 8006806:	3b15      	subs	r3, #21
 8006808:	f023 0303 	bic.w	r3, r3, #3
 800680c:	3304      	adds	r3, #4
 800680e:	f104 0015 	add.w	r0, r4, #21
 8006812:	4584      	cmp	ip, r0
 8006814:	bf38      	it	cc
 8006816:	2304      	movcc	r3, #4
 8006818:	50ca      	str	r2, [r1, r3]
 800681a:	b10a      	cbz	r2, 8006820 <__lshift+0xa4>
 800681c:	f108 0602 	add.w	r6, r8, #2
 8006820:	3e01      	subs	r6, #1
 8006822:	4638      	mov	r0, r7
 8006824:	612e      	str	r6, [r5, #16]
 8006826:	4621      	mov	r1, r4
 8006828:	f7ff fdd8 	bl	80063dc <_Bfree>
 800682c:	4628      	mov	r0, r5
 800682e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006832:	f842 0f04 	str.w	r0, [r2, #4]!
 8006836:	3301      	adds	r3, #1
 8006838:	e7c5      	b.n	80067c6 <__lshift+0x4a>
 800683a:	3904      	subs	r1, #4
 800683c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006840:	f841 2f04 	str.w	r2, [r1, #4]!
 8006844:	459c      	cmp	ip, r3
 8006846:	d8f9      	bhi.n	800683c <__lshift+0xc0>
 8006848:	e7ea      	b.n	8006820 <__lshift+0xa4>
 800684a:	bf00      	nop
 800684c:	08007c6b 	.word	0x08007c6b
 8006850:	08007cdc 	.word	0x08007cdc

08006854 <__mcmp>:
 8006854:	690a      	ldr	r2, [r1, #16]
 8006856:	4603      	mov	r3, r0
 8006858:	6900      	ldr	r0, [r0, #16]
 800685a:	1a80      	subs	r0, r0, r2
 800685c:	b530      	push	{r4, r5, lr}
 800685e:	d10d      	bne.n	800687c <__mcmp+0x28>
 8006860:	3314      	adds	r3, #20
 8006862:	3114      	adds	r1, #20
 8006864:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006868:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800686c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006870:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006874:	4295      	cmp	r5, r2
 8006876:	d002      	beq.n	800687e <__mcmp+0x2a>
 8006878:	d304      	bcc.n	8006884 <__mcmp+0x30>
 800687a:	2001      	movs	r0, #1
 800687c:	bd30      	pop	{r4, r5, pc}
 800687e:	42a3      	cmp	r3, r4
 8006880:	d3f4      	bcc.n	800686c <__mcmp+0x18>
 8006882:	e7fb      	b.n	800687c <__mcmp+0x28>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e7f8      	b.n	800687c <__mcmp+0x28>
	...

0800688c <__mdiff>:
 800688c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	460c      	mov	r4, r1
 8006892:	4606      	mov	r6, r0
 8006894:	4611      	mov	r1, r2
 8006896:	4620      	mov	r0, r4
 8006898:	4617      	mov	r7, r2
 800689a:	f7ff ffdb 	bl	8006854 <__mcmp>
 800689e:	1e05      	subs	r5, r0, #0
 80068a0:	d111      	bne.n	80068c6 <__mdiff+0x3a>
 80068a2:	4629      	mov	r1, r5
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff fd59 	bl	800635c <_Balloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	b928      	cbnz	r0, 80068ba <__mdiff+0x2e>
 80068ae:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <__mdiff+0x10c>)
 80068b0:	f240 2132 	movw	r1, #562	; 0x232
 80068b4:	4839      	ldr	r0, [pc, #228]	; (800699c <__mdiff+0x110>)
 80068b6:	f000 faab 	bl	8006e10 <__assert_func>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068c0:	4610      	mov	r0, r2
 80068c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	bfa4      	itt	ge
 80068c8:	463b      	movge	r3, r7
 80068ca:	4627      	movge	r7, r4
 80068cc:	4630      	mov	r0, r6
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	bfa6      	itte	ge
 80068d2:	461c      	movge	r4, r3
 80068d4:	2500      	movge	r5, #0
 80068d6:	2501      	movlt	r5, #1
 80068d8:	f7ff fd40 	bl	800635c <_Balloc>
 80068dc:	4602      	mov	r2, r0
 80068de:	b918      	cbnz	r0, 80068e8 <__mdiff+0x5c>
 80068e0:	4b2d      	ldr	r3, [pc, #180]	; (8006998 <__mdiff+0x10c>)
 80068e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068e6:	e7e5      	b.n	80068b4 <__mdiff+0x28>
 80068e8:	693e      	ldr	r6, [r7, #16]
 80068ea:	60c5      	str	r5, [r0, #12]
 80068ec:	6925      	ldr	r5, [r4, #16]
 80068ee:	f107 0114 	add.w	r1, r7, #20
 80068f2:	f100 0e14 	add.w	lr, r0, #20
 80068f6:	f104 0914 	add.w	r9, r4, #20
 80068fa:	f107 0010 	add.w	r0, r7, #16
 80068fe:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006902:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006906:	46f2      	mov	sl, lr
 8006908:	2700      	movs	r7, #0
 800690a:	f859 3b04 	ldr.w	r3, [r9], #4
 800690e:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006912:	fa1f f883 	uxth.w	r8, r3
 8006916:	fa17 f78b 	uxtah	r7, r7, fp
 800691a:	0c1b      	lsrs	r3, r3, #16
 800691c:	eba7 0808 	sub.w	r8, r7, r8
 8006920:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006924:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006928:	fa1f f888 	uxth.w	r8, r8
 800692c:	141f      	asrs	r7, r3, #16
 800692e:	454d      	cmp	r5, r9
 8006930:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006934:	f84a 3b04 	str.w	r3, [sl], #4
 8006938:	d8e7      	bhi.n	800690a <__mdiff+0x7e>
 800693a:	1b2b      	subs	r3, r5, r4
 800693c:	3b15      	subs	r3, #21
 800693e:	f023 0303 	bic.w	r3, r3, #3
 8006942:	3304      	adds	r3, #4
 8006944:	3415      	adds	r4, #21
 8006946:	42a5      	cmp	r5, r4
 8006948:	bf38      	it	cc
 800694a:	2304      	movcc	r3, #4
 800694c:	4419      	add	r1, r3
 800694e:	4473      	add	r3, lr
 8006950:	469e      	mov	lr, r3
 8006952:	460d      	mov	r5, r1
 8006954:	4565      	cmp	r5, ip
 8006956:	d30e      	bcc.n	8006976 <__mdiff+0xea>
 8006958:	f10c 0003 	add.w	r0, ip, #3
 800695c:	1a40      	subs	r0, r0, r1
 800695e:	f020 0003 	bic.w	r0, r0, #3
 8006962:	3903      	subs	r1, #3
 8006964:	458c      	cmp	ip, r1
 8006966:	bf38      	it	cc
 8006968:	2000      	movcc	r0, #0
 800696a:	4418      	add	r0, r3
 800696c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8006970:	b17b      	cbz	r3, 8006992 <__mdiff+0x106>
 8006972:	6116      	str	r6, [r2, #16]
 8006974:	e7a4      	b.n	80068c0 <__mdiff+0x34>
 8006976:	f855 8b04 	ldr.w	r8, [r5], #4
 800697a:	fa17 f488 	uxtah	r4, r7, r8
 800697e:	1420      	asrs	r0, r4, #16
 8006980:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006984:	b2a4      	uxth	r4, r4
 8006986:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800698a:	f84e 4b04 	str.w	r4, [lr], #4
 800698e:	1407      	asrs	r7, r0, #16
 8006990:	e7e0      	b.n	8006954 <__mdiff+0xc8>
 8006992:	3e01      	subs	r6, #1
 8006994:	e7ea      	b.n	800696c <__mdiff+0xe0>
 8006996:	bf00      	nop
 8006998:	08007c6b 	.word	0x08007c6b
 800699c:	08007cdc 	.word	0x08007cdc

080069a0 <__d2b>:
 80069a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069a4:	2101      	movs	r1, #1
 80069a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80069aa:	4690      	mov	r8, r2
 80069ac:	461d      	mov	r5, r3
 80069ae:	f7ff fcd5 	bl	800635c <_Balloc>
 80069b2:	4604      	mov	r4, r0
 80069b4:	b930      	cbnz	r0, 80069c4 <__d2b+0x24>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <__d2b+0xb0>)
 80069ba:	4826      	ldr	r0, [pc, #152]	; (8006a54 <__d2b+0xb4>)
 80069bc:	f240 310a 	movw	r1, #778	; 0x30a
 80069c0:	f000 fa26 	bl	8006e10 <__assert_func>
 80069c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069cc:	bb2d      	cbnz	r5, 8006a1a <__d2b+0x7a>
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f1b8 0300 	subs.w	r3, r8, #0
 80069d4:	d026      	beq.n	8006a24 <__d2b+0x84>
 80069d6:	4668      	mov	r0, sp
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f7ff fd8b 	bl	80064f4 <__lo0bits>
 80069de:	9900      	ldr	r1, [sp, #0]
 80069e0:	b1f0      	cbz	r0, 8006a20 <__d2b+0x80>
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	f1c0 0320 	rsb	r3, r0, #32
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	430b      	orrs	r3, r1
 80069ee:	40c2      	lsrs	r2, r0
 80069f0:	6163      	str	r3, [r4, #20]
 80069f2:	9201      	str	r2, [sp, #4]
 80069f4:	9b01      	ldr	r3, [sp, #4]
 80069f6:	61a3      	str	r3, [r4, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf14      	ite	ne
 80069fc:	2102      	movne	r1, #2
 80069fe:	2101      	moveq	r1, #1
 8006a00:	6121      	str	r1, [r4, #16]
 8006a02:	b1c5      	cbz	r5, 8006a36 <__d2b+0x96>
 8006a04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a08:	4405      	add	r5, r0
 8006a0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a0e:	603d      	str	r5, [r7, #0]
 8006a10:	6030      	str	r0, [r6, #0]
 8006a12:	4620      	mov	r0, r4
 8006a14:	b002      	add	sp, #8
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a1e:	e7d6      	b.n	80069ce <__d2b+0x2e>
 8006a20:	6161      	str	r1, [r4, #20]
 8006a22:	e7e7      	b.n	80069f4 <__d2b+0x54>
 8006a24:	a801      	add	r0, sp, #4
 8006a26:	f7ff fd65 	bl	80064f4 <__lo0bits>
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	6163      	str	r3, [r4, #20]
 8006a2e:	2101      	movs	r1, #1
 8006a30:	6121      	str	r1, [r4, #16]
 8006a32:	3020      	adds	r0, #32
 8006a34:	e7e5      	b.n	8006a02 <__d2b+0x62>
 8006a36:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a3e:	6038      	str	r0, [r7, #0]
 8006a40:	6918      	ldr	r0, [r3, #16]
 8006a42:	f7ff fd37 	bl	80064b4 <__hi0bits>
 8006a46:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a4a:	6031      	str	r1, [r6, #0]
 8006a4c:	e7e1      	b.n	8006a12 <__d2b+0x72>
 8006a4e:	bf00      	nop
 8006a50:	08007c6b 	.word	0x08007c6b
 8006a54:	08007cdc 	.word	0x08007cdc

08006a58 <_calloc_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	fb02 f501 	mul.w	r5, r2, r1
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f000 f856 	bl	8006b10 <_malloc_r>
 8006a64:	4604      	mov	r4, r0
 8006a66:	b118      	cbz	r0, 8006a70 <_calloc_r+0x18>
 8006a68:	462a      	mov	r2, r5
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7fe f884 	bl	8004b78 <memset>
 8006a70:	4620      	mov	r0, r4
 8006a72:	bd38      	pop	{r3, r4, r5, pc}

08006a74 <_free_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4605      	mov	r5, r0
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d045      	beq.n	8006b08 <_free_r+0x94>
 8006a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a80:	1f0c      	subs	r4, r1, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bfb8      	it	lt
 8006a86:	18e4      	addlt	r4, r4, r3
 8006a88:	f000 fb4c 	bl	8007124 <__malloc_lock>
 8006a8c:	4a1f      	ldr	r2, [pc, #124]	; (8006b0c <_free_r+0x98>)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	4610      	mov	r0, r2
 8006a92:	b933      	cbnz	r3, 8006aa2 <_free_r+0x2e>
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	6014      	str	r4, [r2, #0]
 8006a98:	4628      	mov	r0, r5
 8006a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a9e:	f000 bb47 	b.w	8007130 <__malloc_unlock>
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	d90b      	bls.n	8006abe <_free_r+0x4a>
 8006aa6:	6821      	ldr	r1, [r4, #0]
 8006aa8:	1862      	adds	r2, r4, r1
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bf04      	itt	eq
 8006aae:	681a      	ldreq	r2, [r3, #0]
 8006ab0:	685b      	ldreq	r3, [r3, #4]
 8006ab2:	6063      	str	r3, [r4, #4]
 8006ab4:	bf04      	itt	eq
 8006ab6:	1852      	addeq	r2, r2, r1
 8006ab8:	6022      	streq	r2, [r4, #0]
 8006aba:	6004      	str	r4, [r0, #0]
 8006abc:	e7ec      	b.n	8006a98 <_free_r+0x24>
 8006abe:	461a      	mov	r2, r3
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	b10b      	cbz	r3, 8006ac8 <_free_r+0x54>
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	d9fa      	bls.n	8006abe <_free_r+0x4a>
 8006ac8:	6811      	ldr	r1, [r2, #0]
 8006aca:	1850      	adds	r0, r2, r1
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d10b      	bne.n	8006ae8 <_free_r+0x74>
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	4401      	add	r1, r0
 8006ad4:	1850      	adds	r0, r2, r1
 8006ad6:	4283      	cmp	r3, r0
 8006ad8:	6011      	str	r1, [r2, #0]
 8006ada:	d1dd      	bne.n	8006a98 <_free_r+0x24>
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	6053      	str	r3, [r2, #4]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	e7d7      	b.n	8006a98 <_free_r+0x24>
 8006ae8:	d902      	bls.n	8006af0 <_free_r+0x7c>
 8006aea:	230c      	movs	r3, #12
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	e7d3      	b.n	8006a98 <_free_r+0x24>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	1821      	adds	r1, r4, r0
 8006af4:	428b      	cmp	r3, r1
 8006af6:	bf04      	itt	eq
 8006af8:	6819      	ldreq	r1, [r3, #0]
 8006afa:	685b      	ldreq	r3, [r3, #4]
 8006afc:	6063      	str	r3, [r4, #4]
 8006afe:	bf04      	itt	eq
 8006b00:	1809      	addeq	r1, r1, r0
 8006b02:	6021      	streq	r1, [r4, #0]
 8006b04:	6054      	str	r4, [r2, #4]
 8006b06:	e7c7      	b.n	8006a98 <_free_r+0x24>
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
 8006b0a:	bf00      	nop
 8006b0c:	2000068c 	.word	0x2000068c

08006b10 <_malloc_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	1ccd      	adds	r5, r1, #3
 8006b14:	f025 0503 	bic.w	r5, r5, #3
 8006b18:	3508      	adds	r5, #8
 8006b1a:	2d0c      	cmp	r5, #12
 8006b1c:	bf38      	it	cc
 8006b1e:	250c      	movcc	r5, #12
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	4606      	mov	r6, r0
 8006b24:	db01      	blt.n	8006b2a <_malloc_r+0x1a>
 8006b26:	42a9      	cmp	r1, r5
 8006b28:	d903      	bls.n	8006b32 <_malloc_r+0x22>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	2000      	movs	r0, #0
 8006b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b32:	f000 faf7 	bl	8007124 <__malloc_lock>
 8006b36:	4921      	ldr	r1, [pc, #132]	; (8006bbc <_malloc_r+0xac>)
 8006b38:	680a      	ldr	r2, [r1, #0]
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	b99c      	cbnz	r4, 8006b66 <_malloc_r+0x56>
 8006b3e:	4f20      	ldr	r7, [pc, #128]	; (8006bc0 <_malloc_r+0xb0>)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b923      	cbnz	r3, 8006b4e <_malloc_r+0x3e>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 f83c 	bl	8006bc4 <_sbrk_r>
 8006b4c:	6038      	str	r0, [r7, #0]
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 f837 	bl	8006bc4 <_sbrk_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d123      	bne.n	8006ba2 <_malloc_r+0x92>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f000 fae6 	bl	8007130 <__malloc_unlock>
 8006b64:	e7e3      	b.n	8006b2e <_malloc_r+0x1e>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	1b5b      	subs	r3, r3, r5
 8006b6a:	d417      	bmi.n	8006b9c <_malloc_r+0x8c>
 8006b6c:	2b0b      	cmp	r3, #11
 8006b6e:	d903      	bls.n	8006b78 <_malloc_r+0x68>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	441c      	add	r4, r3
 8006b74:	6025      	str	r5, [r4, #0]
 8006b76:	e004      	b.n	8006b82 <_malloc_r+0x72>
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	42a2      	cmp	r2, r4
 8006b7c:	bf0c      	ite	eq
 8006b7e:	600b      	streq	r3, [r1, #0]
 8006b80:	6053      	strne	r3, [r2, #4]
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 fad4 	bl	8007130 <__malloc_unlock>
 8006b88:	f104 000b 	add.w	r0, r4, #11
 8006b8c:	1d23      	adds	r3, r4, #4
 8006b8e:	f020 0007 	bic.w	r0, r0, #7
 8006b92:	1ac2      	subs	r2, r0, r3
 8006b94:	d0cc      	beq.n	8006b30 <_malloc_r+0x20>
 8006b96:	1a1b      	subs	r3, r3, r0
 8006b98:	50a3      	str	r3, [r4, r2]
 8006b9a:	e7c9      	b.n	8006b30 <_malloc_r+0x20>
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	6864      	ldr	r4, [r4, #4]
 8006ba0:	e7cc      	b.n	8006b3c <_malloc_r+0x2c>
 8006ba2:	1cc4      	adds	r4, r0, #3
 8006ba4:	f024 0403 	bic.w	r4, r4, #3
 8006ba8:	42a0      	cmp	r0, r4
 8006baa:	d0e3      	beq.n	8006b74 <_malloc_r+0x64>
 8006bac:	1a21      	subs	r1, r4, r0
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f000 f808 	bl	8006bc4 <_sbrk_r>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d1dd      	bne.n	8006b74 <_malloc_r+0x64>
 8006bb8:	e7cf      	b.n	8006b5a <_malloc_r+0x4a>
 8006bba:	bf00      	nop
 8006bbc:	2000068c 	.word	0x2000068c
 8006bc0:	20000690 	.word	0x20000690

08006bc4 <_sbrk_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d06      	ldr	r5, [pc, #24]	; (8006be0 <_sbrk_r+0x1c>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	f7fa fabc 	bl	800114c <_sbrk>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_sbrk_r+0x1a>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_sbrk_r+0x1a>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	200006f0 	.word	0x200006f0

08006be4 <__sread>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	460c      	mov	r4, r1
 8006be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bec:	f000 fbfe 	bl	80073ec <_read_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	bfab      	itete	ge
 8006bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bf8:	181b      	addge	r3, r3, r0
 8006bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bfe:	bfac      	ite	ge
 8006c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c02:	81a3      	strhlt	r3, [r4, #12]
 8006c04:	bd10      	pop	{r4, pc}

08006c06 <__swrite>:
 8006c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	461f      	mov	r7, r3
 8006c0c:	898b      	ldrh	r3, [r1, #12]
 8006c0e:	05db      	lsls	r3, r3, #23
 8006c10:	4605      	mov	r5, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	4616      	mov	r6, r2
 8006c16:	d505      	bpl.n	8006c24 <__swrite+0x1e>
 8006c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f000 f9f8 	bl	8007014 <_lseek_r>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	4632      	mov	r2, r6
 8006c32:	463b      	mov	r3, r7
 8006c34:	4628      	mov	r0, r5
 8006c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3a:	f000 b869 	b.w	8006d10 <_write_r>

08006c3e <__sseek>:
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	460c      	mov	r4, r1
 8006c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c46:	f000 f9e5 	bl	8007014 <_lseek_r>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	bf15      	itete	ne
 8006c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c5a:	81a3      	strheq	r3, [r4, #12]
 8006c5c:	bf18      	it	ne
 8006c5e:	81a3      	strhne	r3, [r4, #12]
 8006c60:	bd10      	pop	{r4, pc}

08006c62 <__sclose>:
 8006c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c66:	f000 b8f1 	b.w	8006e4c <_close_r>
	...

08006c6c <__swbuf_r>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	460e      	mov	r6, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	4605      	mov	r5, r0
 8006c74:	b118      	cbz	r0, 8006c7e <__swbuf_r+0x12>
 8006c76:	6983      	ldr	r3, [r0, #24]
 8006c78:	b90b      	cbnz	r3, 8006c7e <__swbuf_r+0x12>
 8006c7a:	f7ff fab3 	bl	80061e4 <__sinit>
 8006c7e:	4b21      	ldr	r3, [pc, #132]	; (8006d04 <__swbuf_r+0x98>)
 8006c80:	429c      	cmp	r4, r3
 8006c82:	d12b      	bne.n	8006cdc <__swbuf_r+0x70>
 8006c84:	686c      	ldr	r4, [r5, #4]
 8006c86:	69a3      	ldr	r3, [r4, #24]
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	071a      	lsls	r2, r3, #28
 8006c8e:	d52f      	bpl.n	8006cf0 <__swbuf_r+0x84>
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	b36b      	cbz	r3, 8006cf0 <__swbuf_r+0x84>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	1ac0      	subs	r0, r0, r3
 8006c9a:	6963      	ldr	r3, [r4, #20]
 8006c9c:	b2f6      	uxtb	r6, r6
 8006c9e:	4283      	cmp	r3, r0
 8006ca0:	4637      	mov	r7, r6
 8006ca2:	dc04      	bgt.n	8006cae <__swbuf_r+0x42>
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 f966 	bl	8006f78 <_fflush_r>
 8006cac:	bb30      	cbnz	r0, 8006cfc <__swbuf_r+0x90>
 8006cae:	68a3      	ldr	r3, [r4, #8]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	60a3      	str	r3, [r4, #8]
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	6022      	str	r2, [r4, #0]
 8006cba:	701e      	strb	r6, [r3, #0]
 8006cbc:	6963      	ldr	r3, [r4, #20]
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	4283      	cmp	r3, r0
 8006cc2:	d004      	beq.n	8006cce <__swbuf_r+0x62>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	07db      	lsls	r3, r3, #31
 8006cc8:	d506      	bpl.n	8006cd8 <__swbuf_r+0x6c>
 8006cca:	2e0a      	cmp	r6, #10
 8006ccc:	d104      	bne.n	8006cd8 <__swbuf_r+0x6c>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 f951 	bl	8006f78 <_fflush_r>
 8006cd6:	b988      	cbnz	r0, 8006cfc <__swbuf_r+0x90>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <__swbuf_r+0x9c>)
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	d101      	bne.n	8006ce6 <__swbuf_r+0x7a>
 8006ce2:	68ac      	ldr	r4, [r5, #8]
 8006ce4:	e7cf      	b.n	8006c86 <__swbuf_r+0x1a>
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <__swbuf_r+0xa0>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	bf08      	it	eq
 8006cec:	68ec      	ldreq	r4, [r5, #12]
 8006cee:	e7ca      	b.n	8006c86 <__swbuf_r+0x1a>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f81e 	bl	8006d34 <__swsetup_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d0cb      	beq.n	8006c94 <__swbuf_r+0x28>
 8006cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8006d00:	e7ea      	b.n	8006cd8 <__swbuf_r+0x6c>
 8006d02:	bf00      	nop
 8006d04:	08007c9c 	.word	0x08007c9c
 8006d08:	08007cbc 	.word	0x08007cbc
 8006d0c:	08007c7c 	.word	0x08007c7c

08006d10 <_write_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	; (8006d30 <_write_r+0x20>)
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7fa f9c8 	bl	80010b4 <_write>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_write_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_write_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	200006f0 	.word	0x200006f0

08006d34 <__swsetup_r>:
 8006d34:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <__swsetup_r+0xcc>)
 8006d36:	b570      	push	{r4, r5, r6, lr}
 8006d38:	681d      	ldr	r5, [r3, #0]
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	b125      	cbz	r5, 8006d4a <__swsetup_r+0x16>
 8006d40:	69ab      	ldr	r3, [r5, #24]
 8006d42:	b913      	cbnz	r3, 8006d4a <__swsetup_r+0x16>
 8006d44:	4628      	mov	r0, r5
 8006d46:	f7ff fa4d 	bl	80061e4 <__sinit>
 8006d4a:	4b2e      	ldr	r3, [pc, #184]	; (8006e04 <__swsetup_r+0xd0>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	d10f      	bne.n	8006d70 <__swsetup_r+0x3c>
 8006d50:	686c      	ldr	r4, [r5, #4]
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d58:	0719      	lsls	r1, r3, #28
 8006d5a:	d42c      	bmi.n	8006db6 <__swsetup_r+0x82>
 8006d5c:	06dd      	lsls	r5, r3, #27
 8006d5e:	d411      	bmi.n	8006d84 <__swsetup_r+0x50>
 8006d60:	2309      	movs	r3, #9
 8006d62:	6033      	str	r3, [r6, #0]
 8006d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	e03e      	b.n	8006dee <__swsetup_r+0xba>
 8006d70:	4b25      	ldr	r3, [pc, #148]	; (8006e08 <__swsetup_r+0xd4>)
 8006d72:	429c      	cmp	r4, r3
 8006d74:	d101      	bne.n	8006d7a <__swsetup_r+0x46>
 8006d76:	68ac      	ldr	r4, [r5, #8]
 8006d78:	e7eb      	b.n	8006d52 <__swsetup_r+0x1e>
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <__swsetup_r+0xd8>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	bf08      	it	eq
 8006d80:	68ec      	ldreq	r4, [r5, #12]
 8006d82:	e7e6      	b.n	8006d52 <__swsetup_r+0x1e>
 8006d84:	0758      	lsls	r0, r3, #29
 8006d86:	d512      	bpl.n	8006dae <__swsetup_r+0x7a>
 8006d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8a:	b141      	cbz	r1, 8006d9e <__swsetup_r+0x6a>
 8006d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d90:	4299      	cmp	r1, r3
 8006d92:	d002      	beq.n	8006d9a <__swsetup_r+0x66>
 8006d94:	4630      	mov	r0, r6
 8006d96:	f7ff fe6d 	bl	8006a74 <_free_r>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	2300      	movs	r3, #0
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f043 0308 	orr.w	r3, r3, #8
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	b94b      	cbnz	r3, 8006dce <__swsetup_r+0x9a>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc4:	d003      	beq.n	8006dce <__swsetup_r+0x9a>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f959 	bl	8007080 <__smakebuf_r>
 8006dce:	89a0      	ldrh	r0, [r4, #12]
 8006dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd4:	f010 0301 	ands.w	r3, r0, #1
 8006dd8:	d00a      	beq.n	8006df0 <__swsetup_r+0xbc>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60a3      	str	r3, [r4, #8]
 8006dde:	6963      	ldr	r3, [r4, #20]
 8006de0:	425b      	negs	r3, r3
 8006de2:	61a3      	str	r3, [r4, #24]
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	b943      	cbnz	r3, 8006dfa <__swsetup_r+0xc6>
 8006de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dec:	d1ba      	bne.n	8006d64 <__swsetup_r+0x30>
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	0781      	lsls	r1, r0, #30
 8006df2:	bf58      	it	pl
 8006df4:	6963      	ldrpl	r3, [r4, #20]
 8006df6:	60a3      	str	r3, [r4, #8]
 8006df8:	e7f4      	b.n	8006de4 <__swsetup_r+0xb0>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e7f7      	b.n	8006dee <__swsetup_r+0xba>
 8006dfe:	bf00      	nop
 8006e00:	2000000c 	.word	0x2000000c
 8006e04:	08007c9c 	.word	0x08007c9c
 8006e08:	08007cbc 	.word	0x08007cbc
 8006e0c:	08007c7c 	.word	0x08007c7c

08006e10 <__assert_func>:
 8006e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e12:	4614      	mov	r4, r2
 8006e14:	461a      	mov	r2, r3
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <__assert_func+0x2c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	68d8      	ldr	r0, [r3, #12]
 8006e1e:	b14c      	cbz	r4, 8006e34 <__assert_func+0x24>
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <__assert_func+0x30>)
 8006e22:	9100      	str	r1, [sp, #0]
 8006e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e28:	4906      	ldr	r1, [pc, #24]	; (8006e44 <__assert_func+0x34>)
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	f000 f8e0 	bl	8006ff0 <fiprintf>
 8006e30:	f000 fafb 	bl	800742a <abort>
 8006e34:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <__assert_func+0x38>)
 8006e36:	461c      	mov	r4, r3
 8006e38:	e7f3      	b.n	8006e22 <__assert_func+0x12>
 8006e3a:	bf00      	nop
 8006e3c:	2000000c 	.word	0x2000000c
 8006e40:	08007e3c 	.word	0x08007e3c
 8006e44:	08007e49 	.word	0x08007e49
 8006e48:	08007e77 	.word	0x08007e77

08006e4c <_close_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d06      	ldr	r5, [pc, #24]	; (8006e68 <_close_r+0x1c>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f7fa f948 	bl	80010ec <_close>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_close_r+0x1a>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_close_r+0x1a>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200006f0 	.word	0x200006f0

08006e6c <__sflush_r>:
 8006e6c:	898a      	ldrh	r2, [r1, #12]
 8006e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e72:	4605      	mov	r5, r0
 8006e74:	0710      	lsls	r0, r2, #28
 8006e76:	460c      	mov	r4, r1
 8006e78:	d458      	bmi.n	8006f2c <__sflush_r+0xc0>
 8006e7a:	684b      	ldr	r3, [r1, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dc05      	bgt.n	8006e8c <__sflush_r+0x20>
 8006e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	dc02      	bgt.n	8006e8c <__sflush_r+0x20>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d0f9      	beq.n	8006e86 <__sflush_r+0x1a>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e98:	682f      	ldr	r7, [r5, #0]
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	d032      	beq.n	8006f04 <__sflush_r+0x98>
 8006e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	075a      	lsls	r2, r3, #29
 8006ea4:	d505      	bpl.n	8006eb2 <__sflush_r+0x46>
 8006ea6:	6863      	ldr	r3, [r4, #4]
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006eac:	b10b      	cbz	r3, 8006eb2 <__sflush_r+0x46>
 8006eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb8:	6a21      	ldr	r1, [r4, #32]
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b0      	blx	r6
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	d106      	bne.n	8006ed2 <__sflush_r+0x66>
 8006ec4:	6829      	ldr	r1, [r5, #0]
 8006ec6:	291d      	cmp	r1, #29
 8006ec8:	d82c      	bhi.n	8006f24 <__sflush_r+0xb8>
 8006eca:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <__sflush_r+0x108>)
 8006ecc:	40ca      	lsrs	r2, r1
 8006ece:	07d6      	lsls	r6, r2, #31
 8006ed0:	d528      	bpl.n	8006f24 <__sflush_r+0xb8>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	6062      	str	r2, [r4, #4]
 8006ed6:	04d9      	lsls	r1, r3, #19
 8006ed8:	6922      	ldr	r2, [r4, #16]
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	d504      	bpl.n	8006ee8 <__sflush_r+0x7c>
 8006ede:	1c42      	adds	r2, r0, #1
 8006ee0:	d101      	bne.n	8006ee6 <__sflush_r+0x7a>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	b903      	cbnz	r3, 8006ee8 <__sflush_r+0x7c>
 8006ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eea:	602f      	str	r7, [r5, #0]
 8006eec:	2900      	cmp	r1, #0
 8006eee:	d0ca      	beq.n	8006e86 <__sflush_r+0x1a>
 8006ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	d002      	beq.n	8006efe <__sflush_r+0x92>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fdbb 	bl	8006a74 <_free_r>
 8006efe:	2000      	movs	r0, #0
 8006f00:	6360      	str	r0, [r4, #52]	; 0x34
 8006f02:	e7c1      	b.n	8006e88 <__sflush_r+0x1c>
 8006f04:	6a21      	ldr	r1, [r4, #32]
 8006f06:	2301      	movs	r3, #1
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b0      	blx	r6
 8006f0c:	1c41      	adds	r1, r0, #1
 8006f0e:	d1c7      	bne.n	8006ea0 <__sflush_r+0x34>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c4      	beq.n	8006ea0 <__sflush_r+0x34>
 8006f16:	2b1d      	cmp	r3, #29
 8006f18:	d001      	beq.n	8006f1e <__sflush_r+0xb2>
 8006f1a:	2b16      	cmp	r3, #22
 8006f1c:	d101      	bne.n	8006f22 <__sflush_r+0xb6>
 8006f1e:	602f      	str	r7, [r5, #0]
 8006f20:	e7b1      	b.n	8006e86 <__sflush_r+0x1a>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	e7ad      	b.n	8006e88 <__sflush_r+0x1c>
 8006f2c:	690f      	ldr	r7, [r1, #16]
 8006f2e:	2f00      	cmp	r7, #0
 8006f30:	d0a9      	beq.n	8006e86 <__sflush_r+0x1a>
 8006f32:	0793      	lsls	r3, r2, #30
 8006f34:	680e      	ldr	r6, [r1, #0]
 8006f36:	bf08      	it	eq
 8006f38:	694b      	ldreq	r3, [r1, #20]
 8006f3a:	600f      	str	r7, [r1, #0]
 8006f3c:	bf18      	it	ne
 8006f3e:	2300      	movne	r3, #0
 8006f40:	eba6 0807 	sub.w	r8, r6, r7
 8006f44:	608b      	str	r3, [r1, #8]
 8006f46:	f1b8 0f00 	cmp.w	r8, #0
 8006f4a:	dd9c      	ble.n	8006e86 <__sflush_r+0x1a>
 8006f4c:	6a21      	ldr	r1, [r4, #32]
 8006f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f50:	4643      	mov	r3, r8
 8006f52:	463a      	mov	r2, r7
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b0      	blx	r6
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	dc06      	bgt.n	8006f6a <__sflush_r+0xfe>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	e78e      	b.n	8006e88 <__sflush_r+0x1c>
 8006f6a:	4407      	add	r7, r0
 8006f6c:	eba8 0800 	sub.w	r8, r8, r0
 8006f70:	e7e9      	b.n	8006f46 <__sflush_r+0xda>
 8006f72:	bf00      	nop
 8006f74:	20400001 	.word	0x20400001

08006f78 <_fflush_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	b913      	cbnz	r3, 8006f88 <_fflush_r+0x10>
 8006f82:	2500      	movs	r5, #0
 8006f84:	4628      	mov	r0, r5
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	b118      	cbz	r0, 8006f92 <_fflush_r+0x1a>
 8006f8a:	6983      	ldr	r3, [r0, #24]
 8006f8c:	b90b      	cbnz	r3, 8006f92 <_fflush_r+0x1a>
 8006f8e:	f7ff f929 	bl	80061e4 <__sinit>
 8006f92:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <_fflush_r+0x6c>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d11b      	bne.n	8006fd0 <_fflush_r+0x58>
 8006f98:	686c      	ldr	r4, [r5, #4]
 8006f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0ef      	beq.n	8006f82 <_fflush_r+0xa>
 8006fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fa4:	07d0      	lsls	r0, r2, #31
 8006fa6:	d404      	bmi.n	8006fb2 <_fflush_r+0x3a>
 8006fa8:	0599      	lsls	r1, r3, #22
 8006faa:	d402      	bmi.n	8006fb2 <_fflush_r+0x3a>
 8006fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fae:	f7ff f9bc 	bl	800632a <__retarget_lock_acquire_recursive>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	f7ff ff59 	bl	8006e6c <__sflush_r>
 8006fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fbc:	07da      	lsls	r2, r3, #31
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	d4e0      	bmi.n	8006f84 <_fflush_r+0xc>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	059b      	lsls	r3, r3, #22
 8006fc6:	d4dd      	bmi.n	8006f84 <_fflush_r+0xc>
 8006fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fca:	f7ff f9af 	bl	800632c <__retarget_lock_release_recursive>
 8006fce:	e7d9      	b.n	8006f84 <_fflush_r+0xc>
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <_fflush_r+0x70>)
 8006fd2:	429c      	cmp	r4, r3
 8006fd4:	d101      	bne.n	8006fda <_fflush_r+0x62>
 8006fd6:	68ac      	ldr	r4, [r5, #8]
 8006fd8:	e7df      	b.n	8006f9a <_fflush_r+0x22>
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <_fflush_r+0x74>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	bf08      	it	eq
 8006fe0:	68ec      	ldreq	r4, [r5, #12]
 8006fe2:	e7da      	b.n	8006f9a <_fflush_r+0x22>
 8006fe4:	08007c9c 	.word	0x08007c9c
 8006fe8:	08007cbc 	.word	0x08007cbc
 8006fec:	08007c7c 	.word	0x08007c7c

08006ff0 <fiprintf>:
 8006ff0:	b40e      	push	{r1, r2, r3}
 8006ff2:	b503      	push	{r0, r1, lr}
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	ab03      	add	r3, sp, #12
 8006ff8:	4805      	ldr	r0, [pc, #20]	; (8007010 <fiprintf+0x20>)
 8006ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	f000 f8c3 	bl	800718c <_vfiprintf_r>
 8007006:	b002      	add	sp, #8
 8007008:	f85d eb04 	ldr.w	lr, [sp], #4
 800700c:	b003      	add	sp, #12
 800700e:	4770      	bx	lr
 8007010:	2000000c 	.word	0x2000000c

08007014 <_lseek_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_lseek_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7fa f886 	bl	8001134 <_lseek>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_lseek_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_lseek_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	200006f0 	.word	0x200006f0

08007038 <__swhatbuf_r>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	460e      	mov	r6, r1
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	2900      	cmp	r1, #0
 8007042:	b096      	sub	sp, #88	; 0x58
 8007044:	4614      	mov	r4, r2
 8007046:	461d      	mov	r5, r3
 8007048:	da07      	bge.n	800705a <__swhatbuf_r+0x22>
 800704a:	2300      	movs	r3, #0
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	89b3      	ldrh	r3, [r6, #12]
 8007050:	061a      	lsls	r2, r3, #24
 8007052:	d410      	bmi.n	8007076 <__swhatbuf_r+0x3e>
 8007054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007058:	e00e      	b.n	8007078 <__swhatbuf_r+0x40>
 800705a:	466a      	mov	r2, sp
 800705c:	f000 f9ec 	bl	8007438 <_fstat_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	dbf2      	blt.n	800704a <__swhatbuf_r+0x12>
 8007064:	9a01      	ldr	r2, [sp, #4]
 8007066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800706a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800706e:	425a      	negs	r2, r3
 8007070:	415a      	adcs	r2, r3
 8007072:	602a      	str	r2, [r5, #0]
 8007074:	e7ee      	b.n	8007054 <__swhatbuf_r+0x1c>
 8007076:	2340      	movs	r3, #64	; 0x40
 8007078:	2000      	movs	r0, #0
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	b016      	add	sp, #88	; 0x58
 800707e:	bd70      	pop	{r4, r5, r6, pc}

08007080 <__smakebuf_r>:
 8007080:	898b      	ldrh	r3, [r1, #12]
 8007082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007084:	079d      	lsls	r5, r3, #30
 8007086:	4606      	mov	r6, r0
 8007088:	460c      	mov	r4, r1
 800708a:	d507      	bpl.n	800709c <__smakebuf_r+0x1c>
 800708c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	2301      	movs	r3, #1
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	b002      	add	sp, #8
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	ab01      	add	r3, sp, #4
 800709e:	466a      	mov	r2, sp
 80070a0:	f7ff ffca 	bl	8007038 <__swhatbuf_r>
 80070a4:	9900      	ldr	r1, [sp, #0]
 80070a6:	4605      	mov	r5, r0
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff fd31 	bl	8006b10 <_malloc_r>
 80070ae:	b948      	cbnz	r0, 80070c4 <__smakebuf_r+0x44>
 80070b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b4:	059a      	lsls	r2, r3, #22
 80070b6:	d4ef      	bmi.n	8007098 <__smakebuf_r+0x18>
 80070b8:	f023 0303 	bic.w	r3, r3, #3
 80070bc:	f043 0302 	orr.w	r3, r3, #2
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	e7e3      	b.n	800708c <__smakebuf_r+0xc>
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <__smakebuf_r+0x7c>)
 80070c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	6020      	str	r0, [r4, #0]
 80070cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	9b00      	ldr	r3, [sp, #0]
 80070d4:	6163      	str	r3, [r4, #20]
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	6120      	str	r0, [r4, #16]
 80070da:	b15b      	cbz	r3, 80070f4 <__smakebuf_r+0x74>
 80070dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f9bb 	bl	800745c <_isatty_r>
 80070e6:	b128      	cbz	r0, 80070f4 <__smakebuf_r+0x74>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	89a0      	ldrh	r0, [r4, #12]
 80070f6:	4305      	orrs	r5, r0
 80070f8:	81a5      	strh	r5, [r4, #12]
 80070fa:	e7cd      	b.n	8007098 <__smakebuf_r+0x18>
 80070fc:	0800617d 	.word	0x0800617d

08007100 <__ascii_mbtowc>:
 8007100:	b082      	sub	sp, #8
 8007102:	b901      	cbnz	r1, 8007106 <__ascii_mbtowc+0x6>
 8007104:	a901      	add	r1, sp, #4
 8007106:	b142      	cbz	r2, 800711a <__ascii_mbtowc+0x1a>
 8007108:	b14b      	cbz	r3, 800711e <__ascii_mbtowc+0x1e>
 800710a:	7813      	ldrb	r3, [r2, #0]
 800710c:	600b      	str	r3, [r1, #0]
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	1e10      	subs	r0, r2, #0
 8007112:	bf18      	it	ne
 8007114:	2001      	movne	r0, #1
 8007116:	b002      	add	sp, #8
 8007118:	4770      	bx	lr
 800711a:	4610      	mov	r0, r2
 800711c:	e7fb      	b.n	8007116 <__ascii_mbtowc+0x16>
 800711e:	f06f 0001 	mvn.w	r0, #1
 8007122:	e7f8      	b.n	8007116 <__ascii_mbtowc+0x16>

08007124 <__malloc_lock>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__malloc_lock+0x8>)
 8007126:	f7ff b900 	b.w	800632a <__retarget_lock_acquire_recursive>
 800712a:	bf00      	nop
 800712c:	200006e8 	.word	0x200006e8

08007130 <__malloc_unlock>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__malloc_unlock+0x8>)
 8007132:	f7ff b8fb 	b.w	800632c <__retarget_lock_release_recursive>
 8007136:	bf00      	nop
 8007138:	200006e8 	.word	0x200006e8

0800713c <__sfputc_r>:
 800713c:	6893      	ldr	r3, [r2, #8]
 800713e:	3b01      	subs	r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	b410      	push	{r4}
 8007144:	6093      	str	r3, [r2, #8]
 8007146:	da07      	bge.n	8007158 <__sfputc_r+0x1c>
 8007148:	6994      	ldr	r4, [r2, #24]
 800714a:	42a3      	cmp	r3, r4
 800714c:	db01      	blt.n	8007152 <__sfputc_r+0x16>
 800714e:	290a      	cmp	r1, #10
 8007150:	d102      	bne.n	8007158 <__sfputc_r+0x1c>
 8007152:	bc10      	pop	{r4}
 8007154:	f7ff bd8a 	b.w	8006c6c <__swbuf_r>
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	1c58      	adds	r0, r3, #1
 800715c:	6010      	str	r0, [r2, #0]
 800715e:	7019      	strb	r1, [r3, #0]
 8007160:	4608      	mov	r0, r1
 8007162:	bc10      	pop	{r4}
 8007164:	4770      	bx	lr

08007166 <__sfputs_r>:
 8007166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007168:	4606      	mov	r6, r0
 800716a:	460f      	mov	r7, r1
 800716c:	4614      	mov	r4, r2
 800716e:	18d5      	adds	r5, r2, r3
 8007170:	42ac      	cmp	r4, r5
 8007172:	d101      	bne.n	8007178 <__sfputs_r+0x12>
 8007174:	2000      	movs	r0, #0
 8007176:	e007      	b.n	8007188 <__sfputs_r+0x22>
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	463a      	mov	r2, r7
 800717e:	4630      	mov	r0, r6
 8007180:	f7ff ffdc 	bl	800713c <__sfputc_r>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d1f3      	bne.n	8007170 <__sfputs_r+0xa>
 8007188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800718c <_vfiprintf_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	460d      	mov	r5, r1
 8007192:	b09d      	sub	sp, #116	; 0x74
 8007194:	4614      	mov	r4, r2
 8007196:	4698      	mov	r8, r3
 8007198:	4606      	mov	r6, r0
 800719a:	b118      	cbz	r0, 80071a4 <_vfiprintf_r+0x18>
 800719c:	6983      	ldr	r3, [r0, #24]
 800719e:	b90b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x18>
 80071a0:	f7ff f820 	bl	80061e4 <__sinit>
 80071a4:	4b89      	ldr	r3, [pc, #548]	; (80073cc <_vfiprintf_r+0x240>)
 80071a6:	429d      	cmp	r5, r3
 80071a8:	d11b      	bne.n	80071e2 <_vfiprintf_r+0x56>
 80071aa:	6875      	ldr	r5, [r6, #4]
 80071ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	d405      	bmi.n	80071be <_vfiprintf_r+0x32>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	059a      	lsls	r2, r3, #22
 80071b6:	d402      	bmi.n	80071be <_vfiprintf_r+0x32>
 80071b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ba:	f7ff f8b6 	bl	800632a <__retarget_lock_acquire_recursive>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	071b      	lsls	r3, r3, #28
 80071c2:	d501      	bpl.n	80071c8 <_vfiprintf_r+0x3c>
 80071c4:	692b      	ldr	r3, [r5, #16]
 80071c6:	b9eb      	cbnz	r3, 8007204 <_vfiprintf_r+0x78>
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff fdb2 	bl	8006d34 <__swsetup_r>
 80071d0:	b1c0      	cbz	r0, 8007204 <_vfiprintf_r+0x78>
 80071d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071d4:	07dc      	lsls	r4, r3, #31
 80071d6:	d50e      	bpl.n	80071f6 <_vfiprintf_r+0x6a>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b01d      	add	sp, #116	; 0x74
 80071de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e2:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <_vfiprintf_r+0x244>)
 80071e4:	429d      	cmp	r5, r3
 80071e6:	d101      	bne.n	80071ec <_vfiprintf_r+0x60>
 80071e8:	68b5      	ldr	r5, [r6, #8]
 80071ea:	e7df      	b.n	80071ac <_vfiprintf_r+0x20>
 80071ec:	4b79      	ldr	r3, [pc, #484]	; (80073d4 <_vfiprintf_r+0x248>)
 80071ee:	429d      	cmp	r5, r3
 80071f0:	bf08      	it	eq
 80071f2:	68f5      	ldreq	r5, [r6, #12]
 80071f4:	e7da      	b.n	80071ac <_vfiprintf_r+0x20>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	0598      	lsls	r0, r3, #22
 80071fa:	d4ed      	bmi.n	80071d8 <_vfiprintf_r+0x4c>
 80071fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071fe:	f7ff f895 	bl	800632c <__retarget_lock_release_recursive>
 8007202:	e7e9      	b.n	80071d8 <_vfiprintf_r+0x4c>
 8007204:	2300      	movs	r3, #0
 8007206:	9309      	str	r3, [sp, #36]	; 0x24
 8007208:	2320      	movs	r3, #32
 800720a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073d8 <_vfiprintf_r+0x24c>
 8007218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721c:	f04f 0901 	mov.w	r9, #1
 8007220:	4623      	mov	r3, r4
 8007222:	469a      	mov	sl, r3
 8007224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007228:	b10a      	cbz	r2, 800722e <_vfiprintf_r+0xa2>
 800722a:	2a25      	cmp	r2, #37	; 0x25
 800722c:	d1f9      	bne.n	8007222 <_vfiprintf_r+0x96>
 800722e:	ebba 0b04 	subs.w	fp, sl, r4
 8007232:	d00b      	beq.n	800724c <_vfiprintf_r+0xc0>
 8007234:	465b      	mov	r3, fp
 8007236:	4622      	mov	r2, r4
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ff93 	bl	8007166 <__sfputs_r>
 8007240:	3001      	adds	r0, #1
 8007242:	f000 80aa 	beq.w	800739a <_vfiprintf_r+0x20e>
 8007246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007248:	445a      	add	r2, fp
 800724a:	9209      	str	r2, [sp, #36]	; 0x24
 800724c:	f89a 3000 	ldrb.w	r3, [sl]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80a2 	beq.w	800739a <_vfiprintf_r+0x20e>
 8007256:	2300      	movs	r3, #0
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007260:	f10a 0a01 	add.w	sl, sl, #1
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726c:	931a      	str	r3, [sp, #104]	; 0x68
 800726e:	4654      	mov	r4, sl
 8007270:	2205      	movs	r2, #5
 8007272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007276:	4858      	ldr	r0, [pc, #352]	; (80073d8 <_vfiprintf_r+0x24c>)
 8007278:	f7f8 ff8a 	bl	8000190 <memchr>
 800727c:	9a04      	ldr	r2, [sp, #16]
 800727e:	b9d8      	cbnz	r0, 80072b8 <_vfiprintf_r+0x12c>
 8007280:	06d1      	lsls	r1, r2, #27
 8007282:	bf44      	itt	mi
 8007284:	2320      	movmi	r3, #32
 8007286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728a:	0713      	lsls	r3, r2, #28
 800728c:	bf44      	itt	mi
 800728e:	232b      	movmi	r3, #43	; 0x2b
 8007290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007294:	f89a 3000 	ldrb.w	r3, [sl]
 8007298:	2b2a      	cmp	r3, #42	; 0x2a
 800729a:	d015      	beq.n	80072c8 <_vfiprintf_r+0x13c>
 800729c:	9a07      	ldr	r2, [sp, #28]
 800729e:	4654      	mov	r4, sl
 80072a0:	2000      	movs	r0, #0
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4621      	mov	r1, r4
 80072a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ac:	3b30      	subs	r3, #48	; 0x30
 80072ae:	2b09      	cmp	r3, #9
 80072b0:	d94e      	bls.n	8007350 <_vfiprintf_r+0x1c4>
 80072b2:	b1b0      	cbz	r0, 80072e2 <_vfiprintf_r+0x156>
 80072b4:	9207      	str	r2, [sp, #28]
 80072b6:	e014      	b.n	80072e2 <_vfiprintf_r+0x156>
 80072b8:	eba0 0308 	sub.w	r3, r0, r8
 80072bc:	fa09 f303 	lsl.w	r3, r9, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	46a2      	mov	sl, r4
 80072c6:	e7d2      	b.n	800726e <_vfiprintf_r+0xe2>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	1d19      	adds	r1, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	9103      	str	r1, [sp, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfbb      	ittet	lt
 80072d4:	425b      	neglt	r3, r3
 80072d6:	f042 0202 	orrlt.w	r2, r2, #2
 80072da:	9307      	strge	r3, [sp, #28]
 80072dc:	9307      	strlt	r3, [sp, #28]
 80072de:	bfb8      	it	lt
 80072e0:	9204      	strlt	r2, [sp, #16]
 80072e2:	7823      	ldrb	r3, [r4, #0]
 80072e4:	2b2e      	cmp	r3, #46	; 0x2e
 80072e6:	d10c      	bne.n	8007302 <_vfiprintf_r+0x176>
 80072e8:	7863      	ldrb	r3, [r4, #1]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d135      	bne.n	800735a <_vfiprintf_r+0x1ce>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	1d1a      	adds	r2, r3, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	9203      	str	r2, [sp, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bfb8      	it	lt
 80072fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fe:	3402      	adds	r4, #2
 8007300:	9305      	str	r3, [sp, #20]
 8007302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073e8 <_vfiprintf_r+0x25c>
 8007306:	7821      	ldrb	r1, [r4, #0]
 8007308:	2203      	movs	r2, #3
 800730a:	4650      	mov	r0, sl
 800730c:	f7f8 ff40 	bl	8000190 <memchr>
 8007310:	b140      	cbz	r0, 8007324 <_vfiprintf_r+0x198>
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	eba0 000a 	sub.w	r0, r0, sl
 8007318:	fa03 f000 	lsl.w	r0, r3, r0
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4303      	orrs	r3, r0
 8007320:	3401      	adds	r4, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	482c      	ldr	r0, [pc, #176]	; (80073dc <_vfiprintf_r+0x250>)
 800732a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732e:	2206      	movs	r2, #6
 8007330:	f7f8 ff2e 	bl	8000190 <memchr>
 8007334:	2800      	cmp	r0, #0
 8007336:	d03f      	beq.n	80073b8 <_vfiprintf_r+0x22c>
 8007338:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <_vfiprintf_r+0x254>)
 800733a:	bb1b      	cbnz	r3, 8007384 <_vfiprintf_r+0x1f8>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	3307      	adds	r3, #7
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734a:	443b      	add	r3, r7
 800734c:	9309      	str	r3, [sp, #36]	; 0x24
 800734e:	e767      	b.n	8007220 <_vfiprintf_r+0x94>
 8007350:	fb0c 3202 	mla	r2, ip, r2, r3
 8007354:	460c      	mov	r4, r1
 8007356:	2001      	movs	r0, #1
 8007358:	e7a5      	b.n	80072a6 <_vfiprintf_r+0x11a>
 800735a:	2300      	movs	r3, #0
 800735c:	3401      	adds	r4, #1
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	4619      	mov	r1, r3
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	4620      	mov	r0, r4
 8007368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736c:	3a30      	subs	r2, #48	; 0x30
 800736e:	2a09      	cmp	r2, #9
 8007370:	d903      	bls.n	800737a <_vfiprintf_r+0x1ee>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c5      	beq.n	8007302 <_vfiprintf_r+0x176>
 8007376:	9105      	str	r1, [sp, #20]
 8007378:	e7c3      	b.n	8007302 <_vfiprintf_r+0x176>
 800737a:	fb0c 2101 	mla	r1, ip, r1, r2
 800737e:	4604      	mov	r4, r0
 8007380:	2301      	movs	r3, #1
 8007382:	e7f0      	b.n	8007366 <_vfiprintf_r+0x1da>
 8007384:	ab03      	add	r3, sp, #12
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	462a      	mov	r2, r5
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <_vfiprintf_r+0x258>)
 800738c:	a904      	add	r1, sp, #16
 800738e:	4630      	mov	r0, r6
 8007390:	f7fd fc98 	bl	8004cc4 <_printf_float>
 8007394:	4607      	mov	r7, r0
 8007396:	1c78      	adds	r0, r7, #1
 8007398:	d1d6      	bne.n	8007348 <_vfiprintf_r+0x1bc>
 800739a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800739c:	07d9      	lsls	r1, r3, #31
 800739e:	d405      	bmi.n	80073ac <_vfiprintf_r+0x220>
 80073a0:	89ab      	ldrh	r3, [r5, #12]
 80073a2:	059a      	lsls	r2, r3, #22
 80073a4:	d402      	bmi.n	80073ac <_vfiprintf_r+0x220>
 80073a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a8:	f7fe ffc0 	bl	800632c <__retarget_lock_release_recursive>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	065b      	lsls	r3, r3, #25
 80073b0:	f53f af12 	bmi.w	80071d8 <_vfiprintf_r+0x4c>
 80073b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b6:	e711      	b.n	80071dc <_vfiprintf_r+0x50>
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <_vfiprintf_r+0x258>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4630      	mov	r0, r6
 80073c4:	f7fd ff16 	bl	80051f4 <_printf_i>
 80073c8:	e7e4      	b.n	8007394 <_vfiprintf_r+0x208>
 80073ca:	bf00      	nop
 80073cc:	08007c9c 	.word	0x08007c9c
 80073d0:	08007cbc 	.word	0x08007cbc
 80073d4:	08007c7c 	.word	0x08007c7c
 80073d8:	08007e82 	.word	0x08007e82
 80073dc:	08007e8c 	.word	0x08007e8c
 80073e0:	08004cc5 	.word	0x08004cc5
 80073e4:	08007167 	.word	0x08007167
 80073e8:	08007e88 	.word	0x08007e88

080073ec <_read_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d07      	ldr	r5, [pc, #28]	; (800740c <_read_r+0x20>)
 80073f0:	4604      	mov	r4, r0
 80073f2:	4608      	mov	r0, r1
 80073f4:	4611      	mov	r1, r2
 80073f6:	2200      	movs	r2, #0
 80073f8:	602a      	str	r2, [r5, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	f7f9 fe3d 	bl	800107a <_read>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d102      	bne.n	800740a <_read_r+0x1e>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	b103      	cbz	r3, 800740a <_read_r+0x1e>
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	200006f0 	.word	0x200006f0

08007410 <__ascii_wctomb>:
 8007410:	4603      	mov	r3, r0
 8007412:	4608      	mov	r0, r1
 8007414:	b141      	cbz	r1, 8007428 <__ascii_wctomb+0x18>
 8007416:	2aff      	cmp	r2, #255	; 0xff
 8007418:	d904      	bls.n	8007424 <__ascii_wctomb+0x14>
 800741a:	228a      	movs	r2, #138	; 0x8a
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f04f 30ff 	mov.w	r0, #4294967295
 8007422:	4770      	bx	lr
 8007424:	700a      	strb	r2, [r1, #0]
 8007426:	2001      	movs	r0, #1
 8007428:	4770      	bx	lr

0800742a <abort>:
 800742a:	b508      	push	{r3, lr}
 800742c:	2006      	movs	r0, #6
 800742e:	f000 f84d 	bl	80074cc <raise>
 8007432:	2001      	movs	r0, #1
 8007434:	f7f9 fe17 	bl	8001066 <_exit>

08007438 <_fstat_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d07      	ldr	r5, [pc, #28]	; (8007458 <_fstat_r+0x20>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	f7f9 fe5c 	bl	8001102 <_fstat>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	d102      	bne.n	8007454 <_fstat_r+0x1c>
 800744e:	682b      	ldr	r3, [r5, #0]
 8007450:	b103      	cbz	r3, 8007454 <_fstat_r+0x1c>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd38      	pop	{r3, r4, r5, pc}
 8007456:	bf00      	nop
 8007458:	200006f0 	.word	0x200006f0

0800745c <_isatty_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	; (8007478 <_isatty_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7f9 fe5a 	bl	8001120 <_isatty>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_isatty_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_isatty_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	200006f0 	.word	0x200006f0

0800747c <_raise_r>:
 800747c:	291f      	cmp	r1, #31
 800747e:	b538      	push	{r3, r4, r5, lr}
 8007480:	4604      	mov	r4, r0
 8007482:	460d      	mov	r5, r1
 8007484:	d904      	bls.n	8007490 <_raise_r+0x14>
 8007486:	2316      	movs	r3, #22
 8007488:	6003      	str	r3, [r0, #0]
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007492:	b112      	cbz	r2, 800749a <_raise_r+0x1e>
 8007494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007498:	b94b      	cbnz	r3, 80074ae <_raise_r+0x32>
 800749a:	4620      	mov	r0, r4
 800749c:	f000 f830 	bl	8007500 <_getpid_r>
 80074a0:	462a      	mov	r2, r5
 80074a2:	4601      	mov	r1, r0
 80074a4:	4620      	mov	r0, r4
 80074a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074aa:	f000 b817 	b.w	80074dc <_kill_r>
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d00a      	beq.n	80074c8 <_raise_r+0x4c>
 80074b2:	1c59      	adds	r1, r3, #1
 80074b4:	d103      	bne.n	80074be <_raise_r+0x42>
 80074b6:	2316      	movs	r3, #22
 80074b8:	6003      	str	r3, [r0, #0]
 80074ba:	2001      	movs	r0, #1
 80074bc:	e7e7      	b.n	800748e <_raise_r+0x12>
 80074be:	2400      	movs	r4, #0
 80074c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074c4:	4628      	mov	r0, r5
 80074c6:	4798      	blx	r3
 80074c8:	2000      	movs	r0, #0
 80074ca:	e7e0      	b.n	800748e <_raise_r+0x12>

080074cc <raise>:
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <raise+0xc>)
 80074ce:	4601      	mov	r1, r0
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	f7ff bfd3 	b.w	800747c <_raise_r>
 80074d6:	bf00      	nop
 80074d8:	2000000c 	.word	0x2000000c

080074dc <_kill_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d07      	ldr	r5, [pc, #28]	; (80074fc <_kill_r+0x20>)
 80074e0:	2300      	movs	r3, #0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	f7f9 fdac 	bl	8001046 <_kill>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d102      	bne.n	80074f8 <_kill_r+0x1c>
 80074f2:	682b      	ldr	r3, [r5, #0]
 80074f4:	b103      	cbz	r3, 80074f8 <_kill_r+0x1c>
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
 80074fa:	bf00      	nop
 80074fc:	200006f0 	.word	0x200006f0

08007500 <_getpid_r>:
 8007500:	f7f9 bd9a 	b.w	8001038 <_getpid>

08007504 <_init>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr

08007510 <_fini>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr
