
LoRa_E5_LM75_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007874  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  080079b8  080079b8  000179b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ecc  08007ecc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed4  08007ed4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001e0  080080bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080080bc  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131f3  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf9  00000000  00000000  000333fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000360f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00037410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b44b  00000000  00000000  00038600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013259  00000000  00000000  00053a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a159c  00000000  00000000  00066ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fac  00000000  00000000  00108294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800799c 	.word	0x0800799c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800799c 	.word	0x0800799c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_fmul>:
 8000230:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000238:	bf1e      	ittt	ne
 800023a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800023e:	ea92 0f0c 	teqne	r2, ip
 8000242:	ea93 0f0c 	teqne	r3, ip
 8000246:	d06f      	beq.n	8000328 <__aeabi_fmul+0xf8>
 8000248:	441a      	add	r2, r3
 800024a:	ea80 0c01 	eor.w	ip, r0, r1
 800024e:	0240      	lsls	r0, r0, #9
 8000250:	bf18      	it	ne
 8000252:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000256:	d01e      	beq.n	8000296 <__aeabi_fmul+0x66>
 8000258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800025c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000260:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000264:	fba0 3101 	umull	r3, r1, r0, r1
 8000268:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800026c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000270:	bf3e      	ittt	cc
 8000272:	0049      	lslcc	r1, r1, #1
 8000274:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000278:	005b      	lslcc	r3, r3, #1
 800027a:	ea40 0001 	orr.w	r0, r0, r1
 800027e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000282:	2afd      	cmp	r2, #253	; 0xfd
 8000284:	d81d      	bhi.n	80002c2 <__aeabi_fmul+0x92>
 8000286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800028a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800028e:	bf08      	it	eq
 8000290:	f020 0001 	biceq.w	r0, r0, #1
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800029e:	bf08      	it	eq
 80002a0:	0249      	lsleq	r1, r1, #9
 80002a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002aa:	3a7f      	subs	r2, #127	; 0x7f
 80002ac:	bfc2      	ittt	gt
 80002ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002b6:	4770      	bxgt	lr
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	dc5d      	bgt.n	8000380 <__aeabi_fmul+0x150>
 80002c4:	f112 0f19 	cmn.w	r2, #25
 80002c8:	bfdc      	itt	le
 80002ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ce:	4770      	bxle	lr
 80002d0:	f1c2 0200 	rsb	r2, r2, #0
 80002d4:	0041      	lsls	r1, r0, #1
 80002d6:	fa21 f102 	lsr.w	r1, r1, r2
 80002da:	f1c2 0220 	rsb	r2, r2, #32
 80002de:	fa00 fc02 	lsl.w	ip, r0, r2
 80002e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002e6:	f140 0000 	adc.w	r0, r0, #0
 80002ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ee:	bf08      	it	eq
 80002f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002f4:	4770      	bx	lr
 80002f6:	f092 0f00 	teq	r2, #0
 80002fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002fe:	bf02      	ittt	eq
 8000300:	0040      	lsleq	r0, r0, #1
 8000302:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000306:	3a01      	subeq	r2, #1
 8000308:	d0f9      	beq.n	80002fe <__aeabi_fmul+0xce>
 800030a:	ea40 000c 	orr.w	r0, r0, ip
 800030e:	f093 0f00 	teq	r3, #0
 8000312:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0049      	lsleq	r1, r1, #1
 800031a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800031e:	3b01      	subeq	r3, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xe6>
 8000322:	ea41 010c 	orr.w	r1, r1, ip
 8000326:	e78f      	b.n	8000248 <__aeabi_fmul+0x18>
 8000328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800032c:	ea92 0f0c 	teq	r2, ip
 8000330:	bf18      	it	ne
 8000332:	ea93 0f0c 	teqne	r3, ip
 8000336:	d00a      	beq.n	800034e <__aeabi_fmul+0x11e>
 8000338:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800033c:	bf18      	it	ne
 800033e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000342:	d1d8      	bne.n	80002f6 <__aeabi_fmul+0xc6>
 8000344:	ea80 0001 	eor.w	r0, r0, r1
 8000348:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800034c:	4770      	bx	lr
 800034e:	f090 0f00 	teq	r0, #0
 8000352:	bf17      	itett	ne
 8000354:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000358:	4608      	moveq	r0, r1
 800035a:	f091 0f00 	teqne	r1, #0
 800035e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000362:	d014      	beq.n	800038e <__aeabi_fmul+0x15e>
 8000364:	ea92 0f0c 	teq	r2, ip
 8000368:	d101      	bne.n	800036e <__aeabi_fmul+0x13e>
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	d10f      	bne.n	800038e <__aeabi_fmul+0x15e>
 800036e:	ea93 0f0c 	teq	r3, ip
 8000372:	d103      	bne.n	800037c <__aeabi_fmul+0x14c>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	bf18      	it	ne
 8000378:	4608      	movne	r0, r1
 800037a:	d108      	bne.n	800038e <__aeabi_fmul+0x15e>
 800037c:	ea80 0001 	eor.w	r0, r0, r1
 8000380:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800038c:	4770      	bx	lr
 800038e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000392:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000396:	4770      	bx	lr

08000398 <__aeabi_drsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800039c:	e002      	b.n	80003a4 <__adddf3>
 800039e:	bf00      	nop

080003a0 <__aeabi_dsub>:
 80003a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003a4 <__adddf3>:
 80003a4:	b530      	push	{r4, r5, lr}
 80003a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ae:	ea94 0f05 	teq	r4, r5
 80003b2:	bf08      	it	eq
 80003b4:	ea90 0f02 	teqeq	r0, r2
 80003b8:	bf1f      	itttt	ne
 80003ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ca:	f000 80e2 	beq.w	8000592 <__adddf3+0x1ee>
 80003ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003d6:	bfb8      	it	lt
 80003d8:	426d      	neglt	r5, r5
 80003da:	dd0c      	ble.n	80003f6 <__adddf3+0x52>
 80003dc:	442c      	add	r4, r5
 80003de:	ea80 0202 	eor.w	r2, r0, r2
 80003e2:	ea81 0303 	eor.w	r3, r1, r3
 80003e6:	ea82 0000 	eor.w	r0, r2, r0
 80003ea:	ea83 0101 	eor.w	r1, r3, r1
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	2d36      	cmp	r5, #54	; 0x36
 80003f8:	bf88      	it	hi
 80003fa:	bd30      	pophi	{r4, r5, pc}
 80003fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000400:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000404:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x70>
 800040e:	4240      	negs	r0, r0
 8000410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000414:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000418:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800041c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000420:	d002      	beq.n	8000428 <__adddf3+0x84>
 8000422:	4252      	negs	r2, r2
 8000424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000428:	ea94 0f05 	teq	r4, r5
 800042c:	f000 80a7 	beq.w	800057e <__adddf3+0x1da>
 8000430:	f1a4 0401 	sub.w	r4, r4, #1
 8000434:	f1d5 0e20 	rsbs	lr, r5, #32
 8000438:	db0d      	blt.n	8000456 <__adddf3+0xb2>
 800043a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800043e:	fa22 f205 	lsr.w	r2, r2, r5
 8000442:	1880      	adds	r0, r0, r2
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	fa03 f20e 	lsl.w	r2, r3, lr
 800044c:	1880      	adds	r0, r0, r2
 800044e:	fa43 f305 	asr.w	r3, r3, r5
 8000452:	4159      	adcs	r1, r3
 8000454:	e00e      	b.n	8000474 <__adddf3+0xd0>
 8000456:	f1a5 0520 	sub.w	r5, r5, #32
 800045a:	f10e 0e20 	add.w	lr, lr, #32
 800045e:	2a01      	cmp	r2, #1
 8000460:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000464:	bf28      	it	cs
 8000466:	f04c 0c02 	orrcs.w	ip, ip, #2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	18c0      	adds	r0, r0, r3
 8000470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	d507      	bpl.n	800048a <__adddf3+0xe6>
 800047a:	f04f 0e00 	mov.w	lr, #0
 800047e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000482:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000486:	eb6e 0101 	sbc.w	r1, lr, r1
 800048a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800048e:	d31b      	bcc.n	80004c8 <__adddf3+0x124>
 8000490:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000494:	d30c      	bcc.n	80004b0 <__adddf3+0x10c>
 8000496:	0849      	lsrs	r1, r1, #1
 8000498:	ea5f 0030 	movs.w	r0, r0, rrx
 800049c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a0:	f104 0401 	add.w	r4, r4, #1
 80004a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004ac:	f080 809a 	bcs.w	80005e4 <__adddf3+0x240>
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b4:	bf08      	it	eq
 80004b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ba:	f150 0000 	adcs.w	r0, r0, #0
 80004be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004c2:	ea41 0105 	orr.w	r1, r1, r5
 80004c6:	bd30      	pop	{r4, r5, pc}
 80004c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004cc:	4140      	adcs	r0, r0
 80004ce:	eb41 0101 	adc.w	r1, r1, r1
 80004d2:	3c01      	subs	r4, #1
 80004d4:	bf28      	it	cs
 80004d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004da:	d2e9      	bcs.n	80004b0 <__adddf3+0x10c>
 80004dc:	f091 0f00 	teq	r1, #0
 80004e0:	bf04      	itt	eq
 80004e2:	4601      	moveq	r1, r0
 80004e4:	2000      	moveq	r0, #0
 80004e6:	fab1 f381 	clz	r3, r1
 80004ea:	bf08      	it	eq
 80004ec:	3320      	addeq	r3, #32
 80004ee:	f1a3 030b 	sub.w	r3, r3, #11
 80004f2:	f1b3 0220 	subs.w	r2, r3, #32
 80004f6:	da0c      	bge.n	8000512 <__adddf3+0x16e>
 80004f8:	320c      	adds	r2, #12
 80004fa:	dd08      	ble.n	800050e <__adddf3+0x16a>
 80004fc:	f102 0c14 	add.w	ip, r2, #20
 8000500:	f1c2 020c 	rsb	r2, r2, #12
 8000504:	fa01 f00c 	lsl.w	r0, r1, ip
 8000508:	fa21 f102 	lsr.w	r1, r1, r2
 800050c:	e00c      	b.n	8000528 <__adddf3+0x184>
 800050e:	f102 0214 	add.w	r2, r2, #20
 8000512:	bfd8      	it	le
 8000514:	f1c2 0c20 	rsble	ip, r2, #32
 8000518:	fa01 f102 	lsl.w	r1, r1, r2
 800051c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000520:	bfdc      	itt	le
 8000522:	ea41 010c 	orrle.w	r1, r1, ip
 8000526:	4090      	lslle	r0, r2
 8000528:	1ae4      	subs	r4, r4, r3
 800052a:	bfa2      	ittt	ge
 800052c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000530:	4329      	orrge	r1, r5
 8000532:	bd30      	popge	{r4, r5, pc}
 8000534:	ea6f 0404 	mvn.w	r4, r4
 8000538:	3c1f      	subs	r4, #31
 800053a:	da1c      	bge.n	8000576 <__adddf3+0x1d2>
 800053c:	340c      	adds	r4, #12
 800053e:	dc0e      	bgt.n	800055e <__adddf3+0x1ba>
 8000540:	f104 0414 	add.w	r4, r4, #20
 8000544:	f1c4 0220 	rsb	r2, r4, #32
 8000548:	fa20 f004 	lsr.w	r0, r0, r4
 800054c:	fa01 f302 	lsl.w	r3, r1, r2
 8000550:	ea40 0003 	orr.w	r0, r0, r3
 8000554:	fa21 f304 	lsr.w	r3, r1, r4
 8000558:	ea45 0103 	orr.w	r1, r5, r3
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	f1c4 040c 	rsb	r4, r4, #12
 8000562:	f1c4 0220 	rsb	r2, r4, #32
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 f304 	lsl.w	r3, r1, r4
 800056e:	ea40 0003 	orr.w	r0, r0, r3
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	fa21 f004 	lsr.w	r0, r1, r4
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f094 0f00 	teq	r4, #0
 8000582:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000586:	bf06      	itte	eq
 8000588:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800058c:	3401      	addeq	r4, #1
 800058e:	3d01      	subne	r5, #1
 8000590:	e74e      	b.n	8000430 <__adddf3+0x8c>
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf18      	it	ne
 8000598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800059c:	d029      	beq.n	80005f2 <__adddf3+0x24e>
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	d005      	beq.n	80005b6 <__adddf3+0x212>
 80005aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ae:	bf04      	itt	eq
 80005b0:	4619      	moveq	r1, r3
 80005b2:	4610      	moveq	r0, r2
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	ea91 0f03 	teq	r1, r3
 80005ba:	bf1e      	ittt	ne
 80005bc:	2100      	movne	r1, #0
 80005be:	2000      	movne	r0, #0
 80005c0:	bd30      	popne	{r4, r5, pc}
 80005c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005c6:	d105      	bne.n	80005d4 <__adddf3+0x230>
 80005c8:	0040      	lsls	r0, r0, #1
 80005ca:	4149      	adcs	r1, r1
 80005cc:	bf28      	it	cs
 80005ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d8:	bf3c      	itt	cc
 80005da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005de:	bd30      	popcc	{r4, r5, pc}
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005ec:	f04f 0000 	mov.w	r0, #0
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf1a      	itte	ne
 80005f8:	4619      	movne	r1, r3
 80005fa:	4610      	movne	r0, r2
 80005fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000600:	bf1c      	itt	ne
 8000602:	460b      	movne	r3, r1
 8000604:	4602      	movne	r2, r0
 8000606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800060a:	bf06      	itte	eq
 800060c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000610:	ea91 0f03 	teqeq	r1, r3
 8000614:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop

0800061c <__aeabi_ui2d>:
 800061c:	f090 0f00 	teq	r0, #0
 8000620:	bf04      	itt	eq
 8000622:	2100      	moveq	r1, #0
 8000624:	4770      	bxeq	lr
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000630:	f04f 0500 	mov.w	r5, #0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e750      	b.n	80004dc <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_i2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000654:	bf48      	it	mi
 8000656:	4240      	negmi	r0, r0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e73e      	b.n	80004dc <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_f2d>:
 8000660:	0042      	lsls	r2, r0, #1
 8000662:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800066e:	bf1f      	itttt	ne
 8000670:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000678:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800067c:	4770      	bxne	lr
 800067e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000682:	bf08      	it	eq
 8000684:	4770      	bxeq	lr
 8000686:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800068a:	bf04      	itt	eq
 800068c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	e71c      	b.n	80004dc <__adddf3+0x138>
 80006a2:	bf00      	nop

080006a4 <__aeabi_ul2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	e00a      	b.n	80006ca <__aeabi_l2d+0x16>

080006b4 <__aeabi_l2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006c2:	d502      	bpl.n	80006ca <__aeabi_l2d+0x16>
 80006c4:	4240      	negs	r0, r0
 80006c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006d6:	f43f aed8 	beq.w	800048a <__adddf3+0xe6>
 80006da:	f04f 0203 	mov.w	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006fa:	fa20 f002 	lsr.w	r0, r0, r2
 80006fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000702:	ea40 000e 	orr.w	r0, r0, lr
 8000706:	fa21 f102 	lsr.w	r1, r1, r2
 800070a:	4414      	add	r4, r2
 800070c:	e6bd      	b.n	800048a <__adddf3+0xe6>
 800070e:	bf00      	nop

08000710 <__aeabi_dmul>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8de 	bleq	80008ec <__aeabi_dmul+0x1dc>
 8000730:	442c      	add	r4, r5
 8000732:	ea81 0603 	eor.w	r6, r1, r3
 8000736:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800073a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800073e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000742:	bf18      	it	ne
 8000744:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000750:	d038      	beq.n	80007c4 <__aeabi_dmul+0xb4>
 8000752:	fba0 ce02 	umull	ip, lr, r0, r2
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800075e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000762:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000766:	f04f 0600 	mov.w	r6, #0
 800076a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800076e:	f09c 0f00 	teq	ip, #0
 8000772:	bf18      	it	ne
 8000774:	f04e 0e01 	orrne.w	lr, lr, #1
 8000778:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800077c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000780:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000784:	d204      	bcs.n	8000790 <__aeabi_dmul+0x80>
 8000786:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800078a:	416d      	adcs	r5, r5
 800078c:	eb46 0606 	adc.w	r6, r6, r6
 8000790:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000794:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000798:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800079c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a8:	bf88      	it	hi
 80007aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ae:	d81e      	bhi.n	80007ee <__aeabi_dmul+0xde>
 80007b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007b4:	bf08      	it	eq
 80007b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ba:	f150 0000 	adcs.w	r0, r0, #0
 80007be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c8:	ea46 0101 	orr.w	r1, r6, r1
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d8:	bfc2      	ittt	gt
 80007da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007e2:	bd70      	popgt	{r4, r5, r6, pc}
 80007e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e8:	f04f 0e00 	mov.w	lr, #0
 80007ec:	3c01      	subs	r4, #1
 80007ee:	f300 80ab 	bgt.w	8000948 <__aeabi_dmul+0x238>
 80007f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007f6:	bfde      	ittt	le
 80007f8:	2000      	movle	r0, #0
 80007fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007fe:	bd70      	pople	{r4, r5, r6, pc}
 8000800:	f1c4 0400 	rsb	r4, r4, #0
 8000804:	3c20      	subs	r4, #32
 8000806:	da35      	bge.n	8000874 <__aeabi_dmul+0x164>
 8000808:	340c      	adds	r4, #12
 800080a:	dc1b      	bgt.n	8000844 <__aeabi_dmul+0x134>
 800080c:	f104 0414 	add.w	r4, r4, #20
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f305 	lsl.w	r3, r0, r5
 8000818:	fa20 f004 	lsr.w	r0, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000830:	fa21 f604 	lsr.w	r6, r1, r4
 8000834:	eb42 0106 	adc.w	r1, r2, r6
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f1c4 040c 	rsb	r4, r4, #12
 8000848:	f1c4 0520 	rsb	r5, r4, #32
 800084c:	fa00 f304 	lsl.w	r3, r0, r4
 8000850:	fa20 f005 	lsr.w	r0, r0, r5
 8000854:	fa01 f204 	lsl.w	r2, r1, r4
 8000858:	ea40 0002 	orr.w	r0, r0, r2
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000864:	f141 0100 	adc.w	r1, r1, #0
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f1c4 0520 	rsb	r5, r4, #32
 8000878:	fa00 f205 	lsl.w	r2, r0, r5
 800087c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000880:	fa20 f304 	lsr.w	r3, r0, r4
 8000884:	fa01 f205 	lsl.w	r2, r1, r5
 8000888:	ea43 0302 	orr.w	r3, r3, r2
 800088c:	fa21 f004 	lsr.w	r0, r1, r4
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	fa21 f204 	lsr.w	r2, r1, r4
 8000898:	ea20 0002 	bic.w	r0, r0, r2
 800089c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008a4:	bf08      	it	eq
 80008a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f094 0f00 	teq	r4, #0
 80008b0:	d10f      	bne.n	80008d2 <__aeabi_dmul+0x1c2>
 80008b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008b6:	0040      	lsls	r0, r0, #1
 80008b8:	eb41 0101 	adc.w	r1, r1, r1
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf08      	it	eq
 80008c2:	3c01      	subeq	r4, #1
 80008c4:	d0f7      	beq.n	80008b6 <__aeabi_dmul+0x1a6>
 80008c6:	ea41 0106 	orr.w	r1, r1, r6
 80008ca:	f095 0f00 	teq	r5, #0
 80008ce:	bf18      	it	ne
 80008d0:	4770      	bxne	lr
 80008d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	eb43 0303 	adc.w	r3, r3, r3
 80008dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e0:	bf08      	it	eq
 80008e2:	3d01      	subeq	r5, #1
 80008e4:	d0f7      	beq.n	80008d6 <__aeabi_dmul+0x1c6>
 80008e6:	ea43 0306 	orr.w	r3, r3, r6
 80008ea:	4770      	bx	lr
 80008ec:	ea94 0f0c 	teq	r4, ip
 80008f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008f4:	bf18      	it	ne
 80008f6:	ea95 0f0c 	teqne	r5, ip
 80008fa:	d00c      	beq.n	8000916 <__aeabi_dmul+0x206>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	d1d1      	bne.n	80008ac <__aeabi_dmul+0x19c>
 8000908:	ea81 0103 	eor.w	r1, r1, r3
 800090c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091a:	bf06      	itte	eq
 800091c:	4610      	moveq	r0, r2
 800091e:	4619      	moveq	r1, r3
 8000920:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000924:	d019      	beq.n	800095a <__aeabi_dmul+0x24a>
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	d102      	bne.n	8000932 <__aeabi_dmul+0x222>
 800092c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000930:	d113      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	d105      	bne.n	8000944 <__aeabi_dmul+0x234>
 8000938:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800093c:	bf1c      	itt	ne
 800093e:	4610      	movne	r0, r2
 8000940:	4619      	movne	r1, r3
 8000942:	d10a      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000944:	ea81 0103 	eor.w	r1, r1, r3
 8000948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800094c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800095e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000962:	bd70      	pop	{r4, r5, r6, pc}

08000964 <__aeabi_ddiv>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800096a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800096e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000972:	bf1d      	ittte	ne
 8000974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000978:	ea94 0f0c 	teqne	r4, ip
 800097c:	ea95 0f0c 	teqne	r5, ip
 8000980:	f000 f8a7 	bleq	8000ad2 <__aeabi_ddiv+0x16e>
 8000984:	eba4 0405 	sub.w	r4, r4, r5
 8000988:	ea81 0e03 	eor.w	lr, r1, r3
 800098c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000990:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000994:	f000 8088 	beq.w	8000aa8 <__aeabi_ddiv+0x144>
 8000998:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800099c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009bc:	429d      	cmp	r5, r3
 80009be:	bf08      	it	eq
 80009c0:	4296      	cmpeq	r6, r2
 80009c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ca:	d202      	bcs.n	80009d2 <__aeabi_ddiv+0x6e>
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d2:	1ab6      	subs	r6, r6, r2
 80009d4:	eb65 0503 	sbc.w	r5, r5, r3
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a44:	d018      	beq.n	8000a78 <__aeabi_ddiv+0x114>
 8000a46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a62:	d1c0      	bne.n	80009e6 <__aeabi_ddiv+0x82>
 8000a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a68:	d10b      	bne.n	8000a82 <__aeabi_ddiv+0x11e>
 8000a6a:	ea41 0100 	orr.w	r1, r1, r0
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a76:	e7b6      	b.n	80009e6 <__aeabi_ddiv+0x82>
 8000a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a7c:	bf04      	itt	eq
 8000a7e:	4301      	orreq	r1, r0
 8000a80:	2000      	moveq	r0, #0
 8000a82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a86:	bf88      	it	hi
 8000a88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a8c:	f63f aeaf 	bhi.w	80007ee <__aeabi_dmul+0xde>
 8000a90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a94:	bf04      	itt	eq
 8000a96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a9e:	f150 0000 	adcs.w	r0, r0, #0
 8000aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ab4:	bfc2      	ittt	gt
 8000ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000abe:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac4:	f04f 0e00 	mov.w	lr, #0
 8000ac8:	3c01      	subs	r4, #1
 8000aca:	e690      	b.n	80007ee <__aeabi_dmul+0xde>
 8000acc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad0:	e68d      	b.n	80007ee <__aeabi_dmul+0xde>
 8000ad2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ad6:	ea94 0f0c 	teq	r4, ip
 8000ada:	bf08      	it	eq
 8000adc:	ea95 0f0c 	teqeq	r5, ip
 8000ae0:	f43f af3b 	beq.w	800095a <__aeabi_dmul+0x24a>
 8000ae4:	ea94 0f0c 	teq	r4, ip
 8000ae8:	d10a      	bne.n	8000b00 <__aeabi_ddiv+0x19c>
 8000aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aee:	f47f af34 	bne.w	800095a <__aeabi_dmul+0x24a>
 8000af2:	ea95 0f0c 	teq	r5, ip
 8000af6:	f47f af25 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	e72c      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b00:	ea95 0f0c 	teq	r5, ip
 8000b04:	d106      	bne.n	8000b14 <__aeabi_ddiv+0x1b0>
 8000b06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b0a:	f43f aefd 	beq.w	8000908 <__aeabi_dmul+0x1f8>
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	e722      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b18:	bf18      	it	ne
 8000b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b1e:	f47f aec5 	bne.w	80008ac <__aeabi_dmul+0x19c>
 8000b22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b26:	f47f af0d 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000b2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b2e:	f47f aeeb 	bne.w	8000908 <__aeabi_dmul+0x1f8>
 8000b32:	e712      	b.n	800095a <__aeabi_dmul+0x24a>

08000b34 <__gedf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__ledf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpdf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b5e:	d01b      	beq.n	8000b98 <__cmpdf2+0x54>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b66:	bf0c      	ite	eq
 8000b68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b6c:	ea91 0f03 	teqne	r1, r3
 8000b70:	bf02      	ittt	eq
 8000b72:	ea90 0f02 	teqeq	r0, r2
 8000b76:	2000      	moveq	r0, #0
 8000b78:	4770      	bxeq	lr
 8000b7a:	f110 0f00 	cmn.w	r0, #0
 8000b7e:	ea91 0f03 	teq	r1, r3
 8000b82:	bf58      	it	pl
 8000b84:	4299      	cmppl	r1, r3
 8000b86:	bf08      	it	eq
 8000b88:	4290      	cmpeq	r0, r2
 8000b8a:	bf2c      	ite	cs
 8000b8c:	17d8      	asrcs	r0, r3, #31
 8000b8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b92:	f040 0001 	orr.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__cmpdf2+0x64>
 8000ba2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ba6:	d107      	bne.n	8000bb8 <__cmpdf2+0x74>
 8000ba8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb0:	d1d6      	bne.n	8000b60 <__cmpdf2+0x1c>
 8000bb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bb6:	d0d3      	beq.n	8000b60 <__cmpdf2+0x1c>
 8000bb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_cdrcmple>:
 8000bc0:	4684      	mov	ip, r0
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	468c      	mov	ip, r1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4663      	mov	r3, ip
 8000bcc:	e000      	b.n	8000bd0 <__aeabi_cdcmpeq>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_cdcmpeq>:
 8000bd0:	b501      	push	{r0, lr}
 8000bd2:	f7ff ffb7 	bl	8000b44 <__cmpdf2>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	bf48      	it	mi
 8000bda:	f110 0f00 	cmnmi.w	r0, #0
 8000bde:	bd01      	pop	{r0, pc}

08000be0 <__aeabi_dcmpeq>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff fff4 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000be8:	bf0c      	ite	eq
 8000bea:	2001      	moveq	r0, #1
 8000bec:	2000      	movne	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmplt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffea 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmple>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffe0 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000c10:	bf94      	ite	ls
 8000c12:	2001      	movls	r0, #1
 8000c14:	2000      	movhi	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpge>:
 8000c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c20:	f7ff ffce 	bl	8000bc0 <__aeabi_cdrcmple>
 8000c24:	bf94      	ite	ls
 8000c26:	2001      	movls	r0, #1
 8000c28:	2000      	movhi	r0, #0
 8000c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2e:	bf00      	nop

08000c30 <__aeabi_dcmpgt>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff ffc4 	bl	8000bc0 <__aeabi_cdrcmple>
 8000c38:	bf34      	ite	cc
 8000c3a:	2001      	movcc	r0, #1
 8000c3c:	2000      	movcs	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_dcmpun>:
 8000c44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c4c:	d102      	bne.n	8000c54 <__aeabi_dcmpun+0x10>
 8000c4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c52:	d10a      	bne.n	8000c6a <__aeabi_dcmpun+0x26>
 8000c54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_dcmpun+0x20>
 8000c5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c62:	d102      	bne.n	8000c6a <__aeabi_dcmpun+0x26>
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	f04f 0001 	mov.w	r0, #1
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2iz>:
 8000c70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c78:	d215      	bcs.n	8000ca6 <__aeabi_d2iz+0x36>
 8000c7a:	d511      	bpl.n	8000ca0 <__aeabi_d2iz+0x30>
 8000c7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c84:	d912      	bls.n	8000cac <__aeabi_d2iz+0x3c>
 8000c86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c96:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	4240      	negne	r0, r0
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_d2iz+0x48>
 8000cac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bx	lr
 8000cb8:	f04f 0000 	mov.w	r0, #0
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_d2f>:
 8000cc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cc8:	bf24      	itt	cs
 8000cca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cd2:	d90d      	bls.n	8000cf0 <__aeabi_d2f+0x30>
 8000cd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ce4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cf4:	d121      	bne.n	8000d3a <__aeabi_d2f+0x7a>
 8000cf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cfa:	bfbc      	itt	lt
 8000cfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d00:	4770      	bxlt	lr
 8000d02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d0a:	f1c2 0218 	rsb	r2, r2, #24
 8000d0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d16:	fa20 f002 	lsr.w	r0, r0, r2
 8000d1a:	bf18      	it	ne
 8000d1c:	f040 0001 	orrne.w	r0, r0, #1
 8000d20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d2c:	ea40 000c 	orr.w	r0, r0, ip
 8000d30:	fa23 f302 	lsr.w	r3, r3, r2
 8000d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d38:	e7cc      	b.n	8000cd4 <__aeabi_d2f+0x14>
 8000d3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d3e:	d107      	bne.n	8000d50 <__aeabi_d2f+0x90>
 8000d40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d44:	bf1e      	ittt	ne
 8000d46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bxne	lr
 8000d50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <__aeabi_frsub>:
 8000d60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d64:	e002      	b.n	8000d6c <__addsf3>
 8000d66:	bf00      	nop

08000d68 <__aeabi_fsub>:
 8000d68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d6c <__addsf3>:
 8000d6c:	0042      	lsls	r2, r0, #1
 8000d6e:	bf1f      	itttt	ne
 8000d70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d74:	ea92 0f03 	teqne	r2, r3
 8000d78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d80:	d06a      	beq.n	8000e58 <__addsf3+0xec>
 8000d82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d8a:	bfc1      	itttt	gt
 8000d8c:	18d2      	addgt	r2, r2, r3
 8000d8e:	4041      	eorgt	r1, r0
 8000d90:	4048      	eorgt	r0, r1
 8000d92:	4041      	eorgt	r1, r0
 8000d94:	bfb8      	it	lt
 8000d96:	425b      	neglt	r3, r3
 8000d98:	2b19      	cmp	r3, #25
 8000d9a:	bf88      	it	hi
 8000d9c:	4770      	bxhi	lr
 8000d9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000daa:	bf18      	it	ne
 8000dac:	4240      	negne	r0, r0
 8000dae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000db2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000db6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000dba:	bf18      	it	ne
 8000dbc:	4249      	negne	r1, r1
 8000dbe:	ea92 0f03 	teq	r2, r3
 8000dc2:	d03f      	beq.n	8000e44 <__addsf3+0xd8>
 8000dc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000dc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000dcc:	eb10 000c 	adds.w	r0, r0, ip
 8000dd0:	f1c3 0320 	rsb	r3, r3, #32
 8000dd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000dd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__addsf3+0x78>
 8000dde:	4249      	negs	r1, r1
 8000de0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000de4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000de8:	d313      	bcc.n	8000e12 <__addsf3+0xa6>
 8000dea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dee:	d306      	bcc.n	8000dfe <__addsf3+0x92>
 8000df0:	0840      	lsrs	r0, r0, #1
 8000df2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000df6:	f102 0201 	add.w	r2, r2, #1
 8000dfa:	2afe      	cmp	r2, #254	; 0xfe
 8000dfc:	d251      	bcs.n	8000ea2 <__addsf3+0x136>
 8000dfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e06:	bf08      	it	eq
 8000e08:	f020 0001 	biceq.w	r0, r0, #1
 8000e0c:	ea40 0003 	orr.w	r0, r0, r3
 8000e10:	4770      	bx	lr
 8000e12:	0049      	lsls	r1, r1, #1
 8000e14:	eb40 0000 	adc.w	r0, r0, r0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	bf28      	it	cs
 8000e1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e20:	d2ed      	bcs.n	8000dfe <__addsf3+0x92>
 8000e22:	fab0 fc80 	clz	ip, r0
 8000e26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e32:	bfaa      	itet	ge
 8000e34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e38:	4252      	neglt	r2, r2
 8000e3a:	4318      	orrge	r0, r3
 8000e3c:	bfbc      	itt	lt
 8000e3e:	40d0      	lsrlt	r0, r2
 8000e40:	4318      	orrlt	r0, r3
 8000e42:	4770      	bx	lr
 8000e44:	f092 0f00 	teq	r2, #0
 8000e48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e4c:	bf06      	itte	eq
 8000e4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e52:	3201      	addeq	r2, #1
 8000e54:	3b01      	subne	r3, #1
 8000e56:	e7b5      	b.n	8000dc4 <__addsf3+0x58>
 8000e58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	bf18      	it	ne
 8000e62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e66:	d021      	beq.n	8000eac <__addsf3+0x140>
 8000e68:	ea92 0f03 	teq	r2, r3
 8000e6c:	d004      	beq.n	8000e78 <__addsf3+0x10c>
 8000e6e:	f092 0f00 	teq	r2, #0
 8000e72:	bf08      	it	eq
 8000e74:	4608      	moveq	r0, r1
 8000e76:	4770      	bx	lr
 8000e78:	ea90 0f01 	teq	r0, r1
 8000e7c:	bf1c      	itt	ne
 8000e7e:	2000      	movne	r0, #0
 8000e80:	4770      	bxne	lr
 8000e82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e86:	d104      	bne.n	8000e92 <__addsf3+0x126>
 8000e88:	0040      	lsls	r0, r0, #1
 8000e8a:	bf28      	it	cs
 8000e8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e96:	bf3c      	itt	cc
 8000e98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bxcc	lr
 8000e9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ea2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eaa:	4770      	bx	lr
 8000eac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000eb0:	bf16      	itet	ne
 8000eb2:	4608      	movne	r0, r1
 8000eb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000eb8:	4601      	movne	r1, r0
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	bf06      	itte	eq
 8000ebe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ec2:	ea90 0f01 	teqeq	r0, r1
 8000ec6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_ui2f>:
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	e004      	b.n	8000edc <__aeabi_i2f+0x8>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_i2f>:
 8000ed4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ed8:	bf48      	it	mi
 8000eda:	4240      	negmi	r0, r0
 8000edc:	ea5f 0c00 	movs.w	ip, r0
 8000ee0:	bf08      	it	eq
 8000ee2:	4770      	bxeq	lr
 8000ee4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ee8:	4601      	mov	r1, r0
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	e01c      	b.n	8000f2a <__aeabi_l2f+0x2a>

08000ef0 <__aeabi_ul2f>:
 8000ef0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ef4:	bf08      	it	eq
 8000ef6:	4770      	bxeq	lr
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e00a      	b.n	8000f14 <__aeabi_l2f+0x14>
 8000efe:	bf00      	nop

08000f00 <__aeabi_l2f>:
 8000f00:	ea50 0201 	orrs.w	r2, r0, r1
 8000f04:	bf08      	it	eq
 8000f06:	4770      	bxeq	lr
 8000f08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f0c:	d502      	bpl.n	8000f14 <__aeabi_l2f+0x14>
 8000f0e:	4240      	negs	r0, r0
 8000f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f14:	ea5f 0c01 	movs.w	ip, r1
 8000f18:	bf02      	ittt	eq
 8000f1a:	4684      	moveq	ip, r0
 8000f1c:	4601      	moveq	r1, r0
 8000f1e:	2000      	moveq	r0, #0
 8000f20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f24:	bf08      	it	eq
 8000f26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f2e:	fabc f28c 	clz	r2, ip
 8000f32:	3a08      	subs	r2, #8
 8000f34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f38:	db10      	blt.n	8000f5c <__aeabi_l2f+0x5c>
 8000f3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f3e:	4463      	add	r3, ip
 8000f40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f44:	f1c2 0220 	rsb	r2, r2, #32
 8000f48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f50:	eb43 0002 	adc.w	r0, r3, r2
 8000f54:	bf08      	it	eq
 8000f56:	f020 0001 	biceq.w	r0, r0, #1
 8000f5a:	4770      	bx	lr
 8000f5c:	f102 0220 	add.w	r2, r2, #32
 8000f60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f64:	f1c2 0220 	rsb	r2, r2, #32
 8000f68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000f70:	eb43 0002 	adc.w	r0, r3, r2
 8000f74:	bf08      	it	eq
 8000f76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_f2iz>:
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f84:	d30f      	bcc.n	8000fa6 <__aeabi_f2iz+0x2a>
 8000f86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8e:	d90d      	bls.n	8000fac <__aeabi_f2iz+0x30>
 8000f90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	bf18      	it	ne
 8000fa2:	4240      	negne	r0, r0
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2iz+0x3a>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d105      	bne.n	8000fc2 <__aeabi_f2iz+0x46>
 8000fb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fba:	bf08      	it	eq
 8000fbc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_uldivmod>:
 8000fc8:	b953      	cbnz	r3, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fca:	b94a      	cbnz	r2, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fcc:	2900      	cmp	r1, #0
 8000fce:	bf08      	it	eq
 8000fd0:	2800      	cmpeq	r0, #0
 8000fd2:	bf1c      	itt	ne
 8000fd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000fdc:	f000 b96c 	b.w	80012b8 <__aeabi_idiv0>
 8000fe0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe8:	f000 f806 	bl	8000ff8 <__udivmoddi4>
 8000fec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff4:	b004      	add	sp, #16
 8000ff6:	4770      	bx	lr

08000ff8 <__udivmoddi4>:
 8000ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ffc:	9e08      	ldr	r6, [sp, #32]
 8000ffe:	460d      	mov	r5, r1
 8001000:	4604      	mov	r4, r0
 8001002:	468e      	mov	lr, r1
 8001004:	2b00      	cmp	r3, #0
 8001006:	f040 8082 	bne.w	800110e <__udivmoddi4+0x116>
 800100a:	428a      	cmp	r2, r1
 800100c:	4617      	mov	r7, r2
 800100e:	d946      	bls.n	800109e <__udivmoddi4+0xa6>
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	b14a      	cbz	r2, 800102a <__udivmoddi4+0x32>
 8001016:	f1c2 0120 	rsb	r1, r2, #32
 800101a:	fa05 f302 	lsl.w	r3, r5, r2
 800101e:	fa20 f101 	lsr.w	r1, r0, r1
 8001022:	4097      	lsls	r7, r2
 8001024:	ea41 0e03 	orr.w	lr, r1, r3
 8001028:	4094      	lsls	r4, r2
 800102a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800102e:	0c23      	lsrs	r3, r4, #16
 8001030:	fbbe fcf8 	udiv	ip, lr, r8
 8001034:	b2b9      	uxth	r1, r7
 8001036:	fb08 ee1c 	mls	lr, r8, ip, lr
 800103a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800103e:	fb0c f001 	mul.w	r0, ip, r1
 8001042:	4298      	cmp	r0, r3
 8001044:	d90a      	bls.n	800105c <__udivmoddi4+0x64>
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	f10c 35ff 	add.w	r5, ip, #4294967295
 800104c:	f080 8116 	bcs.w	800127c <__udivmoddi4+0x284>
 8001050:	4298      	cmp	r0, r3
 8001052:	f240 8113 	bls.w	800127c <__udivmoddi4+0x284>
 8001056:	f1ac 0c02 	sub.w	ip, ip, #2
 800105a:	443b      	add	r3, r7
 800105c:	1a1b      	subs	r3, r3, r0
 800105e:	b2a4      	uxth	r4, r4
 8001060:	fbb3 f0f8 	udiv	r0, r3, r8
 8001064:	fb08 3310 	mls	r3, r8, r0, r3
 8001068:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800106c:	fb00 f101 	mul.w	r1, r0, r1
 8001070:	42a1      	cmp	r1, r4
 8001072:	d909      	bls.n	8001088 <__udivmoddi4+0x90>
 8001074:	193c      	adds	r4, r7, r4
 8001076:	f100 33ff 	add.w	r3, r0, #4294967295
 800107a:	f080 8101 	bcs.w	8001280 <__udivmoddi4+0x288>
 800107e:	42a1      	cmp	r1, r4
 8001080:	f240 80fe 	bls.w	8001280 <__udivmoddi4+0x288>
 8001084:	3802      	subs	r0, #2
 8001086:	443c      	add	r4, r7
 8001088:	1a64      	subs	r4, r4, r1
 800108a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800108e:	2100      	movs	r1, #0
 8001090:	b11e      	cbz	r6, 800109a <__udivmoddi4+0xa2>
 8001092:	40d4      	lsrs	r4, r2
 8001094:	2300      	movs	r3, #0
 8001096:	e9c6 4300 	strd	r4, r3, [r6]
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	b902      	cbnz	r2, 80010a2 <__udivmoddi4+0xaa>
 80010a0:	deff      	udf	#255	; 0xff
 80010a2:	fab2 f282 	clz	r2, r2
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d14f      	bne.n	800114a <__udivmoddi4+0x152>
 80010aa:	1bcb      	subs	r3, r1, r7
 80010ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010b0:	fa1f f887 	uxth.w	r8, r7
 80010b4:	2101      	movs	r1, #1
 80010b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80010ba:	0c25      	lsrs	r5, r4, #16
 80010bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80010c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010c4:	fb08 f30c 	mul.w	r3, r8, ip
 80010c8:	42ab      	cmp	r3, r5
 80010ca:	d907      	bls.n	80010dc <__udivmoddi4+0xe4>
 80010cc:	197d      	adds	r5, r7, r5
 80010ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010d2:	d202      	bcs.n	80010da <__udivmoddi4+0xe2>
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	f200 80e7 	bhi.w	80012a8 <__udivmoddi4+0x2b0>
 80010da:	4684      	mov	ip, r0
 80010dc:	1aed      	subs	r5, r5, r3
 80010de:	b2a3      	uxth	r3, r4
 80010e0:	fbb5 f0fe 	udiv	r0, r5, lr
 80010e4:	fb0e 5510 	mls	r5, lr, r0, r5
 80010e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80010ec:	fb08 f800 	mul.w	r8, r8, r0
 80010f0:	45a0      	cmp	r8, r4
 80010f2:	d907      	bls.n	8001104 <__udivmoddi4+0x10c>
 80010f4:	193c      	adds	r4, r7, r4
 80010f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80010fa:	d202      	bcs.n	8001102 <__udivmoddi4+0x10a>
 80010fc:	45a0      	cmp	r8, r4
 80010fe:	f200 80d7 	bhi.w	80012b0 <__udivmoddi4+0x2b8>
 8001102:	4618      	mov	r0, r3
 8001104:	eba4 0408 	sub.w	r4, r4, r8
 8001108:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800110c:	e7c0      	b.n	8001090 <__udivmoddi4+0x98>
 800110e:	428b      	cmp	r3, r1
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x12c>
 8001112:	2e00      	cmp	r6, #0
 8001114:	f000 80af 	beq.w	8001276 <__udivmoddi4+0x27e>
 8001118:	2100      	movs	r1, #0
 800111a:	e9c6 0500 	strd	r0, r5, [r6]
 800111e:	4608      	mov	r0, r1
 8001120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001124:	fab3 f183 	clz	r1, r3
 8001128:	2900      	cmp	r1, #0
 800112a:	d14b      	bne.n	80011c4 <__udivmoddi4+0x1cc>
 800112c:	42ab      	cmp	r3, r5
 800112e:	d302      	bcc.n	8001136 <__udivmoddi4+0x13e>
 8001130:	4282      	cmp	r2, r0
 8001132:	f200 80b7 	bhi.w	80012a4 <__udivmoddi4+0x2ac>
 8001136:	1a84      	subs	r4, r0, r2
 8001138:	eb65 0303 	sbc.w	r3, r5, r3
 800113c:	2001      	movs	r0, #1
 800113e:	469e      	mov	lr, r3
 8001140:	2e00      	cmp	r6, #0
 8001142:	d0aa      	beq.n	800109a <__udivmoddi4+0xa2>
 8001144:	e9c6 4e00 	strd	r4, lr, [r6]
 8001148:	e7a7      	b.n	800109a <__udivmoddi4+0xa2>
 800114a:	f1c2 0c20 	rsb	ip, r2, #32
 800114e:	fa01 f302 	lsl.w	r3, r1, r2
 8001152:	4097      	lsls	r7, r2
 8001154:	fa20 f00c 	lsr.w	r0, r0, ip
 8001158:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800115c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001160:	4318      	orrs	r0, r3
 8001162:	fbbc f1fe 	udiv	r1, ip, lr
 8001166:	0c05      	lsrs	r5, r0, #16
 8001168:	fb0e cc11 	mls	ip, lr, r1, ip
 800116c:	fa1f f887 	uxth.w	r8, r7
 8001170:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001174:	fb01 f308 	mul.w	r3, r1, r8
 8001178:	42ab      	cmp	r3, r5
 800117a:	fa04 f402 	lsl.w	r4, r4, r2
 800117e:	d909      	bls.n	8001194 <__udivmoddi4+0x19c>
 8001180:	197d      	adds	r5, r7, r5
 8001182:	f101 3cff 	add.w	ip, r1, #4294967295
 8001186:	f080 808b 	bcs.w	80012a0 <__udivmoddi4+0x2a8>
 800118a:	42ab      	cmp	r3, r5
 800118c:	f240 8088 	bls.w	80012a0 <__udivmoddi4+0x2a8>
 8001190:	3902      	subs	r1, #2
 8001192:	443d      	add	r5, r7
 8001194:	1aeb      	subs	r3, r5, r3
 8001196:	b285      	uxth	r5, r0
 8001198:	fbb3 f0fe 	udiv	r0, r3, lr
 800119c:	fb0e 3310 	mls	r3, lr, r0, r3
 80011a0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80011a4:	fb00 f308 	mul.w	r3, r0, r8
 80011a8:	42ab      	cmp	r3, r5
 80011aa:	d907      	bls.n	80011bc <__udivmoddi4+0x1c4>
 80011ac:	197d      	adds	r5, r7, r5
 80011ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80011b2:	d271      	bcs.n	8001298 <__udivmoddi4+0x2a0>
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	d96f      	bls.n	8001298 <__udivmoddi4+0x2a0>
 80011b8:	3802      	subs	r0, #2
 80011ba:	443d      	add	r5, r7
 80011bc:	1aeb      	subs	r3, r5, r3
 80011be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011c2:	e778      	b.n	80010b6 <__udivmoddi4+0xbe>
 80011c4:	f1c1 0c20 	rsb	ip, r1, #32
 80011c8:	408b      	lsls	r3, r1
 80011ca:	fa22 f70c 	lsr.w	r7, r2, ip
 80011ce:	431f      	orrs	r7, r3
 80011d0:	fa20 f40c 	lsr.w	r4, r0, ip
 80011d4:	fa05 f301 	lsl.w	r3, r5, r1
 80011d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011dc:	fa25 f50c 	lsr.w	r5, r5, ip
 80011e0:	431c      	orrs	r4, r3
 80011e2:	0c23      	lsrs	r3, r4, #16
 80011e4:	fbb5 f9fe 	udiv	r9, r5, lr
 80011e8:	fa1f f887 	uxth.w	r8, r7
 80011ec:	fb0e 5519 	mls	r5, lr, r9, r5
 80011f0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80011f4:	fb09 fa08 	mul.w	sl, r9, r8
 80011f8:	45aa      	cmp	sl, r5
 80011fa:	fa02 f201 	lsl.w	r2, r2, r1
 80011fe:	fa00 f301 	lsl.w	r3, r0, r1
 8001202:	d908      	bls.n	8001216 <__udivmoddi4+0x21e>
 8001204:	197d      	adds	r5, r7, r5
 8001206:	f109 30ff 	add.w	r0, r9, #4294967295
 800120a:	d247      	bcs.n	800129c <__udivmoddi4+0x2a4>
 800120c:	45aa      	cmp	sl, r5
 800120e:	d945      	bls.n	800129c <__udivmoddi4+0x2a4>
 8001210:	f1a9 0902 	sub.w	r9, r9, #2
 8001214:	443d      	add	r5, r7
 8001216:	eba5 050a 	sub.w	r5, r5, sl
 800121a:	b2a4      	uxth	r4, r4
 800121c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001220:	fb0e 5510 	mls	r5, lr, r0, r5
 8001224:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001228:	fb00 f808 	mul.w	r8, r0, r8
 800122c:	45a0      	cmp	r8, r4
 800122e:	d907      	bls.n	8001240 <__udivmoddi4+0x248>
 8001230:	193c      	adds	r4, r7, r4
 8001232:	f100 35ff 	add.w	r5, r0, #4294967295
 8001236:	d22d      	bcs.n	8001294 <__udivmoddi4+0x29c>
 8001238:	45a0      	cmp	r8, r4
 800123a:	d92b      	bls.n	8001294 <__udivmoddi4+0x29c>
 800123c:	3802      	subs	r0, #2
 800123e:	443c      	add	r4, r7
 8001240:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001244:	eba4 0408 	sub.w	r4, r4, r8
 8001248:	fba0 8902 	umull	r8, r9, r0, r2
 800124c:	454c      	cmp	r4, r9
 800124e:	46c6      	mov	lr, r8
 8001250:	464d      	mov	r5, r9
 8001252:	d319      	bcc.n	8001288 <__udivmoddi4+0x290>
 8001254:	d016      	beq.n	8001284 <__udivmoddi4+0x28c>
 8001256:	b15e      	cbz	r6, 8001270 <__udivmoddi4+0x278>
 8001258:	ebb3 020e 	subs.w	r2, r3, lr
 800125c:	eb64 0405 	sbc.w	r4, r4, r5
 8001260:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001264:	40ca      	lsrs	r2, r1
 8001266:	ea4c 0202 	orr.w	r2, ip, r2
 800126a:	40cc      	lsrs	r4, r1
 800126c:	e9c6 2400 	strd	r2, r4, [r6]
 8001270:	2100      	movs	r1, #0
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	4631      	mov	r1, r6
 8001278:	4630      	mov	r0, r6
 800127a:	e70e      	b.n	800109a <__udivmoddi4+0xa2>
 800127c:	46ac      	mov	ip, r5
 800127e:	e6ed      	b.n	800105c <__udivmoddi4+0x64>
 8001280:	4618      	mov	r0, r3
 8001282:	e701      	b.n	8001088 <__udivmoddi4+0x90>
 8001284:	4543      	cmp	r3, r8
 8001286:	d2e6      	bcs.n	8001256 <__udivmoddi4+0x25e>
 8001288:	ebb8 0e02 	subs.w	lr, r8, r2
 800128c:	eb69 0507 	sbc.w	r5, r9, r7
 8001290:	3801      	subs	r0, #1
 8001292:	e7e0      	b.n	8001256 <__udivmoddi4+0x25e>
 8001294:	4628      	mov	r0, r5
 8001296:	e7d3      	b.n	8001240 <__udivmoddi4+0x248>
 8001298:	4660      	mov	r0, ip
 800129a:	e78f      	b.n	80011bc <__udivmoddi4+0x1c4>
 800129c:	4681      	mov	r9, r0
 800129e:	e7ba      	b.n	8001216 <__udivmoddi4+0x21e>
 80012a0:	4661      	mov	r1, ip
 80012a2:	e777      	b.n	8001194 <__udivmoddi4+0x19c>
 80012a4:	4608      	mov	r0, r1
 80012a6:	e74b      	b.n	8001140 <__udivmoddi4+0x148>
 80012a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80012ac:	443d      	add	r5, r7
 80012ae:	e715      	b.n	80010dc <__udivmoddi4+0xe4>
 80012b0:	3802      	subs	r0, #2
 80012b2:	443c      	add	r4, r7
 80012b4:	e726      	b.n	8001104 <__udivmoddi4+0x10c>
 80012b6:	bf00      	nop

080012b8 <__aeabi_idiv0>:
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e0:	68fb      	ldr	r3, [r7, #12]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff ffdb 	bl	80012bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2002      	movs	r0, #2
 8001308:	f7ff ffd8 	bl	80012bc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	2004      	movs	r0, #4
 800130e:	f7ff ffd5 	bl	80012bc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f001 f850 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_3V3_Pin;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EN_3V3_GPIO_Port, &GPIO_InitStruct);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f000 fee1 	bl	8002100 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <LL_AHB2_GRP1_EnableClock>:
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4013      	ands	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4313      	orrs	r3, r2
 800138c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
	...

080013a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_I2C2_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_I2C2_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_I2C2_Init+0x74>)
 80013b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80013b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_I2C2_Init+0x74>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_I2C2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_I2C2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C2_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <MX_I2C2_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C2_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_I2C2_Init+0x74>)
 80013e6:	f001 f802 	bl	80023ee <HAL_I2C_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013f0:	f000 fb3a 	bl	8001a68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <MX_I2C2_Init+0x74>)
 80013f8:	f001 fc50 	bl	8002c9c <HAL_I2CEx_ConfigAnalogFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fb31 	bl	8001a68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C2_Init+0x74>)
 800140a:	f001 fc91 	bl	8002d30 <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fb28 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000020c 	.word	0x2000020c
 8001420:	40005800 	.word	0x40005800

08001424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b096      	sub	sp, #88	; 0x58
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2238      	movs	r2, #56	; 0x38
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fdcb 	bl	8004fe0 <memset>
  if(i2cHandle->Instance==I2C2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_I2C_MspInit+0xb0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d13b      	bne.n	80014cc <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001458:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fe9a 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800146e:	f000 fafb 	bl	8001a68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ff67 	bl	8001346 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	2002      	movs	r0, #2
 800147a:	f7ff ff64 	bl	8001346 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001482:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001484:	2312      	movs	r3, #18
 8001486:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001490:	2304      	movs	r3, #4
 8001492:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f000 fe2f 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b4:	2304      	movs	r3, #4
 80014b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <HAL_I2C_MspInit+0xb4>)
 80014c0:	f000 fe1e 	bl	8002100 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80014c8:	f7ff ff55 	bl	8001376 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3758      	adds	r7, #88	; 0x58
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005800 	.word	0x40005800
 80014d8:	48000400 	.word	0x48000400

080014dc <LM75_getTemperature>:
//		}
//	}
//	return LM75_INVALID_TEMPERATURE;
//}

float LM75_getTemperature(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]

	if (HAL_I2C_Master_Transmit(hi2c, addr << 1, &LM75_TEMP, 1, 100) == HAL_OK ){
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	b299      	uxth	r1, r3
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <LM75_getTemperature+0xd0>)
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f001 f807 	bl	800250c <HAL_I2C_Master_Transmit>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d14e      	bne.n	80015a2 <LM75_getTemperature+0xc6>
		if(HAL_I2C_Master_Receive(hi2c, (addr << 1) | 0x01, buf, 2, 100) == HAL_OK){
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b21b      	sxth	r3, r3
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	b21b      	sxth	r3, r3
 8001510:	b299      	uxth	r1, r3
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2302      	movs	r3, #2
 8001518:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <LM75_getTemperature+0xd4>)
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f001 f8ea 	bl	80026f4 <HAL_I2C_Master_Receive>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13d      	bne.n	80015a2 <LM75_getTemperature+0xc6>
			if( (buf[0] & 0x80) == 0x80){
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <LM75_getTemperature+0xd4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	da26      	bge.n	800157e <LM75_getTemperature+0xa2>
				neg_buf = ~((buf[0] << 8 | buf[1])>> 5) + 1 ;	//2's compliment
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <LM75_getTemperature+0xd4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <LM75_getTemperature+0xd4>)
 8001538:	7852      	ldrb	r2, [r2, #1]
 800153a:	4313      	orrs	r3, r2
 800153c:	115b      	asrs	r3, r3, #5
 800153e:	b29b      	uxth	r3, r3
 8001540:	425b      	negs	r3, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <LM75_getTemperature+0xd8>)
 8001546:	801a      	strh	r2, [r3, #0]
				neg_buf &= 0x07FF; 	// zeroing 5 msb bits
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <LM75_getTemperature+0xd8>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <LM75_getTemperature+0xd8>)
 8001554:	801a      	strh	r2, [r3, #0]
				return (float)(-1 * neg_buf * 0.125);
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <LM75_getTemperature+0xd8>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	425b      	negs	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f86d 	bl	800063c <__aeabi_i2d>
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800156a:	f7ff f8d1 	bl	8000710 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fba3 	bl	8000cc0 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	e012      	b.n	80015a4 <LM75_getTemperature+0xc8>
			}
			else {
				return (float)(((buf[0] << 8) | buf[1]) >> 5)*0.125;
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <LM75_getTemperature+0xd4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LM75_getTemperature+0xd4>)
 8001586:	7852      	ldrb	r2, [r2, #1]
 8001588:	4313      	orrs	r3, r2
 800158a:	115b      	asrs	r3, r3, #5
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fca1 	bl	8000ed4 <__aeabi_i2f>
 8001592:	4603      	mov	r3, r0
 8001594:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe49 	bl	8000230 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	e000      	b.n	80015a4 <LM75_getTemperature+0xc8>
			}
		}
	}
	return LM75_INVALID_TEMPERATURE;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <LM75_getTemperature+0xdc>)
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001fc 	.word	0x200001fc
 80015b0:	2000025c 	.word	0x2000025c
 80015b4:	2000025a 	.word	0x2000025a
 80015b8:	c47a0000 	.word	0xc47a0000

080015bc <LM75_getConfiguration>:

float LM75_getTemperatureInFarenheit(I2C_HandleTypeDef *hi2c, uint8_t addr){
	return LM75_getTemperature(hi2c,addr) * 1.8f + 32.0f;
}

uint8_t LM75_getConfiguration(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	if(HAL_I2C_Master_Transmit(hi2c, addr << 1, &LM75_CONF, 1, 100) == HAL_OK ){
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b299      	uxth	r1, r3
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <LM75_getConfiguration+0x5c>)
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 ff97 	bl	800250c <HAL_I2C_Master_Transmit>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d113      	bne.n	800160c <LM75_getConfiguration+0x50>
		if(HAL_I2C_Master_Receive(hi2c, (addr << 1) | 0x01, buf, 1, 100) == HAL_OK){
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	b299      	uxth	r1, r3
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <LM75_getConfiguration+0x60>)
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f001 f87a 	bl	80026f4 <HAL_I2C_Master_Receive>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <LM75_getConfiguration+0x50>
			return buf[0];
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <LM75_getConfiguration+0x60>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	e000      	b.n	800160e <LM75_getConfiguration+0x52>
		}
	}
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	2000025c 	.word	0x2000025c

08001620 <LM75_getOSThreshold>:

float LM75_getOSThreshold(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af02      	add	r7, sp, #8
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
	if(HAL_I2C_Master_Transmit(hi2c, addr << 1, &LM75_TOS, 1, 100) == HAL_OK ){
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	b29b      	uxth	r3, r3
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	b299      	uxth	r1, r3
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <LM75_getOSThreshold+0xd0>)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 ff65 	bl	800250c <HAL_I2C_Master_Transmit>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d14d      	bne.n	80016e4 <LM75_getOSThreshold+0xc4>
		if(HAL_I2C_Master_Receive(hi2c, (addr << 1) | 0x01, buf, 2, 100) == HAL_OK){
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	b21b      	sxth	r3, r3
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	b21b      	sxth	r3, r3
 8001654:	b299      	uxth	r1, r3
 8001656:	2364      	movs	r3, #100	; 0x64
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2302      	movs	r3, #2
 800165c:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <LM75_getOSThreshold+0xd4>)
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f001 f848 	bl	80026f4 <HAL_I2C_Master_Receive>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d13c      	bne.n	80016e4 <LM75_getOSThreshold+0xc4>
			if( (buf[0] & 0x80) == 0x80){
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <LM75_getOSThreshold+0xd4>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b25b      	sxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	da25      	bge.n	80016c0 <LM75_getOSThreshold+0xa0>
				neg_buf = ~((buf[0] << 8 | buf[1])>> 7) + 1 ;	//2's compliment
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <LM75_getOSThreshold+0xd4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <LM75_getOSThreshold+0xd4>)
 800167c:	7852      	ldrb	r2, [r2, #1]
 800167e:	4313      	orrs	r3, r2
 8001680:	11db      	asrs	r3, r3, #7
 8001682:	b29b      	uxth	r3, r3
 8001684:	425b      	negs	r3, r3
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <LM75_getOSThreshold+0xd8>)
 800168a:	801a      	strh	r2, [r3, #0]
				neg_buf &= 0x01FF; 	// zeroing 7 msb bits
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <LM75_getOSThreshold+0xd8>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <LM75_getOSThreshold+0xd8>)
 8001698:	801a      	strh	r2, [r3, #0]
				return (float)(-1 * neg_buf * 0.5);
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <LM75_getOSThreshold+0xd8>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	425b      	negs	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ffcb 	bl	800063c <__aeabi_i2d>
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <LM75_getOSThreshold+0xdc>)
 80016ac:	f7ff f830 	bl	8000710 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fb02 	bl	8000cc0 <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	e012      	b.n	80016e6 <LM75_getOSThreshold+0xc6>
			}
			else {
				return (float)(((buf[0] << 8) | buf[1]) >> 7)*0.5;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LM75_getOSThreshold+0xd4>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <LM75_getOSThreshold+0xd4>)
 80016c8:	7852      	ldrb	r2, [r2, #1]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	11db      	asrs	r3, r3, #7
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc00 	bl	8000ed4 <__aeabi_i2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fda8 	bl	8000230 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	e000      	b.n	80016e6 <LM75_getOSThreshold+0xc6>
			}
		}
	}
	return LM75_INVALID_TEMPERATURE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <LM75_getOSThreshold+0xe0>)
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000001 	.word	0x20000001
 80016f4:	2000025c 	.word	0x2000025c
 80016f8:	2000025a 	.word	0x2000025a
 80016fc:	3fe00000 	.word	0x3fe00000
 8001700:	c47a0000 	.word	0xc47a0000

08001704 <LM75_setConfiguration>:
	}
	return LM75_INVALID_TEMPERATURE;
}


void LM75_setConfiguration(I2C_HandleTypeDef *hi2c, uint8_t addr,uint8_t config){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af02      	add	r7, sp, #8
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
 8001710:	4613      	mov	r3, r2
 8001712:	70bb      	strb	r3, [r7, #2]
	buf[0] = LM75_CONF;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <LM75_setConfiguration+0x44>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <LM75_setConfiguration+0x48>)
 800171a:	701a      	strb	r2, [r3, #0]
	buf[1] = config & 0x1F;
 800171c:	78bb      	ldrb	r3, [r7, #2]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <LM75_setConfiguration+0x48>)
 8001726:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(hi2c, addr << 1, &buf, 2, 100);
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	b29b      	uxth	r3, r3
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	b299      	uxth	r1, r3
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2302      	movs	r3, #2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <LM75_setConfiguration+0x48>)
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fee7 	bl	800250c <HAL_I2C_Master_Transmit>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000
 800174c:	2000025c 	.word	0x2000025c

08001750 <LM75_setOSThreshold>:

	HAL_I2C_Master_Transmit(hi2c, addr << 1, &buf, 3, 100);
}


void LM75_setOSThreshold(I2C_HandleTypeDef *hi2c, uint8_t addr,int16_t temperature){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
 800175c:	4613      	mov	r3, r2
 800175e:	803b      	strh	r3, [r7, #0]

	temperature = (temperature / 0.5);
 8001760:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff69 	bl	800063c <__aeabi_i2d>
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <LM75_setOSThreshold+0xa8>)
 8001770:	f7ff f8f8 	bl	8000964 <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa78 	bl	8000c70 <__aeabi_d2iz>
 8001780:	4603      	mov	r3, r0
 8001782:	803b      	strh	r3, [r7, #0]
	buf[0] = LM75_TOS;
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <LM75_setOSThreshold+0xac>)
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <LM75_setOSThreshold+0xb0>)
 800178a:	701a      	strb	r2, [r3, #0]

	//check if temperature is negative.
	if(temperature < 0){
 800178c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da11      	bge.n	80017b8 <LM75_setOSThreshold+0x68>
		neg_buf = temperature << 7;
 8001794:	883b      	ldrh	r3, [r7, #0]
 8001796:	01db      	lsls	r3, r3, #7
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <LM75_setOSThreshold+0xb4>)
 800179c:	801a      	strh	r2, [r3, #0]
		buf[2] = (neg_buf) & 0xff;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <LM75_setOSThreshold+0xb4>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <LM75_setOSThreshold+0xb0>)
 80017a6:	709a      	strb	r2, [r3, #2]
		buf[1] = (neg_buf >> 8);
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <LM75_setOSThreshold+0xb4>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <LM75_setOSThreshold+0xb0>)
 80017b4:	705a      	strb	r2, [r3, #1]
 80017b6:	e010      	b.n	80017da <LM75_setOSThreshold+0x8a>
	}
	else {
		pos_buf = (uint16_t)temperature << 7;
 80017b8:	883b      	ldrh	r3, [r7, #0]
 80017ba:	01db      	lsls	r3, r3, #7
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <LM75_setOSThreshold+0xb8>)
 80017c0:	801a      	strh	r2, [r3, #0]
		buf[2] = (pos_buf) & 0xff;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <LM75_setOSThreshold+0xb8>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <LM75_setOSThreshold+0xb0>)
 80017ca:	709a      	strb	r2, [r3, #2]
		buf[1] = (pos_buf >> 8);
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <LM75_setOSThreshold+0xb8>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <LM75_setOSThreshold+0xb0>)
 80017d8:	705a      	strb	r2, [r3, #1]
	}

	HAL_I2C_Master_Transmit(hi2c, addr << 1, &buf, 3, 100);
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	b299      	uxth	r1, r3
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2303      	movs	r3, #3
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <LM75_setOSThreshold+0xb0>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fe8e 	bl	800250c <HAL_I2C_Master_Transmit>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	3fe00000 	.word	0x3fe00000
 80017fc:	20000001 	.word	0x20000001
 8001800:	2000025c 	.word	0x2000025c
 8001804:	2000025a 	.word	0x2000025a
 8001808:	20000258 	.word	0x20000258

0800180c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181c:	f023 0218 	bic.w	r2, r3, #24
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
	...

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f000 fae3 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f000 f885 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f7ff fd51 	bl	80012ec <MX_GPIO_Init>
  MX_I2C2_Init();
 800184a:	f7ff fdad 	bl	80013a8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800184e:	f000 fa17 	bl	8001c80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable 3V3 For Sensor
  HAL_GPIO_WritePin(EN_3V3_GPIO_Port, EN_3V3_Pin, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f000 fdb0 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001864:	f000 fb46 	bl	8001ef4 <HAL_Delay>

  //LM75 Set Config
  uint8_t setConfig = (OS_F_QUE_queue_0 | OS_POL_active_HIGH | OS_COMP_INT_comparator | SHUTDOWN_normal);
 8001868:	2304      	movs	r3, #4
 800186a:	71fb      	strb	r3, [r7, #7]
  LM75_setConfiguration(&hi2c2, LM75_ADDRESS, setConfig);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	461a      	mov	r2, r3
 8001870:	2148      	movs	r1, #72	; 0x48
 8001872:	4831      	ldr	r0, [pc, #196]	; (8001938 <main+0x100>)
 8001874:	f7ff ff46 	bl	8001704 <LM75_setConfiguration>
  HAL_Delay(500);
 8001878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187c:	f000 fb3a 	bl	8001ef4 <HAL_Delay>

  //LM75 Get Config
  conf_data = LM75_getConfiguration(&hi2c2, LM75_ADDRESS);
 8001880:	2148      	movs	r1, #72	; 0x48
 8001882:	482d      	ldr	r0, [pc, #180]	; (8001938 <main+0x100>)
 8001884:	f7ff fe9a 	bl	80015bc <LM75_getConfiguration>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <main+0x104>)
 800188e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8001890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001894:	f000 fb2e 	bl	8001ef4 <HAL_Delay>
  printf("LM75 Config: 0x%x \r\n",conf_data);
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <main+0x104>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <main+0x108>)
 80018a0:	f004 f802 	bl	80058a8 <iprintf>

  // Setting Over temperature Threshold
  temp = LM75_getTemperature(&hi2c2, LM75_ADDRESS) + 1;
 80018a4:	2148      	movs	r1, #72	; 0x48
 80018a6:	4824      	ldr	r0, [pc, #144]	; (8001938 <main+0x100>)
 80018a8:	f7ff fe18 	bl	80014dc <LM75_getTemperature>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa5a 	bl	8000d6c <__addsf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <main+0x10c>)
 80018be:	601a      	str	r2, [r3, #0]
  LM75_setOSThreshold(&hi2c2, LM75_ADDRESS, (int16_t)temp); // OverTemp = Ambiant + 1 'C
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <main+0x10c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fb59 	bl	8000f7c <__aeabi_f2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	2148      	movs	r1, #72	; 0x48
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <main+0x100>)
 80018d4:	f7ff ff3c 	bl	8001750 <LM75_setOSThreshold>
  HAL_Delay(500);
 80018d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018dc:	f000 fb0a 	bl	8001ef4 <HAL_Delay>
  temp = LM75_getOSThreshold(&hi2c2, LM75_ADDRESS);
 80018e0:	2148      	movs	r1, #72	; 0x48
 80018e2:	4815      	ldr	r0, [pc, #84]	; (8001938 <main+0x100>)
 80018e4:	f7ff fe9c 	bl	8001620 <LM75_getOSThreshold>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <main+0x10c>)
 80018ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(500);
 80018ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f2:	f000 faff 	bl	8001ef4 <HAL_Delay>

  printf("Setting OT Threshold: %.2f \r\n",temp);
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <main+0x10c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe feb0 	bl	8000660 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4810      	ldr	r0, [pc, #64]	; (8001948 <main+0x110>)
 8001906:	f003 ffcf 	bl	80058a8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  temp = LM75_getTemperature(&hi2c2, LM75_ADDRESS);
 800190a:	2148      	movs	r1, #72	; 0x48
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <main+0x100>)
 800190e:	f7ff fde5 	bl	80014dc <LM75_getTemperature>
 8001912:	4603      	mov	r3, r0
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <main+0x10c>)
 8001916:	6013      	str	r3, [r2, #0]
	  printf ("Temperature = %.2f'C\r\n", temp);
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <main+0x10c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe9f 	bl	8000660 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4809      	ldr	r0, [pc, #36]	; (800194c <main+0x114>)
 8001928:	f003 ffbe 	bl	80058a8 <iprintf>
	  HAL_Delay(500);
 800192c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001930:	f000 fae0 	bl	8001ef4 <HAL_Delay>
	  temp = LM75_getTemperature(&hi2c2, LM75_ADDRESS);
 8001934:	e7e9      	b.n	800190a <main+0xd2>
 8001936:	bf00      	nop
 8001938:	2000020c 	.word	0x2000020c
 800193c:	20000264 	.word	0x20000264
 8001940:	080079b8 	.word	0x080079b8
 8001944:	20000260 	.word	0x20000260
 8001948:	080079d0 	.word	0x080079d0
 800194c:	080079f0 	.word	0x080079f0

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09a      	sub	sp, #104	; 0x68
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2248      	movs	r2, #72	; 0x48
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fb3e 	bl	8004fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001976:	f001 fa27 	bl	8002dc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ff46 	bl	800180c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <SystemClock_Config+0xb0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <SystemClock_Config+0xb0>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <SystemClock_Config+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800199c:	2324      	movs	r3, #36	; 0x24
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019a0:	2381      	movs	r3, #129	; 0x81
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fcaf 	bl	800331c <HAL_RCC_OscConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80019c4:	f000 f850 	bl	8001a68 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019c8:	234f      	movs	r3, #79	; 0x4f
 80019ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f832 	bl	8003a50 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019f2:	f000 f839 	bl	8001a68 <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3768      	adds	r7, #104	; 0x68
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	58000400 	.word	0x58000400

08001a04 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8001a12:	f107 010c 	add.w	r1, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4804      	ldr	r0, [pc, #16]	; (8001a2c <__io_putchar+0x28>)
 8001a1c:	f002 fd49 	bl	80044b2 <HAL_UART_Transmit>
 return ch;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000268 	.word	0x20000268

08001a30 <_write>:

int _write(int file,char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e009      	b.n	8001a56 <_write+0x26>
 {
 __io_putchar(*ptr++);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	60ba      	str	r2, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ffda 	bl	8001a04 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbf1      	blt.n	8001a42 <_write+0x12>
 }
return len;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <Error_Handler+0x8>

08001a72 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <NMI_Handler+0x4>

08001a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <HardFault_Handler+0x4>

08001a8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <BusFault_Handler+0x4>

08001a96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <UsageFault_Handler+0x4>

08001a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f9fa 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_kill>:

int _kill(int pid, int sig)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae4:	f003 fa52 	bl	8004f8c <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2216      	movs	r2, #22
 8001aec:	601a      	str	r2, [r3, #0]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_exit>:

void _exit (int status)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b02:	f04f 31ff 	mov.w	r1, #4294967295
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffe7 	bl	8001ada <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0c:	e7fe      	b.n	8001b0c <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
	}

return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_isatty>:

int _isatty(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f003 f9d8 	bl	8004f8c <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20008000 	.word	0x20008000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	20000200 	.word	0x20000200
 8001c10:	20000310 	.word	0x20000310

08001c14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <LL_AHB2_GRP1_EnableClock>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c44:	68fb      	ldr	r3, [r7, #12]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c74:	68fb      	ldr	r3, [r7, #12]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001c86:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <MX_USART1_UART_Init+0xa4>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cd8:	f002 fb9b 	bl	8004412 <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001ce2:	f7ff fec1 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cea:	f003 f86d 	bl	8004dc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8001cf4:	f7ff feb8 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001cfc:	f003 f8a2 	bl	8004e44 <HAL_UARTEx_SetRxFifoThreshold>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001d06:	f7ff feaf 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USART1_UART_Init+0xa0>)
 8001d0c:	f003 f824 	bl	8004d58 <HAL_UARTEx_DisableFifoMode>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8001d16:	f7ff fea7 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000268 	.word	0x20000268
 8001d24:	40013800 	.word	0x40013800

08001d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2238      	movs	r2, #56	; 0x38
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 f949 	bl	8004fe0 <memset>
  if(uartHandle->Instance==USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_UART_MspInit+0x84>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d125      	bne.n	8001da4 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d5c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d60:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fa18 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d72:	f7ff fe79 	bl	8001a68 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d7a:	f7ff ff69 	bl	8001c50 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7ff ff4e 	bl	8001c20 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001d84:	23c0      	movs	r3, #192	; 0xc0
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d94:	2307      	movs	r3, #7
 8001d96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4804      	ldr	r0, [pc, #16]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001da0:	f000 f9ae 	bl	8002100 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001da4:	bf00      	nop
 8001da6:	3758      	adds	r7, #88	; 0x58
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40013800 	.word	0x40013800
 8001db0:	48000400 	.word	0x48000400

08001db4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db8:	f7ff ff2c 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	; (8001df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <LoopForever+0xe>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	; (8001e00 <LoopForever+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001de2:	f003 f8d9 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff fd27 	bl	8001838 <main>

08001dea <LoopForever>:

LoopForever:
    b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   r0, =_estack
 8001dec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001df8:	08007edc 	.word	0x08007edc
  ldr r2, =_sbss
 8001dfc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e00:	2000030c 	.word	0x2000030c

08001e04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e12:	2003      	movs	r0, #3
 8001e14:	f000 f942 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e18:	f001 ffde 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_Init+0x3c>)
 8001e20:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e22:	200f      	movs	r0, #15
 8001e24:	f000 f810 	bl	8001e48 <HAL_InitTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	e001      	b.n	8001e38 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e34:	f7ff fe1d 	bl	8001a72 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e38:	79fb      	ldrb	r3, [r7, #7]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_InitTick+0x6c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d024      	beq.n	8001ea6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e5c:	f001 ffbc 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_InitTick+0x6c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f936 	bl	80020e6 <HAL_SYSTICK_Config>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	d809      	bhi.n	8001e9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e86:	2200      	movs	r2, #0
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8e:	f000 f910 	bl	80020b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_InitTick+0x70>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e004      	b.n	8001eaa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_IncTick+0x1c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_IncTick+0x20>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <HAL_IncTick+0x20>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	2000000c 	.word	0x2000000c
 8001edc:	200002f8 	.word	0x200002f8

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <HAL_GetTick+0x10>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	200002f8 	.word	0x200002f8

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffe0 	bl	8001ee0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000000c 	.word	0x2000000c

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff90 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff49 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff60 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff92 	bl	8001ff4 <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff61 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffb2 	bl	8002058 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e140      	b.n	8002392 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8132 	beq.w	800238c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d00b      	beq.n	8002148 <HAL_GPIO_Init+0x48>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d007      	beq.n	8002148 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800213c:	2b11      	cmp	r3, #17
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b12      	cmp	r3, #18
 8002146:	d130      	bne.n	80021aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800217e:	2201      	movs	r2, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0201 	and.w	r2, r3, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0xea>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	6939      	ldr	r1, [r7, #16]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 808c 	beq.w	800238c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002274:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_GPIO_Init+0x2b0>)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	2207      	movs	r2, #7
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800229e:	d00d      	beq.n	80022bc <HAL_GPIO_Init+0x1bc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <HAL_GPIO_Init+0x2b4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <HAL_GPIO_Init+0x1b8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a43      	ldr	r2, [pc, #268]	; (80023b8 <HAL_GPIO_Init+0x2b8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_GPIO_Init+0x1b4>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e004      	b.n	80022be <HAL_GPIO_Init+0x1be>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x1be>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_GPIO_Init+0x1be>
 80022bc:	2300      	movs	r3, #0
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	f002 0203 	and.w	r2, r2, #3
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	4093      	lsls	r3, r2
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ce:	4938      	ldr	r1, [pc, #224]	; (80023b0 <HAL_GPIO_Init+0x2b0>)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002302:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002386:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_GPIO_Init+0x2bc>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f aeb7 	bne.w	8002110 <HAL_GPIO_Init+0x10>
  }
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800
 80023bc:	58000800 	.word	0x58000800

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e081      	b.n	8002504 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff f805 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2224      	movs	r2, #36	; 0x24
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	e006      	b.n	8002476 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002474:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d104      	bne.n	8002488 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	ea42 0103 	orr.w	r1, r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69d9      	ldr	r1, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	460b      	mov	r3, r1
 800251a:	817b      	strh	r3, [r7, #10]
 800251c:	4613      	mov	r3, r2
 800251e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	f040 80da 	bne.w	80026e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_I2C_Master_Transmit+0x30>
 8002538:	2302      	movs	r3, #2
 800253a:	e0d3      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1d8>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002544:	f7ff fccc 	bl	8001ee0 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2319      	movs	r3, #25
 8002550:	2201      	movs	r2, #1
 8002552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f9e5 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0be      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2221      	movs	r2, #33	; 0x21
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2210      	movs	r2, #16
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	893a      	ldrh	r2, [r7, #8]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2bff      	cmp	r3, #255	; 0xff
 8002596:	d90e      	bls.n	80025b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	22ff      	movs	r2, #255	; 0xff
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_I2C_Master_Transmit+0x1e0>)
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fb48 	bl	8002c44 <I2C_TransferConfig>
 80025b4:	e06c      	b.n	8002690 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	8979      	ldrh	r1, [r7, #10]
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_I2C_Master_Transmit+0x1e0>)
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 fb37 	bl	8002c44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80025d6:	e05b      	b.n	8002690 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	6a39      	ldr	r1, [r7, #32]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f9e2 	bl	80029a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e07b      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d034      	beq.n	8002690 <HAL_I2C_Master_Transmit+0x184>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d130      	bne.n	8002690 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f974 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e04d      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d90e      	bls.n	8002670 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	b2da      	uxtb	r2, r3
 800265e:	8979      	ldrh	r1, [r7, #10]
 8002660:	2300      	movs	r3, #0
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 faeb 	bl	8002c44 <I2C_TransferConfig>
 800266e:	e00f      	b.n	8002690 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	b2da      	uxtb	r2, r3
 8002680:	8979      	ldrh	r1, [r7, #10]
 8002682:	2300      	movs	r3, #0
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fada 	bl	8002c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d19e      	bne.n	80025d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	6a39      	ldr	r1, [r7, #32]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f9c1 	bl	8002a26 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e01a      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2220      	movs	r2, #32
 80026b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	80002000 	.word	0x80002000
 80026f0:	fe00e800 	.word	0xfe00e800

080026f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b20      	cmp	r3, #32
 8002712:	f040 80db 	bne.w	80028cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_Master_Receive+0x30>
 8002720:	2302      	movs	r3, #2
 8002722:	e0d4      	b.n	80028ce <HAL_I2C_Master_Receive+0x1da>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800272c:	f7ff fbd8 	bl	8001ee0 <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2319      	movs	r3, #25
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f8f1 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0bf      	b.n	80028ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2222      	movs	r2, #34	; 0x22
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2210      	movs	r2, #16
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	893a      	ldrh	r2, [r7, #8]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2bff      	cmp	r3, #255	; 0xff
 800277e:	d90e      	bls.n	800279e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	22ff      	movs	r2, #255	; 0xff
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_I2C_Master_Receive+0x1e4>)
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa54 	bl	8002c44 <I2C_TransferConfig>
 800279c:	e06d      	b.n	800287a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_I2C_Master_Receive+0x1e4>)
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fa43 	bl	8002c44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80027be:	e05c      	b.n	800287a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f96b 	bl	8002aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e07c      	b.n	80028ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d034      	beq.n	800287a <HAL_I2C_Master_Receive+0x186>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d130      	bne.n	800287a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	2200      	movs	r2, #0
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f87f 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e04d      	b.n	80028ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d90e      	bls.n	800285a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	b2da      	uxtb	r2, r3
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	2300      	movs	r3, #0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9f6 	bl	8002c44 <I2C_TransferConfig>
 8002858:	e00f      	b.n	800287a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	b2da      	uxtb	r2, r3
 800286a:	8979      	ldrh	r1, [r7, #10]
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9e5 	bl	8002c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d19d      	bne.n	80027c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8cc 	bl	8002a26 <I2C_WaitOnSTOPFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e01a      	b.n	80028ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_I2C_Master_Receive+0x1e8>)
 80028ac:	400b      	ands	r3, r1
 80028ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	80002400 	.word	0x80002400
 80028dc:	fe00e800 	.word	0xfe00e800

080028e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d103      	bne.n	80028fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d007      	beq.n	800291c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	619a      	str	r2, [r3, #24]
  }
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002936:	e022      	b.n	800297e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d01e      	beq.n	800297e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7ff face 	bl	8001ee0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d113      	bne.n	800297e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d0cd      	beq.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b2:	e02c      	b.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f8dd 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e02a      	b.n	8002a1e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d01e      	beq.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d0:	f7ff fa86 	bl	8001ee0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e007      	b.n	8002a1e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d1cb      	bne.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a32:	e028      	b.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f89d 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e026      	b.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7ff fa4a 	bl	8001ee0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d1cf      	bne.n	8002a34 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aac:	e055      	b.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f860 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e053      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d129      	bne.n	8002b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d105      	bne.n	8002aea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e03f      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2220      	movs	r2, #32
 8002af0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002afe:	400b      	ands	r3, r1
 8002b00:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e022      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b24:	f7ff f9dc 	bl	8001ee0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d1a2      	bne.n	8002aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	fe00e800 	.word	0xfe00e800

08002b78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d151      	bne.n	8002c36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b92:	e022      	b.n	8002bda <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d01e      	beq.n	8002bda <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7ff f9a0 	bl	8001ee0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <I2C_IsAcknowledgeFailed+0x3a>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d113      	bne.n	8002bda <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e02e      	b.n	8002c38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d1d5      	bne.n	8002b94 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2210      	movs	r2, #16
 8002bee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fe71 	bl	80028e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f043 0204 	orr.w	r2, r3, #4
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	4613      	mov	r3, r2
 8002c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	0d5b      	lsrs	r3, r3, #21
 8002c60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <I2C_TransferConfig+0x54>)
 8002c66:	430b      	orrs	r3, r1
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	ea02 0103 	and.w	r1, r2, r3
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c74:	7a7b      	ldrb	r3, [r7, #9]
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	03ff63ff 	.word	0x03ff63ff

08002c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d138      	bne.n	8002d24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e032      	b.n	8002d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d139      	bne.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e033      	b.n	8002dbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
  }
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	58000400 	.word	0x58000400

08002de4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	58000400 	.word	0x58000400

08002dfc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0c:	d101      	bne.n	8002e12 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	58000400 	.word	0x58000400

08002e20 <LL_RCC_HSE_EnableTcxo>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <LL_RCC_HSE_DisableTcxo>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6a:	d101      	bne.n	8002e70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_HSE_Enable>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <LL_RCC_HSE_Disable>:
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <LL_RCC_HSE_IsReady>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ec4:	d101      	bne.n	8002eca <LL_RCC_HSE_IsReady+0x18>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <LL_RCC_HSE_IsReady+0x1a>
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_HSI_Enable>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_HSI_Disable>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_HSI_IsReady>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d101      	bne.n	8002f24 <LL_RCC_HSI_IsReady+0x18>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_RCC_HSI_IsReady+0x1a>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <LL_RCC_HSI_SetCalibTrimming>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d101      	bne.n	8002f6e <LL_RCC_LSE_IsReady+0x18>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <LL_RCC_LSE_IsReady+0x1a>
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d101      	bne.n	8002fd0 <LL_RCC_LSI_IsReady+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_RCC_LSI_IsReady+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6013      	str	r3, [r2, #0]
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b02      	cmp	r3, #2
 8003022:	d101      	bne.n	8003028 <LL_RCC_MSI_IsReady+0x16>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <LL_RCC_MSI_IsReady+0x18>
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d101      	bne.n	8003048 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003074:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f023 0203 	bic.w	r2, r3, #3
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003116:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800311a:	f023 020f 	bic.w	r2, r3, #15
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f0:	6013      	str	r3, [r2, #0]
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003228:	d101      	bne.n	800322e <LL_RCC_PLL_IsReady+0x18>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <LL_RCC_PLL_IsReady+0x1a>
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a4:	d101      	bne.n	80032aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d101      	bne.n	80032ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ea:	d101      	bne.n	80032f0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800330c:	d101      	bne.n	8003312 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e38a      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332e:	f7ff fece 	bl	80030ce <LL_RCC_GetSysClkSource>
 8003332:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003334:	f7ff ffa2 	bl	800327c <LL_RCC_PLL_GetMainSource>
 8003338:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80c9 	beq.w	80034da <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x3e>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d17b      	bne.n	800344c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d178      	bne.n	800344c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800335a:	f7ff fe5a 	bl	8003012 <LL_RCC_MSI_IsReady>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x54>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e369      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x72>
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338c:	e006      	b.n	800339c <HAL_RCC_OscConfig+0x80>
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	4293      	cmp	r3, r2
 800339e:	d222      	bcs.n	80033e6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fd4f 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e347      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033be:	f043 0308 	orr.w	r3, r3, #8
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fe4e 	bl	8003080 <LL_RCC_MSI_SetCalibTrimming>
 80033e4:	e021      	b.n	800342a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fe35 	bl	8003080 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fd14 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e30c      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800342a:	f000 fcd5 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 800342e:	4603      	mov	r3, r0
 8003430:	4ab4      	ldr	r2, [pc, #720]	; (8003704 <HAL_RCC_OscConfig+0x3e8>)
 8003432:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003434:	4bb4      	ldr	r3, [pc, #720]	; (8003708 <HAL_RCC_OscConfig+0x3ec>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fd05 	bl	8001e48 <HAL_InitTick>
 800343e:	4603      	mov	r3, r0
 8003440:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d047      	beq.n	80034d8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	e2fb      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02c      	beq.n	80034ae <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003454:	f7ff fdc1 	bl	8002fda <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003458:	f7fe fd42 	bl	8001ee0 <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003460:	f7fe fd3e 	bl	8001ee0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e2e8      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003472:	f7ff fdce 	bl	8003012 <LL_RCC_MSI_IsReady>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f1      	beq.n	8003460 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fdea 	bl	8003080 <LL_RCC_MSI_SetCalibTrimming>
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ae:	f7ff fda2 	bl	8002ff6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fd15 	bl	8001ee0 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ba:	f7fe fd11 	bl	8001ee0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e2bb      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034cc:	f7ff fda1 	bl	8003012 <LL_RCC_MSI_IsReady>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f1      	bne.n	80034ba <HAL_RCC_OscConfig+0x19e>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d05f      	beq.n	80035a6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_OscConfig+0x1dc>
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d10d      	bne.n	800350e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d10a      	bne.n	800350e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	f7ff fcdb 	bl	8002eb2 <LL_RCC_HSE_IsReady>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d050      	beq.n	80035a4 <HAL_RCC_OscConfig+0x288>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e29a      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d102      	bne.n	8003534 <HAL_RCC_OscConfig+0x218>
 800352e:	f7ff fca4 	bl	8002e7a <LL_RCC_HSE_Enable>
 8003532:	e00d      	b.n	8003550 <HAL_RCC_OscConfig+0x234>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800353c:	d104      	bne.n	8003548 <HAL_RCC_OscConfig+0x22c>
 800353e:	f7ff fc6f 	bl	8002e20 <LL_RCC_HSE_EnableTcxo>
 8003542:	f7ff fc9a 	bl	8002e7a <LL_RCC_HSE_Enable>
 8003546:	e003      	b.n	8003550 <HAL_RCC_OscConfig+0x234>
 8003548:	f7ff fca5 	bl	8002e96 <LL_RCC_HSE_Disable>
 800354c:	f7ff fc76 	bl	8002e3c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fcc2 	bl	8001ee0 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fcbe 	bl	8001ee0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e268      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003572:	f7ff fc9e 	bl	8002eb2 <LL_RCC_HSE_IsReady>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f1      	beq.n	8003560 <HAL_RCC_OscConfig+0x244>
 800357c:	e013      	b.n	80035a6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe fcaf 	bl	8001ee0 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003586:	f7fe fcab 	bl	8001ee0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e255      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003598:	f7ff fc8b 	bl	8002eb2 <LL_RCC_HSE_IsReady>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f1      	bne.n	8003586 <HAL_RCC_OscConfig+0x26a>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d04b      	beq.n	800364a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2a8>
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d113      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d110      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c4:	f7ff fca2 	bl	8002f0c <LL_RCC_HSI_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x2be>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e234      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fca5 	bl	8002f2e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e4:	e031      	b.n	800364a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ee:	f7ff fc71 	bl	8002ed4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7fe fc75 	bl	8001ee0 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fe fc71 	bl	8001ee0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e21b      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 800360c:	f7ff fc7e 	bl	8002f0c <LL_RCC_HSI_IsReady>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f1      	beq.n	80035fa <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fc87 	bl	8002f2e <LL_RCC_HSI_SetCalibTrimming>
 8003620:	e013      	b.n	800364a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003622:	f7ff fc65 	bl	8002ef0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fe fc5b 	bl	8001ee0 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe fc57 	bl	8001ee0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e201      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003640:	f7ff fc64 	bl	8002f0c <LL_RCC_HSI_IsReady>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f1      	bne.n	800362e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06e      	beq.n	8003734 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d056      	beq.n	800370c <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003666:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	429a      	cmp	r2, r3
 8003674:	d031      	beq.n	80036da <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e1da      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8003698:	f7ff fc7e 	bl	8002f98 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800369c:	f7fe fc20 	bl	8001ee0 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fe fc1c 	bl	8001ee0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b11      	cmp	r3, #17
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1c6      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80036b6:	f7ff fc7f 	bl	8002fb8 <LL_RCC_LSI_IsReady>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f1      	bne.n	80036a4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c8:	f023 0210 	bic.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	f7ff fc4d 	bl	8002f78 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fe fbff 	bl	8001ee0 <HAL_GetTick>
 80036e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fe fbfb 	bl	8001ee0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b11      	cmp	r3, #17
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1a5      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80036f8:	f7ff fc5e 	bl	8002fb8 <LL_RCC_LSI_IsReady>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f1      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3ca>
 8003702:	e017      	b.n	8003734 <HAL_RCC_OscConfig+0x418>
 8003704:	20000004 	.word	0x20000004
 8003708:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	f7ff fc44 	bl	8002f98 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fe fbe6 	bl	8001ee0 <HAL_GetTick>
 8003714:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003718:	f7fe fbe2 	bl	8001ee0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b11      	cmp	r3, #17
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e18c      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800372a:	f7ff fc45 	bl	8002fb8 <LL_RCC_LSI_IsReady>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f1      	bne.n	8003718 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80d8 	beq.w	80038f2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003742:	f7ff fb5b 	bl	8002dfc <LL_PWR_IsEnabledBkUpAccess>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800374c:	f7ff fb3c 	bl	8002dc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003750:	f7fe fbc6 	bl	8001ee0 <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fe fbc2 	bl	8001ee0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e16c      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800376a:	f7ff fb47 	bl	8002dfc <LL_PWR_IsEnabledBkUpAccess>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f1      	beq.n	8003758 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d07b      	beq.n	8003874 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b85      	cmp	r3, #133	; 0x85
 8003782:	d003      	beq.n	800378c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d109      	bne.n	80037a0 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe fb9e 	bl	8001ee0 <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fe fb90 	bl	8001ee0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e138      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037d2:	f7ff fbc0 	bl	8002f56 <LL_RCC_LSE_IsReady>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b81      	cmp	r3, #129	; 0x81
 80037e2:	d003      	beq.n	80037ec <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b85      	cmp	r3, #133	; 0x85
 80037ea:	d121      	bne.n	8003830 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fb78 	bl	8001ee0 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fb6a 	bl	8001ee0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e112      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ec      	beq.n	8003808 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800382e:	e060      	b.n	80038f2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fb56 	bl	8001ee0 <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fb48 	bl	8001ee0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0f0      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ec      	bne.n	800384c <HAL_RCC_OscConfig+0x530>
 8003872:	e03e      	b.n	80038f2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe fb34 	bl	8001ee0 <HAL_GetTick>
 8003878:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe fb26 	bl	8001ee0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0ce      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ec      	bne.n	8003890 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fe fb13 	bl	8001ee0 <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe fb05 	bl	8001ee0 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0ad      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80038e8:	f7ff fb35 	bl	8002f56 <LL_RCC_LSE_IsReady>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ef      	bne.n	80038d2 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80a3 	beq.w	8003a42 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d076      	beq.n	80039f0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	2b02      	cmp	r3, #2
 8003908:	d14b      	bne.n	80039a2 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	f7ff fc76 	bl	80031fa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fe fae7 	bl	8001ee0 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003916:	f7fe fae3 	bl	8001ee0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b0a      	cmp	r3, #10
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e08d      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003928:	f7ff fc75 	bl	8003216 <LL_RCC_PLL_IsReady>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f1      	bne.n	8003916 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <HAL_RCC_OscConfig+0x730>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800394a:	0212      	lsls	r2, r2, #8
 800394c:	4311      	orrs	r1, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800395e:	430a      	orrs	r2, r1
 8003960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003964:	4313      	orrs	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003968:	f7ff fc39 	bl	80031de <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fab0 	bl	8001ee0 <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe faac 	bl	8001ee0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b0a      	cmp	r3, #10
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e056      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003996:	f7ff fc3e 	bl	8003216 <LL_RCC_PLL_IsReady>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f1      	beq.n	8003984 <HAL_RCC_OscConfig+0x668>
 80039a0:	e04f      	b.n	8003a42 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	f7ff fc2a 	bl	80031fa <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b0:	f023 0303 	bic.w	r3, r3, #3
 80039b4:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c8:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fe fa89 	bl	8001ee0 <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe fa85 	bl	8001ee0 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b0a      	cmp	r3, #10
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e02f      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80039e4:	f7ff fc17 	bl	8003216 <LL_RCC_PLL_IsReady>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f1      	bne.n	80039d2 <HAL_RCC_OscConfig+0x6b6>
 80039ee:	e028      	b.n	8003a42 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e023      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d115      	bne.n	8003a3e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d10e      	bne.n	8003a3e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	11c1808c 	.word	0x11c1808c

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e10f      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d91b      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b86      	ldr	r3, [pc, #536]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0207 	bic.w	r2, r3, #7
 8003a7a:	4984      	ldr	r1, [pc, #528]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fe fa2d 	bl	8001ee0 <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a8a:	f7fe fa29 	bl	8001ee0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0f3      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9c:	4b7b      	ldr	r3, [pc, #492]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d1ef      	bne.n	8003a8a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fb12 	bl	80030e4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ac0:	f7fe fa0e 	bl	8001ee0 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ac8:	f7fe fa0a 	bl	8001ee0 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0d4      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ada:	f7ff fbda 	bl	8003292 <LL_RCC_IsActiveFlag_HPRE>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f1      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fb08 	bl	800310a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003afa:	f7fe f9f1 	bl	8001ee0 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b02:	f7fe f9ed 	bl	8001ee0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0b7      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b14:	f7ff fbce 	bl	80032b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f1      	beq.n	8003b02 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fb01 	bl	8003136 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b34:	f7fe f9d4 	bl	8001ee0 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b3c:	f7fe f9d0 	bl	8001ee0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e09a      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b4e:	f7ff fbc3 	bl	80032d8 <LL_RCC_IsActiveFlag_PPRE1>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f1      	beq.n	8003b3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff faf6 	bl	800315c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b70:	f7fe f9b6 	bl	8001ee0 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b78:	f7fe f9b2 	bl	8001ee0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e07c      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b8a:	f7ff fbb6 	bl	80032fa <LL_RCC_IsActiveFlag_PPRE2>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f1      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d043      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ba8:	f7ff f983 	bl	8002eb2 <LL_RCC_HSE_IsReady>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11e      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e066      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003bbe:	f7ff fb2a 	bl	8003216 <LL_RCC_PLL_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d113      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e05b      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bd4:	f7ff fa1d 	bl	8003012 <LL_RCC_MSI_IsReady>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e050      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003be2:	f7ff f993 	bl	8002f0c <LL_RCC_HSI_IsReady>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e049      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fa57 	bl	80030a8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfa:	f7fe f971 	bl	8001ee0 <HAL_GetTick>
 8003bfe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c02:	f7fe f96d 	bl	8001ee0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e035      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c18:	f7ff fa59 	bl	80030ce <LL_RCC_GetSysClkSource>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d1ec      	bne.n	8003c02 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d21b      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4913      	ldr	r1, [pc, #76]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c46:	f7fe f94b 	bl	8001ee0 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c4e:	f7fe f947 	bl	8001ee0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e011      	b.n	8003c84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_RCC_ClockConfig+0x23c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d1ef      	bne.n	8003c4e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c6e:	f000 f8b3 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4a06      	ldr	r2, [pc, #24]	; (8003c90 <HAL_RCC_ClockConfig+0x240>)
 8003c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_ClockConfig+0x244>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe f8e3 	bl	8001e48 <HAL_InitTick>
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	58004000 	.word	0x58004000
 8003c90:	20000004 	.word	0x20000004
 8003c94:	20000008 	.word	0x20000008

08003c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	f7ff fa12 	bl	80030ce <LL_RCC_GetSysClkSource>
 8003caa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cac:	f7ff fae6 	bl	800327c <LL_RCC_PLL_GetMainSource>
 8003cb0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x2c>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d139      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d136      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003cc4:	f7ff f9b5 	bl	8003032 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x62>
 8003cce:	f7ff f9b0 	bl	8003032 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x4e>
 8003cd8:	f7ff f9bb 	bl	8003052 <LL_RCC_MSI_GetRange>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x5a>
 8003ce6:	f7ff f9bf 	bl	8003068 <LL_RCC_MSI_GetRangeAfterStandby>
 8003cea:	4603      	mov	r3, r0
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x134>)
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	e014      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x8c>
 8003cfa:	f7ff f99a 	bl	8003032 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x7a>
 8003d04:	f7ff f9a5 	bl	8003052 <LL_RCC_MSI_GetRange>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	e005      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x86>
 8003d12:	f7ff f9a9 	bl	8003068 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d16:	4603      	mov	r3, r0
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x134>)
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d115      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d30:	e012      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e00c      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d109      	bne.n	8003d58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d44:	f7ff f888 	bl	8002e58 <LL_RCC_HSE_IsEnabledDiv2>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e001      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d54:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	f7ff f9b9 	bl	80030ce <LL_RCC_GetSysClkSource>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d12f      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d62:	f7ff fa8b 	bl	800327c <LL_RCC_PLL_GetMainSource>
 8003d66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0xde>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0xe4>
 8003d74:	e00d      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d78:	60fb      	str	r3, [r7, #12]
        break;
 8003d7a:	e00d      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d7c:	f7ff f86c 	bl	8002e58 <LL_RCC_HSE_IsEnabledDiv2>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d8e:	60fb      	str	r3, [r7, #12]
        break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	60fb      	str	r3, [r7, #12]
        break;
 8003d96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003d98:	f7ff fa4e 	bl	8003238 <LL_RCC_PLL_GetN>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	fb03 f402 	mul.w	r4, r3, r2
 8003da4:	f7ff fa5f 	bl	8003266 <LL_RCC_PLL_GetDivider>
 8003da8:	4603      	mov	r3, r0
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	3301      	adds	r3, #1
 8003dae:	fbb4 f4f3 	udiv	r4, r4, r3
 8003db2:	f7ff fa4d 	bl	8003250 <LL_RCC_PLL_GetR>
 8003db6:	4603      	mov	r3, r0
 8003db8:	0f5b      	lsrs	r3, r3, #29
 8003dba:	3301      	adds	r3, #1
 8003dbc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003dc0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003dc2:	697b      	ldr	r3, [r7, #20]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}
 8003dcc:	08007a94 	.word	0x08007a94
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	01e84800 	.word	0x01e84800

08003dd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b598      	push	{r3, r4, r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ddc:	f7ff ff5c 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003de0:	4604      	mov	r4, r0
 8003de2:	f7ff f9ce 	bl	8003182 <LL_RCC_GetAHBPrescaler>
 8003de6:	4603      	mov	r3, r0
 8003de8:	091b      	lsrs	r3, r3, #4
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x24>)
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd98      	pop	{r3, r4, r7, pc}
 8003dfc:	08007a34 	.word	0x08007a34

08003e00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b598      	push	{r3, r4, r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e04:	f7ff ffe8 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	f7ff f9d2 	bl	80031b2 <LL_RCC_GetAPB1Prescaler>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	4a03      	ldr	r2, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd98      	pop	{r3, r4, r7, pc}
 8003e20:	08007a74 	.word	0x08007a74

08003e24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e24:	b598      	push	{r3, r4, r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e28:	f7ff ffd6 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	f7ff f9cb 	bl	80031c8 <LL_RCC_GetAPB2Prescaler>
 8003e32:	4603      	mov	r3, r0
 8003e34:	0adb      	lsrs	r3, r3, #11
 8003e36:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd98      	pop	{r3, r4, r7, pc}
 8003e44:	08007a74 	.word	0x08007a74

08003e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003e60:	f7ff f99a 	bl	8003198 <LL_RCC_GetAHB3Prescaler>
 8003e64:	4603      	mov	r3, r0
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0c9c      	lsrs	r4, r3, #18
 8003e84:	f7fe ffae 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 f80b 	bl	8003ea8 <RCC_SetFlashLatency>
 8003e92:	4603      	mov	r3, r0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd90      	pop	{r4, r7, pc}
 8003e9c:	08007a94 	.word	0x08007a94
 8003ea0:	08007a34 	.word	0x08007a34
 8003ea4:	431bde83 	.word	0x431bde83

08003ea8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08e      	sub	sp, #56	; 0x38
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003eb2:	4a3c      	ldr	r2, [pc, #240]	; (8003fa4 <RCC_SetFlashLatency+0xfc>)
 8003eb4:	f107 0320 	add.w	r3, r7, #32
 8003eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ebc:	6018      	str	r0, [r3, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003ec2:	4a39      	ldr	r2, [pc, #228]	; (8003fa8 <RCC_SetFlashLatency+0x100>)
 8003ec4:	f107 0318 	add.w	r3, r7, #24
 8003ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ecc:	6018      	str	r0, [r3, #0]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003ed2:	4a36      	ldr	r2, [pc, #216]	; (8003fac <RCC_SetFlashLatency+0x104>)
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003eda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d11d      	bne.n	8003f26 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
 8003eee:	e016      	b.n	8003f1e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ef8:	4413      	add	r3, r2
 8003efa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d808      	bhi.n	8003f18 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f0e:	4413      	add	r3, r2
 8003f10:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f16:	e023      	b.n	8003f60 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d9e5      	bls.n	8003ef0 <RCC_SetFlashLatency+0x48>
 8003f24:	e01c      	b.n	8003f60 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	e016      	b.n	8003f5a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f34:	4413      	add	r3, r2
 8003f36:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d808      	bhi.n	8003f54 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f52:	e005      	b.n	8003f60 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	3301      	adds	r3, #1
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d9e5      	bls.n	8003f2c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <RCC_SetFlashLatency+0x108>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 0207 	bic.w	r2, r3, #7
 8003f68:	4911      	ldr	r1, [pc, #68]	; (8003fb0 <RCC_SetFlashLatency+0x108>)
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f70:	f7fd ffb6 	bl	8001ee0 <HAL_GetTick>
 8003f74:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f76:	e008      	b.n	8003f8a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f78:	f7fd ffb2 	bl	8001ee0 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e007      	b.n	8003f9a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <RCC_SetFlashLatency+0x108>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1ef      	bne.n	8003f78 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3738      	adds	r7, #56	; 0x38
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	08007a08 	.word	0x08007a08
 8003fa8:	08007a10 	.word	0x08007a10
 8003fac:	08007a18 	.word	0x08007a18
 8003fb0:	58004000 	.word	0x58004000

08003fb4 <LL_RCC_LSE_IsReady>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d101      	bne.n	8003fcc <LL_RCC_LSE_IsReady+0x18>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <LL_RCC_LSE_IsReady+0x1a>
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_SetUSARTClockSource>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	43db      	mvns	r3, r3
 8003fec:	401a      	ands	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <LL_RCC_SetI2SClockSource>:
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800401a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <LL_RCC_SetLPUARTClockSource>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <LL_RCC_SetI2CClockSource>:
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004072:	43db      	mvns	r3, r3
 8004074:	401a      	ands	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800407e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <LL_RCC_SetLPTIMClockSource>:
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_SetRNGClockSource>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_SetADCClockSource>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <LL_RCC_SetRTCClockSource>:
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800412c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <LL_RCC_GetRTCClockSource>:
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004152:	4618      	mov	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <LL_RCC_ForceBackupDomainReset>:
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800415e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004172:	bf00      	nop
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <LL_RCC_ReleaseBackupDomainReset>:
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
	...

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041ac:	2300      	movs	r3, #0
 80041ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d058      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80041bc:	f7fe fe04 	bl	8002dc8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c0:	f7fd fe8e 	bl	8001ee0 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd fe8a 	bl	8001ee0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d902      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	74fb      	strb	r3, [r7, #19]
        break;
 80041da:	e006      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80041dc:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e8:	d1ee      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d13c      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80041f0:	f7ff ffa7 	bl	8004142 <LL_RCC_GetRTCClockSource>
 80041f4:	4602      	mov	r2, r0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d00f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800420c:	f7ff ffa5 	bl	800415a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004210:	f7ff ffb3 	bl	800417a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d014      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fe5a 	bl	8001ee0 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800422e:	e00b      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fd fe56 	bl	8001ee0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d902      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	74fb      	strb	r3, [r7, #19]
            break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004248:	f7ff feb4 	bl	8003fb4 <LL_RCC_LSE_IsReady>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d1ee      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff5b 	bl	8004118 <LL_RCC_SetRTCClockSource>
 8004262:	e004      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
 8004268:	e001      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fea9 	bl	8003fd6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fe9e 	bl	8003fd6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fec0 	bl	8004030 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fee6 	bl	8004092 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fedb 	bl	8004092 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fed0 	bl	8004092 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fea9 	bl	800405a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fe9e 	bl	800405a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fe93 	bl	800405a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d011      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fe5e 	bl	8004006 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d107      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004362:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fea5 	bl	80040c4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004390:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fea3 	bl	80040ee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d107      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80043c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	58000400 	.word	0x58000400

080043d0 <LL_RCC_GetUSARTClockSource>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	401a      	ands	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	4313      	orrs	r3, r2
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <LL_RCC_GetLPUARTClockSource>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004400:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4013      	ands	r3, r2
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e042      	b.n	80044aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fd fc76 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f8c3 	bl	80045e0 <UART_SetConfig>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e022      	b.n	80044aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb07 	bl	8004a80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fb8d 	bl	8004bc2 <UART_CheckIdleState>
 80044a8:	4603      	mov	r3, r0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b08a      	sub	sp, #40	; 0x28
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	f040 8083 	bne.w	80045d4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Transmit+0x28>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07b      	b.n	80045d6 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Transmit+0x3a>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e074      	b.n	80045d6 <HAL_UART_Transmit+0x124>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2221      	movs	r2, #33	; 0x21
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004504:	f7fd fcec 	bl	8001ee0 <HAL_GetTick>
 8004508:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d108      	bne.n	8004536 <HAL_UART_Transmit+0x84>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e003      	b.n	800453e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004546:	e02c      	b.n	80045a2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2200      	movs	r2, #0
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fb80 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e039      	b.n	80045d6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	3302      	adds	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e007      	b.n	8004590 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3301      	adds	r3, #1
 800458e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1cc      	bne.n	8004548 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2140      	movs	r1, #64	; 0x40
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb4d 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e006      	b.n	80045d6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4bab      	ldr	r3, [pc, #684]	; (80048b8 <UART_SetConfig+0x2d8>)
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	69f9      	ldr	r1, [r7, #28]
 8004614:	430b      	orrs	r3, r1
 8004616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4aa0      	ldr	r2, [pc, #640]	; (80048bc <UART_SetConfig+0x2dc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	4313      	orrs	r3, r2
 8004646:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004652:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	69f9      	ldr	r1, [r7, #28]
 800465c:	430b      	orrs	r3, r1
 800465e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f023 010f 	bic.w	r1, r3, #15
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a91      	ldr	r2, [pc, #580]	; (80048c0 <UART_SetConfig+0x2e0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d122      	bne.n	80046c6 <UART_SetConfig+0xe6>
 8004680:	2003      	movs	r0, #3
 8004682:	f7ff fea5 	bl	80043d0 <LL_RCC_GetUSARTClockSource>
 8004686:	4603      	mov	r3, r0
 8004688:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800468c:	2b03      	cmp	r3, #3
 800468e:	d817      	bhi.n	80046c0 <UART_SetConfig+0xe0>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0xb8>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046b5 	.word	0x080046b5
 80046a0:	080046af 	.word	0x080046af
 80046a4:	080046bb 	.word	0x080046bb
 80046a8:	2301      	movs	r3, #1
 80046aa:	76fb      	strb	r3, [r7, #27]
 80046ac:	e072      	b.n	8004794 <UART_SetConfig+0x1b4>
 80046ae:	2302      	movs	r3, #2
 80046b0:	76fb      	strb	r3, [r7, #27]
 80046b2:	e06f      	b.n	8004794 <UART_SetConfig+0x1b4>
 80046b4:	2304      	movs	r3, #4
 80046b6:	76fb      	strb	r3, [r7, #27]
 80046b8:	e06c      	b.n	8004794 <UART_SetConfig+0x1b4>
 80046ba:	2308      	movs	r3, #8
 80046bc:	76fb      	strb	r3, [r7, #27]
 80046be:	e069      	b.n	8004794 <UART_SetConfig+0x1b4>
 80046c0:	2310      	movs	r3, #16
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e066      	b.n	8004794 <UART_SetConfig+0x1b4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7e      	ldr	r2, [pc, #504]	; (80048c4 <UART_SetConfig+0x2e4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d134      	bne.n	800473a <UART_SetConfig+0x15a>
 80046d0:	200c      	movs	r0, #12
 80046d2:	f7ff fe7d 	bl	80043d0 <LL_RCC_GetUSARTClockSource>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d829      	bhi.n	8004734 <UART_SetConfig+0x154>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x108>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	08004735 	.word	0x08004735
 80046f0:	08004735 	.word	0x08004735
 80046f4:	08004735 	.word	0x08004735
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004735 	.word	0x08004735
 8004700:	08004735 	.word	0x08004735
 8004704:	08004735 	.word	0x08004735
 8004708:	08004723 	.word	0x08004723
 800470c:	08004735 	.word	0x08004735
 8004710:	08004735 	.word	0x08004735
 8004714:	08004735 	.word	0x08004735
 8004718:	0800472f 	.word	0x0800472f
 800471c:	2300      	movs	r3, #0
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e038      	b.n	8004794 <UART_SetConfig+0x1b4>
 8004722:	2302      	movs	r3, #2
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e035      	b.n	8004794 <UART_SetConfig+0x1b4>
 8004728:	2304      	movs	r3, #4
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e032      	b.n	8004794 <UART_SetConfig+0x1b4>
 800472e:	2308      	movs	r3, #8
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e02f      	b.n	8004794 <UART_SetConfig+0x1b4>
 8004734:	2310      	movs	r3, #16
 8004736:	76fb      	strb	r3, [r7, #27]
 8004738:	e02c      	b.n	8004794 <UART_SetConfig+0x1b4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a5f      	ldr	r2, [pc, #380]	; (80048bc <UART_SetConfig+0x2dc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d125      	bne.n	8004790 <UART_SetConfig+0x1b0>
 8004744:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004748:	f7ff fe54 	bl	80043f4 <LL_RCC_GetLPUARTClockSource>
 800474c:	4603      	mov	r3, r0
 800474e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004752:	d017      	beq.n	8004784 <UART_SetConfig+0x1a4>
 8004754:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004758:	d817      	bhi.n	800478a <UART_SetConfig+0x1aa>
 800475a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475e:	d00b      	beq.n	8004778 <UART_SetConfig+0x198>
 8004760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004764:	d811      	bhi.n	800478a <UART_SetConfig+0x1aa>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <UART_SetConfig+0x192>
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d006      	beq.n	800477e <UART_SetConfig+0x19e>
 8004770:	e00b      	b.n	800478a <UART_SetConfig+0x1aa>
 8004772:	2300      	movs	r3, #0
 8004774:	76fb      	strb	r3, [r7, #27]
 8004776:	e00d      	b.n	8004794 <UART_SetConfig+0x1b4>
 8004778:	2302      	movs	r3, #2
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e00a      	b.n	8004794 <UART_SetConfig+0x1b4>
 800477e:	2304      	movs	r3, #4
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e007      	b.n	8004794 <UART_SetConfig+0x1b4>
 8004784:	2308      	movs	r3, #8
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	e004      	b.n	8004794 <UART_SetConfig+0x1b4>
 800478a:	2310      	movs	r3, #16
 800478c:	76fb      	strb	r3, [r7, #27]
 800478e:	e001      	b.n	8004794 <UART_SetConfig+0x1b4>
 8004790:	2310      	movs	r3, #16
 8004792:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a48      	ldr	r2, [pc, #288]	; (80048bc <UART_SetConfig+0x2dc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	f040 8098 	bne.w	80048d0 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047a0:	7efb      	ldrb	r3, [r7, #27]
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d823      	bhi.n	80047ee <UART_SetConfig+0x20e>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0x1cc>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047ef 	.word	0x080047ef
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047ef 	.word	0x080047ef
 80047bc:	080047df 	.word	0x080047df
 80047c0:	080047ef 	.word	0x080047ef
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ef 	.word	0x080047ef
 80047cc:	080047e7 	.word	0x080047e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7ff fb16 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 80047d4:	6178      	str	r0, [r7, #20]
        break;
 80047d6:	e00f      	b.n	80047f8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <UART_SetConfig+0x2e8>)
 80047da:	617b      	str	r3, [r7, #20]
        break;
 80047dc:	e00c      	b.n	80047f8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047de:	f7ff fa5b 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 80047e2:	6178      	str	r0, [r7, #20]
        break;
 80047e4:	e008      	b.n	80047f8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ea:	617b      	str	r3, [r7, #20]
        break;
 80047ec:	e004      	b.n	80047f8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	76bb      	strb	r3, [r7, #26]
        break;
 80047f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8128 	beq.w	8004a50 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	4a31      	ldr	r2, [pc, #196]	; (80048cc <UART_SetConfig+0x2ec>)
 8004806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800480a:	461a      	mov	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	d305      	bcc.n	8004830 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d902      	bls.n	8004836 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	76bb      	strb	r3, [r7, #26]
 8004834:	e10c      	b.n	8004a50 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	4618      	mov	r0, r3
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	4a22      	ldr	r2, [pc, #136]	; (80048cc <UART_SetConfig+0x2ec>)
 8004844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004848:	b29a      	uxth	r2, r3
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	f7fc fbbb 	bl	8000fc8 <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	020b      	lsls	r3, r1, #8
 8004864:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004868:	0202      	lsls	r2, r0, #8
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	6849      	ldr	r1, [r1, #4]
 800486e:	0849      	lsrs	r1, r1, #1
 8004870:	4608      	mov	r0, r1
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	1814      	adds	r4, r2, r0
 8004878:	eb43 0501 	adc.w	r5, r3, r1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	4620      	mov	r0, r4
 8004888:	4629      	mov	r1, r5
 800488a:	f7fc fb9d 	bl	8000fc8 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4613      	mov	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489c:	d308      	bcc.n	80048b0 <UART_SetConfig+0x2d0>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a4:	d204      	bcs.n	80048b0 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e0cf      	b.n	8004a50 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	76bb      	strb	r3, [r7, #26]
 80048b4:	e0cc      	b.n	8004a50 <UART_SetConfig+0x470>
 80048b6:	bf00      	nop
 80048b8:	cfff69f3 	.word	0xcfff69f3
 80048bc:	40008000 	.word	0x40008000
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40004400 	.word	0x40004400
 80048c8:	00f42400 	.word	0x00f42400
 80048cc:	08007ad4 	.word	0x08007ad4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	d165      	bne.n	80049a6 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80048da:	7efb      	ldrb	r3, [r7, #27]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d828      	bhi.n	8004932 <UART_SetConfig+0x352>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0x308>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7ff fa78 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8004910:	6178      	str	r0, [r7, #20]
        break;
 8004912:	e013      	b.n	800493c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7ff fa86 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 8004918:	6178      	str	r0, [r7, #20]
        break;
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <UART_SetConfig+0x498>)
 800491e:	617b      	str	r3, [r7, #20]
        break;
 8004920:	e00c      	b.n	800493c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7ff f9b9 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8004926:	6178      	str	r0, [r7, #20]
        break;
 8004928:	e008      	b.n	800493c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	617b      	str	r3, [r7, #20]
        break;
 8004930:	e004      	b.n	800493c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	76bb      	strb	r3, [r7, #26]
        break;
 800493a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8086 	beq.w	8004a50 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	4a4c      	ldr	r2, [pc, #304]	; (8004a7c <UART_SetConfig+0x49c>)
 800494a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494e:	461a      	mov	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fbb3 f3f2 	udiv	r3, r3, r2
 8004956:	005a      	lsls	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	441a      	add	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	b29b      	uxth	r3, r3
 800496a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d916      	bls.n	80049a0 <UART_SetConfig+0x3c0>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d212      	bcs.n	80049a0 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f023 030f 	bic.w	r3, r3, #15
 8004982:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	b29a      	uxth	r2, r3
 8004990:	89fb      	ldrh	r3, [r7, #14]
 8004992:	4313      	orrs	r3, r2
 8004994:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	89fa      	ldrh	r2, [r7, #14]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	e057      	b.n	8004a50 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	76bb      	strb	r3, [r7, #26]
 80049a4:	e054      	b.n	8004a50 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a6:	7efb      	ldrb	r3, [r7, #27]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d828      	bhi.n	80049fe <UART_SetConfig+0x41e>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x3d4>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049ff 	.word	0x080049ff
 80049c4:	080049ef 	.word	0x080049ef
 80049c8:	080049ff 	.word	0x080049ff
 80049cc:	080049ff 	.word	0x080049ff
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d8:	f7ff fa12 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 80049dc:	6178      	str	r0, [r7, #20]
        break;
 80049de:	e013      	b.n	8004a08 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7ff fa20 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 80049e4:	6178      	str	r0, [r7, #20]
        break;
 80049e6:	e00f      	b.n	8004a08 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <UART_SetConfig+0x498>)
 80049ea:	617b      	str	r3, [r7, #20]
        break;
 80049ec:	e00c      	b.n	8004a08 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7ff f953 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 80049f2:	6178      	str	r0, [r7, #20]
        break;
 80049f4:	e008      	b.n	8004a08 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	617b      	str	r3, [r7, #20]
        break;
 80049fc:	e004      	b.n	8004a08 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	76bb      	strb	r3, [r7, #26]
        break;
 8004a06:	bf00      	nop
    }

    if (pclk != 0U)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d020      	beq.n	8004a50 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <UART_SetConfig+0x49c>)
 8004a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	441a      	add	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	d908      	bls.n	8004a4c <UART_SetConfig+0x46c>
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d204      	bcs.n	8004a4c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a6c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bdb0      	pop	{r4, r5, r7, pc}
 8004a76:	bf00      	nop
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	08007ad4 	.word	0x08007ad4

08004a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01a      	beq.n	8004b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7e:	d10a      	bne.n	8004b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  }
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af02      	add	r7, sp, #8
 8004bc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd2:	f7fd f985 	bl	8001ee0 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d10e      	bne.n	8004c04 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f82f 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e025      	b.n	8004c50 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d10e      	bne.n	8004c30 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f819 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e00f      	b.n	8004c50 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c68:	e062      	b.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d05e      	beq.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7fd f935 	bl	8001ee0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d302      	bcc.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d11d      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e045      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02e      	beq.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce0:	d126      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cfa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e00f      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d08d      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e027      	b.n	8004dbe <HAL_UARTEx_DisableFifoMode+0x66>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	; 0x24
 8004d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e02d      	b.n	8004e3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f84f 	bl	8004ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e02d      	b.n	8004eb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2224      	movs	r2, #36	; 0x24
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f811 	bl	8004ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b089      	sub	sp, #36	; 0x24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ec8:	4a2e      	ldr	r2, [pc, #184]	; (8004f84 <UARTEx_SetNbDataToProcess+0xc4>)
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004ed6:	4a2c      	ldr	r2, [pc, #176]	; (8004f88 <UARTEx_SetNbDataToProcess+0xc8>)
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004efc:	e03d      	b.n	8004f7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004efe:	2308      	movs	r3, #8
 8004f00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f02:	2308      	movs	r3, #8
 8004f04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	0e5b      	lsrs	r3, r3, #25
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	0f5b      	lsrs	r3, r3, #29
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f26:	7fbb      	ldrb	r3, [r7, #30]
 8004f28:	7f3a      	ldrb	r2, [r7, #28]
 8004f2a:	f107 0120 	add.w	r1, r7, #32
 8004f2e:	440a      	add	r2, r1
 8004f30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f38:	7f3a      	ldrb	r2, [r7, #28]
 8004f3a:	f107 0120 	add.w	r1, r7, #32
 8004f3e:	440a      	add	r2, r1
 8004f40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
 8004f52:	7f7a      	ldrb	r2, [r7, #29]
 8004f54:	f107 0120 	add.w	r1, r7, #32
 8004f58:	440a      	add	r2, r1
 8004f5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f62:	7f7a      	ldrb	r2, [r7, #29]
 8004f64:	f107 0120 	add.w	r1, r7, #32
 8004f68:	440a      	add	r2, r1
 8004f6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f7a:	bf00      	nop
 8004f7c:	3724      	adds	r7, #36	; 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	08007a24 	.word	0x08007a24
 8004f88:	08007a2c 	.word	0x08007a2c

08004f8c <__errno>:
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <__errno+0x8>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000010 	.word	0x20000010

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4d0d      	ldr	r5, [pc, #52]	; (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	; (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4d0b      	ldr	r5, [pc, #44]	; (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	; (8004fdc <__libc_init_array+0x44>)
 8004fac:	f002 fcf6 	bl	800799c <_init>
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	08007ed4 	.word	0x08007ed4
 8004fd4:	08007ed4 	.word	0x08007ed4
 8004fd8:	08007ed4 	.word	0x08007ed4
 8004fdc:	08007ed8 	.word	0x08007ed8

08004fe0 <memset>:
 8004fe0:	4402      	add	r2, r0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d100      	bne.n	8004fea <memset+0xa>
 8004fe8:	4770      	bx	lr
 8004fea:	f803 1b01 	strb.w	r1, [r3], #1
 8004fee:	e7f9      	b.n	8004fe4 <memset+0x4>

08004ff0 <__cvt>:
 8004ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	b088      	sub	sp, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	461f      	mov	r7, r3
 8004ffa:	4614      	mov	r4, r2
 8004ffc:	bfb8      	it	lt
 8004ffe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005002:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005004:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005006:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800500a:	bfb6      	itet	lt
 800500c:	461f      	movlt	r7, r3
 800500e:	2300      	movge	r3, #0
 8005010:	232d      	movlt	r3, #45	; 0x2d
 8005012:	7013      	strb	r3, [r2, #0]
 8005014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005016:	f023 0820 	bic.w	r8, r3, #32
 800501a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800501e:	d005      	beq.n	800502c <__cvt+0x3c>
 8005020:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005024:	d100      	bne.n	8005028 <__cvt+0x38>
 8005026:	3501      	adds	r5, #1
 8005028:	2302      	movs	r3, #2
 800502a:	e000      	b.n	800502e <__cvt+0x3e>
 800502c:	2303      	movs	r3, #3
 800502e:	aa07      	add	r2, sp, #28
 8005030:	9204      	str	r2, [sp, #16]
 8005032:	aa06      	add	r2, sp, #24
 8005034:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005038:	e9cd 3500 	strd	r3, r5, [sp]
 800503c:	4622      	mov	r2, r4
 800503e:	463b      	mov	r3, r7
 8005040:	f000 fcd6 	bl	80059f0 <_dtoa_r>
 8005044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005048:	4606      	mov	r6, r0
 800504a:	d102      	bne.n	8005052 <__cvt+0x62>
 800504c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800504e:	07db      	lsls	r3, r3, #31
 8005050:	d522      	bpl.n	8005098 <__cvt+0xa8>
 8005052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005056:	eb06 0905 	add.w	r9, r6, r5
 800505a:	d110      	bne.n	800507e <__cvt+0x8e>
 800505c:	7833      	ldrb	r3, [r6, #0]
 800505e:	2b30      	cmp	r3, #48	; 0x30
 8005060:	d10a      	bne.n	8005078 <__cvt+0x88>
 8005062:	2200      	movs	r2, #0
 8005064:	2300      	movs	r3, #0
 8005066:	4620      	mov	r0, r4
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb fdb9 	bl	8000be0 <__aeabi_dcmpeq>
 800506e:	b918      	cbnz	r0, 8005078 <__cvt+0x88>
 8005070:	f1c5 0501 	rsb	r5, r5, #1
 8005074:	f8ca 5000 	str.w	r5, [sl]
 8005078:	f8da 3000 	ldr.w	r3, [sl]
 800507c:	4499      	add	r9, r3
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	4620      	mov	r0, r4
 8005084:	4639      	mov	r1, r7
 8005086:	f7fb fdab 	bl	8000be0 <__aeabi_dcmpeq>
 800508a:	b108      	cbz	r0, 8005090 <__cvt+0xa0>
 800508c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005090:	2230      	movs	r2, #48	; 0x30
 8005092:	9b07      	ldr	r3, [sp, #28]
 8005094:	454b      	cmp	r3, r9
 8005096:	d307      	bcc.n	80050a8 <__cvt+0xb8>
 8005098:	9b07      	ldr	r3, [sp, #28]
 800509a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800509c:	1b9b      	subs	r3, r3, r6
 800509e:	4630      	mov	r0, r6
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	b008      	add	sp, #32
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	1c59      	adds	r1, r3, #1
 80050aa:	9107      	str	r1, [sp, #28]
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e7f0      	b.n	8005092 <__cvt+0xa2>

080050b0 <__exponent>:
 80050b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b2:	4603      	mov	r3, r0
 80050b4:	2900      	cmp	r1, #0
 80050b6:	bfb8      	it	lt
 80050b8:	4249      	neglt	r1, r1
 80050ba:	f803 2b02 	strb.w	r2, [r3], #2
 80050be:	bfb4      	ite	lt
 80050c0:	222d      	movlt	r2, #45	; 0x2d
 80050c2:	222b      	movge	r2, #43	; 0x2b
 80050c4:	2909      	cmp	r1, #9
 80050c6:	7042      	strb	r2, [r0, #1]
 80050c8:	dd2a      	ble.n	8005120 <__exponent+0x70>
 80050ca:	f10d 0407 	add.w	r4, sp, #7
 80050ce:	46a4      	mov	ip, r4
 80050d0:	270a      	movs	r7, #10
 80050d2:	46a6      	mov	lr, r4
 80050d4:	460a      	mov	r2, r1
 80050d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80050da:	fb07 1516 	mls	r5, r7, r6, r1
 80050de:	3530      	adds	r5, #48	; 0x30
 80050e0:	2a63      	cmp	r2, #99	; 0x63
 80050e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80050e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050ea:	4631      	mov	r1, r6
 80050ec:	dcf1      	bgt.n	80050d2 <__exponent+0x22>
 80050ee:	3130      	adds	r1, #48	; 0x30
 80050f0:	f1ae 0502 	sub.w	r5, lr, #2
 80050f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050f8:	1c44      	adds	r4, r0, #1
 80050fa:	4629      	mov	r1, r5
 80050fc:	4561      	cmp	r1, ip
 80050fe:	d30a      	bcc.n	8005116 <__exponent+0x66>
 8005100:	f10d 0209 	add.w	r2, sp, #9
 8005104:	eba2 020e 	sub.w	r2, r2, lr
 8005108:	4565      	cmp	r5, ip
 800510a:	bf88      	it	hi
 800510c:	2200      	movhi	r2, #0
 800510e:	4413      	add	r3, r2
 8005110:	1a18      	subs	r0, r3, r0
 8005112:	b003      	add	sp, #12
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800511a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800511e:	e7ed      	b.n	80050fc <__exponent+0x4c>
 8005120:	2330      	movs	r3, #48	; 0x30
 8005122:	3130      	adds	r1, #48	; 0x30
 8005124:	7083      	strb	r3, [r0, #2]
 8005126:	70c1      	strb	r1, [r0, #3]
 8005128:	1d03      	adds	r3, r0, #4
 800512a:	e7f1      	b.n	8005110 <__exponent+0x60>

0800512c <_printf_float>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	b091      	sub	sp, #68	; 0x44
 8005132:	460c      	mov	r4, r1
 8005134:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005138:	4616      	mov	r6, r2
 800513a:	461f      	mov	r7, r3
 800513c:	4605      	mov	r5, r0
 800513e:	f001 fb3b 	bl	80067b8 <_localeconv_r>
 8005142:	6803      	ldr	r3, [r0, #0]
 8005144:	9309      	str	r3, [sp, #36]	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb f81a 	bl	8000180 <strlen>
 800514c:	2300      	movs	r3, #0
 800514e:	930e      	str	r3, [sp, #56]	; 0x38
 8005150:	f8d8 3000 	ldr.w	r3, [r8]
 8005154:	900a      	str	r0, [sp, #40]	; 0x28
 8005156:	3307      	adds	r3, #7
 8005158:	f023 0307 	bic.w	r3, r3, #7
 800515c:	f103 0208 	add.w	r2, r3, #8
 8005160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005164:	f8d4 b000 	ldr.w	fp, [r4]
 8005168:	f8c8 2000 	str.w	r2, [r8]
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005174:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005178:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800517c:	930b      	str	r3, [sp, #44]	; 0x2c
 800517e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005180:	4b9c      	ldr	r3, [pc, #624]	; (80053f4 <_printf_float+0x2c8>)
 8005182:	f04f 32ff 	mov.w	r2, #4294967295
 8005186:	4640      	mov	r0, r8
 8005188:	f7fb fd5c 	bl	8000c44 <__aeabi_dcmpun>
 800518c:	bb70      	cbnz	r0, 80051ec <_printf_float+0xc0>
 800518e:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <_printf_float+0x2c8>)
 8005190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005192:	f04f 32ff 	mov.w	r2, #4294967295
 8005196:	4640      	mov	r0, r8
 8005198:	f7fb fd36 	bl	8000c08 <__aeabi_dcmple>
 800519c:	bb30      	cbnz	r0, 80051ec <_printf_float+0xc0>
 800519e:	2200      	movs	r2, #0
 80051a0:	2300      	movs	r3, #0
 80051a2:	4640      	mov	r0, r8
 80051a4:	4651      	mov	r1, sl
 80051a6:	f7fb fd25 	bl	8000bf4 <__aeabi_dcmplt>
 80051aa:	b110      	cbz	r0, 80051b2 <_printf_float+0x86>
 80051ac:	232d      	movs	r3, #45	; 0x2d
 80051ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b2:	4b91      	ldr	r3, [pc, #580]	; (80053f8 <_printf_float+0x2cc>)
 80051b4:	4891      	ldr	r0, [pc, #580]	; (80053fc <_printf_float+0x2d0>)
 80051b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051ba:	bf94      	ite	ls
 80051bc:	4698      	movls	r8, r3
 80051be:	4680      	movhi	r8, r0
 80051c0:	2303      	movs	r3, #3
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	f02b 0304 	bic.w	r3, fp, #4
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	f04f 0a00 	mov.w	sl, #0
 80051ce:	9700      	str	r7, [sp, #0]
 80051d0:	4633      	mov	r3, r6
 80051d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80051d4:	4621      	mov	r1, r4
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 f9d2 	bl	8005580 <_printf_common>
 80051dc:	3001      	adds	r0, #1
 80051de:	f040 808f 	bne.w	8005300 <_printf_float+0x1d4>
 80051e2:	f04f 30ff 	mov.w	r0, #4294967295
 80051e6:	b011      	add	sp, #68	; 0x44
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ec:	4642      	mov	r2, r8
 80051ee:	4653      	mov	r3, sl
 80051f0:	4640      	mov	r0, r8
 80051f2:	4651      	mov	r1, sl
 80051f4:	f7fb fd26 	bl	8000c44 <__aeabi_dcmpun>
 80051f8:	b140      	cbz	r0, 800520c <_printf_float+0xe0>
 80051fa:	f1ba 0f00 	cmp.w	sl, #0
 80051fe:	bfbc      	itt	lt
 8005200:	232d      	movlt	r3, #45	; 0x2d
 8005202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005206:	487e      	ldr	r0, [pc, #504]	; (8005400 <_printf_float+0x2d4>)
 8005208:	4b7e      	ldr	r3, [pc, #504]	; (8005404 <_printf_float+0x2d8>)
 800520a:	e7d4      	b.n	80051b6 <_printf_float+0x8a>
 800520c:	6863      	ldr	r3, [r4, #4]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005214:	d142      	bne.n	800529c <_printf_float+0x170>
 8005216:	2306      	movs	r3, #6
 8005218:	6063      	str	r3, [r4, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	9206      	str	r2, [sp, #24]
 800521e:	aa0e      	add	r2, sp, #56	; 0x38
 8005220:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005224:	aa0d      	add	r2, sp, #52	; 0x34
 8005226:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800522a:	9203      	str	r2, [sp, #12]
 800522c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005230:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	4642      	mov	r2, r8
 800523c:	4653      	mov	r3, sl
 800523e:	4628      	mov	r0, r5
 8005240:	910b      	str	r1, [sp, #44]	; 0x2c
 8005242:	f7ff fed5 	bl	8004ff0 <__cvt>
 8005246:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005248:	2947      	cmp	r1, #71	; 0x47
 800524a:	4680      	mov	r8, r0
 800524c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800524e:	d108      	bne.n	8005262 <_printf_float+0x136>
 8005250:	1cc8      	adds	r0, r1, #3
 8005252:	db02      	blt.n	800525a <_printf_float+0x12e>
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	4299      	cmp	r1, r3
 8005258:	dd40      	ble.n	80052dc <_printf_float+0x1b0>
 800525a:	f1a9 0902 	sub.w	r9, r9, #2
 800525e:	fa5f f989 	uxtb.w	r9, r9
 8005262:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005266:	d81f      	bhi.n	80052a8 <_printf_float+0x17c>
 8005268:	3901      	subs	r1, #1
 800526a:	464a      	mov	r2, r9
 800526c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005270:	910d      	str	r1, [sp, #52]	; 0x34
 8005272:	f7ff ff1d 	bl	80050b0 <__exponent>
 8005276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005278:	1813      	adds	r3, r2, r0
 800527a:	2a01      	cmp	r2, #1
 800527c:	4682      	mov	sl, r0
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	dc02      	bgt.n	8005288 <_printf_float+0x15c>
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	07d2      	lsls	r2, r2, #31
 8005286:	d501      	bpl.n	800528c <_printf_float+0x160>
 8005288:	3301      	adds	r3, #1
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005290:	2b00      	cmp	r3, #0
 8005292:	d09c      	beq.n	80051ce <_printf_float+0xa2>
 8005294:	232d      	movs	r3, #45	; 0x2d
 8005296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529a:	e798      	b.n	80051ce <_printf_float+0xa2>
 800529c:	2947      	cmp	r1, #71	; 0x47
 800529e:	d1bc      	bne.n	800521a <_printf_float+0xee>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1ba      	bne.n	800521a <_printf_float+0xee>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e7b7      	b.n	8005218 <_printf_float+0xec>
 80052a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052ac:	d118      	bne.n	80052e0 <_printf_float+0x1b4>
 80052ae:	2900      	cmp	r1, #0
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	dd0b      	ble.n	80052cc <_printf_float+0x1a0>
 80052b4:	6121      	str	r1, [r4, #16]
 80052b6:	b913      	cbnz	r3, 80052be <_printf_float+0x192>
 80052b8:	6822      	ldr	r2, [r4, #0]
 80052ba:	07d0      	lsls	r0, r2, #31
 80052bc:	d502      	bpl.n	80052c4 <_printf_float+0x198>
 80052be:	3301      	adds	r3, #1
 80052c0:	440b      	add	r3, r1
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	65a1      	str	r1, [r4, #88]	; 0x58
 80052c6:	f04f 0a00 	mov.w	sl, #0
 80052ca:	e7df      	b.n	800528c <_printf_float+0x160>
 80052cc:	b913      	cbnz	r3, 80052d4 <_printf_float+0x1a8>
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	07d2      	lsls	r2, r2, #31
 80052d2:	d501      	bpl.n	80052d8 <_printf_float+0x1ac>
 80052d4:	3302      	adds	r3, #2
 80052d6:	e7f4      	b.n	80052c2 <_printf_float+0x196>
 80052d8:	2301      	movs	r3, #1
 80052da:	e7f2      	b.n	80052c2 <_printf_float+0x196>
 80052dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e2:	4299      	cmp	r1, r3
 80052e4:	db05      	blt.n	80052f2 <_printf_float+0x1c6>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	6121      	str	r1, [r4, #16]
 80052ea:	07d8      	lsls	r0, r3, #31
 80052ec:	d5ea      	bpl.n	80052c4 <_printf_float+0x198>
 80052ee:	1c4b      	adds	r3, r1, #1
 80052f0:	e7e7      	b.n	80052c2 <_printf_float+0x196>
 80052f2:	2900      	cmp	r1, #0
 80052f4:	bfd4      	ite	le
 80052f6:	f1c1 0202 	rsble	r2, r1, #2
 80052fa:	2201      	movgt	r2, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	e7e0      	b.n	80052c2 <_printf_float+0x196>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	055a      	lsls	r2, r3, #21
 8005304:	d407      	bmi.n	8005316 <_printf_float+0x1ea>
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	4642      	mov	r2, r8
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	d12b      	bne.n	800536c <_printf_float+0x240>
 8005314:	e765      	b.n	80051e2 <_printf_float+0xb6>
 8005316:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800531a:	f240 80dc 	bls.w	80054d6 <_printf_float+0x3aa>
 800531e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005322:	2200      	movs	r2, #0
 8005324:	2300      	movs	r3, #0
 8005326:	f7fb fc5b 	bl	8000be0 <__aeabi_dcmpeq>
 800532a:	2800      	cmp	r0, #0
 800532c:	d033      	beq.n	8005396 <_printf_float+0x26a>
 800532e:	4a36      	ldr	r2, [pc, #216]	; (8005408 <_printf_float+0x2dc>)
 8005330:	2301      	movs	r3, #1
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	f43f af52 	beq.w	80051e2 <_printf_float+0xb6>
 800533e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005342:	429a      	cmp	r2, r3
 8005344:	db02      	blt.n	800534c <_printf_float+0x220>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	07d8      	lsls	r0, r3, #31
 800534a:	d50f      	bpl.n	800536c <_printf_float+0x240>
 800534c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005350:	4631      	mov	r1, r6
 8005352:	4628      	mov	r0, r5
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af43 	beq.w	80051e2 <_printf_float+0xb6>
 800535c:	f04f 0800 	mov.w	r8, #0
 8005360:	f104 091a 	add.w	r9, r4, #26
 8005364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005366:	3b01      	subs	r3, #1
 8005368:	4543      	cmp	r3, r8
 800536a:	dc09      	bgt.n	8005380 <_printf_float+0x254>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	079b      	lsls	r3, r3, #30
 8005370:	f100 8101 	bmi.w	8005576 <_printf_float+0x44a>
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005378:	4298      	cmp	r0, r3
 800537a:	bfb8      	it	lt
 800537c:	4618      	movlt	r0, r3
 800537e:	e732      	b.n	80051e6 <_printf_float+0xba>
 8005380:	2301      	movs	r3, #1
 8005382:	464a      	mov	r2, r9
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f af29 	beq.w	80051e2 <_printf_float+0xb6>
 8005390:	f108 0801 	add.w	r8, r8, #1
 8005394:	e7e6      	b.n	8005364 <_printf_float+0x238>
 8005396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005398:	2b00      	cmp	r3, #0
 800539a:	dc37      	bgt.n	800540c <_printf_float+0x2e0>
 800539c:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <_printf_float+0x2dc>)
 800539e:	2301      	movs	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af1b 	beq.w	80051e2 <_printf_float+0xb6>
 80053ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053b0:	4313      	orrs	r3, r2
 80053b2:	d102      	bne.n	80053ba <_printf_float+0x28e>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	07d9      	lsls	r1, r3, #31
 80053b8:	d5d8      	bpl.n	800536c <_printf_float+0x240>
 80053ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f af0c 	beq.w	80051e2 <_printf_float+0xb6>
 80053ca:	f04f 0900 	mov.w	r9, #0
 80053ce:	f104 0a1a 	add.w	sl, r4, #26
 80053d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d4:	425b      	negs	r3, r3
 80053d6:	454b      	cmp	r3, r9
 80053d8:	dc01      	bgt.n	80053de <_printf_float+0x2b2>
 80053da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053dc:	e794      	b.n	8005308 <_printf_float+0x1dc>
 80053de:	2301      	movs	r3, #1
 80053e0:	4652      	mov	r2, sl
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f aefa 	beq.w	80051e2 <_printf_float+0xb6>
 80053ee:	f109 0901 	add.w	r9, r9, #1
 80053f2:	e7ee      	b.n	80053d2 <_printf_float+0x2a6>
 80053f4:	7fefffff 	.word	0x7fefffff
 80053f8:	08007af0 	.word	0x08007af0
 80053fc:	08007af4 	.word	0x08007af4
 8005400:	08007afc 	.word	0x08007afc
 8005404:	08007af8 	.word	0x08007af8
 8005408:	08007b00 	.word	0x08007b00
 800540c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800540e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005410:	429a      	cmp	r2, r3
 8005412:	bfa8      	it	ge
 8005414:	461a      	movge	r2, r3
 8005416:	2a00      	cmp	r2, #0
 8005418:	4691      	mov	r9, r2
 800541a:	dc37      	bgt.n	800548c <_printf_float+0x360>
 800541c:	f04f 0b00 	mov.w	fp, #0
 8005420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005424:	f104 021a 	add.w	r2, r4, #26
 8005428:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800542c:	ebaa 0309 	sub.w	r3, sl, r9
 8005430:	455b      	cmp	r3, fp
 8005432:	dc33      	bgt.n	800549c <_printf_float+0x370>
 8005434:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005438:	429a      	cmp	r2, r3
 800543a:	db3b      	blt.n	80054b4 <_printf_float+0x388>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	07da      	lsls	r2, r3, #31
 8005440:	d438      	bmi.n	80054b4 <_printf_float+0x388>
 8005442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005444:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005446:	eba2 030a 	sub.w	r3, r2, sl
 800544a:	eba2 0901 	sub.w	r9, r2, r1
 800544e:	4599      	cmp	r9, r3
 8005450:	bfa8      	it	ge
 8005452:	4699      	movge	r9, r3
 8005454:	f1b9 0f00 	cmp.w	r9, #0
 8005458:	dc34      	bgt.n	80054c4 <_printf_float+0x398>
 800545a:	f04f 0800 	mov.w	r8, #0
 800545e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005462:	f104 0a1a 	add.w	sl, r4, #26
 8005466:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	eba3 0309 	sub.w	r3, r3, r9
 8005470:	4543      	cmp	r3, r8
 8005472:	f77f af7b 	ble.w	800536c <_printf_float+0x240>
 8005476:	2301      	movs	r3, #1
 8005478:	4652      	mov	r2, sl
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	f43f aeae 	beq.w	80051e2 <_printf_float+0xb6>
 8005486:	f108 0801 	add.w	r8, r8, #1
 800548a:	e7ec      	b.n	8005466 <_printf_float+0x33a>
 800548c:	4613      	mov	r3, r2
 800548e:	4631      	mov	r1, r6
 8005490:	4642      	mov	r2, r8
 8005492:	4628      	mov	r0, r5
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	d1c0      	bne.n	800541c <_printf_float+0x2f0>
 800549a:	e6a2      	b.n	80051e2 <_printf_float+0xb6>
 800549c:	2301      	movs	r3, #1
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80054a4:	47b8      	blx	r7
 80054a6:	3001      	adds	r0, #1
 80054a8:	f43f ae9b 	beq.w	80051e2 <_printf_float+0xb6>
 80054ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ae:	f10b 0b01 	add.w	fp, fp, #1
 80054b2:	e7b9      	b.n	8005428 <_printf_float+0x2fc>
 80054b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b8:	4631      	mov	r1, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	47b8      	blx	r7
 80054be:	3001      	adds	r0, #1
 80054c0:	d1bf      	bne.n	8005442 <_printf_float+0x316>
 80054c2:	e68e      	b.n	80051e2 <_printf_float+0xb6>
 80054c4:	464b      	mov	r3, r9
 80054c6:	eb08 020a 	add.w	r2, r8, sl
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	d1c2      	bne.n	800545a <_printf_float+0x32e>
 80054d4:	e685      	b.n	80051e2 <_printf_float+0xb6>
 80054d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d8:	2a01      	cmp	r2, #1
 80054da:	dc01      	bgt.n	80054e0 <_printf_float+0x3b4>
 80054dc:	07db      	lsls	r3, r3, #31
 80054de:	d537      	bpl.n	8005550 <_printf_float+0x424>
 80054e0:	2301      	movs	r3, #1
 80054e2:	4642      	mov	r2, r8
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	f43f ae79 	beq.w	80051e2 <_printf_float+0xb6>
 80054f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f4:	4631      	mov	r1, r6
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b8      	blx	r7
 80054fa:	3001      	adds	r0, #1
 80054fc:	f43f ae71 	beq.w	80051e2 <_printf_float+0xb6>
 8005500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	f7fb fb6a 	bl	8000be0 <__aeabi_dcmpeq>
 800550c:	b9d8      	cbnz	r0, 8005546 <_printf_float+0x41a>
 800550e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005510:	f108 0201 	add.w	r2, r8, #1
 8005514:	3b01      	subs	r3, #1
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	d10e      	bne.n	800553e <_printf_float+0x412>
 8005520:	e65f      	b.n	80051e2 <_printf_float+0xb6>
 8005522:	2301      	movs	r3, #1
 8005524:	464a      	mov	r2, r9
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f ae58 	beq.w	80051e2 <_printf_float+0xb6>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005538:	3b01      	subs	r3, #1
 800553a:	4543      	cmp	r3, r8
 800553c:	dcf1      	bgt.n	8005522 <_printf_float+0x3f6>
 800553e:	4653      	mov	r3, sl
 8005540:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005544:	e6e1      	b.n	800530a <_printf_float+0x1de>
 8005546:	f04f 0800 	mov.w	r8, #0
 800554a:	f104 091a 	add.w	r9, r4, #26
 800554e:	e7f2      	b.n	8005536 <_printf_float+0x40a>
 8005550:	2301      	movs	r3, #1
 8005552:	4642      	mov	r2, r8
 8005554:	e7df      	b.n	8005516 <_printf_float+0x3ea>
 8005556:	2301      	movs	r3, #1
 8005558:	464a      	mov	r2, r9
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f ae3e 	beq.w	80051e2 <_printf_float+0xb6>
 8005566:	f108 0801 	add.w	r8, r8, #1
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800556e:	1a5b      	subs	r3, r3, r1
 8005570:	4543      	cmp	r3, r8
 8005572:	dcf0      	bgt.n	8005556 <_printf_float+0x42a>
 8005574:	e6fe      	b.n	8005374 <_printf_float+0x248>
 8005576:	f04f 0800 	mov.w	r8, #0
 800557a:	f104 0919 	add.w	r9, r4, #25
 800557e:	e7f4      	b.n	800556a <_printf_float+0x43e>

08005580 <_printf_common>:
 8005580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005584:	4616      	mov	r6, r2
 8005586:	4699      	mov	r9, r3
 8005588:	688a      	ldr	r2, [r1, #8]
 800558a:	690b      	ldr	r3, [r1, #16]
 800558c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005590:	4293      	cmp	r3, r2
 8005592:	bfb8      	it	lt
 8005594:	4613      	movlt	r3, r2
 8005596:	6033      	str	r3, [r6, #0]
 8005598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800559c:	4607      	mov	r7, r0
 800559e:	460c      	mov	r4, r1
 80055a0:	b10a      	cbz	r2, 80055a6 <_printf_common+0x26>
 80055a2:	3301      	adds	r3, #1
 80055a4:	6033      	str	r3, [r6, #0]
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	0699      	lsls	r1, r3, #26
 80055aa:	bf42      	ittt	mi
 80055ac:	6833      	ldrmi	r3, [r6, #0]
 80055ae:	3302      	addmi	r3, #2
 80055b0:	6033      	strmi	r3, [r6, #0]
 80055b2:	6825      	ldr	r5, [r4, #0]
 80055b4:	f015 0506 	ands.w	r5, r5, #6
 80055b8:	d106      	bne.n	80055c8 <_printf_common+0x48>
 80055ba:	f104 0a19 	add.w	sl, r4, #25
 80055be:	68e3      	ldr	r3, [r4, #12]
 80055c0:	6832      	ldr	r2, [r6, #0]
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	42ab      	cmp	r3, r5
 80055c6:	dc26      	bgt.n	8005616 <_printf_common+0x96>
 80055c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055cc:	1e13      	subs	r3, r2, #0
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	bf18      	it	ne
 80055d2:	2301      	movne	r3, #1
 80055d4:	0692      	lsls	r2, r2, #26
 80055d6:	d42b      	bmi.n	8005630 <_printf_common+0xb0>
 80055d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055dc:	4649      	mov	r1, r9
 80055de:	4638      	mov	r0, r7
 80055e0:	47c0      	blx	r8
 80055e2:	3001      	adds	r0, #1
 80055e4:	d01e      	beq.n	8005624 <_printf_common+0xa4>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	68e5      	ldr	r5, [r4, #12]
 80055ea:	6832      	ldr	r2, [r6, #0]
 80055ec:	f003 0306 	and.w	r3, r3, #6
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	bf08      	it	eq
 80055f4:	1aad      	subeq	r5, r5, r2
 80055f6:	68a3      	ldr	r3, [r4, #8]
 80055f8:	6922      	ldr	r2, [r4, #16]
 80055fa:	bf0c      	ite	eq
 80055fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005600:	2500      	movne	r5, #0
 8005602:	4293      	cmp	r3, r2
 8005604:	bfc4      	itt	gt
 8005606:	1a9b      	subgt	r3, r3, r2
 8005608:	18ed      	addgt	r5, r5, r3
 800560a:	2600      	movs	r6, #0
 800560c:	341a      	adds	r4, #26
 800560e:	42b5      	cmp	r5, r6
 8005610:	d11a      	bne.n	8005648 <_printf_common+0xc8>
 8005612:	2000      	movs	r0, #0
 8005614:	e008      	b.n	8005628 <_printf_common+0xa8>
 8005616:	2301      	movs	r3, #1
 8005618:	4652      	mov	r2, sl
 800561a:	4649      	mov	r1, r9
 800561c:	4638      	mov	r0, r7
 800561e:	47c0      	blx	r8
 8005620:	3001      	adds	r0, #1
 8005622:	d103      	bne.n	800562c <_printf_common+0xac>
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562c:	3501      	adds	r5, #1
 800562e:	e7c6      	b.n	80055be <_printf_common+0x3e>
 8005630:	18e1      	adds	r1, r4, r3
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	2030      	movs	r0, #48	; 0x30
 8005636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800563a:	4422      	add	r2, r4
 800563c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005644:	3302      	adds	r3, #2
 8005646:	e7c7      	b.n	80055d8 <_printf_common+0x58>
 8005648:	2301      	movs	r3, #1
 800564a:	4622      	mov	r2, r4
 800564c:	4649      	mov	r1, r9
 800564e:	4638      	mov	r0, r7
 8005650:	47c0      	blx	r8
 8005652:	3001      	adds	r0, #1
 8005654:	d0e6      	beq.n	8005624 <_printf_common+0xa4>
 8005656:	3601      	adds	r6, #1
 8005658:	e7d9      	b.n	800560e <_printf_common+0x8e>
	...

0800565c <_printf_i>:
 800565c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	460c      	mov	r4, r1
 8005662:	4691      	mov	r9, r2
 8005664:	7e27      	ldrb	r7, [r4, #24]
 8005666:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005668:	2f78      	cmp	r7, #120	; 0x78
 800566a:	4680      	mov	r8, r0
 800566c:	469a      	mov	sl, r3
 800566e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005672:	d807      	bhi.n	8005684 <_printf_i+0x28>
 8005674:	2f62      	cmp	r7, #98	; 0x62
 8005676:	d80a      	bhi.n	800568e <_printf_i+0x32>
 8005678:	2f00      	cmp	r7, #0
 800567a:	f000 80d8 	beq.w	800582e <_printf_i+0x1d2>
 800567e:	2f58      	cmp	r7, #88	; 0x58
 8005680:	f000 80a3 	beq.w	80057ca <_printf_i+0x16e>
 8005684:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800568c:	e03a      	b.n	8005704 <_printf_i+0xa8>
 800568e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005692:	2b15      	cmp	r3, #21
 8005694:	d8f6      	bhi.n	8005684 <_printf_i+0x28>
 8005696:	a001      	add	r0, pc, #4	; (adr r0, 800569c <_printf_i+0x40>)
 8005698:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800569c:	080056f5 	.word	0x080056f5
 80056a0:	08005709 	.word	0x08005709
 80056a4:	08005685 	.word	0x08005685
 80056a8:	08005685 	.word	0x08005685
 80056ac:	08005685 	.word	0x08005685
 80056b0:	08005685 	.word	0x08005685
 80056b4:	08005709 	.word	0x08005709
 80056b8:	08005685 	.word	0x08005685
 80056bc:	08005685 	.word	0x08005685
 80056c0:	08005685 	.word	0x08005685
 80056c4:	08005685 	.word	0x08005685
 80056c8:	08005815 	.word	0x08005815
 80056cc:	08005739 	.word	0x08005739
 80056d0:	080057f7 	.word	0x080057f7
 80056d4:	08005685 	.word	0x08005685
 80056d8:	08005685 	.word	0x08005685
 80056dc:	08005837 	.word	0x08005837
 80056e0:	08005685 	.word	0x08005685
 80056e4:	08005739 	.word	0x08005739
 80056e8:	08005685 	.word	0x08005685
 80056ec:	08005685 	.word	0x08005685
 80056f0:	080057ff 	.word	0x080057ff
 80056f4:	680b      	ldr	r3, [r1, #0]
 80056f6:	1d1a      	adds	r2, r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	600a      	str	r2, [r1, #0]
 80056fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005704:	2301      	movs	r3, #1
 8005706:	e0a3      	b.n	8005850 <_printf_i+0x1f4>
 8005708:	6825      	ldr	r5, [r4, #0]
 800570a:	6808      	ldr	r0, [r1, #0]
 800570c:	062e      	lsls	r6, r5, #24
 800570e:	f100 0304 	add.w	r3, r0, #4
 8005712:	d50a      	bpl.n	800572a <_printf_i+0xce>
 8005714:	6805      	ldr	r5, [r0, #0]
 8005716:	600b      	str	r3, [r1, #0]
 8005718:	2d00      	cmp	r5, #0
 800571a:	da03      	bge.n	8005724 <_printf_i+0xc8>
 800571c:	232d      	movs	r3, #45	; 0x2d
 800571e:	426d      	negs	r5, r5
 8005720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005724:	485e      	ldr	r0, [pc, #376]	; (80058a0 <_printf_i+0x244>)
 8005726:	230a      	movs	r3, #10
 8005728:	e019      	b.n	800575e <_printf_i+0x102>
 800572a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800572e:	6805      	ldr	r5, [r0, #0]
 8005730:	600b      	str	r3, [r1, #0]
 8005732:	bf18      	it	ne
 8005734:	b22d      	sxthne	r5, r5
 8005736:	e7ef      	b.n	8005718 <_printf_i+0xbc>
 8005738:	680b      	ldr	r3, [r1, #0]
 800573a:	6825      	ldr	r5, [r4, #0]
 800573c:	1d18      	adds	r0, r3, #4
 800573e:	6008      	str	r0, [r1, #0]
 8005740:	0628      	lsls	r0, r5, #24
 8005742:	d501      	bpl.n	8005748 <_printf_i+0xec>
 8005744:	681d      	ldr	r5, [r3, #0]
 8005746:	e002      	b.n	800574e <_printf_i+0xf2>
 8005748:	0669      	lsls	r1, r5, #25
 800574a:	d5fb      	bpl.n	8005744 <_printf_i+0xe8>
 800574c:	881d      	ldrh	r5, [r3, #0]
 800574e:	4854      	ldr	r0, [pc, #336]	; (80058a0 <_printf_i+0x244>)
 8005750:	2f6f      	cmp	r7, #111	; 0x6f
 8005752:	bf0c      	ite	eq
 8005754:	2308      	moveq	r3, #8
 8005756:	230a      	movne	r3, #10
 8005758:	2100      	movs	r1, #0
 800575a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800575e:	6866      	ldr	r6, [r4, #4]
 8005760:	60a6      	str	r6, [r4, #8]
 8005762:	2e00      	cmp	r6, #0
 8005764:	bfa2      	ittt	ge
 8005766:	6821      	ldrge	r1, [r4, #0]
 8005768:	f021 0104 	bicge.w	r1, r1, #4
 800576c:	6021      	strge	r1, [r4, #0]
 800576e:	b90d      	cbnz	r5, 8005774 <_printf_i+0x118>
 8005770:	2e00      	cmp	r6, #0
 8005772:	d04d      	beq.n	8005810 <_printf_i+0x1b4>
 8005774:	4616      	mov	r6, r2
 8005776:	fbb5 f1f3 	udiv	r1, r5, r3
 800577a:	fb03 5711 	mls	r7, r3, r1, r5
 800577e:	5dc7      	ldrb	r7, [r0, r7]
 8005780:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005784:	462f      	mov	r7, r5
 8005786:	42bb      	cmp	r3, r7
 8005788:	460d      	mov	r5, r1
 800578a:	d9f4      	bls.n	8005776 <_printf_i+0x11a>
 800578c:	2b08      	cmp	r3, #8
 800578e:	d10b      	bne.n	80057a8 <_printf_i+0x14c>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	07df      	lsls	r7, r3, #31
 8005794:	d508      	bpl.n	80057a8 <_printf_i+0x14c>
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	6861      	ldr	r1, [r4, #4]
 800579a:	4299      	cmp	r1, r3
 800579c:	bfde      	ittt	le
 800579e:	2330      	movle	r3, #48	; 0x30
 80057a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057a8:	1b92      	subs	r2, r2, r6
 80057aa:	6122      	str	r2, [r4, #16]
 80057ac:	f8cd a000 	str.w	sl, [sp]
 80057b0:	464b      	mov	r3, r9
 80057b2:	aa03      	add	r2, sp, #12
 80057b4:	4621      	mov	r1, r4
 80057b6:	4640      	mov	r0, r8
 80057b8:	f7ff fee2 	bl	8005580 <_printf_common>
 80057bc:	3001      	adds	r0, #1
 80057be:	d14c      	bne.n	800585a <_printf_i+0x1fe>
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	b004      	add	sp, #16
 80057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ca:	4835      	ldr	r0, [pc, #212]	; (80058a0 <_printf_i+0x244>)
 80057cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	680e      	ldr	r6, [r1, #0]
 80057d4:	061f      	lsls	r7, r3, #24
 80057d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80057da:	600e      	str	r6, [r1, #0]
 80057dc:	d514      	bpl.n	8005808 <_printf_i+0x1ac>
 80057de:	07d9      	lsls	r1, r3, #31
 80057e0:	bf44      	itt	mi
 80057e2:	f043 0320 	orrmi.w	r3, r3, #32
 80057e6:	6023      	strmi	r3, [r4, #0]
 80057e8:	b91d      	cbnz	r5, 80057f2 <_printf_i+0x196>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	f023 0320 	bic.w	r3, r3, #32
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	2310      	movs	r3, #16
 80057f4:	e7b0      	b.n	8005758 <_printf_i+0xfc>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f043 0320 	orr.w	r3, r3, #32
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	2378      	movs	r3, #120	; 0x78
 8005800:	4828      	ldr	r0, [pc, #160]	; (80058a4 <_printf_i+0x248>)
 8005802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005806:	e7e3      	b.n	80057d0 <_printf_i+0x174>
 8005808:	065e      	lsls	r6, r3, #25
 800580a:	bf48      	it	mi
 800580c:	b2ad      	uxthmi	r5, r5
 800580e:	e7e6      	b.n	80057de <_printf_i+0x182>
 8005810:	4616      	mov	r6, r2
 8005812:	e7bb      	b.n	800578c <_printf_i+0x130>
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	6826      	ldr	r6, [r4, #0]
 8005818:	6960      	ldr	r0, [r4, #20]
 800581a:	1d1d      	adds	r5, r3, #4
 800581c:	600d      	str	r5, [r1, #0]
 800581e:	0635      	lsls	r5, r6, #24
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	d501      	bpl.n	8005828 <_printf_i+0x1cc>
 8005824:	6018      	str	r0, [r3, #0]
 8005826:	e002      	b.n	800582e <_printf_i+0x1d2>
 8005828:	0671      	lsls	r1, r6, #25
 800582a:	d5fb      	bpl.n	8005824 <_printf_i+0x1c8>
 800582c:	8018      	strh	r0, [r3, #0]
 800582e:	2300      	movs	r3, #0
 8005830:	6123      	str	r3, [r4, #16]
 8005832:	4616      	mov	r6, r2
 8005834:	e7ba      	b.n	80057ac <_printf_i+0x150>
 8005836:	680b      	ldr	r3, [r1, #0]
 8005838:	1d1a      	adds	r2, r3, #4
 800583a:	600a      	str	r2, [r1, #0]
 800583c:	681e      	ldr	r6, [r3, #0]
 800583e:	6862      	ldr	r2, [r4, #4]
 8005840:	2100      	movs	r1, #0
 8005842:	4630      	mov	r0, r6
 8005844:	f7fa fca4 	bl	8000190 <memchr>
 8005848:	b108      	cbz	r0, 800584e <_printf_i+0x1f2>
 800584a:	1b80      	subs	r0, r0, r6
 800584c:	6060      	str	r0, [r4, #4]
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	2300      	movs	r3, #0
 8005854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005858:	e7a8      	b.n	80057ac <_printf_i+0x150>
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	4632      	mov	r2, r6
 800585e:	4649      	mov	r1, r9
 8005860:	4640      	mov	r0, r8
 8005862:	47d0      	blx	sl
 8005864:	3001      	adds	r0, #1
 8005866:	d0ab      	beq.n	80057c0 <_printf_i+0x164>
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	079b      	lsls	r3, r3, #30
 800586c:	d413      	bmi.n	8005896 <_printf_i+0x23a>
 800586e:	68e0      	ldr	r0, [r4, #12]
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	4298      	cmp	r0, r3
 8005874:	bfb8      	it	lt
 8005876:	4618      	movlt	r0, r3
 8005878:	e7a4      	b.n	80057c4 <_printf_i+0x168>
 800587a:	2301      	movs	r3, #1
 800587c:	4632      	mov	r2, r6
 800587e:	4649      	mov	r1, r9
 8005880:	4640      	mov	r0, r8
 8005882:	47d0      	blx	sl
 8005884:	3001      	adds	r0, #1
 8005886:	d09b      	beq.n	80057c0 <_printf_i+0x164>
 8005888:	3501      	adds	r5, #1
 800588a:	68e3      	ldr	r3, [r4, #12]
 800588c:	9903      	ldr	r1, [sp, #12]
 800588e:	1a5b      	subs	r3, r3, r1
 8005890:	42ab      	cmp	r3, r5
 8005892:	dcf2      	bgt.n	800587a <_printf_i+0x21e>
 8005894:	e7eb      	b.n	800586e <_printf_i+0x212>
 8005896:	2500      	movs	r5, #0
 8005898:	f104 0619 	add.w	r6, r4, #25
 800589c:	e7f5      	b.n	800588a <_printf_i+0x22e>
 800589e:	bf00      	nop
 80058a0:	08007b02 	.word	0x08007b02
 80058a4:	08007b13 	.word	0x08007b13

080058a8 <iprintf>:
 80058a8:	b40f      	push	{r0, r1, r2, r3}
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <iprintf+0x2c>)
 80058ac:	b513      	push	{r0, r1, r4, lr}
 80058ae:	681c      	ldr	r4, [r3, #0]
 80058b0:	b124      	cbz	r4, 80058bc <iprintf+0x14>
 80058b2:	69a3      	ldr	r3, [r4, #24]
 80058b4:	b913      	cbnz	r3, 80058bc <iprintf+0x14>
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fee0 	bl	800667c <__sinit>
 80058bc:	ab05      	add	r3, sp, #20
 80058be:	9a04      	ldr	r2, [sp, #16]
 80058c0:	68a1      	ldr	r1, [r4, #8]
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	4620      	mov	r0, r4
 80058c6:	f001 fbf1 	bl	80070ac <_vfiprintf_r>
 80058ca:	b002      	add	sp, #8
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	b004      	add	sp, #16
 80058d2:	4770      	bx	lr
 80058d4:	20000010 	.word	0x20000010

080058d8 <quorem>:
 80058d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	6903      	ldr	r3, [r0, #16]
 80058de:	690c      	ldr	r4, [r1, #16]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	4607      	mov	r7, r0
 80058e4:	f2c0 8081 	blt.w	80059ea <quorem+0x112>
 80058e8:	3c01      	subs	r4, #1
 80058ea:	f101 0814 	add.w	r8, r1, #20
 80058ee:	f100 0514 	add.w	r5, r0, #20
 80058f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005900:	3301      	adds	r3, #1
 8005902:	429a      	cmp	r2, r3
 8005904:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800590c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005910:	d331      	bcc.n	8005976 <quorem+0x9e>
 8005912:	f04f 0e00 	mov.w	lr, #0
 8005916:	4640      	mov	r0, r8
 8005918:	46ac      	mov	ip, r5
 800591a:	46f2      	mov	sl, lr
 800591c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005920:	b293      	uxth	r3, r2
 8005922:	fb06 e303 	mla	r3, r6, r3, lr
 8005926:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800592a:	b29b      	uxth	r3, r3
 800592c:	ebaa 0303 	sub.w	r3, sl, r3
 8005930:	0c12      	lsrs	r2, r2, #16
 8005932:	f8dc a000 	ldr.w	sl, [ip]
 8005936:	fb06 e202 	mla	r2, r6, r2, lr
 800593a:	fa13 f38a 	uxtah	r3, r3, sl
 800593e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005942:	fa1f fa82 	uxth.w	sl, r2
 8005946:	f8dc 2000 	ldr.w	r2, [ip]
 800594a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800594e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005952:	b29b      	uxth	r3, r3
 8005954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005958:	4581      	cmp	r9, r0
 800595a:	f84c 3b04 	str.w	r3, [ip], #4
 800595e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005962:	d2db      	bcs.n	800591c <quorem+0x44>
 8005964:	f855 300b 	ldr.w	r3, [r5, fp]
 8005968:	b92b      	cbnz	r3, 8005976 <quorem+0x9e>
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	3b04      	subs	r3, #4
 800596e:	429d      	cmp	r5, r3
 8005970:	461a      	mov	r2, r3
 8005972:	d32e      	bcc.n	80059d2 <quorem+0xfa>
 8005974:	613c      	str	r4, [r7, #16]
 8005976:	4638      	mov	r0, r7
 8005978:	f001 f9b8 	bl	8006cec <__mcmp>
 800597c:	2800      	cmp	r0, #0
 800597e:	db24      	blt.n	80059ca <quorem+0xf2>
 8005980:	3601      	adds	r6, #1
 8005982:	4628      	mov	r0, r5
 8005984:	f04f 0c00 	mov.w	ip, #0
 8005988:	f858 2b04 	ldr.w	r2, [r8], #4
 800598c:	f8d0 e000 	ldr.w	lr, [r0]
 8005990:	b293      	uxth	r3, r2
 8005992:	ebac 0303 	sub.w	r3, ip, r3
 8005996:	0c12      	lsrs	r2, r2, #16
 8005998:	fa13 f38e 	uxtah	r3, r3, lr
 800599c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059aa:	45c1      	cmp	r9, r8
 80059ac:	f840 3b04 	str.w	r3, [r0], #4
 80059b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059b4:	d2e8      	bcs.n	8005988 <quorem+0xb0>
 80059b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059be:	b922      	cbnz	r2, 80059ca <quorem+0xf2>
 80059c0:	3b04      	subs	r3, #4
 80059c2:	429d      	cmp	r5, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	d30a      	bcc.n	80059de <quorem+0x106>
 80059c8:	613c      	str	r4, [r7, #16]
 80059ca:	4630      	mov	r0, r6
 80059cc:	b003      	add	sp, #12
 80059ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	3b04      	subs	r3, #4
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	d1cc      	bne.n	8005974 <quorem+0x9c>
 80059da:	3c01      	subs	r4, #1
 80059dc:	e7c7      	b.n	800596e <quorem+0x96>
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	3b04      	subs	r3, #4
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	d1f0      	bne.n	80059c8 <quorem+0xf0>
 80059e6:	3c01      	subs	r4, #1
 80059e8:	e7eb      	b.n	80059c2 <quorem+0xea>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e7ee      	b.n	80059cc <quorem+0xf4>
	...

080059f0 <_dtoa_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80059f6:	b099      	sub	sp, #100	; 0x64
 80059f8:	4616      	mov	r6, r2
 80059fa:	461f      	mov	r7, r3
 80059fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a00:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a04:	4605      	mov	r5, r0
 8005a06:	b974      	cbnz	r4, 8005a26 <_dtoa_r+0x36>
 8005a08:	2010      	movs	r0, #16
 8005a0a:	f000 fedd 	bl	80067c8 <malloc>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6268      	str	r0, [r5, #36]	; 0x24
 8005a12:	b920      	cbnz	r0, 8005a1e <_dtoa_r+0x2e>
 8005a14:	4ba8      	ldr	r3, [pc, #672]	; (8005cb8 <_dtoa_r+0x2c8>)
 8005a16:	21ea      	movs	r1, #234	; 0xea
 8005a18:	48a8      	ldr	r0, [pc, #672]	; (8005cbc <_dtoa_r+0x2cc>)
 8005a1a:	f001 fd9d 	bl	8007558 <__assert_func>
 8005a1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a22:	6004      	str	r4, [r0, #0]
 8005a24:	60c4      	str	r4, [r0, #12]
 8005a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a28:	6819      	ldr	r1, [r3, #0]
 8005a2a:	b151      	cbz	r1, 8005a42 <_dtoa_r+0x52>
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	604a      	str	r2, [r1, #4]
 8005a30:	2301      	movs	r3, #1
 8005a32:	4093      	lsls	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 ff1c 	bl	8006874 <_Bfree>
 8005a3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	1e3b      	subs	r3, r7, #0
 8005a44:	bfb9      	ittee	lt
 8005a46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	9305      	strlt	r3, [sp, #20]
 8005a4c:	2300      	movge	r3, #0
 8005a4e:	f8c8 3000 	strge.w	r3, [r8]
 8005a52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a56:	4b9a      	ldr	r3, [pc, #616]	; (8005cc0 <_dtoa_r+0x2d0>)
 8005a58:	bfbc      	itt	lt
 8005a5a:	2201      	movlt	r2, #1
 8005a5c:	f8c8 2000 	strlt.w	r2, [r8]
 8005a60:	ea33 0309 	bics.w	r3, r3, r9
 8005a64:	d119      	bne.n	8005a9a <_dtoa_r+0xaa>
 8005a66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a68:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a72:	4333      	orrs	r3, r6
 8005a74:	f000 8581 	beq.w	800657a <_dtoa_r+0xb8a>
 8005a78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a7a:	b953      	cbnz	r3, 8005a92 <_dtoa_r+0xa2>
 8005a7c:	4b91      	ldr	r3, [pc, #580]	; (8005cc4 <_dtoa_r+0x2d4>)
 8005a7e:	e022      	b.n	8005ac6 <_dtoa_r+0xd6>
 8005a80:	4b91      	ldr	r3, [pc, #580]	; (8005cc8 <_dtoa_r+0x2d8>)
 8005a82:	9308      	str	r3, [sp, #32]
 8005a84:	3308      	adds	r3, #8
 8005a86:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	9808      	ldr	r0, [sp, #32]
 8005a8c:	b019      	add	sp, #100	; 0x64
 8005a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a92:	4b8c      	ldr	r3, [pc, #560]	; (8005cc4 <_dtoa_r+0x2d4>)
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	3303      	adds	r3, #3
 8005a98:	e7f5      	b.n	8005a86 <_dtoa_r+0x96>
 8005a9a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a9e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005aa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f7fb f899 	bl	8000be0 <__aeabi_dcmpeq>
 8005aae:	4680      	mov	r8, r0
 8005ab0:	b158      	cbz	r0, 8005aca <_dtoa_r+0xda>
 8005ab2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 855a 	beq.w	8006574 <_dtoa_r+0xb84>
 8005ac0:	4882      	ldr	r0, [pc, #520]	; (8005ccc <_dtoa_r+0x2dc>)
 8005ac2:	6018      	str	r0, [r3, #0]
 8005ac4:	1e43      	subs	r3, r0, #1
 8005ac6:	9308      	str	r3, [sp, #32]
 8005ac8:	e7df      	b.n	8005a8a <_dtoa_r+0x9a>
 8005aca:	ab16      	add	r3, sp, #88	; 0x58
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	ab17      	add	r3, sp, #92	; 0x5c
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ad8:	f001 f9ae 	bl	8006e38 <__d2b>
 8005adc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ae0:	4682      	mov	sl, r0
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d07e      	beq.n	8005be4 <_dtoa_r+0x1f4>
 8005ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ae8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005af4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005af8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005afc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b00:	4b73      	ldr	r3, [pc, #460]	; (8005cd0 <_dtoa_r+0x2e0>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	f7fa fc4c 	bl	80003a0 <__aeabi_dsub>
 8005b08:	a365      	add	r3, pc, #404	; (adr r3, 8005ca0 <_dtoa_r+0x2b0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa fdff 	bl	8000710 <__aeabi_dmul>
 8005b12:	a365      	add	r3, pc, #404	; (adr r3, 8005ca8 <_dtoa_r+0x2b8>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fc44 	bl	80003a4 <__adddf3>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	4620      	mov	r0, r4
 8005b20:	460f      	mov	r7, r1
 8005b22:	f7fa fd8b 	bl	800063c <__aeabi_i2d>
 8005b26:	a362      	add	r3, pc, #392	; (adr r3, 8005cb0 <_dtoa_r+0x2c0>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f7fa fdf0 	bl	8000710 <__aeabi_dmul>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	f7fa fc34 	bl	80003a4 <__adddf3>
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	460f      	mov	r7, r1
 8005b40:	f7fb f896 	bl	8000c70 <__aeabi_d2iz>
 8005b44:	2200      	movs	r2, #0
 8005b46:	4681      	mov	r9, r0
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fb f851 	bl	8000bf4 <__aeabi_dcmplt>
 8005b52:	b148      	cbz	r0, 8005b68 <_dtoa_r+0x178>
 8005b54:	4648      	mov	r0, r9
 8005b56:	f7fa fd71 	bl	800063c <__aeabi_i2d>
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	f7fb f83f 	bl	8000be0 <__aeabi_dcmpeq>
 8005b62:	b908      	cbnz	r0, 8005b68 <_dtoa_r+0x178>
 8005b64:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b68:	f1b9 0f16 	cmp.w	r9, #22
 8005b6c:	d857      	bhi.n	8005c1e <_dtoa_r+0x22e>
 8005b6e:	4b59      	ldr	r3, [pc, #356]	; (8005cd4 <_dtoa_r+0x2e4>)
 8005b70:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b7c:	f7fb f83a 	bl	8000bf4 <__aeabi_dcmplt>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d04e      	beq.n	8005c22 <_dtoa_r+0x232>
 8005b84:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b88:	2300      	movs	r3, #0
 8005b8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b8e:	1b1c      	subs	r4, r3, r4
 8005b90:	1e63      	subs	r3, r4, #1
 8005b92:	9309      	str	r3, [sp, #36]	; 0x24
 8005b94:	bf45      	ittet	mi
 8005b96:	f1c4 0301 	rsbmi	r3, r4, #1
 8005b9a:	9306      	strmi	r3, [sp, #24]
 8005b9c:	2300      	movpl	r3, #0
 8005b9e:	2300      	movmi	r3, #0
 8005ba0:	bf4c      	ite	mi
 8005ba2:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ba4:	9306      	strpl	r3, [sp, #24]
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	db3c      	blt.n	8005c26 <_dtoa_r+0x236>
 8005bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bae:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005bb2:	444b      	add	r3, r9
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8005bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	f200 808d 	bhi.w	8005cdc <_dtoa_r+0x2ec>
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	bfc4      	itt	gt
 8005bc6:	3b04      	subgt	r3, #4
 8005bc8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8005bd0:	bfcc      	ite	gt
 8005bd2:	2400      	movgt	r4, #0
 8005bd4:	2401      	movle	r4, #1
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	f200 808c 	bhi.w	8005cf4 <_dtoa_r+0x304>
 8005bdc:	e8df f003 	tbb	[pc, r3]
 8005be0:	5b4d4f2d 	.word	0x5b4d4f2d
 8005be4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005be8:	441c      	add	r4, r3
 8005bea:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	bfc3      	ittte	gt
 8005bf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bf6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005bfa:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bfe:	f1c3 0320 	rsble	r3, r3, #32
 8005c02:	bfc6      	itte	gt
 8005c04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c08:	4318      	orrgt	r0, r3
 8005c0a:	fa06 f003 	lslle.w	r0, r6, r3
 8005c0e:	f7fa fd05 	bl	800061c <__aeabi_ui2d>
 8005c12:	2301      	movs	r3, #1
 8005c14:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c18:	3c01      	subs	r4, #1
 8005c1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c1c:	e770      	b.n	8005b00 <_dtoa_r+0x110>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7b3      	b.n	8005b8a <_dtoa_r+0x19a>
 8005c22:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c24:	e7b2      	b.n	8005b8c <_dtoa_r+0x19c>
 8005c26:	9b06      	ldr	r3, [sp, #24]
 8005c28:	eba3 0309 	sub.w	r3, r3, r9
 8005c2c:	9306      	str	r3, [sp, #24]
 8005c2e:	f1c9 0300 	rsb	r3, r9, #0
 8005c32:	930a      	str	r3, [sp, #40]	; 0x28
 8005c34:	2300      	movs	r3, #0
 8005c36:	930e      	str	r3, [sp, #56]	; 0x38
 8005c38:	e7bf      	b.n	8005bba <_dtoa_r+0x1ca>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dc5a      	bgt.n	8005cfa <_dtoa_r+0x30a>
 8005c44:	f04f 0b01 	mov.w	fp, #1
 8005c48:	f8cd b008 	str.w	fp, [sp, #8]
 8005c4c:	465b      	mov	r3, fp
 8005c4e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005c52:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c54:	2200      	movs	r2, #0
 8005c56:	6042      	str	r2, [r0, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	f102 0614 	add.w	r6, r2, #20
 8005c5e:	429e      	cmp	r6, r3
 8005c60:	6841      	ldr	r1, [r0, #4]
 8005c62:	d950      	bls.n	8005d06 <_dtoa_r+0x316>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 fdc5 	bl	80067f4 <_Balloc>
 8005c6a:	9008      	str	r0, [sp, #32]
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d14e      	bne.n	8005d0e <_dtoa_r+0x31e>
 8005c70:	4b19      	ldr	r3, [pc, #100]	; (8005cd8 <_dtoa_r+0x2e8>)
 8005c72:	4602      	mov	r2, r0
 8005c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c78:	e6ce      	b.n	8005a18 <_dtoa_r+0x28>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e7de      	b.n	8005c3c <_dtoa_r+0x24c>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c84:	eb09 0b03 	add.w	fp, r9, r3
 8005c88:	f10b 0301 	add.w	r3, fp, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	9302      	str	r3, [sp, #8]
 8005c90:	bfb8      	it	lt
 8005c92:	2301      	movlt	r3, #1
 8005c94:	e7dd      	b.n	8005c52 <_dtoa_r+0x262>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e7f2      	b.n	8005c80 <_dtoa_r+0x290>
 8005c9a:	bf00      	nop
 8005c9c:	f3af 8000 	nop.w
 8005ca0:	636f4361 	.word	0x636f4361
 8005ca4:	3fd287a7 	.word	0x3fd287a7
 8005ca8:	8b60c8b3 	.word	0x8b60c8b3
 8005cac:	3fc68a28 	.word	0x3fc68a28
 8005cb0:	509f79fb 	.word	0x509f79fb
 8005cb4:	3fd34413 	.word	0x3fd34413
 8005cb8:	08007b31 	.word	0x08007b31
 8005cbc:	08007b48 	.word	0x08007b48
 8005cc0:	7ff00000 	.word	0x7ff00000
 8005cc4:	08007b2d 	.word	0x08007b2d
 8005cc8:	08007b24 	.word	0x08007b24
 8005ccc:	08007b01 	.word	0x08007b01
 8005cd0:	3ff80000 	.word	0x3ff80000
 8005cd4:	08007ca0 	.word	0x08007ca0
 8005cd8:	08007ba7 	.word	0x08007ba7
 8005cdc:	2401      	movs	r4, #1
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9322      	str	r3, [sp, #136]	; 0x88
 8005ce2:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ce4:	f04f 3bff 	mov.w	fp, #4294967295
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8cd b008 	str.w	fp, [sp, #8]
 8005cee:	2312      	movs	r3, #18
 8005cf0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005cf2:	e7ae      	b.n	8005c52 <_dtoa_r+0x262>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	e7f4      	b.n	8005ce4 <_dtoa_r+0x2f4>
 8005cfa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8005d02:	465b      	mov	r3, fp
 8005d04:	e7a5      	b.n	8005c52 <_dtoa_r+0x262>
 8005d06:	3101      	adds	r1, #1
 8005d08:	6041      	str	r1, [r0, #4]
 8005d0a:	0052      	lsls	r2, r2, #1
 8005d0c:	e7a5      	b.n	8005c5a <_dtoa_r+0x26a>
 8005d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d10:	9a08      	ldr	r2, [sp, #32]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	9b02      	ldr	r3, [sp, #8]
 8005d16:	2b0e      	cmp	r3, #14
 8005d18:	f200 80a8 	bhi.w	8005e6c <_dtoa_r+0x47c>
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	f000 80a5 	beq.w	8005e6c <_dtoa_r+0x47c>
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	dd34      	ble.n	8005d92 <_dtoa_r+0x3a2>
 8005d28:	4a9a      	ldr	r2, [pc, #616]	; (8005f94 <_dtoa_r+0x5a4>)
 8005d2a:	f009 030f 	and.w	r3, r9, #15
 8005d2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d36:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d3e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005d42:	d016      	beq.n	8005d72 <_dtoa_r+0x382>
 8005d44:	4b94      	ldr	r3, [pc, #592]	; (8005f98 <_dtoa_r+0x5a8>)
 8005d46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d4e:	f7fa fe09 	bl	8000964 <__aeabi_ddiv>
 8005d52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d56:	f004 040f 	and.w	r4, r4, #15
 8005d5a:	2703      	movs	r7, #3
 8005d5c:	4e8e      	ldr	r6, [pc, #568]	; (8005f98 <_dtoa_r+0x5a8>)
 8005d5e:	b954      	cbnz	r4, 8005d76 <_dtoa_r+0x386>
 8005d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d68:	f7fa fdfc 	bl	8000964 <__aeabi_ddiv>
 8005d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d70:	e029      	b.n	8005dc6 <_dtoa_r+0x3d6>
 8005d72:	2702      	movs	r7, #2
 8005d74:	e7f2      	b.n	8005d5c <_dtoa_r+0x36c>
 8005d76:	07e1      	lsls	r1, r4, #31
 8005d78:	d508      	bpl.n	8005d8c <_dtoa_r+0x39c>
 8005d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d82:	f7fa fcc5 	bl	8000710 <__aeabi_dmul>
 8005d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d8a:	3701      	adds	r7, #1
 8005d8c:	1064      	asrs	r4, r4, #1
 8005d8e:	3608      	adds	r6, #8
 8005d90:	e7e5      	b.n	8005d5e <_dtoa_r+0x36e>
 8005d92:	f000 80a5 	beq.w	8005ee0 <_dtoa_r+0x4f0>
 8005d96:	f1c9 0400 	rsb	r4, r9, #0
 8005d9a:	4b7e      	ldr	r3, [pc, #504]	; (8005f94 <_dtoa_r+0x5a4>)
 8005d9c:	4e7e      	ldr	r6, [pc, #504]	; (8005f98 <_dtoa_r+0x5a8>)
 8005d9e:	f004 020f 	and.w	r2, r4, #15
 8005da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dae:	f7fa fcaf 	bl	8000710 <__aeabi_dmul>
 8005db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db6:	1124      	asrs	r4, r4, #4
 8005db8:	2300      	movs	r3, #0
 8005dba:	2702      	movs	r7, #2
 8005dbc:	2c00      	cmp	r4, #0
 8005dbe:	f040 8084 	bne.w	8005eca <_dtoa_r+0x4da>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1d2      	bne.n	8005d6c <_dtoa_r+0x37c>
 8005dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 808b 	beq.w	8005ee4 <_dtoa_r+0x4f4>
 8005dce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005dd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dda:	4b70      	ldr	r3, [pc, #448]	; (8005f9c <_dtoa_r+0x5ac>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f7fa ff09 	bl	8000bf4 <__aeabi_dcmplt>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d07e      	beq.n	8005ee4 <_dtoa_r+0x4f4>
 8005de6:	9b02      	ldr	r3, [sp, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d07b      	beq.n	8005ee4 <_dtoa_r+0x4f4>
 8005dec:	f1bb 0f00 	cmp.w	fp, #0
 8005df0:	dd38      	ble.n	8005e64 <_dtoa_r+0x474>
 8005df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005df6:	4b6a      	ldr	r3, [pc, #424]	; (8005fa0 <_dtoa_r+0x5b0>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f7fa fc89 	bl	8000710 <__aeabi_dmul>
 8005dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e02:	f109 38ff 	add.w	r8, r9, #4294967295
 8005e06:	3701      	adds	r7, #1
 8005e08:	465c      	mov	r4, fp
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7fa fc16 	bl	800063c <__aeabi_i2d>
 8005e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e14:	f7fa fc7c 	bl	8000710 <__aeabi_dmul>
 8005e18:	4b62      	ldr	r3, [pc, #392]	; (8005fa4 <_dtoa_r+0x5b4>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f7fa fac2 	bl	80003a4 <__adddf3>
 8005e20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e28:	9611      	str	r6, [sp, #68]	; 0x44
 8005e2a:	2c00      	cmp	r4, #0
 8005e2c:	d15d      	bne.n	8005eea <_dtoa_r+0x4fa>
 8005e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e32:	4b5d      	ldr	r3, [pc, #372]	; (8005fa8 <_dtoa_r+0x5b8>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	f7fa fab3 	bl	80003a0 <__aeabi_dsub>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e44:	4633      	mov	r3, r6
 8005e46:	f7fa fef3 	bl	8000c30 <__aeabi_dcmpgt>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	f040 829e 	bne.w	800638c <_dtoa_r+0x99c>
 8005e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e5a:	f7fa fecb 	bl	8000bf4 <__aeabi_dcmplt>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f040 8292 	bne.w	8006388 <_dtoa_r+0x998>
 8005e64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f2c0 8153 	blt.w	800611a <_dtoa_r+0x72a>
 8005e74:	f1b9 0f0e 	cmp.w	r9, #14
 8005e78:	f300 814f 	bgt.w	800611a <_dtoa_r+0x72a>
 8005e7c:	4b45      	ldr	r3, [pc, #276]	; (8005f94 <_dtoa_r+0x5a4>)
 8005e7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f280 80db 	bge.w	8006048 <_dtoa_r+0x658>
 8005e92:	9b02      	ldr	r3, [sp, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f300 80d7 	bgt.w	8006048 <_dtoa_r+0x658>
 8005e9a:	f040 8274 	bne.w	8006386 <_dtoa_r+0x996>
 8005e9e:	4b42      	ldr	r3, [pc, #264]	; (8005fa8 <_dtoa_r+0x5b8>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ea6:	f7fa fc33 	bl	8000710 <__aeabi_dmul>
 8005eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eae:	f7fa feb5 	bl	8000c1c <__aeabi_dcmpge>
 8005eb2:	9c02      	ldr	r4, [sp, #8]
 8005eb4:	4626      	mov	r6, r4
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f040 824a 	bne.w	8006350 <_dtoa_r+0x960>
 8005ebc:	9f08      	ldr	r7, [sp, #32]
 8005ebe:	2331      	movs	r3, #49	; 0x31
 8005ec0:	f807 3b01 	strb.w	r3, [r7], #1
 8005ec4:	f109 0901 	add.w	r9, r9, #1
 8005ec8:	e246      	b.n	8006358 <_dtoa_r+0x968>
 8005eca:	07e2      	lsls	r2, r4, #31
 8005ecc:	d505      	bpl.n	8005eda <_dtoa_r+0x4ea>
 8005ece:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ed2:	f7fa fc1d 	bl	8000710 <__aeabi_dmul>
 8005ed6:	3701      	adds	r7, #1
 8005ed8:	2301      	movs	r3, #1
 8005eda:	1064      	asrs	r4, r4, #1
 8005edc:	3608      	adds	r6, #8
 8005ede:	e76d      	b.n	8005dbc <_dtoa_r+0x3cc>
 8005ee0:	2702      	movs	r7, #2
 8005ee2:	e770      	b.n	8005dc6 <_dtoa_r+0x3d6>
 8005ee4:	9c02      	ldr	r4, [sp, #8]
 8005ee6:	46c8      	mov	r8, r9
 8005ee8:	e78f      	b.n	8005e0a <_dtoa_r+0x41a>
 8005eea:	9908      	ldr	r1, [sp, #32]
 8005eec:	4b29      	ldr	r3, [pc, #164]	; (8005f94 <_dtoa_r+0x5a4>)
 8005eee:	4421      	add	r1, r4
 8005ef0:	9112      	str	r1, [sp, #72]	; 0x48
 8005ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ef8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005efc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f00:	2900      	cmp	r1, #0
 8005f02:	d055      	beq.n	8005fb0 <_dtoa_r+0x5c0>
 8005f04:	4929      	ldr	r1, [pc, #164]	; (8005fac <_dtoa_r+0x5bc>)
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fa fd2c 	bl	8000964 <__aeabi_ddiv>
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	4632      	mov	r2, r6
 8005f10:	f7fa fa46 	bl	80003a0 <__aeabi_dsub>
 8005f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f18:	9f08      	ldr	r7, [sp, #32]
 8005f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f1e:	f7fa fea7 	bl	8000c70 <__aeabi_d2iz>
 8005f22:	4604      	mov	r4, r0
 8005f24:	f7fa fb8a 	bl	800063c <__aeabi_i2d>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f30:	f7fa fa36 	bl	80003a0 <__aeabi_dsub>
 8005f34:	3430      	adds	r4, #48	; 0x30
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f3e:	f807 4b01 	strb.w	r4, [r7], #1
 8005f42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f46:	f7fa fe55 	bl	8000bf4 <__aeabi_dcmplt>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d174      	bne.n	8006038 <_dtoa_r+0x648>
 8005f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f52:	4912      	ldr	r1, [pc, #72]	; (8005f9c <_dtoa_r+0x5ac>)
 8005f54:	2000      	movs	r0, #0
 8005f56:	f7fa fa23 	bl	80003a0 <__aeabi_dsub>
 8005f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f5e:	f7fa fe49 	bl	8000bf4 <__aeabi_dcmplt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	f040 80b6 	bne.w	80060d4 <_dtoa_r+0x6e4>
 8005f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f6a:	429f      	cmp	r7, r3
 8005f6c:	f43f af7a 	beq.w	8005e64 <_dtoa_r+0x474>
 8005f70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <_dtoa_r+0x5b0>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	f7fa fbca 	bl	8000710 <__aeabi_dmul>
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <_dtoa_r+0x5b0>)
 8005f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f82:	2200      	movs	r2, #0
 8005f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f88:	f7fa fbc2 	bl	8000710 <__aeabi_dmul>
 8005f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f90:	e7c3      	b.n	8005f1a <_dtoa_r+0x52a>
 8005f92:	bf00      	nop
 8005f94:	08007ca0 	.word	0x08007ca0
 8005f98:	08007c78 	.word	0x08007c78
 8005f9c:	3ff00000 	.word	0x3ff00000
 8005fa0:	40240000 	.word	0x40240000
 8005fa4:	401c0000 	.word	0x401c0000
 8005fa8:	40140000 	.word	0x40140000
 8005fac:	3fe00000 	.word	0x3fe00000
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	f7fa fbac 	bl	8000710 <__aeabi_dmul>
 8005fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fbe:	9c08      	ldr	r4, [sp, #32]
 8005fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8005fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fc6:	f7fa fe53 	bl	8000c70 <__aeabi_d2iz>
 8005fca:	9015      	str	r0, [sp, #84]	; 0x54
 8005fcc:	f7fa fb36 	bl	800063c <__aeabi_i2d>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd8:	f7fa f9e2 	bl	80003a0 <__aeabi_dsub>
 8005fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fde:	3330      	adds	r3, #48	; 0x30
 8005fe0:	f804 3b01 	strb.w	r3, [r4], #1
 8005fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fe6:	429c      	cmp	r4, r3
 8005fe8:	4606      	mov	r6, r0
 8005fea:	460f      	mov	r7, r1
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	d124      	bne.n	800603c <_dtoa_r+0x64c>
 8005ff2:	4bb2      	ldr	r3, [pc, #712]	; (80062bc <_dtoa_r+0x8cc>)
 8005ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ff8:	f7fa f9d4 	bl	80003a4 <__adddf3>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4630      	mov	r0, r6
 8006002:	4639      	mov	r1, r7
 8006004:	f7fa fe14 	bl	8000c30 <__aeabi_dcmpgt>
 8006008:	2800      	cmp	r0, #0
 800600a:	d162      	bne.n	80060d2 <_dtoa_r+0x6e2>
 800600c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006010:	49aa      	ldr	r1, [pc, #680]	; (80062bc <_dtoa_r+0x8cc>)
 8006012:	2000      	movs	r0, #0
 8006014:	f7fa f9c4 	bl	80003a0 <__aeabi_dsub>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4630      	mov	r0, r6
 800601e:	4639      	mov	r1, r7
 8006020:	f7fa fde8 	bl	8000bf4 <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f43f af1d 	beq.w	8005e64 <_dtoa_r+0x474>
 800602a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800602c:	1e7b      	subs	r3, r7, #1
 800602e:	9314      	str	r3, [sp, #80]	; 0x50
 8006030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006034:	2b30      	cmp	r3, #48	; 0x30
 8006036:	d0f8      	beq.n	800602a <_dtoa_r+0x63a>
 8006038:	46c1      	mov	r9, r8
 800603a:	e03a      	b.n	80060b2 <_dtoa_r+0x6c2>
 800603c:	4ba0      	ldr	r3, [pc, #640]	; (80062c0 <_dtoa_r+0x8d0>)
 800603e:	f7fa fb67 	bl	8000710 <__aeabi_dmul>
 8006042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006046:	e7bc      	b.n	8005fc2 <_dtoa_r+0x5d2>
 8006048:	9f08      	ldr	r7, [sp, #32]
 800604a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800604e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006052:	f7fa fc87 	bl	8000964 <__aeabi_ddiv>
 8006056:	f7fa fe0b 	bl	8000c70 <__aeabi_d2iz>
 800605a:	4604      	mov	r4, r0
 800605c:	f7fa faee 	bl	800063c <__aeabi_i2d>
 8006060:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006064:	f7fa fb54 	bl	8000710 <__aeabi_dmul>
 8006068:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800606c:	460b      	mov	r3, r1
 800606e:	4602      	mov	r2, r0
 8006070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006074:	f7fa f994 	bl	80003a0 <__aeabi_dsub>
 8006078:	f807 6b01 	strb.w	r6, [r7], #1
 800607c:	9e08      	ldr	r6, [sp, #32]
 800607e:	9b02      	ldr	r3, [sp, #8]
 8006080:	1bbe      	subs	r6, r7, r6
 8006082:	42b3      	cmp	r3, r6
 8006084:	d13a      	bne.n	80060fc <_dtoa_r+0x70c>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	f7fa f98b 	bl	80003a4 <__adddf3>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800609a:	f7fa fdc9 	bl	8000c30 <__aeabi_dcmpgt>
 800609e:	bb58      	cbnz	r0, 80060f8 <_dtoa_r+0x708>
 80060a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a8:	f7fa fd9a 	bl	8000be0 <__aeabi_dcmpeq>
 80060ac:	b108      	cbz	r0, 80060b2 <_dtoa_r+0x6c2>
 80060ae:	07e1      	lsls	r1, r4, #31
 80060b0:	d422      	bmi.n	80060f8 <_dtoa_r+0x708>
 80060b2:	4628      	mov	r0, r5
 80060b4:	4651      	mov	r1, sl
 80060b6:	f000 fbdd 	bl	8006874 <_Bfree>
 80060ba:	2300      	movs	r3, #0
 80060bc:	703b      	strb	r3, [r7, #0]
 80060be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060c0:	f109 0001 	add.w	r0, r9, #1
 80060c4:	6018      	str	r0, [r3, #0]
 80060c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f43f acde 	beq.w	8005a8a <_dtoa_r+0x9a>
 80060ce:	601f      	str	r7, [r3, #0]
 80060d0:	e4db      	b.n	8005a8a <_dtoa_r+0x9a>
 80060d2:	4627      	mov	r7, r4
 80060d4:	463b      	mov	r3, r7
 80060d6:	461f      	mov	r7, r3
 80060d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060dc:	2a39      	cmp	r2, #57	; 0x39
 80060de:	d107      	bne.n	80060f0 <_dtoa_r+0x700>
 80060e0:	9a08      	ldr	r2, [sp, #32]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d1f7      	bne.n	80060d6 <_dtoa_r+0x6e6>
 80060e6:	9908      	ldr	r1, [sp, #32]
 80060e8:	2230      	movs	r2, #48	; 0x30
 80060ea:	f108 0801 	add.w	r8, r8, #1
 80060ee:	700a      	strb	r2, [r1, #0]
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	3201      	adds	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e79f      	b.n	8006038 <_dtoa_r+0x648>
 80060f8:	46c8      	mov	r8, r9
 80060fa:	e7eb      	b.n	80060d4 <_dtoa_r+0x6e4>
 80060fc:	4b70      	ldr	r3, [pc, #448]	; (80062c0 <_dtoa_r+0x8d0>)
 80060fe:	2200      	movs	r2, #0
 8006100:	f7fa fb06 	bl	8000710 <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800610c:	2200      	movs	r2, #0
 800610e:	2300      	movs	r3, #0
 8006110:	f7fa fd66 	bl	8000be0 <__aeabi_dcmpeq>
 8006114:	2800      	cmp	r0, #0
 8006116:	d098      	beq.n	800604a <_dtoa_r+0x65a>
 8006118:	e7cb      	b.n	80060b2 <_dtoa_r+0x6c2>
 800611a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800611c:	2a00      	cmp	r2, #0
 800611e:	f000 80d1 	beq.w	80062c4 <_dtoa_r+0x8d4>
 8006122:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006124:	2a01      	cmp	r2, #1
 8006126:	f300 80af 	bgt.w	8006288 <_dtoa_r+0x898>
 800612a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800612c:	2a00      	cmp	r2, #0
 800612e:	f000 80a7 	beq.w	8006280 <_dtoa_r+0x890>
 8006132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006138:	9f06      	ldr	r7, [sp, #24]
 800613a:	9a06      	ldr	r2, [sp, #24]
 800613c:	441a      	add	r2, r3
 800613e:	9206      	str	r2, [sp, #24]
 8006140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006142:	2101      	movs	r1, #1
 8006144:	441a      	add	r2, r3
 8006146:	4628      	mov	r0, r5
 8006148:	9209      	str	r2, [sp, #36]	; 0x24
 800614a:	f000 fc4d 	bl	80069e8 <__i2b>
 800614e:	4606      	mov	r6, r0
 8006150:	2f00      	cmp	r7, #0
 8006152:	dd0c      	ble.n	800616e <_dtoa_r+0x77e>
 8006154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd09      	ble.n	800616e <_dtoa_r+0x77e>
 800615a:	42bb      	cmp	r3, r7
 800615c:	9a06      	ldr	r2, [sp, #24]
 800615e:	bfa8      	it	ge
 8006160:	463b      	movge	r3, r7
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	9206      	str	r2, [sp, #24]
 8006166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006168:	1aff      	subs	r7, r7, r3
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006170:	b1f3      	cbz	r3, 80061b0 <_dtoa_r+0x7c0>
 8006172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80a9 	beq.w	80062cc <_dtoa_r+0x8dc>
 800617a:	2c00      	cmp	r4, #0
 800617c:	dd10      	ble.n	80061a0 <_dtoa_r+0x7b0>
 800617e:	4631      	mov	r1, r6
 8006180:	4622      	mov	r2, r4
 8006182:	4628      	mov	r0, r5
 8006184:	f000 fcec 	bl	8006b60 <__pow5mult>
 8006188:	4652      	mov	r2, sl
 800618a:	4601      	mov	r1, r0
 800618c:	4606      	mov	r6, r0
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fc40 	bl	8006a14 <__multiply>
 8006194:	4651      	mov	r1, sl
 8006196:	4680      	mov	r8, r0
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fb6b 	bl	8006874 <_Bfree>
 800619e:	46c2      	mov	sl, r8
 80061a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a2:	1b1a      	subs	r2, r3, r4
 80061a4:	d004      	beq.n	80061b0 <_dtoa_r+0x7c0>
 80061a6:	4651      	mov	r1, sl
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 fcd9 	bl	8006b60 <__pow5mult>
 80061ae:	4682      	mov	sl, r0
 80061b0:	2101      	movs	r1, #1
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 fc18 	bl	80069e8 <__i2b>
 80061b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	4604      	mov	r4, r0
 80061be:	f340 8087 	ble.w	80062d0 <_dtoa_r+0x8e0>
 80061c2:	461a      	mov	r2, r3
 80061c4:	4601      	mov	r1, r0
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 fcca 	bl	8006b60 <__pow5mult>
 80061cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	4604      	mov	r4, r0
 80061d2:	f340 8080 	ble.w	80062d6 <_dtoa_r+0x8e6>
 80061d6:	f04f 0800 	mov.w	r8, #0
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061e0:	6918      	ldr	r0, [r3, #16]
 80061e2:	f000 fbb3 	bl	800694c <__hi0bits>
 80061e6:	f1c0 0020 	rsb	r0, r0, #32
 80061ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ec:	4418      	add	r0, r3
 80061ee:	f010 001f 	ands.w	r0, r0, #31
 80061f2:	f000 8092 	beq.w	800631a <_dtoa_r+0x92a>
 80061f6:	f1c0 0320 	rsb	r3, r0, #32
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	f340 808a 	ble.w	8006314 <_dtoa_r+0x924>
 8006200:	f1c0 001c 	rsb	r0, r0, #28
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	4403      	add	r3, r0
 8006208:	9306      	str	r3, [sp, #24]
 800620a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620c:	4403      	add	r3, r0
 800620e:	4407      	add	r7, r0
 8006210:	9309      	str	r3, [sp, #36]	; 0x24
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd05      	ble.n	8006224 <_dtoa_r+0x834>
 8006218:	4651      	mov	r1, sl
 800621a:	461a      	mov	r2, r3
 800621c:	4628      	mov	r0, r5
 800621e:	f000 fcf9 	bl	8006c14 <__lshift>
 8006222:	4682      	mov	sl, r0
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	dd05      	ble.n	8006236 <_dtoa_r+0x846>
 800622a:	4621      	mov	r1, r4
 800622c:	461a      	mov	r2, r3
 800622e:	4628      	mov	r0, r5
 8006230:	f000 fcf0 	bl	8006c14 <__lshift>
 8006234:	4604      	mov	r4, r0
 8006236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d070      	beq.n	800631e <_dtoa_r+0x92e>
 800623c:	4621      	mov	r1, r4
 800623e:	4650      	mov	r0, sl
 8006240:	f000 fd54 	bl	8006cec <__mcmp>
 8006244:	2800      	cmp	r0, #0
 8006246:	da6a      	bge.n	800631e <_dtoa_r+0x92e>
 8006248:	2300      	movs	r3, #0
 800624a:	4651      	mov	r1, sl
 800624c:	220a      	movs	r2, #10
 800624e:	4628      	mov	r0, r5
 8006250:	f000 fb32 	bl	80068b8 <__multadd>
 8006254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006256:	f109 39ff 	add.w	r9, r9, #4294967295
 800625a:	4682      	mov	sl, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8193 	beq.w	8006588 <_dtoa_r+0xb98>
 8006262:	4631      	mov	r1, r6
 8006264:	2300      	movs	r3, #0
 8006266:	220a      	movs	r2, #10
 8006268:	4628      	mov	r0, r5
 800626a:	f000 fb25 	bl	80068b8 <__multadd>
 800626e:	f1bb 0f00 	cmp.w	fp, #0
 8006272:	4606      	mov	r6, r0
 8006274:	f300 8093 	bgt.w	800639e <_dtoa_r+0x9ae>
 8006278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800627a:	2b02      	cmp	r3, #2
 800627c:	dc57      	bgt.n	800632e <_dtoa_r+0x93e>
 800627e:	e08e      	b.n	800639e <_dtoa_r+0x9ae>
 8006280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006282:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006286:	e756      	b.n	8006136 <_dtoa_r+0x746>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	1e5c      	subs	r4, r3, #1
 800628c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628e:	42a3      	cmp	r3, r4
 8006290:	bfbf      	itttt	lt
 8006292:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006294:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006296:	1ae2      	sublt	r2, r4, r3
 8006298:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800629a:	bfb6      	itet	lt
 800629c:	189b      	addlt	r3, r3, r2
 800629e:	1b1c      	subge	r4, r3, r4
 80062a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80062a2:	9b02      	ldr	r3, [sp, #8]
 80062a4:	bfb8      	it	lt
 80062a6:	2400      	movlt	r4, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bfb9      	ittee	lt
 80062ac:	9b06      	ldrlt	r3, [sp, #24]
 80062ae:	9a02      	ldrlt	r2, [sp, #8]
 80062b0:	9f06      	ldrge	r7, [sp, #24]
 80062b2:	9b02      	ldrge	r3, [sp, #8]
 80062b4:	bfbc      	itt	lt
 80062b6:	1a9f      	sublt	r7, r3, r2
 80062b8:	2300      	movlt	r3, #0
 80062ba:	e73e      	b.n	800613a <_dtoa_r+0x74a>
 80062bc:	3fe00000 	.word	0x3fe00000
 80062c0:	40240000 	.word	0x40240000
 80062c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062c6:	9f06      	ldr	r7, [sp, #24]
 80062c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062ca:	e741      	b.n	8006150 <_dtoa_r+0x760>
 80062cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ce:	e76a      	b.n	80061a6 <_dtoa_r+0x7b6>
 80062d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	dc19      	bgt.n	800630a <_dtoa_r+0x91a>
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	b9bb      	cbnz	r3, 800630a <_dtoa_r+0x91a>
 80062da:	9b05      	ldr	r3, [sp, #20]
 80062dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e0:	b99b      	cbnz	r3, 800630a <_dtoa_r+0x91a>
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062e8:	0d1b      	lsrs	r3, r3, #20
 80062ea:	051b      	lsls	r3, r3, #20
 80062ec:	b183      	cbz	r3, 8006310 <_dtoa_r+0x920>
 80062ee:	9b06      	ldr	r3, [sp, #24]
 80062f0:	3301      	adds	r3, #1
 80062f2:	9306      	str	r3, [sp, #24]
 80062f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f6:	3301      	adds	r3, #1
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	f04f 0801 	mov.w	r8, #1
 80062fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af6a 	bne.w	80061da <_dtoa_r+0x7ea>
 8006306:	2001      	movs	r0, #1
 8006308:	e76f      	b.n	80061ea <_dtoa_r+0x7fa>
 800630a:	f04f 0800 	mov.w	r8, #0
 800630e:	e7f6      	b.n	80062fe <_dtoa_r+0x90e>
 8006310:	4698      	mov	r8, r3
 8006312:	e7f4      	b.n	80062fe <_dtoa_r+0x90e>
 8006314:	f43f af7d 	beq.w	8006212 <_dtoa_r+0x822>
 8006318:	4618      	mov	r0, r3
 800631a:	301c      	adds	r0, #28
 800631c:	e772      	b.n	8006204 <_dtoa_r+0x814>
 800631e:	9b02      	ldr	r3, [sp, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	dc36      	bgt.n	8006392 <_dtoa_r+0x9a2>
 8006324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006326:	2b02      	cmp	r3, #2
 8006328:	dd33      	ble.n	8006392 <_dtoa_r+0x9a2>
 800632a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800632e:	f1bb 0f00 	cmp.w	fp, #0
 8006332:	d10d      	bne.n	8006350 <_dtoa_r+0x960>
 8006334:	4621      	mov	r1, r4
 8006336:	465b      	mov	r3, fp
 8006338:	2205      	movs	r2, #5
 800633a:	4628      	mov	r0, r5
 800633c:	f000 fabc 	bl	80068b8 <__multadd>
 8006340:	4601      	mov	r1, r0
 8006342:	4604      	mov	r4, r0
 8006344:	4650      	mov	r0, sl
 8006346:	f000 fcd1 	bl	8006cec <__mcmp>
 800634a:	2800      	cmp	r0, #0
 800634c:	f73f adb6 	bgt.w	8005ebc <_dtoa_r+0x4cc>
 8006350:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006352:	9f08      	ldr	r7, [sp, #32]
 8006354:	ea6f 0903 	mvn.w	r9, r3
 8006358:	f04f 0800 	mov.w	r8, #0
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 fa88 	bl	8006874 <_Bfree>
 8006364:	2e00      	cmp	r6, #0
 8006366:	f43f aea4 	beq.w	80060b2 <_dtoa_r+0x6c2>
 800636a:	f1b8 0f00 	cmp.w	r8, #0
 800636e:	d005      	beq.n	800637c <_dtoa_r+0x98c>
 8006370:	45b0      	cmp	r8, r6
 8006372:	d003      	beq.n	800637c <_dtoa_r+0x98c>
 8006374:	4641      	mov	r1, r8
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fa7c 	bl	8006874 <_Bfree>
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	f000 fa78 	bl	8006874 <_Bfree>
 8006384:	e695      	b.n	80060b2 <_dtoa_r+0x6c2>
 8006386:	2400      	movs	r4, #0
 8006388:	4626      	mov	r6, r4
 800638a:	e7e1      	b.n	8006350 <_dtoa_r+0x960>
 800638c:	46c1      	mov	r9, r8
 800638e:	4626      	mov	r6, r4
 8006390:	e594      	b.n	8005ebc <_dtoa_r+0x4cc>
 8006392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006394:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80fc 	beq.w	8006596 <_dtoa_r+0xba6>
 800639e:	2f00      	cmp	r7, #0
 80063a0:	dd05      	ble.n	80063ae <_dtoa_r+0x9be>
 80063a2:	4631      	mov	r1, r6
 80063a4:	463a      	mov	r2, r7
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 fc34 	bl	8006c14 <__lshift>
 80063ac:	4606      	mov	r6, r0
 80063ae:	f1b8 0f00 	cmp.w	r8, #0
 80063b2:	d05c      	beq.n	800646e <_dtoa_r+0xa7e>
 80063b4:	6871      	ldr	r1, [r6, #4]
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fa1c 	bl	80067f4 <_Balloc>
 80063bc:	4607      	mov	r7, r0
 80063be:	b928      	cbnz	r0, 80063cc <_dtoa_r+0x9dc>
 80063c0:	4b7f      	ldr	r3, [pc, #508]	; (80065c0 <_dtoa_r+0xbd0>)
 80063c2:	4602      	mov	r2, r0
 80063c4:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063c8:	f7ff bb26 	b.w	8005a18 <_dtoa_r+0x28>
 80063cc:	6932      	ldr	r2, [r6, #16]
 80063ce:	3202      	adds	r2, #2
 80063d0:	0092      	lsls	r2, r2, #2
 80063d2:	f106 010c 	add.w	r1, r6, #12
 80063d6:	300c      	adds	r0, #12
 80063d8:	f000 f9fe 	bl	80067d8 <memcpy>
 80063dc:	2201      	movs	r2, #1
 80063de:	4639      	mov	r1, r7
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 fc17 	bl	8006c14 <__lshift>
 80063e6:	9b08      	ldr	r3, [sp, #32]
 80063e8:	3301      	adds	r3, #1
 80063ea:	9302      	str	r3, [sp, #8]
 80063ec:	9b08      	ldr	r3, [sp, #32]
 80063ee:	445b      	add	r3, fp
 80063f0:	930a      	str	r3, [sp, #40]	; 0x28
 80063f2:	9b04      	ldr	r3, [sp, #16]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	46b0      	mov	r8, r6
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	4606      	mov	r6, r0
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	4621      	mov	r1, r4
 8006402:	4650      	mov	r0, sl
 8006404:	f103 3bff 	add.w	fp, r3, #4294967295
 8006408:	f7ff fa66 	bl	80058d8 <quorem>
 800640c:	4603      	mov	r3, r0
 800640e:	3330      	adds	r3, #48	; 0x30
 8006410:	9004      	str	r0, [sp, #16]
 8006412:	4641      	mov	r1, r8
 8006414:	4650      	mov	r0, sl
 8006416:	930b      	str	r3, [sp, #44]	; 0x2c
 8006418:	f000 fc68 	bl	8006cec <__mcmp>
 800641c:	4632      	mov	r2, r6
 800641e:	9006      	str	r0, [sp, #24]
 8006420:	4621      	mov	r1, r4
 8006422:	4628      	mov	r0, r5
 8006424:	f000 fc7e 	bl	8006d24 <__mdiff>
 8006428:	68c2      	ldr	r2, [r0, #12]
 800642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642c:	4607      	mov	r7, r0
 800642e:	bb02      	cbnz	r2, 8006472 <_dtoa_r+0xa82>
 8006430:	4601      	mov	r1, r0
 8006432:	4650      	mov	r0, sl
 8006434:	f000 fc5a 	bl	8006cec <__mcmp>
 8006438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643a:	4602      	mov	r2, r0
 800643c:	4639      	mov	r1, r7
 800643e:	4628      	mov	r0, r5
 8006440:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006444:	f000 fa16 	bl	8006874 <_Bfree>
 8006448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800644a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644c:	9f02      	ldr	r7, [sp, #8]
 800644e:	ea43 0102 	orr.w	r1, r3, r2
 8006452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006454:	430b      	orrs	r3, r1
 8006456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006458:	d10d      	bne.n	8006476 <_dtoa_r+0xa86>
 800645a:	2b39      	cmp	r3, #57	; 0x39
 800645c:	d027      	beq.n	80064ae <_dtoa_r+0xabe>
 800645e:	9a06      	ldr	r2, [sp, #24]
 8006460:	2a00      	cmp	r2, #0
 8006462:	dd01      	ble.n	8006468 <_dtoa_r+0xa78>
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	3331      	adds	r3, #49	; 0x31
 8006468:	f88b 3000 	strb.w	r3, [fp]
 800646c:	e776      	b.n	800635c <_dtoa_r+0x96c>
 800646e:	4630      	mov	r0, r6
 8006470:	e7b9      	b.n	80063e6 <_dtoa_r+0x9f6>
 8006472:	2201      	movs	r2, #1
 8006474:	e7e2      	b.n	800643c <_dtoa_r+0xa4c>
 8006476:	9906      	ldr	r1, [sp, #24]
 8006478:	2900      	cmp	r1, #0
 800647a:	db04      	blt.n	8006486 <_dtoa_r+0xa96>
 800647c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800647e:	4301      	orrs	r1, r0
 8006480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006482:	4301      	orrs	r1, r0
 8006484:	d120      	bne.n	80064c8 <_dtoa_r+0xad8>
 8006486:	2a00      	cmp	r2, #0
 8006488:	ddee      	ble.n	8006468 <_dtoa_r+0xa78>
 800648a:	4651      	mov	r1, sl
 800648c:	2201      	movs	r2, #1
 800648e:	4628      	mov	r0, r5
 8006490:	9302      	str	r3, [sp, #8]
 8006492:	f000 fbbf 	bl	8006c14 <__lshift>
 8006496:	4621      	mov	r1, r4
 8006498:	4682      	mov	sl, r0
 800649a:	f000 fc27 	bl	8006cec <__mcmp>
 800649e:	2800      	cmp	r0, #0
 80064a0:	9b02      	ldr	r3, [sp, #8]
 80064a2:	dc02      	bgt.n	80064aa <_dtoa_r+0xaba>
 80064a4:	d1e0      	bne.n	8006468 <_dtoa_r+0xa78>
 80064a6:	07da      	lsls	r2, r3, #31
 80064a8:	d5de      	bpl.n	8006468 <_dtoa_r+0xa78>
 80064aa:	2b39      	cmp	r3, #57	; 0x39
 80064ac:	d1da      	bne.n	8006464 <_dtoa_r+0xa74>
 80064ae:	2339      	movs	r3, #57	; 0x39
 80064b0:	f88b 3000 	strb.w	r3, [fp]
 80064b4:	463b      	mov	r3, r7
 80064b6:	461f      	mov	r7, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064be:	2a39      	cmp	r2, #57	; 0x39
 80064c0:	d050      	beq.n	8006564 <_dtoa_r+0xb74>
 80064c2:	3201      	adds	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	e749      	b.n	800635c <_dtoa_r+0x96c>
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	dd03      	ble.n	80064d4 <_dtoa_r+0xae4>
 80064cc:	2b39      	cmp	r3, #57	; 0x39
 80064ce:	d0ee      	beq.n	80064ae <_dtoa_r+0xabe>
 80064d0:	3301      	adds	r3, #1
 80064d2:	e7c9      	b.n	8006468 <_dtoa_r+0xa78>
 80064d4:	9a02      	ldr	r2, [sp, #8]
 80064d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064dc:	428a      	cmp	r2, r1
 80064de:	d02a      	beq.n	8006536 <_dtoa_r+0xb46>
 80064e0:	4651      	mov	r1, sl
 80064e2:	2300      	movs	r3, #0
 80064e4:	220a      	movs	r2, #10
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 f9e6 	bl	80068b8 <__multadd>
 80064ec:	45b0      	cmp	r8, r6
 80064ee:	4682      	mov	sl, r0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	f04f 020a 	mov.w	r2, #10
 80064f8:	4641      	mov	r1, r8
 80064fa:	4628      	mov	r0, r5
 80064fc:	d107      	bne.n	800650e <_dtoa_r+0xb1e>
 80064fe:	f000 f9db 	bl	80068b8 <__multadd>
 8006502:	4680      	mov	r8, r0
 8006504:	4606      	mov	r6, r0
 8006506:	9b02      	ldr	r3, [sp, #8]
 8006508:	3301      	adds	r3, #1
 800650a:	9302      	str	r3, [sp, #8]
 800650c:	e777      	b.n	80063fe <_dtoa_r+0xa0e>
 800650e:	f000 f9d3 	bl	80068b8 <__multadd>
 8006512:	4631      	mov	r1, r6
 8006514:	4680      	mov	r8, r0
 8006516:	2300      	movs	r3, #0
 8006518:	220a      	movs	r2, #10
 800651a:	4628      	mov	r0, r5
 800651c:	f000 f9cc 	bl	80068b8 <__multadd>
 8006520:	4606      	mov	r6, r0
 8006522:	e7f0      	b.n	8006506 <_dtoa_r+0xb16>
 8006524:	f1bb 0f00 	cmp.w	fp, #0
 8006528:	9a08      	ldr	r2, [sp, #32]
 800652a:	bfcc      	ite	gt
 800652c:	465f      	movgt	r7, fp
 800652e:	2701      	movle	r7, #1
 8006530:	4417      	add	r7, r2
 8006532:	f04f 0800 	mov.w	r8, #0
 8006536:	4651      	mov	r1, sl
 8006538:	2201      	movs	r2, #1
 800653a:	4628      	mov	r0, r5
 800653c:	9302      	str	r3, [sp, #8]
 800653e:	f000 fb69 	bl	8006c14 <__lshift>
 8006542:	4621      	mov	r1, r4
 8006544:	4682      	mov	sl, r0
 8006546:	f000 fbd1 	bl	8006cec <__mcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	dcb2      	bgt.n	80064b4 <_dtoa_r+0xac4>
 800654e:	d102      	bne.n	8006556 <_dtoa_r+0xb66>
 8006550:	9b02      	ldr	r3, [sp, #8]
 8006552:	07db      	lsls	r3, r3, #31
 8006554:	d4ae      	bmi.n	80064b4 <_dtoa_r+0xac4>
 8006556:	463b      	mov	r3, r7
 8006558:	461f      	mov	r7, r3
 800655a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800655e:	2a30      	cmp	r2, #48	; 0x30
 8006560:	d0fa      	beq.n	8006558 <_dtoa_r+0xb68>
 8006562:	e6fb      	b.n	800635c <_dtoa_r+0x96c>
 8006564:	9a08      	ldr	r2, [sp, #32]
 8006566:	429a      	cmp	r2, r3
 8006568:	d1a5      	bne.n	80064b6 <_dtoa_r+0xac6>
 800656a:	2331      	movs	r3, #49	; 0x31
 800656c:	f109 0901 	add.w	r9, r9, #1
 8006570:	7013      	strb	r3, [r2, #0]
 8006572:	e6f3      	b.n	800635c <_dtoa_r+0x96c>
 8006574:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <_dtoa_r+0xbd4>)
 8006576:	f7ff baa6 	b.w	8005ac6 <_dtoa_r+0xd6>
 800657a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800657c:	2b00      	cmp	r3, #0
 800657e:	f47f aa7f 	bne.w	8005a80 <_dtoa_r+0x90>
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <_dtoa_r+0xbd8>)
 8006584:	f7ff ba9f 	b.w	8005ac6 <_dtoa_r+0xd6>
 8006588:	f1bb 0f00 	cmp.w	fp, #0
 800658c:	dc03      	bgt.n	8006596 <_dtoa_r+0xba6>
 800658e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006590:	2b02      	cmp	r3, #2
 8006592:	f73f aecc 	bgt.w	800632e <_dtoa_r+0x93e>
 8006596:	9f08      	ldr	r7, [sp, #32]
 8006598:	4621      	mov	r1, r4
 800659a:	4650      	mov	r0, sl
 800659c:	f7ff f99c 	bl	80058d8 <quorem>
 80065a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80065a4:	f807 3b01 	strb.w	r3, [r7], #1
 80065a8:	9a08      	ldr	r2, [sp, #32]
 80065aa:	1aba      	subs	r2, r7, r2
 80065ac:	4593      	cmp	fp, r2
 80065ae:	ddb9      	ble.n	8006524 <_dtoa_r+0xb34>
 80065b0:	4651      	mov	r1, sl
 80065b2:	2300      	movs	r3, #0
 80065b4:	220a      	movs	r2, #10
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 f97e 	bl	80068b8 <__multadd>
 80065bc:	4682      	mov	sl, r0
 80065be:	e7eb      	b.n	8006598 <_dtoa_r+0xba8>
 80065c0:	08007ba7 	.word	0x08007ba7
 80065c4:	08007b00 	.word	0x08007b00
 80065c8:	08007b24 	.word	0x08007b24

080065cc <std>:
 80065cc:	2300      	movs	r3, #0
 80065ce:	b510      	push	{r4, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	e9c0 3300 	strd	r3, r3, [r0]
 80065d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065da:	6083      	str	r3, [r0, #8]
 80065dc:	8181      	strh	r1, [r0, #12]
 80065de:	6643      	str	r3, [r0, #100]	; 0x64
 80065e0:	81c2      	strh	r2, [r0, #14]
 80065e2:	6183      	str	r3, [r0, #24]
 80065e4:	4619      	mov	r1, r3
 80065e6:	2208      	movs	r2, #8
 80065e8:	305c      	adds	r0, #92	; 0x5c
 80065ea:	f7fe fcf9 	bl	8004fe0 <memset>
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x38>)
 80065f0:	6263      	str	r3, [r4, #36]	; 0x24
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <std+0x3c>)
 80065f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <std+0x40>)
 80065f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <std+0x44>)
 80065fc:	6224      	str	r4, [r4, #32]
 80065fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	0800732d 	.word	0x0800732d
 8006608:	0800734f 	.word	0x0800734f
 800660c:	08007387 	.word	0x08007387
 8006610:	080073ab 	.word	0x080073ab

08006614 <_cleanup_r>:
 8006614:	4901      	ldr	r1, [pc, #4]	; (800661c <_cleanup_r+0x8>)
 8006616:	f000 b8af 	b.w	8006778 <_fwalk_reent>
 800661a:	bf00      	nop
 800661c:	080076c1 	.word	0x080076c1

08006620 <__sfmoreglue>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	1e4a      	subs	r2, r1, #1
 8006624:	2568      	movs	r5, #104	; 0x68
 8006626:	4355      	muls	r5, r2
 8006628:	460e      	mov	r6, r1
 800662a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800662e:	f000 fcbb 	bl	8006fa8 <_malloc_r>
 8006632:	4604      	mov	r4, r0
 8006634:	b140      	cbz	r0, 8006648 <__sfmoreglue+0x28>
 8006636:	2100      	movs	r1, #0
 8006638:	e9c0 1600 	strd	r1, r6, [r0]
 800663c:	300c      	adds	r0, #12
 800663e:	60a0      	str	r0, [r4, #8]
 8006640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006644:	f7fe fccc 	bl	8004fe0 <memset>
 8006648:	4620      	mov	r0, r4
 800664a:	bd70      	pop	{r4, r5, r6, pc}

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 b8b8 	b.w	80067c2 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	20000304 	.word	0x20000304

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 b8b3 	b.w	80067c4 <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	20000304 	.word	0x20000304

08006664 <__sinit_lock_acquire>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sinit_lock_acquire+0x8>)
 8006666:	f000 b8ac 	b.w	80067c2 <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	200002ff 	.word	0x200002ff

08006670 <__sinit_lock_release>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__sinit_lock_release+0x8>)
 8006672:	f000 b8a7 	b.w	80067c4 <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	200002ff 	.word	0x200002ff

0800667c <__sinit>:
 800667c:	b510      	push	{r4, lr}
 800667e:	4604      	mov	r4, r0
 8006680:	f7ff fff0 	bl	8006664 <__sinit_lock_acquire>
 8006684:	69a3      	ldr	r3, [r4, #24]
 8006686:	b11b      	cbz	r3, 8006690 <__sinit+0x14>
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bff0 	b.w	8006670 <__sinit_lock_release>
 8006690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006694:	6523      	str	r3, [r4, #80]	; 0x50
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <__sinit+0x68>)
 8006698:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <__sinit+0x6c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	62a2      	str	r2, [r4, #40]	; 0x28
 800669e:	42a3      	cmp	r3, r4
 80066a0:	bf04      	itt	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	61a3      	streq	r3, [r4, #24]
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 f820 	bl	80066ec <__sfp>
 80066ac:	6060      	str	r0, [r4, #4]
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f81c 	bl	80066ec <__sfp>
 80066b4:	60a0      	str	r0, [r4, #8]
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 f818 	bl	80066ec <__sfp>
 80066bc:	2200      	movs	r2, #0
 80066be:	60e0      	str	r0, [r4, #12]
 80066c0:	2104      	movs	r1, #4
 80066c2:	6860      	ldr	r0, [r4, #4]
 80066c4:	f7ff ff82 	bl	80065cc <std>
 80066c8:	68a0      	ldr	r0, [r4, #8]
 80066ca:	2201      	movs	r2, #1
 80066cc:	2109      	movs	r1, #9
 80066ce:	f7ff ff7d 	bl	80065cc <std>
 80066d2:	68e0      	ldr	r0, [r4, #12]
 80066d4:	2202      	movs	r2, #2
 80066d6:	2112      	movs	r1, #18
 80066d8:	f7ff ff78 	bl	80065cc <std>
 80066dc:	2301      	movs	r3, #1
 80066de:	61a3      	str	r3, [r4, #24]
 80066e0:	e7d2      	b.n	8006688 <__sinit+0xc>
 80066e2:	bf00      	nop
 80066e4:	08007aec 	.word	0x08007aec
 80066e8:	08006615 	.word	0x08006615

080066ec <__sfp>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	4607      	mov	r7, r0
 80066f0:	f7ff ffac 	bl	800664c <__sfp_lock_acquire>
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <__sfp+0x84>)
 80066f6:	681e      	ldr	r6, [r3, #0]
 80066f8:	69b3      	ldr	r3, [r6, #24]
 80066fa:	b913      	cbnz	r3, 8006702 <__sfp+0x16>
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7ff ffbd 	bl	800667c <__sinit>
 8006702:	3648      	adds	r6, #72	; 0x48
 8006704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	d503      	bpl.n	8006714 <__sfp+0x28>
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	b30b      	cbz	r3, 8006754 <__sfp+0x68>
 8006710:	6836      	ldr	r6, [r6, #0]
 8006712:	e7f7      	b.n	8006704 <__sfp+0x18>
 8006714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006718:	b9d5      	cbnz	r5, 8006750 <__sfp+0x64>
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <__sfp+0x88>)
 800671c:	60e3      	str	r3, [r4, #12]
 800671e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006722:	6665      	str	r5, [r4, #100]	; 0x64
 8006724:	f000 f84c 	bl	80067c0 <__retarget_lock_init_recursive>
 8006728:	f7ff ff96 	bl	8006658 <__sfp_lock_release>
 800672c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006734:	6025      	str	r5, [r4, #0]
 8006736:	61a5      	str	r5, [r4, #24]
 8006738:	2208      	movs	r2, #8
 800673a:	4629      	mov	r1, r5
 800673c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006740:	f7fe fc4e 	bl	8004fe0 <memset>
 8006744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800674c:	4620      	mov	r0, r4
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	3468      	adds	r4, #104	; 0x68
 8006752:	e7d9      	b.n	8006708 <__sfp+0x1c>
 8006754:	2104      	movs	r1, #4
 8006756:	4638      	mov	r0, r7
 8006758:	f7ff ff62 	bl	8006620 <__sfmoreglue>
 800675c:	4604      	mov	r4, r0
 800675e:	6030      	str	r0, [r6, #0]
 8006760:	2800      	cmp	r0, #0
 8006762:	d1d5      	bne.n	8006710 <__sfp+0x24>
 8006764:	f7ff ff78 	bl	8006658 <__sfp_lock_release>
 8006768:	230c      	movs	r3, #12
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	e7ee      	b.n	800674c <__sfp+0x60>
 800676e:	bf00      	nop
 8006770:	08007aec 	.word	0x08007aec
 8006774:	ffff0001 	.word	0xffff0001

08006778 <_fwalk_reent>:
 8006778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800677c:	4606      	mov	r6, r0
 800677e:	4688      	mov	r8, r1
 8006780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006784:	2700      	movs	r7, #0
 8006786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800678a:	f1b9 0901 	subs.w	r9, r9, #1
 800678e:	d505      	bpl.n	800679c <_fwalk_reent+0x24>
 8006790:	6824      	ldr	r4, [r4, #0]
 8006792:	2c00      	cmp	r4, #0
 8006794:	d1f7      	bne.n	8006786 <_fwalk_reent+0xe>
 8006796:	4638      	mov	r0, r7
 8006798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679c:	89ab      	ldrh	r3, [r5, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d907      	bls.n	80067b2 <_fwalk_reent+0x3a>
 80067a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067a6:	3301      	adds	r3, #1
 80067a8:	d003      	beq.n	80067b2 <_fwalk_reent+0x3a>
 80067aa:	4629      	mov	r1, r5
 80067ac:	4630      	mov	r0, r6
 80067ae:	47c0      	blx	r8
 80067b0:	4307      	orrs	r7, r0
 80067b2:	3568      	adds	r5, #104	; 0x68
 80067b4:	e7e9      	b.n	800678a <_fwalk_reent+0x12>
	...

080067b8 <_localeconv_r>:
 80067b8:	4800      	ldr	r0, [pc, #0]	; (80067bc <_localeconv_r+0x4>)
 80067ba:	4770      	bx	lr
 80067bc:	20000164 	.word	0x20000164

080067c0 <__retarget_lock_init_recursive>:
 80067c0:	4770      	bx	lr

080067c2 <__retarget_lock_acquire_recursive>:
 80067c2:	4770      	bx	lr

080067c4 <__retarget_lock_release_recursive>:
 80067c4:	4770      	bx	lr
	...

080067c8 <malloc>:
 80067c8:	4b02      	ldr	r3, [pc, #8]	; (80067d4 <malloc+0xc>)
 80067ca:	4601      	mov	r1, r0
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	f000 bbeb 	b.w	8006fa8 <_malloc_r>
 80067d2:	bf00      	nop
 80067d4:	20000010 	.word	0x20000010

080067d8 <memcpy>:
 80067d8:	440a      	add	r2, r1
 80067da:	4291      	cmp	r1, r2
 80067dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e0:	d100      	bne.n	80067e4 <memcpy+0xc>
 80067e2:	4770      	bx	lr
 80067e4:	b510      	push	{r4, lr}
 80067e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ee:	4291      	cmp	r1, r2
 80067f0:	d1f9      	bne.n	80067e6 <memcpy+0xe>
 80067f2:	bd10      	pop	{r4, pc}

080067f4 <_Balloc>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067f8:	4604      	mov	r4, r0
 80067fa:	460d      	mov	r5, r1
 80067fc:	b976      	cbnz	r6, 800681c <_Balloc+0x28>
 80067fe:	2010      	movs	r0, #16
 8006800:	f7ff ffe2 	bl	80067c8 <malloc>
 8006804:	4602      	mov	r2, r0
 8006806:	6260      	str	r0, [r4, #36]	; 0x24
 8006808:	b920      	cbnz	r0, 8006814 <_Balloc+0x20>
 800680a:	4b18      	ldr	r3, [pc, #96]	; (800686c <_Balloc+0x78>)
 800680c:	4818      	ldr	r0, [pc, #96]	; (8006870 <_Balloc+0x7c>)
 800680e:	2166      	movs	r1, #102	; 0x66
 8006810:	f000 fea2 	bl	8007558 <__assert_func>
 8006814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006818:	6006      	str	r6, [r0, #0]
 800681a:	60c6      	str	r6, [r0, #12]
 800681c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800681e:	68f3      	ldr	r3, [r6, #12]
 8006820:	b183      	cbz	r3, 8006844 <_Balloc+0x50>
 8006822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800682a:	b9b8      	cbnz	r0, 800685c <_Balloc+0x68>
 800682c:	2101      	movs	r1, #1
 800682e:	fa01 f605 	lsl.w	r6, r1, r5
 8006832:	1d72      	adds	r2, r6, #5
 8006834:	0092      	lsls	r2, r2, #2
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fb5a 	bl	8006ef0 <_calloc_r>
 800683c:	b160      	cbz	r0, 8006858 <_Balloc+0x64>
 800683e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006842:	e00e      	b.n	8006862 <_Balloc+0x6e>
 8006844:	2221      	movs	r2, #33	; 0x21
 8006846:	2104      	movs	r1, #4
 8006848:	4620      	mov	r0, r4
 800684a:	f000 fb51 	bl	8006ef0 <_calloc_r>
 800684e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006850:	60f0      	str	r0, [r6, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e4      	bne.n	8006822 <_Balloc+0x2e>
 8006858:	2000      	movs	r0, #0
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	6802      	ldr	r2, [r0, #0]
 800685e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006862:	2300      	movs	r3, #0
 8006864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006868:	e7f7      	b.n	800685a <_Balloc+0x66>
 800686a:	bf00      	nop
 800686c:	08007b31 	.word	0x08007b31
 8006870:	08007c18 	.word	0x08007c18

08006874 <_Bfree>:
 8006874:	b570      	push	{r4, r5, r6, lr}
 8006876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006878:	4605      	mov	r5, r0
 800687a:	460c      	mov	r4, r1
 800687c:	b976      	cbnz	r6, 800689c <_Bfree+0x28>
 800687e:	2010      	movs	r0, #16
 8006880:	f7ff ffa2 	bl	80067c8 <malloc>
 8006884:	4602      	mov	r2, r0
 8006886:	6268      	str	r0, [r5, #36]	; 0x24
 8006888:	b920      	cbnz	r0, 8006894 <_Bfree+0x20>
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <_Bfree+0x3c>)
 800688c:	4809      	ldr	r0, [pc, #36]	; (80068b4 <_Bfree+0x40>)
 800688e:	218a      	movs	r1, #138	; 0x8a
 8006890:	f000 fe62 	bl	8007558 <__assert_func>
 8006894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006898:	6006      	str	r6, [r0, #0]
 800689a:	60c6      	str	r6, [r0, #12]
 800689c:	b13c      	cbz	r4, 80068ae <_Bfree+0x3a>
 800689e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a0:	6862      	ldr	r2, [r4, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068a8:	6021      	str	r1, [r4, #0]
 80068aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	08007b31 	.word	0x08007b31
 80068b4:	08007c18 	.word	0x08007c18

080068b8 <__multadd>:
 80068b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068bc:	690e      	ldr	r6, [r1, #16]
 80068be:	4607      	mov	r7, r0
 80068c0:	4698      	mov	r8, r3
 80068c2:	460c      	mov	r4, r1
 80068c4:	f101 0014 	add.w	r0, r1, #20
 80068c8:	2300      	movs	r3, #0
 80068ca:	6805      	ldr	r5, [r0, #0]
 80068cc:	b2a9      	uxth	r1, r5
 80068ce:	fb02 8101 	mla	r1, r2, r1, r8
 80068d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80068d6:	0c2d      	lsrs	r5, r5, #16
 80068d8:	fb02 c505 	mla	r5, r2, r5, ip
 80068dc:	b289      	uxth	r1, r1
 80068de:	3301      	adds	r3, #1
 80068e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80068e4:	429e      	cmp	r6, r3
 80068e6:	f840 1b04 	str.w	r1, [r0], #4
 80068ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80068ee:	dcec      	bgt.n	80068ca <__multadd+0x12>
 80068f0:	f1b8 0f00 	cmp.w	r8, #0
 80068f4:	d022      	beq.n	800693c <__multadd+0x84>
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	42b3      	cmp	r3, r6
 80068fa:	dc19      	bgt.n	8006930 <__multadd+0x78>
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	4638      	mov	r0, r7
 8006900:	3101      	adds	r1, #1
 8006902:	f7ff ff77 	bl	80067f4 <_Balloc>
 8006906:	4605      	mov	r5, r0
 8006908:	b928      	cbnz	r0, 8006916 <__multadd+0x5e>
 800690a:	4602      	mov	r2, r0
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <__multadd+0x8c>)
 800690e:	480e      	ldr	r0, [pc, #56]	; (8006948 <__multadd+0x90>)
 8006910:	21b5      	movs	r1, #181	; 0xb5
 8006912:	f000 fe21 	bl	8007558 <__assert_func>
 8006916:	6922      	ldr	r2, [r4, #16]
 8006918:	3202      	adds	r2, #2
 800691a:	f104 010c 	add.w	r1, r4, #12
 800691e:	0092      	lsls	r2, r2, #2
 8006920:	300c      	adds	r0, #12
 8006922:	f7ff ff59 	bl	80067d8 <memcpy>
 8006926:	4621      	mov	r1, r4
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ffa3 	bl	8006874 <_Bfree>
 800692e:	462c      	mov	r4, r5
 8006930:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006934:	3601      	adds	r6, #1
 8006936:	f8c3 8014 	str.w	r8, [r3, #20]
 800693a:	6126      	str	r6, [r4, #16]
 800693c:	4620      	mov	r0, r4
 800693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006942:	bf00      	nop
 8006944:	08007ba7 	.word	0x08007ba7
 8006948:	08007c18 	.word	0x08007c18

0800694c <__hi0bits>:
 800694c:	0c02      	lsrs	r2, r0, #16
 800694e:	0412      	lsls	r2, r2, #16
 8006950:	4603      	mov	r3, r0
 8006952:	b9ca      	cbnz	r2, 8006988 <__hi0bits+0x3c>
 8006954:	0403      	lsls	r3, r0, #16
 8006956:	2010      	movs	r0, #16
 8006958:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800695c:	bf04      	itt	eq
 800695e:	021b      	lsleq	r3, r3, #8
 8006960:	3008      	addeq	r0, #8
 8006962:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006966:	bf04      	itt	eq
 8006968:	011b      	lsleq	r3, r3, #4
 800696a:	3004      	addeq	r0, #4
 800696c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006970:	bf04      	itt	eq
 8006972:	009b      	lsleq	r3, r3, #2
 8006974:	3002      	addeq	r0, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	db05      	blt.n	8006986 <__hi0bits+0x3a>
 800697a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800697e:	f100 0001 	add.w	r0, r0, #1
 8006982:	bf08      	it	eq
 8006984:	2020      	moveq	r0, #32
 8006986:	4770      	bx	lr
 8006988:	2000      	movs	r0, #0
 800698a:	e7e5      	b.n	8006958 <__hi0bits+0xc>

0800698c <__lo0bits>:
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	4602      	mov	r2, r0
 8006990:	f013 0007 	ands.w	r0, r3, #7
 8006994:	d00b      	beq.n	80069ae <__lo0bits+0x22>
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d422      	bmi.n	80069e0 <__lo0bits+0x54>
 800699a:	0798      	lsls	r0, r3, #30
 800699c:	bf49      	itett	mi
 800699e:	085b      	lsrmi	r3, r3, #1
 80069a0:	089b      	lsrpl	r3, r3, #2
 80069a2:	2001      	movmi	r0, #1
 80069a4:	6013      	strmi	r3, [r2, #0]
 80069a6:	bf5c      	itt	pl
 80069a8:	6013      	strpl	r3, [r2, #0]
 80069aa:	2002      	movpl	r0, #2
 80069ac:	4770      	bx	lr
 80069ae:	b299      	uxth	r1, r3
 80069b0:	b909      	cbnz	r1, 80069b6 <__lo0bits+0x2a>
 80069b2:	0c1b      	lsrs	r3, r3, #16
 80069b4:	2010      	movs	r0, #16
 80069b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069ba:	bf04      	itt	eq
 80069bc:	0a1b      	lsreq	r3, r3, #8
 80069be:	3008      	addeq	r0, #8
 80069c0:	0719      	lsls	r1, r3, #28
 80069c2:	bf04      	itt	eq
 80069c4:	091b      	lsreq	r3, r3, #4
 80069c6:	3004      	addeq	r0, #4
 80069c8:	0799      	lsls	r1, r3, #30
 80069ca:	bf04      	itt	eq
 80069cc:	089b      	lsreq	r3, r3, #2
 80069ce:	3002      	addeq	r0, #2
 80069d0:	07d9      	lsls	r1, r3, #31
 80069d2:	d403      	bmi.n	80069dc <__lo0bits+0x50>
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	f100 0001 	add.w	r0, r0, #1
 80069da:	d003      	beq.n	80069e4 <__lo0bits+0x58>
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4770      	bx	lr
 80069e0:	2000      	movs	r0, #0
 80069e2:	4770      	bx	lr
 80069e4:	2020      	movs	r0, #32
 80069e6:	4770      	bx	lr

080069e8 <__i2b>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	460c      	mov	r4, r1
 80069ec:	2101      	movs	r1, #1
 80069ee:	f7ff ff01 	bl	80067f4 <_Balloc>
 80069f2:	4602      	mov	r2, r0
 80069f4:	b928      	cbnz	r0, 8006a02 <__i2b+0x1a>
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <__i2b+0x24>)
 80069f8:	4805      	ldr	r0, [pc, #20]	; (8006a10 <__i2b+0x28>)
 80069fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80069fe:	f000 fdab 	bl	8007558 <__assert_func>
 8006a02:	2301      	movs	r3, #1
 8006a04:	6144      	str	r4, [r0, #20]
 8006a06:	6103      	str	r3, [r0, #16]
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08007ba7 	.word	0x08007ba7
 8006a10:	08007c18 	.word	0x08007c18

08006a14 <__multiply>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4614      	mov	r4, r2
 8006a1a:	690a      	ldr	r2, [r1, #16]
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	bfb8      	it	lt
 8006a22:	460b      	movlt	r3, r1
 8006a24:	460d      	mov	r5, r1
 8006a26:	bfbc      	itt	lt
 8006a28:	4625      	movlt	r5, r4
 8006a2a:	461c      	movlt	r4, r3
 8006a2c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006a30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a34:	68ab      	ldr	r3, [r5, #8]
 8006a36:	6869      	ldr	r1, [r5, #4]
 8006a38:	eb0a 0709 	add.w	r7, sl, r9
 8006a3c:	42bb      	cmp	r3, r7
 8006a3e:	b085      	sub	sp, #20
 8006a40:	bfb8      	it	lt
 8006a42:	3101      	addlt	r1, #1
 8006a44:	f7ff fed6 	bl	80067f4 <_Balloc>
 8006a48:	b930      	cbnz	r0, 8006a58 <__multiply+0x44>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <__multiply+0x144>)
 8006a4e:	4843      	ldr	r0, [pc, #268]	; (8006b5c <__multiply+0x148>)
 8006a50:	f240 115d 	movw	r1, #349	; 0x15d
 8006a54:	f000 fd80 	bl	8007558 <__assert_func>
 8006a58:	f100 0614 	add.w	r6, r0, #20
 8006a5c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006a60:	4633      	mov	r3, r6
 8006a62:	2200      	movs	r2, #0
 8006a64:	4543      	cmp	r3, r8
 8006a66:	d31e      	bcc.n	8006aa6 <__multiply+0x92>
 8006a68:	f105 0c14 	add.w	ip, r5, #20
 8006a6c:	f104 0314 	add.w	r3, r4, #20
 8006a70:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006a74:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006a78:	9202      	str	r2, [sp, #8]
 8006a7a:	ebac 0205 	sub.w	r2, ip, r5
 8006a7e:	3a15      	subs	r2, #21
 8006a80:	f022 0203 	bic.w	r2, r2, #3
 8006a84:	3204      	adds	r2, #4
 8006a86:	f105 0115 	add.w	r1, r5, #21
 8006a8a:	458c      	cmp	ip, r1
 8006a8c:	bf38      	it	cc
 8006a8e:	2204      	movcc	r2, #4
 8006a90:	9201      	str	r2, [sp, #4]
 8006a92:	9a02      	ldr	r2, [sp, #8]
 8006a94:	9303      	str	r3, [sp, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d808      	bhi.n	8006aac <__multiply+0x98>
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	dc55      	bgt.n	8006b4a <__multiply+0x136>
 8006a9e:	6107      	str	r7, [r0, #16]
 8006aa0:	b005      	add	sp, #20
 8006aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa6:	f843 2b04 	str.w	r2, [r3], #4
 8006aaa:	e7db      	b.n	8006a64 <__multiply+0x50>
 8006aac:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ab0:	f1ba 0f00 	cmp.w	sl, #0
 8006ab4:	d020      	beq.n	8006af8 <__multiply+0xe4>
 8006ab6:	f105 0e14 	add.w	lr, r5, #20
 8006aba:	46b1      	mov	r9, r6
 8006abc:	2200      	movs	r2, #0
 8006abe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ac2:	f8d9 b000 	ldr.w	fp, [r9]
 8006ac6:	b2a1      	uxth	r1, r4
 8006ac8:	fa1f fb8b 	uxth.w	fp, fp
 8006acc:	fb0a b101 	mla	r1, sl, r1, fp
 8006ad0:	4411      	add	r1, r2
 8006ad2:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad6:	0c24      	lsrs	r4, r4, #16
 8006ad8:	0c12      	lsrs	r2, r2, #16
 8006ada:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ade:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ae2:	b289      	uxth	r1, r1
 8006ae4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ae8:	45f4      	cmp	ip, lr
 8006aea:	f849 1b04 	str.w	r1, [r9], #4
 8006aee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006af2:	d8e4      	bhi.n	8006abe <__multiply+0xaa>
 8006af4:	9901      	ldr	r1, [sp, #4]
 8006af6:	5072      	str	r2, [r6, r1]
 8006af8:	9a03      	ldr	r2, [sp, #12]
 8006afa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006afe:	3304      	adds	r3, #4
 8006b00:	f1b9 0f00 	cmp.w	r9, #0
 8006b04:	d01f      	beq.n	8006b46 <__multiply+0x132>
 8006b06:	6834      	ldr	r4, [r6, #0]
 8006b08:	f105 0114 	add.w	r1, r5, #20
 8006b0c:	46b6      	mov	lr, r6
 8006b0e:	f04f 0a00 	mov.w	sl, #0
 8006b12:	880a      	ldrh	r2, [r1, #0]
 8006b14:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b18:	fb09 b202 	mla	r2, r9, r2, fp
 8006b1c:	4492      	add	sl, r2
 8006b1e:	b2a4      	uxth	r4, r4
 8006b20:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b24:	f84e 4b04 	str.w	r4, [lr], #4
 8006b28:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b2c:	f8be 2000 	ldrh.w	r2, [lr]
 8006b30:	0c24      	lsrs	r4, r4, #16
 8006b32:	fb09 2404 	mla	r4, r9, r4, r2
 8006b36:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006b3a:	458c      	cmp	ip, r1
 8006b3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b40:	d8e7      	bhi.n	8006b12 <__multiply+0xfe>
 8006b42:	9a01      	ldr	r2, [sp, #4]
 8006b44:	50b4      	str	r4, [r6, r2]
 8006b46:	3604      	adds	r6, #4
 8006b48:	e7a3      	b.n	8006a92 <__multiply+0x7e>
 8006b4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1a5      	bne.n	8006a9e <__multiply+0x8a>
 8006b52:	3f01      	subs	r7, #1
 8006b54:	e7a1      	b.n	8006a9a <__multiply+0x86>
 8006b56:	bf00      	nop
 8006b58:	08007ba7 	.word	0x08007ba7
 8006b5c:	08007c18 	.word	0x08007c18

08006b60 <__pow5mult>:
 8006b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b64:	4615      	mov	r5, r2
 8006b66:	f012 0203 	ands.w	r2, r2, #3
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	d007      	beq.n	8006b80 <__pow5mult+0x20>
 8006b70:	4c25      	ldr	r4, [pc, #148]	; (8006c08 <__pow5mult+0xa8>)
 8006b72:	3a01      	subs	r2, #1
 8006b74:	2300      	movs	r3, #0
 8006b76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b7a:	f7ff fe9d 	bl	80068b8 <__multadd>
 8006b7e:	4607      	mov	r7, r0
 8006b80:	10ad      	asrs	r5, r5, #2
 8006b82:	d03d      	beq.n	8006c00 <__pow5mult+0xa0>
 8006b84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b86:	b97c      	cbnz	r4, 8006ba8 <__pow5mult+0x48>
 8006b88:	2010      	movs	r0, #16
 8006b8a:	f7ff fe1d 	bl	80067c8 <malloc>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6270      	str	r0, [r6, #36]	; 0x24
 8006b92:	b928      	cbnz	r0, 8006ba0 <__pow5mult+0x40>
 8006b94:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <__pow5mult+0xac>)
 8006b96:	481e      	ldr	r0, [pc, #120]	; (8006c10 <__pow5mult+0xb0>)
 8006b98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b9c:	f000 fcdc 	bl	8007558 <__assert_func>
 8006ba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ba4:	6004      	str	r4, [r0, #0]
 8006ba6:	60c4      	str	r4, [r0, #12]
 8006ba8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006bac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bb0:	b94c      	cbnz	r4, 8006bc6 <__pow5mult+0x66>
 8006bb2:	f240 2171 	movw	r1, #625	; 0x271
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff ff16 	bl	80069e8 <__i2b>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	f04f 0900 	mov.w	r9, #0
 8006bca:	07eb      	lsls	r3, r5, #31
 8006bcc:	d50a      	bpl.n	8006be4 <__pow5mult+0x84>
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ff1e 	bl	8006a14 <__multiply>
 8006bd8:	4639      	mov	r1, r7
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fe49 	bl	8006874 <_Bfree>
 8006be2:	4647      	mov	r7, r8
 8006be4:	106d      	asrs	r5, r5, #1
 8006be6:	d00b      	beq.n	8006c00 <__pow5mult+0xa0>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	b938      	cbnz	r0, 8006bfc <__pow5mult+0x9c>
 8006bec:	4622      	mov	r2, r4
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff ff0f 	bl	8006a14 <__multiply>
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	f8c0 9000 	str.w	r9, [r0]
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	e7e4      	b.n	8006bca <__pow5mult+0x6a>
 8006c00:	4638      	mov	r0, r7
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c06:	bf00      	nop
 8006c08:	08007d68 	.word	0x08007d68
 8006c0c:	08007b31 	.word	0x08007b31
 8006c10:	08007c18 	.word	0x08007c18

08006c14 <__lshift>:
 8006c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	6849      	ldr	r1, [r1, #4]
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c22:	68a3      	ldr	r3, [r4, #8]
 8006c24:	4607      	mov	r7, r0
 8006c26:	4691      	mov	r9, r2
 8006c28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c2c:	f108 0601 	add.w	r6, r8, #1
 8006c30:	42b3      	cmp	r3, r6
 8006c32:	db0b      	blt.n	8006c4c <__lshift+0x38>
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff fddd 	bl	80067f4 <_Balloc>
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	b948      	cbnz	r0, 8006c52 <__lshift+0x3e>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <__lshift+0xd0>)
 8006c42:	4829      	ldr	r0, [pc, #164]	; (8006ce8 <__lshift+0xd4>)
 8006c44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c48:	f000 fc86 	bl	8007558 <__assert_func>
 8006c4c:	3101      	adds	r1, #1
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	e7ee      	b.n	8006c30 <__lshift+0x1c>
 8006c52:	2300      	movs	r3, #0
 8006c54:	f100 0114 	add.w	r1, r0, #20
 8006c58:	f100 0210 	add.w	r2, r0, #16
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	4553      	cmp	r3, sl
 8006c60:	db33      	blt.n	8006cca <__lshift+0xb6>
 8006c62:	6920      	ldr	r0, [r4, #16]
 8006c64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c68:	f104 0314 	add.w	r3, r4, #20
 8006c6c:	f019 091f 	ands.w	r9, r9, #31
 8006c70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c78:	d02b      	beq.n	8006cd2 <__lshift+0xbe>
 8006c7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006c7e:	468a      	mov	sl, r1
 8006c80:	2200      	movs	r2, #0
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	fa00 f009 	lsl.w	r0, r0, r9
 8006c88:	4302      	orrs	r2, r0
 8006c8a:	f84a 2b04 	str.w	r2, [sl], #4
 8006c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c92:	459c      	cmp	ip, r3
 8006c94:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c98:	d8f3      	bhi.n	8006c82 <__lshift+0x6e>
 8006c9a:	ebac 0304 	sub.w	r3, ip, r4
 8006c9e:	3b15      	subs	r3, #21
 8006ca0:	f023 0303 	bic.w	r3, r3, #3
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	f104 0015 	add.w	r0, r4, #21
 8006caa:	4584      	cmp	ip, r0
 8006cac:	bf38      	it	cc
 8006cae:	2304      	movcc	r3, #4
 8006cb0:	50ca      	str	r2, [r1, r3]
 8006cb2:	b10a      	cbz	r2, 8006cb8 <__lshift+0xa4>
 8006cb4:	f108 0602 	add.w	r6, r8, #2
 8006cb8:	3e01      	subs	r6, #1
 8006cba:	4638      	mov	r0, r7
 8006cbc:	612e      	str	r6, [r5, #16]
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	f7ff fdd8 	bl	8006874 <_Bfree>
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cca:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cce:	3301      	adds	r3, #1
 8006cd0:	e7c5      	b.n	8006c5e <__lshift+0x4a>
 8006cd2:	3904      	subs	r1, #4
 8006cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cdc:	459c      	cmp	ip, r3
 8006cde:	d8f9      	bhi.n	8006cd4 <__lshift+0xc0>
 8006ce0:	e7ea      	b.n	8006cb8 <__lshift+0xa4>
 8006ce2:	bf00      	nop
 8006ce4:	08007ba7 	.word	0x08007ba7
 8006ce8:	08007c18 	.word	0x08007c18

08006cec <__mcmp>:
 8006cec:	690a      	ldr	r2, [r1, #16]
 8006cee:	4603      	mov	r3, r0
 8006cf0:	6900      	ldr	r0, [r0, #16]
 8006cf2:	1a80      	subs	r0, r0, r2
 8006cf4:	b530      	push	{r4, r5, lr}
 8006cf6:	d10d      	bne.n	8006d14 <__mcmp+0x28>
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	3114      	adds	r1, #20
 8006cfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d0c:	4295      	cmp	r5, r2
 8006d0e:	d002      	beq.n	8006d16 <__mcmp+0x2a>
 8006d10:	d304      	bcc.n	8006d1c <__mcmp+0x30>
 8006d12:	2001      	movs	r0, #1
 8006d14:	bd30      	pop	{r4, r5, pc}
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	d3f4      	bcc.n	8006d04 <__mcmp+0x18>
 8006d1a:	e7fb      	b.n	8006d14 <__mcmp+0x28>
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e7f8      	b.n	8006d14 <__mcmp+0x28>
	...

08006d24 <__mdiff>:
 8006d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4617      	mov	r7, r2
 8006d32:	f7ff ffdb 	bl	8006cec <__mcmp>
 8006d36:	1e05      	subs	r5, r0, #0
 8006d38:	d111      	bne.n	8006d5e <__mdiff+0x3a>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7ff fd59 	bl	80067f4 <_Balloc>
 8006d42:	4602      	mov	r2, r0
 8006d44:	b928      	cbnz	r0, 8006d52 <__mdiff+0x2e>
 8006d46:	4b3a      	ldr	r3, [pc, #232]	; (8006e30 <__mdiff+0x10c>)
 8006d48:	f240 2132 	movw	r1, #562	; 0x232
 8006d4c:	4839      	ldr	r0, [pc, #228]	; (8006e34 <__mdiff+0x110>)
 8006d4e:	f000 fc03 	bl	8007558 <__assert_func>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d58:	4610      	mov	r0, r2
 8006d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	bfa4      	itt	ge
 8006d60:	463b      	movge	r3, r7
 8006d62:	4627      	movge	r7, r4
 8006d64:	4630      	mov	r0, r6
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	bfa6      	itte	ge
 8006d6a:	461c      	movge	r4, r3
 8006d6c:	2500      	movge	r5, #0
 8006d6e:	2501      	movlt	r5, #1
 8006d70:	f7ff fd40 	bl	80067f4 <_Balloc>
 8006d74:	4602      	mov	r2, r0
 8006d76:	b918      	cbnz	r0, 8006d80 <__mdiff+0x5c>
 8006d78:	4b2d      	ldr	r3, [pc, #180]	; (8006e30 <__mdiff+0x10c>)
 8006d7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d7e:	e7e5      	b.n	8006d4c <__mdiff+0x28>
 8006d80:	693e      	ldr	r6, [r7, #16]
 8006d82:	60c5      	str	r5, [r0, #12]
 8006d84:	6925      	ldr	r5, [r4, #16]
 8006d86:	f107 0114 	add.w	r1, r7, #20
 8006d8a:	f100 0e14 	add.w	lr, r0, #20
 8006d8e:	f104 0914 	add.w	r9, r4, #20
 8006d92:	f107 0010 	add.w	r0, r7, #16
 8006d96:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006d9a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006d9e:	46f2      	mov	sl, lr
 8006da0:	2700      	movs	r7, #0
 8006da2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006da6:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006daa:	fa1f f883 	uxth.w	r8, r3
 8006dae:	fa17 f78b 	uxtah	r7, r7, fp
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	eba7 0808 	sub.w	r8, r7, r8
 8006db8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006dbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006dc0:	fa1f f888 	uxth.w	r8, r8
 8006dc4:	141f      	asrs	r7, r3, #16
 8006dc6:	454d      	cmp	r5, r9
 8006dc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006dcc:	f84a 3b04 	str.w	r3, [sl], #4
 8006dd0:	d8e7      	bhi.n	8006da2 <__mdiff+0x7e>
 8006dd2:	1b2b      	subs	r3, r5, r4
 8006dd4:	3b15      	subs	r3, #21
 8006dd6:	f023 0303 	bic.w	r3, r3, #3
 8006dda:	3304      	adds	r3, #4
 8006ddc:	3415      	adds	r4, #21
 8006dde:	42a5      	cmp	r5, r4
 8006de0:	bf38      	it	cc
 8006de2:	2304      	movcc	r3, #4
 8006de4:	4419      	add	r1, r3
 8006de6:	4473      	add	r3, lr
 8006de8:	469e      	mov	lr, r3
 8006dea:	460d      	mov	r5, r1
 8006dec:	4565      	cmp	r5, ip
 8006dee:	d30e      	bcc.n	8006e0e <__mdiff+0xea>
 8006df0:	f10c 0003 	add.w	r0, ip, #3
 8006df4:	1a40      	subs	r0, r0, r1
 8006df6:	f020 0003 	bic.w	r0, r0, #3
 8006dfa:	3903      	subs	r1, #3
 8006dfc:	458c      	cmp	ip, r1
 8006dfe:	bf38      	it	cc
 8006e00:	2000      	movcc	r0, #0
 8006e02:	4418      	add	r0, r3
 8006e04:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8006e08:	b17b      	cbz	r3, 8006e2a <__mdiff+0x106>
 8006e0a:	6116      	str	r6, [r2, #16]
 8006e0c:	e7a4      	b.n	8006d58 <__mdiff+0x34>
 8006e0e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e12:	fa17 f488 	uxtah	r4, r7, r8
 8006e16:	1420      	asrs	r0, r4, #16
 8006e18:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006e1c:	b2a4      	uxth	r4, r4
 8006e1e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8006e22:	f84e 4b04 	str.w	r4, [lr], #4
 8006e26:	1407      	asrs	r7, r0, #16
 8006e28:	e7e0      	b.n	8006dec <__mdiff+0xc8>
 8006e2a:	3e01      	subs	r6, #1
 8006e2c:	e7ea      	b.n	8006e04 <__mdiff+0xe0>
 8006e2e:	bf00      	nop
 8006e30:	08007ba7 	.word	0x08007ba7
 8006e34:	08007c18 	.word	0x08007c18

08006e38 <__d2b>:
 8006e38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006e42:	4690      	mov	r8, r2
 8006e44:	461d      	mov	r5, r3
 8006e46:	f7ff fcd5 	bl	80067f4 <_Balloc>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	b930      	cbnz	r0, 8006e5c <__d2b+0x24>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <__d2b+0xb0>)
 8006e52:	4826      	ldr	r0, [pc, #152]	; (8006eec <__d2b+0xb4>)
 8006e54:	f240 310a 	movw	r1, #778	; 0x30a
 8006e58:	f000 fb7e 	bl	8007558 <__assert_func>
 8006e5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e64:	bb2d      	cbnz	r5, 8006eb2 <__d2b+0x7a>
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	f1b8 0300 	subs.w	r3, r8, #0
 8006e6c:	d026      	beq.n	8006ebc <__d2b+0x84>
 8006e6e:	4668      	mov	r0, sp
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	f7ff fd8b 	bl	800698c <__lo0bits>
 8006e76:	9900      	ldr	r1, [sp, #0]
 8006e78:	b1f0      	cbz	r0, 8006eb8 <__d2b+0x80>
 8006e7a:	9a01      	ldr	r2, [sp, #4]
 8006e7c:	f1c0 0320 	rsb	r3, r0, #32
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	430b      	orrs	r3, r1
 8006e86:	40c2      	lsrs	r2, r0
 8006e88:	6163      	str	r3, [r4, #20]
 8006e8a:	9201      	str	r2, [sp, #4]
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	61a3      	str	r3, [r4, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf14      	ite	ne
 8006e94:	2102      	movne	r1, #2
 8006e96:	2101      	moveq	r1, #1
 8006e98:	6121      	str	r1, [r4, #16]
 8006e9a:	b1c5      	cbz	r5, 8006ece <__d2b+0x96>
 8006e9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ea0:	4405      	add	r5, r0
 8006ea2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ea6:	603d      	str	r5, [r7, #0]
 8006ea8:	6030      	str	r0, [r6, #0]
 8006eaa:	4620      	mov	r0, r4
 8006eac:	b002      	add	sp, #8
 8006eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eb6:	e7d6      	b.n	8006e66 <__d2b+0x2e>
 8006eb8:	6161      	str	r1, [r4, #20]
 8006eba:	e7e7      	b.n	8006e8c <__d2b+0x54>
 8006ebc:	a801      	add	r0, sp, #4
 8006ebe:	f7ff fd65 	bl	800698c <__lo0bits>
 8006ec2:	9b01      	ldr	r3, [sp, #4]
 8006ec4:	6163      	str	r3, [r4, #20]
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	6121      	str	r1, [r4, #16]
 8006eca:	3020      	adds	r0, #32
 8006ecc:	e7e5      	b.n	8006e9a <__d2b+0x62>
 8006ece:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006ed2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ed6:	6038      	str	r0, [r7, #0]
 8006ed8:	6918      	ldr	r0, [r3, #16]
 8006eda:	f7ff fd37 	bl	800694c <__hi0bits>
 8006ede:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006ee2:	6031      	str	r1, [r6, #0]
 8006ee4:	e7e1      	b.n	8006eaa <__d2b+0x72>
 8006ee6:	bf00      	nop
 8006ee8:	08007ba7 	.word	0x08007ba7
 8006eec:	08007c18 	.word	0x08007c18

08006ef0 <_calloc_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	fb02 f501 	mul.w	r5, r2, r1
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f000 f856 	bl	8006fa8 <_malloc_r>
 8006efc:	4604      	mov	r4, r0
 8006efe:	b118      	cbz	r0, 8006f08 <_calloc_r+0x18>
 8006f00:	462a      	mov	r2, r5
 8006f02:	2100      	movs	r1, #0
 8006f04:	f7fe f86c 	bl	8004fe0 <memset>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}

08006f0c <_free_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4605      	mov	r5, r0
 8006f10:	2900      	cmp	r1, #0
 8006f12:	d045      	beq.n	8006fa0 <_free_r+0x94>
 8006f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f18:	1f0c      	subs	r4, r1, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfb8      	it	lt
 8006f1e:	18e4      	addlt	r4, r4, r3
 8006f20:	f000 fca4 	bl	800786c <__malloc_lock>
 8006f24:	4a1f      	ldr	r2, [pc, #124]	; (8006fa4 <_free_r+0x98>)
 8006f26:	6813      	ldr	r3, [r2, #0]
 8006f28:	4610      	mov	r0, r2
 8006f2a:	b933      	cbnz	r3, 8006f3a <_free_r+0x2e>
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6014      	str	r4, [r2, #0]
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f36:	f000 bc9f 	b.w	8007878 <__malloc_unlock>
 8006f3a:	42a3      	cmp	r3, r4
 8006f3c:	d90b      	bls.n	8006f56 <_free_r+0x4a>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	1862      	adds	r2, r4, r1
 8006f42:	4293      	cmp	r3, r2
 8006f44:	bf04      	itt	eq
 8006f46:	681a      	ldreq	r2, [r3, #0]
 8006f48:	685b      	ldreq	r3, [r3, #4]
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	bf04      	itt	eq
 8006f4e:	1852      	addeq	r2, r2, r1
 8006f50:	6022      	streq	r2, [r4, #0]
 8006f52:	6004      	str	r4, [r0, #0]
 8006f54:	e7ec      	b.n	8006f30 <_free_r+0x24>
 8006f56:	461a      	mov	r2, r3
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	b10b      	cbz	r3, 8006f60 <_free_r+0x54>
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d9fa      	bls.n	8006f56 <_free_r+0x4a>
 8006f60:	6811      	ldr	r1, [r2, #0]
 8006f62:	1850      	adds	r0, r2, r1
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d10b      	bne.n	8006f80 <_free_r+0x74>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	4401      	add	r1, r0
 8006f6c:	1850      	adds	r0, r2, r1
 8006f6e:	4283      	cmp	r3, r0
 8006f70:	6011      	str	r1, [r2, #0]
 8006f72:	d1dd      	bne.n	8006f30 <_free_r+0x24>
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	6053      	str	r3, [r2, #4]
 8006f7a:	4401      	add	r1, r0
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	e7d7      	b.n	8006f30 <_free_r+0x24>
 8006f80:	d902      	bls.n	8006f88 <_free_r+0x7c>
 8006f82:	230c      	movs	r3, #12
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	e7d3      	b.n	8006f30 <_free_r+0x24>
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	1821      	adds	r1, r4, r0
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	bf04      	itt	eq
 8006f90:	6819      	ldreq	r1, [r3, #0]
 8006f92:	685b      	ldreq	r3, [r3, #4]
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	bf04      	itt	eq
 8006f98:	1809      	addeq	r1, r1, r0
 8006f9a:	6021      	streq	r1, [r4, #0]
 8006f9c:	6054      	str	r4, [r2, #4]
 8006f9e:	e7c7      	b.n	8006f30 <_free_r+0x24>
 8006fa0:	bd38      	pop	{r3, r4, r5, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000204 	.word	0x20000204

08006fa8 <_malloc_r>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	1ccd      	adds	r5, r1, #3
 8006fac:	f025 0503 	bic.w	r5, r5, #3
 8006fb0:	3508      	adds	r5, #8
 8006fb2:	2d0c      	cmp	r5, #12
 8006fb4:	bf38      	it	cc
 8006fb6:	250c      	movcc	r5, #12
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	4606      	mov	r6, r0
 8006fbc:	db01      	blt.n	8006fc2 <_malloc_r+0x1a>
 8006fbe:	42a9      	cmp	r1, r5
 8006fc0:	d903      	bls.n	8006fca <_malloc_r+0x22>
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	6033      	str	r3, [r6, #0]
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fca:	f000 fc4f 	bl	800786c <__malloc_lock>
 8006fce:	4921      	ldr	r1, [pc, #132]	; (8007054 <_malloc_r+0xac>)
 8006fd0:	680a      	ldr	r2, [r1, #0]
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	b99c      	cbnz	r4, 8006ffe <_malloc_r+0x56>
 8006fd6:	4f20      	ldr	r7, [pc, #128]	; (8007058 <_malloc_r+0xb0>)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	b923      	cbnz	r3, 8006fe6 <_malloc_r+0x3e>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f000 f994 	bl	800730c <_sbrk_r>
 8006fe4:	6038      	str	r0, [r7, #0]
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f000 f98f 	bl	800730c <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d123      	bne.n	800703a <_malloc_r+0x92>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f000 fc3e 	bl	8007878 <__malloc_unlock>
 8006ffc:	e7e3      	b.n	8006fc6 <_malloc_r+0x1e>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	1b5b      	subs	r3, r3, r5
 8007002:	d417      	bmi.n	8007034 <_malloc_r+0x8c>
 8007004:	2b0b      	cmp	r3, #11
 8007006:	d903      	bls.n	8007010 <_malloc_r+0x68>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	441c      	add	r4, r3
 800700c:	6025      	str	r5, [r4, #0]
 800700e:	e004      	b.n	800701a <_malloc_r+0x72>
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	42a2      	cmp	r2, r4
 8007014:	bf0c      	ite	eq
 8007016:	600b      	streq	r3, [r1, #0]
 8007018:	6053      	strne	r3, [r2, #4]
 800701a:	4630      	mov	r0, r6
 800701c:	f000 fc2c 	bl	8007878 <__malloc_unlock>
 8007020:	f104 000b 	add.w	r0, r4, #11
 8007024:	1d23      	adds	r3, r4, #4
 8007026:	f020 0007 	bic.w	r0, r0, #7
 800702a:	1ac2      	subs	r2, r0, r3
 800702c:	d0cc      	beq.n	8006fc8 <_malloc_r+0x20>
 800702e:	1a1b      	subs	r3, r3, r0
 8007030:	50a3      	str	r3, [r4, r2]
 8007032:	e7c9      	b.n	8006fc8 <_malloc_r+0x20>
 8007034:	4622      	mov	r2, r4
 8007036:	6864      	ldr	r4, [r4, #4]
 8007038:	e7cc      	b.n	8006fd4 <_malloc_r+0x2c>
 800703a:	1cc4      	adds	r4, r0, #3
 800703c:	f024 0403 	bic.w	r4, r4, #3
 8007040:	42a0      	cmp	r0, r4
 8007042:	d0e3      	beq.n	800700c <_malloc_r+0x64>
 8007044:	1a21      	subs	r1, r4, r0
 8007046:	4630      	mov	r0, r6
 8007048:	f000 f960 	bl	800730c <_sbrk_r>
 800704c:	3001      	adds	r0, #1
 800704e:	d1dd      	bne.n	800700c <_malloc_r+0x64>
 8007050:	e7cf      	b.n	8006ff2 <_malloc_r+0x4a>
 8007052:	bf00      	nop
 8007054:	20000204 	.word	0x20000204
 8007058:	20000208 	.word	0x20000208

0800705c <__sfputc_r>:
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	3b01      	subs	r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	b410      	push	{r4}
 8007064:	6093      	str	r3, [r2, #8]
 8007066:	da07      	bge.n	8007078 <__sfputc_r+0x1c>
 8007068:	6994      	ldr	r4, [r2, #24]
 800706a:	42a3      	cmp	r3, r4
 800706c:	db01      	blt.n	8007072 <__sfputc_r+0x16>
 800706e:	290a      	cmp	r1, #10
 8007070:	d102      	bne.n	8007078 <__sfputc_r+0x1c>
 8007072:	bc10      	pop	{r4}
 8007074:	f000 b99e 	b.w	80073b4 <__swbuf_r>
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	1c58      	adds	r0, r3, #1
 800707c:	6010      	str	r0, [r2, #0]
 800707e:	7019      	strb	r1, [r3, #0]
 8007080:	4608      	mov	r0, r1
 8007082:	bc10      	pop	{r4}
 8007084:	4770      	bx	lr

08007086 <__sfputs_r>:
 8007086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007088:	4606      	mov	r6, r0
 800708a:	460f      	mov	r7, r1
 800708c:	4614      	mov	r4, r2
 800708e:	18d5      	adds	r5, r2, r3
 8007090:	42ac      	cmp	r4, r5
 8007092:	d101      	bne.n	8007098 <__sfputs_r+0x12>
 8007094:	2000      	movs	r0, #0
 8007096:	e007      	b.n	80070a8 <__sfputs_r+0x22>
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	463a      	mov	r2, r7
 800709e:	4630      	mov	r0, r6
 80070a0:	f7ff ffdc 	bl	800705c <__sfputc_r>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d1f3      	bne.n	8007090 <__sfputs_r+0xa>
 80070a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070ac <_vfiprintf_r>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	460d      	mov	r5, r1
 80070b2:	b09d      	sub	sp, #116	; 0x74
 80070b4:	4614      	mov	r4, r2
 80070b6:	4698      	mov	r8, r3
 80070b8:	4606      	mov	r6, r0
 80070ba:	b118      	cbz	r0, 80070c4 <_vfiprintf_r+0x18>
 80070bc:	6983      	ldr	r3, [r0, #24]
 80070be:	b90b      	cbnz	r3, 80070c4 <_vfiprintf_r+0x18>
 80070c0:	f7ff fadc 	bl	800667c <__sinit>
 80070c4:	4b89      	ldr	r3, [pc, #548]	; (80072ec <_vfiprintf_r+0x240>)
 80070c6:	429d      	cmp	r5, r3
 80070c8:	d11b      	bne.n	8007102 <_vfiprintf_r+0x56>
 80070ca:	6875      	ldr	r5, [r6, #4]
 80070cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ce:	07d9      	lsls	r1, r3, #31
 80070d0:	d405      	bmi.n	80070de <_vfiprintf_r+0x32>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	059a      	lsls	r2, r3, #22
 80070d6:	d402      	bmi.n	80070de <_vfiprintf_r+0x32>
 80070d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070da:	f7ff fb72 	bl	80067c2 <__retarget_lock_acquire_recursive>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	071b      	lsls	r3, r3, #28
 80070e2:	d501      	bpl.n	80070e8 <_vfiprintf_r+0x3c>
 80070e4:	692b      	ldr	r3, [r5, #16]
 80070e6:	b9eb      	cbnz	r3, 8007124 <_vfiprintf_r+0x78>
 80070e8:	4629      	mov	r1, r5
 80070ea:	4630      	mov	r0, r6
 80070ec:	f000 f9c6 	bl	800747c <__swsetup_r>
 80070f0:	b1c0      	cbz	r0, 8007124 <_vfiprintf_r+0x78>
 80070f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f4:	07dc      	lsls	r4, r3, #31
 80070f6:	d50e      	bpl.n	8007116 <_vfiprintf_r+0x6a>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	b01d      	add	sp, #116	; 0x74
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	4b7b      	ldr	r3, [pc, #492]	; (80072f0 <_vfiprintf_r+0x244>)
 8007104:	429d      	cmp	r5, r3
 8007106:	d101      	bne.n	800710c <_vfiprintf_r+0x60>
 8007108:	68b5      	ldr	r5, [r6, #8]
 800710a:	e7df      	b.n	80070cc <_vfiprintf_r+0x20>
 800710c:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <_vfiprintf_r+0x248>)
 800710e:	429d      	cmp	r5, r3
 8007110:	bf08      	it	eq
 8007112:	68f5      	ldreq	r5, [r6, #12]
 8007114:	e7da      	b.n	80070cc <_vfiprintf_r+0x20>
 8007116:	89ab      	ldrh	r3, [r5, #12]
 8007118:	0598      	lsls	r0, r3, #22
 800711a:	d4ed      	bmi.n	80070f8 <_vfiprintf_r+0x4c>
 800711c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800711e:	f7ff fb51 	bl	80067c4 <__retarget_lock_release_recursive>
 8007122:	e7e9      	b.n	80070f8 <_vfiprintf_r+0x4c>
 8007124:	2300      	movs	r3, #0
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	2320      	movs	r3, #32
 800712a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800712e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007132:	2330      	movs	r3, #48	; 0x30
 8007134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072f8 <_vfiprintf_r+0x24c>
 8007138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800713c:	f04f 0901 	mov.w	r9, #1
 8007140:	4623      	mov	r3, r4
 8007142:	469a      	mov	sl, r3
 8007144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007148:	b10a      	cbz	r2, 800714e <_vfiprintf_r+0xa2>
 800714a:	2a25      	cmp	r2, #37	; 0x25
 800714c:	d1f9      	bne.n	8007142 <_vfiprintf_r+0x96>
 800714e:	ebba 0b04 	subs.w	fp, sl, r4
 8007152:	d00b      	beq.n	800716c <_vfiprintf_r+0xc0>
 8007154:	465b      	mov	r3, fp
 8007156:	4622      	mov	r2, r4
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff93 	bl	8007086 <__sfputs_r>
 8007160:	3001      	adds	r0, #1
 8007162:	f000 80aa 	beq.w	80072ba <_vfiprintf_r+0x20e>
 8007166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007168:	445a      	add	r2, fp
 800716a:	9209      	str	r2, [sp, #36]	; 0x24
 800716c:	f89a 3000 	ldrb.w	r3, [sl]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80a2 	beq.w	80072ba <_vfiprintf_r+0x20e>
 8007176:	2300      	movs	r3, #0
 8007178:	f04f 32ff 	mov.w	r2, #4294967295
 800717c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007180:	f10a 0a01 	add.w	sl, sl, #1
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718c:	931a      	str	r3, [sp, #104]	; 0x68
 800718e:	4654      	mov	r4, sl
 8007190:	2205      	movs	r2, #5
 8007192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007196:	4858      	ldr	r0, [pc, #352]	; (80072f8 <_vfiprintf_r+0x24c>)
 8007198:	f7f8 fffa 	bl	8000190 <memchr>
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	b9d8      	cbnz	r0, 80071d8 <_vfiprintf_r+0x12c>
 80071a0:	06d1      	lsls	r1, r2, #27
 80071a2:	bf44      	itt	mi
 80071a4:	2320      	movmi	r3, #32
 80071a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071aa:	0713      	lsls	r3, r2, #28
 80071ac:	bf44      	itt	mi
 80071ae:	232b      	movmi	r3, #43	; 0x2b
 80071b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b4:	f89a 3000 	ldrb.w	r3, [sl]
 80071b8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ba:	d015      	beq.n	80071e8 <_vfiprintf_r+0x13c>
 80071bc:	9a07      	ldr	r2, [sp, #28]
 80071be:	4654      	mov	r4, sl
 80071c0:	2000      	movs	r0, #0
 80071c2:	f04f 0c0a 	mov.w	ip, #10
 80071c6:	4621      	mov	r1, r4
 80071c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071cc:	3b30      	subs	r3, #48	; 0x30
 80071ce:	2b09      	cmp	r3, #9
 80071d0:	d94e      	bls.n	8007270 <_vfiprintf_r+0x1c4>
 80071d2:	b1b0      	cbz	r0, 8007202 <_vfiprintf_r+0x156>
 80071d4:	9207      	str	r2, [sp, #28]
 80071d6:	e014      	b.n	8007202 <_vfiprintf_r+0x156>
 80071d8:	eba0 0308 	sub.w	r3, r0, r8
 80071dc:	fa09 f303 	lsl.w	r3, r9, r3
 80071e0:	4313      	orrs	r3, r2
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	46a2      	mov	sl, r4
 80071e6:	e7d2      	b.n	800718e <_vfiprintf_r+0xe2>
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	1d19      	adds	r1, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	9103      	str	r1, [sp, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bfbb      	ittet	lt
 80071f4:	425b      	neglt	r3, r3
 80071f6:	f042 0202 	orrlt.w	r2, r2, #2
 80071fa:	9307      	strge	r3, [sp, #28]
 80071fc:	9307      	strlt	r3, [sp, #28]
 80071fe:	bfb8      	it	lt
 8007200:	9204      	strlt	r2, [sp, #16]
 8007202:	7823      	ldrb	r3, [r4, #0]
 8007204:	2b2e      	cmp	r3, #46	; 0x2e
 8007206:	d10c      	bne.n	8007222 <_vfiprintf_r+0x176>
 8007208:	7863      	ldrb	r3, [r4, #1]
 800720a:	2b2a      	cmp	r3, #42	; 0x2a
 800720c:	d135      	bne.n	800727a <_vfiprintf_r+0x1ce>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	9203      	str	r2, [sp, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfb8      	it	lt
 800721a:	f04f 33ff 	movlt.w	r3, #4294967295
 800721e:	3402      	adds	r4, #2
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007308 <_vfiprintf_r+0x25c>
 8007226:	7821      	ldrb	r1, [r4, #0]
 8007228:	2203      	movs	r2, #3
 800722a:	4650      	mov	r0, sl
 800722c:	f7f8 ffb0 	bl	8000190 <memchr>
 8007230:	b140      	cbz	r0, 8007244 <_vfiprintf_r+0x198>
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	eba0 000a 	sub.w	r0, r0, sl
 8007238:	fa03 f000 	lsl.w	r0, r3, r0
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	4303      	orrs	r3, r0
 8007240:	3401      	adds	r4, #1
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	482c      	ldr	r0, [pc, #176]	; (80072fc <_vfiprintf_r+0x250>)
 800724a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724e:	2206      	movs	r2, #6
 8007250:	f7f8 ff9e 	bl	8000190 <memchr>
 8007254:	2800      	cmp	r0, #0
 8007256:	d03f      	beq.n	80072d8 <_vfiprintf_r+0x22c>
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <_vfiprintf_r+0x254>)
 800725a:	bb1b      	cbnz	r3, 80072a4 <_vfiprintf_r+0x1f8>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	3307      	adds	r3, #7
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	3308      	adds	r3, #8
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	443b      	add	r3, r7
 800726c:	9309      	str	r3, [sp, #36]	; 0x24
 800726e:	e767      	b.n	8007140 <_vfiprintf_r+0x94>
 8007270:	fb0c 3202 	mla	r2, ip, r2, r3
 8007274:	460c      	mov	r4, r1
 8007276:	2001      	movs	r0, #1
 8007278:	e7a5      	b.n	80071c6 <_vfiprintf_r+0x11a>
 800727a:	2300      	movs	r3, #0
 800727c:	3401      	adds	r4, #1
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	4619      	mov	r1, r3
 8007282:	f04f 0c0a 	mov.w	ip, #10
 8007286:	4620      	mov	r0, r4
 8007288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728c:	3a30      	subs	r2, #48	; 0x30
 800728e:	2a09      	cmp	r2, #9
 8007290:	d903      	bls.n	800729a <_vfiprintf_r+0x1ee>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c5      	beq.n	8007222 <_vfiprintf_r+0x176>
 8007296:	9105      	str	r1, [sp, #20]
 8007298:	e7c3      	b.n	8007222 <_vfiprintf_r+0x176>
 800729a:	fb0c 2101 	mla	r1, ip, r1, r2
 800729e:	4604      	mov	r4, r0
 80072a0:	2301      	movs	r3, #1
 80072a2:	e7f0      	b.n	8007286 <_vfiprintf_r+0x1da>
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	462a      	mov	r2, r5
 80072aa:	4b16      	ldr	r3, [pc, #88]	; (8007304 <_vfiprintf_r+0x258>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7fd ff3c 	bl	800512c <_printf_float>
 80072b4:	4607      	mov	r7, r0
 80072b6:	1c78      	adds	r0, r7, #1
 80072b8:	d1d6      	bne.n	8007268 <_vfiprintf_r+0x1bc>
 80072ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072bc:	07d9      	lsls	r1, r3, #31
 80072be:	d405      	bmi.n	80072cc <_vfiprintf_r+0x220>
 80072c0:	89ab      	ldrh	r3, [r5, #12]
 80072c2:	059a      	lsls	r2, r3, #22
 80072c4:	d402      	bmi.n	80072cc <_vfiprintf_r+0x220>
 80072c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c8:	f7ff fa7c 	bl	80067c4 <__retarget_lock_release_recursive>
 80072cc:	89ab      	ldrh	r3, [r5, #12]
 80072ce:	065b      	lsls	r3, r3, #25
 80072d0:	f53f af12 	bmi.w	80070f8 <_vfiprintf_r+0x4c>
 80072d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072d6:	e711      	b.n	80070fc <_vfiprintf_r+0x50>
 80072d8:	ab03      	add	r3, sp, #12
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	462a      	mov	r2, r5
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <_vfiprintf_r+0x258>)
 80072e0:	a904      	add	r1, sp, #16
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7fe f9ba 	bl	800565c <_printf_i>
 80072e8:	e7e4      	b.n	80072b4 <_vfiprintf_r+0x208>
 80072ea:	bf00      	nop
 80072ec:	08007bd8 	.word	0x08007bd8
 80072f0:	08007bf8 	.word	0x08007bf8
 80072f4:	08007bb8 	.word	0x08007bb8
 80072f8:	08007d74 	.word	0x08007d74
 80072fc:	08007d7e 	.word	0x08007d7e
 8007300:	0800512d 	.word	0x0800512d
 8007304:	08007087 	.word	0x08007087
 8007308:	08007d7a 	.word	0x08007d7a

0800730c <_sbrk_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d06      	ldr	r5, [pc, #24]	; (8007328 <_sbrk_r+0x1c>)
 8007310:	2300      	movs	r3, #0
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	f7fa fc46 	bl	8001ba8 <_sbrk>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_sbrk_r+0x1a>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_sbrk_r+0x1a>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	20000308 	.word	0x20000308

0800732c <__sread>:
 800732c:	b510      	push	{r4, lr}
 800732e:	460c      	mov	r4, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	f000 faa6 	bl	8007884 <_read_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	bfab      	itete	ge
 800733c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800733e:	89a3      	ldrhlt	r3, [r4, #12]
 8007340:	181b      	addge	r3, r3, r0
 8007342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007346:	bfac      	ite	ge
 8007348:	6563      	strge	r3, [r4, #84]	; 0x54
 800734a:	81a3      	strhlt	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__swrite>:
 800734e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007352:	461f      	mov	r7, r3
 8007354:	898b      	ldrh	r3, [r1, #12]
 8007356:	05db      	lsls	r3, r3, #23
 8007358:	4605      	mov	r5, r0
 800735a:	460c      	mov	r4, r1
 800735c:	4616      	mov	r6, r2
 800735e:	d505      	bpl.n	800736c <__swrite+0x1e>
 8007360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007364:	2302      	movs	r3, #2
 8007366:	2200      	movs	r2, #0
 8007368:	f000 f9f8 	bl	800775c <_lseek_r>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	4632      	mov	r2, r6
 800737a:	463b      	mov	r3, r7
 800737c:	4628      	mov	r0, r5
 800737e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	f000 b869 	b.w	8007458 <_write_r>

08007386 <__sseek>:
 8007386:	b510      	push	{r4, lr}
 8007388:	460c      	mov	r4, r1
 800738a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738e:	f000 f9e5 	bl	800775c <_lseek_r>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	bf15      	itete	ne
 8007398:	6560      	strne	r0, [r4, #84]	; 0x54
 800739a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800739e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073a2:	81a3      	strheq	r3, [r4, #12]
 80073a4:	bf18      	it	ne
 80073a6:	81a3      	strhne	r3, [r4, #12]
 80073a8:	bd10      	pop	{r4, pc}

080073aa <__sclose>:
 80073aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ae:	f000 b8f1 	b.w	8007594 <_close_r>
	...

080073b4 <__swbuf_r>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	460e      	mov	r6, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	4605      	mov	r5, r0
 80073bc:	b118      	cbz	r0, 80073c6 <__swbuf_r+0x12>
 80073be:	6983      	ldr	r3, [r0, #24]
 80073c0:	b90b      	cbnz	r3, 80073c6 <__swbuf_r+0x12>
 80073c2:	f7ff f95b 	bl	800667c <__sinit>
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <__swbuf_r+0x98>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d12b      	bne.n	8007424 <__swbuf_r+0x70>
 80073cc:	686c      	ldr	r4, [r5, #4]
 80073ce:	69a3      	ldr	r3, [r4, #24]
 80073d0:	60a3      	str	r3, [r4, #8]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	071a      	lsls	r2, r3, #28
 80073d6:	d52f      	bpl.n	8007438 <__swbuf_r+0x84>
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	b36b      	cbz	r3, 8007438 <__swbuf_r+0x84>
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	1ac0      	subs	r0, r0, r3
 80073e2:	6963      	ldr	r3, [r4, #20]
 80073e4:	b2f6      	uxtb	r6, r6
 80073e6:	4283      	cmp	r3, r0
 80073e8:	4637      	mov	r7, r6
 80073ea:	dc04      	bgt.n	80073f6 <__swbuf_r+0x42>
 80073ec:	4621      	mov	r1, r4
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 f966 	bl	80076c0 <_fflush_r>
 80073f4:	bb30      	cbnz	r0, 8007444 <__swbuf_r+0x90>
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	701e      	strb	r6, [r3, #0]
 8007404:	6963      	ldr	r3, [r4, #20]
 8007406:	3001      	adds	r0, #1
 8007408:	4283      	cmp	r3, r0
 800740a:	d004      	beq.n	8007416 <__swbuf_r+0x62>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	07db      	lsls	r3, r3, #31
 8007410:	d506      	bpl.n	8007420 <__swbuf_r+0x6c>
 8007412:	2e0a      	cmp	r6, #10
 8007414:	d104      	bne.n	8007420 <__swbuf_r+0x6c>
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f951 	bl	80076c0 <_fflush_r>
 800741e:	b988      	cbnz	r0, 8007444 <__swbuf_r+0x90>
 8007420:	4638      	mov	r0, r7
 8007422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <__swbuf_r+0x9c>)
 8007426:	429c      	cmp	r4, r3
 8007428:	d101      	bne.n	800742e <__swbuf_r+0x7a>
 800742a:	68ac      	ldr	r4, [r5, #8]
 800742c:	e7cf      	b.n	80073ce <__swbuf_r+0x1a>
 800742e:	4b09      	ldr	r3, [pc, #36]	; (8007454 <__swbuf_r+0xa0>)
 8007430:	429c      	cmp	r4, r3
 8007432:	bf08      	it	eq
 8007434:	68ec      	ldreq	r4, [r5, #12]
 8007436:	e7ca      	b.n	80073ce <__swbuf_r+0x1a>
 8007438:	4621      	mov	r1, r4
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f81e 	bl	800747c <__swsetup_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	d0cb      	beq.n	80073dc <__swbuf_r+0x28>
 8007444:	f04f 37ff 	mov.w	r7, #4294967295
 8007448:	e7ea      	b.n	8007420 <__swbuf_r+0x6c>
 800744a:	bf00      	nop
 800744c:	08007bd8 	.word	0x08007bd8
 8007450:	08007bf8 	.word	0x08007bf8
 8007454:	08007bb8 	.word	0x08007bb8

08007458 <_write_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d07      	ldr	r5, [pc, #28]	; (8007478 <_write_r+0x20>)
 800745c:	4604      	mov	r4, r0
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	2200      	movs	r2, #0
 8007464:	602a      	str	r2, [r5, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f7fa fae2 	bl	8001a30 <_write>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_write_r+0x1e>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_write_r+0x1e>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000308 	.word	0x20000308

0800747c <__swsetup_r>:
 800747c:	4b32      	ldr	r3, [pc, #200]	; (8007548 <__swsetup_r+0xcc>)
 800747e:	b570      	push	{r4, r5, r6, lr}
 8007480:	681d      	ldr	r5, [r3, #0]
 8007482:	4606      	mov	r6, r0
 8007484:	460c      	mov	r4, r1
 8007486:	b125      	cbz	r5, 8007492 <__swsetup_r+0x16>
 8007488:	69ab      	ldr	r3, [r5, #24]
 800748a:	b913      	cbnz	r3, 8007492 <__swsetup_r+0x16>
 800748c:	4628      	mov	r0, r5
 800748e:	f7ff f8f5 	bl	800667c <__sinit>
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <__swsetup_r+0xd0>)
 8007494:	429c      	cmp	r4, r3
 8007496:	d10f      	bne.n	80074b8 <__swsetup_r+0x3c>
 8007498:	686c      	ldr	r4, [r5, #4]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074a0:	0719      	lsls	r1, r3, #28
 80074a2:	d42c      	bmi.n	80074fe <__swsetup_r+0x82>
 80074a4:	06dd      	lsls	r5, r3, #27
 80074a6:	d411      	bmi.n	80074cc <__swsetup_r+0x50>
 80074a8:	2309      	movs	r3, #9
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	f04f 30ff 	mov.w	r0, #4294967295
 80074b6:	e03e      	b.n	8007536 <__swsetup_r+0xba>
 80074b8:	4b25      	ldr	r3, [pc, #148]	; (8007550 <__swsetup_r+0xd4>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	d101      	bne.n	80074c2 <__swsetup_r+0x46>
 80074be:	68ac      	ldr	r4, [r5, #8]
 80074c0:	e7eb      	b.n	800749a <__swsetup_r+0x1e>
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <__swsetup_r+0xd8>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	bf08      	it	eq
 80074c8:	68ec      	ldreq	r4, [r5, #12]
 80074ca:	e7e6      	b.n	800749a <__swsetup_r+0x1e>
 80074cc:	0758      	lsls	r0, r3, #29
 80074ce:	d512      	bpl.n	80074f6 <__swsetup_r+0x7a>
 80074d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d2:	b141      	cbz	r1, 80074e6 <__swsetup_r+0x6a>
 80074d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074d8:	4299      	cmp	r1, r3
 80074da:	d002      	beq.n	80074e2 <__swsetup_r+0x66>
 80074dc:	4630      	mov	r0, r6
 80074de:	f7ff fd15 	bl	8006f0c <_free_r>
 80074e2:	2300      	movs	r3, #0
 80074e4:	6363      	str	r3, [r4, #52]	; 0x34
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	2300      	movs	r3, #0
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0308 	orr.w	r3, r3, #8
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	b94b      	cbnz	r3, 8007516 <__swsetup_r+0x9a>
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750c:	d003      	beq.n	8007516 <__swsetup_r+0x9a>
 800750e:	4621      	mov	r1, r4
 8007510:	4630      	mov	r0, r6
 8007512:	f000 f959 	bl	80077c8 <__smakebuf_r>
 8007516:	89a0      	ldrh	r0, [r4, #12]
 8007518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800751c:	f010 0301 	ands.w	r3, r0, #1
 8007520:	d00a      	beq.n	8007538 <__swsetup_r+0xbc>
 8007522:	2300      	movs	r3, #0
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6963      	ldr	r3, [r4, #20]
 8007528:	425b      	negs	r3, r3
 800752a:	61a3      	str	r3, [r4, #24]
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	b943      	cbnz	r3, 8007542 <__swsetup_r+0xc6>
 8007530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007534:	d1ba      	bne.n	80074ac <__swsetup_r+0x30>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	0781      	lsls	r1, r0, #30
 800753a:	bf58      	it	pl
 800753c:	6963      	ldrpl	r3, [r4, #20]
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	e7f4      	b.n	800752c <__swsetup_r+0xb0>
 8007542:	2000      	movs	r0, #0
 8007544:	e7f7      	b.n	8007536 <__swsetup_r+0xba>
 8007546:	bf00      	nop
 8007548:	20000010 	.word	0x20000010
 800754c:	08007bd8 	.word	0x08007bd8
 8007550:	08007bf8 	.word	0x08007bf8
 8007554:	08007bb8 	.word	0x08007bb8

08007558 <__assert_func>:
 8007558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800755a:	4614      	mov	r4, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <__assert_func+0x2c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4605      	mov	r5, r0
 8007564:	68d8      	ldr	r0, [r3, #12]
 8007566:	b14c      	cbz	r4, 800757c <__assert_func+0x24>
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <__assert_func+0x30>)
 800756a:	9100      	str	r1, [sp, #0]
 800756c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007570:	4906      	ldr	r1, [pc, #24]	; (800758c <__assert_func+0x34>)
 8007572:	462b      	mov	r3, r5
 8007574:	f000 f8e0 	bl	8007738 <fiprintf>
 8007578:	f000 f9a3 	bl	80078c2 <abort>
 800757c:	4b04      	ldr	r3, [pc, #16]	; (8007590 <__assert_func+0x38>)
 800757e:	461c      	mov	r4, r3
 8007580:	e7f3      	b.n	800756a <__assert_func+0x12>
 8007582:	bf00      	nop
 8007584:	20000010 	.word	0x20000010
 8007588:	08007d85 	.word	0x08007d85
 800758c:	08007d92 	.word	0x08007d92
 8007590:	08007dc0 	.word	0x08007dc0

08007594 <_close_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d06      	ldr	r5, [pc, #24]	; (80075b0 <_close_r+0x1c>)
 8007598:	2300      	movs	r3, #0
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7fa fad2 	bl	8001b48 <_close>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_close_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_close_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000308 	.word	0x20000308

080075b4 <__sflush_r>:
 80075b4:	898a      	ldrh	r2, [r1, #12]
 80075b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	4605      	mov	r5, r0
 80075bc:	0710      	lsls	r0, r2, #28
 80075be:	460c      	mov	r4, r1
 80075c0:	d458      	bmi.n	8007674 <__sflush_r+0xc0>
 80075c2:	684b      	ldr	r3, [r1, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dc05      	bgt.n	80075d4 <__sflush_r+0x20>
 80075c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	dc02      	bgt.n	80075d4 <__sflush_r+0x20>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	d0f9      	beq.n	80075ce <__sflush_r+0x1a>
 80075da:	2300      	movs	r3, #0
 80075dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075e0:	682f      	ldr	r7, [r5, #0]
 80075e2:	602b      	str	r3, [r5, #0]
 80075e4:	d032      	beq.n	800764c <__sflush_r+0x98>
 80075e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	075a      	lsls	r2, r3, #29
 80075ec:	d505      	bpl.n	80075fa <__sflush_r+0x46>
 80075ee:	6863      	ldr	r3, [r4, #4]
 80075f0:	1ac0      	subs	r0, r0, r3
 80075f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f4:	b10b      	cbz	r3, 80075fa <__sflush_r+0x46>
 80075f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075f8:	1ac0      	subs	r0, r0, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	4602      	mov	r2, r0
 80075fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007600:	6a21      	ldr	r1, [r4, #32]
 8007602:	4628      	mov	r0, r5
 8007604:	47b0      	blx	r6
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	d106      	bne.n	800761a <__sflush_r+0x66>
 800760c:	6829      	ldr	r1, [r5, #0]
 800760e:	291d      	cmp	r1, #29
 8007610:	d82c      	bhi.n	800766c <__sflush_r+0xb8>
 8007612:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <__sflush_r+0x108>)
 8007614:	40ca      	lsrs	r2, r1
 8007616:	07d6      	lsls	r6, r2, #31
 8007618:	d528      	bpl.n	800766c <__sflush_r+0xb8>
 800761a:	2200      	movs	r2, #0
 800761c:	6062      	str	r2, [r4, #4]
 800761e:	04d9      	lsls	r1, r3, #19
 8007620:	6922      	ldr	r2, [r4, #16]
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	d504      	bpl.n	8007630 <__sflush_r+0x7c>
 8007626:	1c42      	adds	r2, r0, #1
 8007628:	d101      	bne.n	800762e <__sflush_r+0x7a>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b903      	cbnz	r3, 8007630 <__sflush_r+0x7c>
 800762e:	6560      	str	r0, [r4, #84]	; 0x54
 8007630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007632:	602f      	str	r7, [r5, #0]
 8007634:	2900      	cmp	r1, #0
 8007636:	d0ca      	beq.n	80075ce <__sflush_r+0x1a>
 8007638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800763c:	4299      	cmp	r1, r3
 800763e:	d002      	beq.n	8007646 <__sflush_r+0x92>
 8007640:	4628      	mov	r0, r5
 8007642:	f7ff fc63 	bl	8006f0c <_free_r>
 8007646:	2000      	movs	r0, #0
 8007648:	6360      	str	r0, [r4, #52]	; 0x34
 800764a:	e7c1      	b.n	80075d0 <__sflush_r+0x1c>
 800764c:	6a21      	ldr	r1, [r4, #32]
 800764e:	2301      	movs	r3, #1
 8007650:	4628      	mov	r0, r5
 8007652:	47b0      	blx	r6
 8007654:	1c41      	adds	r1, r0, #1
 8007656:	d1c7      	bne.n	80075e8 <__sflush_r+0x34>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0c4      	beq.n	80075e8 <__sflush_r+0x34>
 800765e:	2b1d      	cmp	r3, #29
 8007660:	d001      	beq.n	8007666 <__sflush_r+0xb2>
 8007662:	2b16      	cmp	r3, #22
 8007664:	d101      	bne.n	800766a <__sflush_r+0xb6>
 8007666:	602f      	str	r7, [r5, #0]
 8007668:	e7b1      	b.n	80075ce <__sflush_r+0x1a>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	e7ad      	b.n	80075d0 <__sflush_r+0x1c>
 8007674:	690f      	ldr	r7, [r1, #16]
 8007676:	2f00      	cmp	r7, #0
 8007678:	d0a9      	beq.n	80075ce <__sflush_r+0x1a>
 800767a:	0793      	lsls	r3, r2, #30
 800767c:	680e      	ldr	r6, [r1, #0]
 800767e:	bf08      	it	eq
 8007680:	694b      	ldreq	r3, [r1, #20]
 8007682:	600f      	str	r7, [r1, #0]
 8007684:	bf18      	it	ne
 8007686:	2300      	movne	r3, #0
 8007688:	eba6 0807 	sub.w	r8, r6, r7
 800768c:	608b      	str	r3, [r1, #8]
 800768e:	f1b8 0f00 	cmp.w	r8, #0
 8007692:	dd9c      	ble.n	80075ce <__sflush_r+0x1a>
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007698:	4643      	mov	r3, r8
 800769a:	463a      	mov	r2, r7
 800769c:	4628      	mov	r0, r5
 800769e:	47b0      	blx	r6
 80076a0:	2800      	cmp	r0, #0
 80076a2:	dc06      	bgt.n	80076b2 <__sflush_r+0xfe>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076aa:	81a3      	strh	r3, [r4, #12]
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	e78e      	b.n	80075d0 <__sflush_r+0x1c>
 80076b2:	4407      	add	r7, r0
 80076b4:	eba8 0800 	sub.w	r8, r8, r0
 80076b8:	e7e9      	b.n	800768e <__sflush_r+0xda>
 80076ba:	bf00      	nop
 80076bc:	20400001 	.word	0x20400001

080076c0 <_fflush_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	690b      	ldr	r3, [r1, #16]
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b913      	cbnz	r3, 80076d0 <_fflush_r+0x10>
 80076ca:	2500      	movs	r5, #0
 80076cc:	4628      	mov	r0, r5
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	b118      	cbz	r0, 80076da <_fflush_r+0x1a>
 80076d2:	6983      	ldr	r3, [r0, #24]
 80076d4:	b90b      	cbnz	r3, 80076da <_fflush_r+0x1a>
 80076d6:	f7fe ffd1 	bl	800667c <__sinit>
 80076da:	4b14      	ldr	r3, [pc, #80]	; (800772c <_fflush_r+0x6c>)
 80076dc:	429c      	cmp	r4, r3
 80076de:	d11b      	bne.n	8007718 <_fflush_r+0x58>
 80076e0:	686c      	ldr	r4, [r5, #4]
 80076e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0ef      	beq.n	80076ca <_fflush_r+0xa>
 80076ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076ec:	07d0      	lsls	r0, r2, #31
 80076ee:	d404      	bmi.n	80076fa <_fflush_r+0x3a>
 80076f0:	0599      	lsls	r1, r3, #22
 80076f2:	d402      	bmi.n	80076fa <_fflush_r+0x3a>
 80076f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076f6:	f7ff f864 	bl	80067c2 <__retarget_lock_acquire_recursive>
 80076fa:	4628      	mov	r0, r5
 80076fc:	4621      	mov	r1, r4
 80076fe:	f7ff ff59 	bl	80075b4 <__sflush_r>
 8007702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007704:	07da      	lsls	r2, r3, #31
 8007706:	4605      	mov	r5, r0
 8007708:	d4e0      	bmi.n	80076cc <_fflush_r+0xc>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	059b      	lsls	r3, r3, #22
 800770e:	d4dd      	bmi.n	80076cc <_fflush_r+0xc>
 8007710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007712:	f7ff f857 	bl	80067c4 <__retarget_lock_release_recursive>
 8007716:	e7d9      	b.n	80076cc <_fflush_r+0xc>
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <_fflush_r+0x70>)
 800771a:	429c      	cmp	r4, r3
 800771c:	d101      	bne.n	8007722 <_fflush_r+0x62>
 800771e:	68ac      	ldr	r4, [r5, #8]
 8007720:	e7df      	b.n	80076e2 <_fflush_r+0x22>
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <_fflush_r+0x74>)
 8007724:	429c      	cmp	r4, r3
 8007726:	bf08      	it	eq
 8007728:	68ec      	ldreq	r4, [r5, #12]
 800772a:	e7da      	b.n	80076e2 <_fflush_r+0x22>
 800772c:	08007bd8 	.word	0x08007bd8
 8007730:	08007bf8 	.word	0x08007bf8
 8007734:	08007bb8 	.word	0x08007bb8

08007738 <fiprintf>:
 8007738:	b40e      	push	{r1, r2, r3}
 800773a:	b503      	push	{r0, r1, lr}
 800773c:	4601      	mov	r1, r0
 800773e:	ab03      	add	r3, sp, #12
 8007740:	4805      	ldr	r0, [pc, #20]	; (8007758 <fiprintf+0x20>)
 8007742:	f853 2b04 	ldr.w	r2, [r3], #4
 8007746:	6800      	ldr	r0, [r0, #0]
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	f7ff fcaf 	bl	80070ac <_vfiprintf_r>
 800774e:	b002      	add	sp, #8
 8007750:	f85d eb04 	ldr.w	lr, [sp], #4
 8007754:	b003      	add	sp, #12
 8007756:	4770      	bx	lr
 8007758:	20000010 	.word	0x20000010

0800775c <_lseek_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	; (800777c <_lseek_r+0x20>)
 8007760:	4604      	mov	r4, r0
 8007762:	4608      	mov	r0, r1
 8007764:	4611      	mov	r1, r2
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	f7fa fa10 	bl	8001b90 <_lseek>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_lseek_r+0x1e>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_lseek_r+0x1e>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	20000308 	.word	0x20000308

08007780 <__swhatbuf_r>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	460e      	mov	r6, r1
 8007784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007788:	2900      	cmp	r1, #0
 800778a:	b096      	sub	sp, #88	; 0x58
 800778c:	4614      	mov	r4, r2
 800778e:	461d      	mov	r5, r3
 8007790:	da07      	bge.n	80077a2 <__swhatbuf_r+0x22>
 8007792:	2300      	movs	r3, #0
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	89b3      	ldrh	r3, [r6, #12]
 8007798:	061a      	lsls	r2, r3, #24
 800779a:	d410      	bmi.n	80077be <__swhatbuf_r+0x3e>
 800779c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a0:	e00e      	b.n	80077c0 <__swhatbuf_r+0x40>
 80077a2:	466a      	mov	r2, sp
 80077a4:	f000 f894 	bl	80078d0 <_fstat_r>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	dbf2      	blt.n	8007792 <__swhatbuf_r+0x12>
 80077ac:	9a01      	ldr	r2, [sp, #4]
 80077ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077b6:	425a      	negs	r2, r3
 80077b8:	415a      	adcs	r2, r3
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	e7ee      	b.n	800779c <__swhatbuf_r+0x1c>
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	2000      	movs	r0, #0
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	b016      	add	sp, #88	; 0x58
 80077c6:	bd70      	pop	{r4, r5, r6, pc}

080077c8 <__smakebuf_r>:
 80077c8:	898b      	ldrh	r3, [r1, #12]
 80077ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077cc:	079d      	lsls	r5, r3, #30
 80077ce:	4606      	mov	r6, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	d507      	bpl.n	80077e4 <__smakebuf_r+0x1c>
 80077d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	2301      	movs	r3, #1
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	b002      	add	sp, #8
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	ab01      	add	r3, sp, #4
 80077e6:	466a      	mov	r2, sp
 80077e8:	f7ff ffca 	bl	8007780 <__swhatbuf_r>
 80077ec:	9900      	ldr	r1, [sp, #0]
 80077ee:	4605      	mov	r5, r0
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff fbd9 	bl	8006fa8 <_malloc_r>
 80077f6:	b948      	cbnz	r0, 800780c <__smakebuf_r+0x44>
 80077f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fc:	059a      	lsls	r2, r3, #22
 80077fe:	d4ef      	bmi.n	80077e0 <__smakebuf_r+0x18>
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	f043 0302 	orr.w	r3, r3, #2
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	e7e3      	b.n	80077d4 <__smakebuf_r+0xc>
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <__smakebuf_r+0x7c>)
 800780e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	6020      	str	r0, [r4, #0]
 8007814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	9b00      	ldr	r3, [sp, #0]
 800781c:	6163      	str	r3, [r4, #20]
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	6120      	str	r0, [r4, #16]
 8007822:	b15b      	cbz	r3, 800783c <__smakebuf_r+0x74>
 8007824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f863 	bl	80078f4 <_isatty_r>
 800782e:	b128      	cbz	r0, 800783c <__smakebuf_r+0x74>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f023 0303 	bic.w	r3, r3, #3
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	89a0      	ldrh	r0, [r4, #12]
 800783e:	4305      	orrs	r5, r0
 8007840:	81a5      	strh	r5, [r4, #12]
 8007842:	e7cd      	b.n	80077e0 <__smakebuf_r+0x18>
 8007844:	08006615 	.word	0x08006615

08007848 <__ascii_mbtowc>:
 8007848:	b082      	sub	sp, #8
 800784a:	b901      	cbnz	r1, 800784e <__ascii_mbtowc+0x6>
 800784c:	a901      	add	r1, sp, #4
 800784e:	b142      	cbz	r2, 8007862 <__ascii_mbtowc+0x1a>
 8007850:	b14b      	cbz	r3, 8007866 <__ascii_mbtowc+0x1e>
 8007852:	7813      	ldrb	r3, [r2, #0]
 8007854:	600b      	str	r3, [r1, #0]
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	1e10      	subs	r0, r2, #0
 800785a:	bf18      	it	ne
 800785c:	2001      	movne	r0, #1
 800785e:	b002      	add	sp, #8
 8007860:	4770      	bx	lr
 8007862:	4610      	mov	r0, r2
 8007864:	e7fb      	b.n	800785e <__ascii_mbtowc+0x16>
 8007866:	f06f 0001 	mvn.w	r0, #1
 800786a:	e7f8      	b.n	800785e <__ascii_mbtowc+0x16>

0800786c <__malloc_lock>:
 800786c:	4801      	ldr	r0, [pc, #4]	; (8007874 <__malloc_lock+0x8>)
 800786e:	f7fe bfa8 	b.w	80067c2 <__retarget_lock_acquire_recursive>
 8007872:	bf00      	nop
 8007874:	20000300 	.word	0x20000300

08007878 <__malloc_unlock>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__malloc_unlock+0x8>)
 800787a:	f7fe bfa3 	b.w	80067c4 <__retarget_lock_release_recursive>
 800787e:	bf00      	nop
 8007880:	20000300 	.word	0x20000300

08007884 <_read_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d07      	ldr	r5, [pc, #28]	; (80078a4 <_read_r+0x20>)
 8007888:	4604      	mov	r4, r0
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	2200      	movs	r2, #0
 8007890:	602a      	str	r2, [r5, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f7fa f93b 	bl	8001b0e <_read>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_read_r+0x1e>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_read_r+0x1e>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000308 	.word	0x20000308

080078a8 <__ascii_wctomb>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	b141      	cbz	r1, 80078c0 <__ascii_wctomb+0x18>
 80078ae:	2aff      	cmp	r2, #255	; 0xff
 80078b0:	d904      	bls.n	80078bc <__ascii_wctomb+0x14>
 80078b2:	228a      	movs	r2, #138	; 0x8a
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	4770      	bx	lr
 80078bc:	700a      	strb	r2, [r1, #0]
 80078be:	2001      	movs	r0, #1
 80078c0:	4770      	bx	lr

080078c2 <abort>:
 80078c2:	b508      	push	{r3, lr}
 80078c4:	2006      	movs	r0, #6
 80078c6:	f000 f84d 	bl	8007964 <raise>
 80078ca:	2001      	movs	r0, #1
 80078cc:	f7fa f915 	bl	8001afa <_exit>

080078d0 <_fstat_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	; (80078f0 <_fstat_r+0x20>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	f7fa f93e 	bl	8001b5e <_fstat>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d102      	bne.n	80078ec <_fstat_r+0x1c>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	b103      	cbz	r3, 80078ec <_fstat_r+0x1c>
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	bd38      	pop	{r3, r4, r5, pc}
 80078ee:	bf00      	nop
 80078f0:	20000308 	.word	0x20000308

080078f4 <_isatty_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d06      	ldr	r5, [pc, #24]	; (8007910 <_isatty_r+0x1c>)
 80078f8:	2300      	movs	r3, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	f7fa f93c 	bl	8001b7c <_isatty>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_isatty_r+0x1a>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_isatty_r+0x1a>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20000308 	.word	0x20000308

08007914 <_raise_r>:
 8007914:	291f      	cmp	r1, #31
 8007916:	b538      	push	{r3, r4, r5, lr}
 8007918:	4604      	mov	r4, r0
 800791a:	460d      	mov	r5, r1
 800791c:	d904      	bls.n	8007928 <_raise_r+0x14>
 800791e:	2316      	movs	r3, #22
 8007920:	6003      	str	r3, [r0, #0]
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800792a:	b112      	cbz	r2, 8007932 <_raise_r+0x1e>
 800792c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007930:	b94b      	cbnz	r3, 8007946 <_raise_r+0x32>
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f830 	bl	8007998 <_getpid_r>
 8007938:	462a      	mov	r2, r5
 800793a:	4601      	mov	r1, r0
 800793c:	4620      	mov	r0, r4
 800793e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007942:	f000 b817 	b.w	8007974 <_kill_r>
 8007946:	2b01      	cmp	r3, #1
 8007948:	d00a      	beq.n	8007960 <_raise_r+0x4c>
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	d103      	bne.n	8007956 <_raise_r+0x42>
 800794e:	2316      	movs	r3, #22
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	2001      	movs	r0, #1
 8007954:	e7e7      	b.n	8007926 <_raise_r+0x12>
 8007956:	2400      	movs	r4, #0
 8007958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800795c:	4628      	mov	r0, r5
 800795e:	4798      	blx	r3
 8007960:	2000      	movs	r0, #0
 8007962:	e7e0      	b.n	8007926 <_raise_r+0x12>

08007964 <raise>:
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <raise+0xc>)
 8007966:	4601      	mov	r1, r0
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	f7ff bfd3 	b.w	8007914 <_raise_r>
 800796e:	bf00      	nop
 8007970:	20000010 	.word	0x20000010

08007974 <_kill_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4d07      	ldr	r5, [pc, #28]	; (8007994 <_kill_r+0x20>)
 8007978:	2300      	movs	r3, #0
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	4611      	mov	r1, r2
 8007980:	602b      	str	r3, [r5, #0]
 8007982:	f7fa f8aa 	bl	8001ada <_kill>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d102      	bne.n	8007990 <_kill_r+0x1c>
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	b103      	cbz	r3, 8007990 <_kill_r+0x1c>
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	bd38      	pop	{r3, r4, r5, pc}
 8007992:	bf00      	nop
 8007994:	20000308 	.word	0x20000308

08007998 <_getpid_r>:
 8007998:	f7fa b898 	b.w	8001acc <_getpid>

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
