
LoRa_E5_WAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6d8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  0801b810  0801b810  0002b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c614  0801c614  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c614  0801c614  0002c614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c61c  0801c61c  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c61c  0801c61c  0002c61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c620  0801c620  0002c620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801c624  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001998  20000134  0801c758  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001acc  0801c758  00031acc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005da3b  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ae6a  00000000  00000000  0008db99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003138  00000000  00000000  00098a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d50  00000000  00000000  0009bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277e9  00000000  00000000  0009e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a1dc  00000000  00000000  000c6079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d51  00000000  00000000  00100255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c9fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c9b4  00000000  00000000  001c9ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b7f8 	.word	0x0801b7f8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801b7f8 	.word	0x0801b7f8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e96:	4013      	ands	r3, r2
 8000e98:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <MX_ADC_Init+0x98>)
 8000eac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ADC_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_ADC_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f26:	f001 fee7 	bl	8002cf8 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f30:	f000 f9d4 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000187c 	.word	0x2000187c
 8000f3c:	40012400 	.word	0x40012400

08000f40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_ADC_MspInit+0x24>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d103      	bne.n	8000f5a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f56:	f7ff ff7b 	bl	8000e50 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012400 	.word	0x40012400

08000f68 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <HAL_ADC_MspDeInit+0x24>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000f7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f7e:	f7ff ff7f 	bl	8000e80 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012400 	.word	0x40012400

08000f90 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <SYS_InitMeasurement+0x14>)
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <SYS_InitMeasurement+0x18>)
 8000f98:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2000187c 	.word	0x2000187c
 8000fa8:	40012400 	.word	0x40012400

08000fac <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fba:	f000 f871 	bl	80010a0 <SYS_GetBatteryLevel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fc2:	4830      	ldr	r0, [pc, #192]	; (8001084 <SYS_GetTemperatureLevel+0xd8>)
 8000fc4:	f000 f8a0 	bl	8001108 <ADC_ReadChannels>
 8000fc8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <SYS_GetTemperatureLevel+0xdc>)
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d026      	beq.n	8001024 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <SYS_GetTemperatureLevel+0xdc>)
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d01c      	beq.n	800101c <SYS_GetTemperatureLevel+0x70>
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <SYS_GetTemperatureLevel+0xe4>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2264      	movs	r2, #100	; 0x64
 8000ffe:	fb02 f203 	mul.w	r2, r2, r3
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <SYS_GetTemperatureLevel+0xdc>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	331e      	adds	r3, #30
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21b      	sxth	r3, r3
 800101a:	e001      	b.n	8001020 <SYS_GetTemperatureLevel+0x74>
 800101c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001020:	81fb      	strh	r3, [r7, #14]
 8001022:	e01c      	b.n	800105e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	fb02 f203 	mul.w	r2, r2, r3
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <SYS_GetTemperatureLevel+0xe8>)
 800102e:	fba3 1302 	umull	r1, r3, r3, r2
 8001032:	1ad2      	subs	r2, r2, r3
 8001034:	0852      	lsrs	r2, r2, #1
 8001036:	4413      	add	r3, r2
 8001038:	0adb      	lsrs	r3, r3, #11
 800103a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001046:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <SYS_GetTemperatureLevel+0xec>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1292      	asrs	r2, r2, #10
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	331e      	adds	r3, #30
 800105a:	b29b      	uxth	r3, r3
 800105c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 800105e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SYS_GetTemperatureLevel+0xf0>)
 8001066:	2201      	movs	r2, #1
 8001068:	2100      	movs	r1, #0
 800106a:	2001      	movs	r0, #1
 800106c:	f01a f89e 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	b0001000 	.word	0xb0001000
 8001088:	1fff75c8 	.word	0x1fff75c8
 800108c:	1fff75a8 	.word	0x1fff75a8
 8001090:	09ee009f 	.word	0x09ee009f
 8001094:	00100101 	.word	0x00100101
 8001098:	68db8bad 	.word	0x68db8bad
 800109c:	0801b810 	.word	0x0801b810

080010a0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010ae:	4813      	ldr	r0, [pc, #76]	; (80010fc <SYS_GetBatteryLevel+0x5c>)
 80010b0:	f000 f82a 	bl	8001108 <ADC_ReadChannels>
 80010b4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	e016      	b.n	80010f0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <SYS_GetBatteryLevel+0x60>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00b      	beq.n	80010e6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <SYS_GetBatteryLevel+0x60>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010d8:	fb03 f202 	mul.w	r2, r3, r2
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	e004      	b.n	80010f0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <SYS_GetBatteryLevel+0x64>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	b4002000 	.word	0xb4002000
 8001100:	1fff75aa 	.word	0x1fff75aa
 8001104:	004c08d8 	.word	0x004c08d8

08001108 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001120:	f7ff fec0 	bl	8000ea4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <ADC_ReadChannels+0x88>)
 8001126:	f002 fbcd 	bl	80038c4 <HAL_ADCEx_Calibration_Start>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001130:	f000 f8d4 	bl	80012dc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <ADC_ReadChannels+0x88>)
 8001148:	f002 f934 	bl	80033b4 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001152:	f000 f8c3 	bl	80012dc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <ADC_ReadChannels+0x88>)
 8001158:	f002 f810 	bl	800317c <HAL_ADC_Start>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001162:	f000 f8bb 	bl	80012dc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001166:	f04f 31ff 	mov.w	r1, #4294967295
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <ADC_ReadChannels+0x88>)
 800116c:	f002 f87e 	bl	800326c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <ADC_ReadChannels+0x88>)
 8001172:	f002 f849 	bl	8003208 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <ADC_ReadChannels+0x88>)
 8001178:	f002 f90f 	bl	800339a <HAL_ADC_GetValue>
 800117c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <ADC_ReadChannels+0x88>)
 8001180:	f001 ff80 	bl	8003084 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001184:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000187c 	.word	0x2000187c

08001194 <LL_AHB1_GRP1_EnableClock>:
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff ffe3 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff ffe0 	bl	8001194 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	200b      	movs	r0, #11
 80011da:	f002 fcc6 	bl	8003b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011de:	200b      	movs	r0, #11
 80011e0:	f002 fcdd 	bl	8003b9e <HAL_NVIC_EnableIRQ>

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f8:	f023 0218 	bic.w	r2, r3, #24
 80011fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4313      	orrs	r3, r2
 8001204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001216:	f001 fb87 	bl	8002928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 f805 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 800121e:	f008 f887 	bl	8009330 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001222:	f008 f88d 	bl	8009340 <MX_LoRaWAN_Process>
 8001226:	e7fc      	b.n	8001222 <main+0x10>

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09a      	sub	sp, #104	; 0x68
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2248      	movs	r2, #72	; 0x48
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f01a fa56 	bl	801b6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800124e:	f003 fb4f 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff ffc8 	bl	80011e8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <SystemClock_Config+0xb0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <SystemClock_Config+0xb0>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <SystemClock_Config+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001274:	2324      	movs	r3, #36	; 0x24
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001278:	2381      	movs	r3, #129	; 0x81
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001284:	23b0      	movs	r3, #176	; 0xb0
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fe79 	bl	8004f88 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800129c:	f000 f81e 	bl	80012dc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012a0:	234f      	movs	r3, #79	; 0x4f
 80012a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 f9fc 	bl	80056bc <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ca:	f000 f807 	bl	80012dc <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58000400 	.word	0x58000400

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>

080012e6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <LL_APB1_GRP1_EnableClock>:
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	222c      	movs	r2, #44	; 0x2c
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f01a f9cf 	bl	801b6e8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_RTC_Init+0x9c>)
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <MX_RTC_Init+0xa0>)
 800134e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001352:	221f      	movs	r2, #31
 8001354:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_RTC_Init+0x9c>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_RTC_Init+0x9c>)
 800136a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001380:	f004 fe5c 	bl	800603c <HAL_RTC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800138a:	f7ff ffa7 	bl	80012dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001390:	f005 f94a 	bl	8006628 <HAL_RTCEx_SetSSRU_IT>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800139a:	f7ff ff9f 	bl	80012dc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80013aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013ae:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_RTC_Init+0x9c>)
 80013be:	f004 feb7 	bl	8006130 <HAL_RTC_SetAlarm_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80013c8:	f7ff ff88 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200018e0 	.word	0x200018e0
 80013d8:	40002800 	.word	0x40002800

080013dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	; 0x40
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2238      	movs	r2, #56	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f01a f97b 	bl	801b6e8 <memset>
  if(rtcHandle->Instance==RTC)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <HAL_RTC_MspInit+0x74>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d125      	bne.n	8001448 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001400:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fcfb 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001418:	f7ff ff60 	bl	80012dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141c:	f7ff ff63 	bl	80012e6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001424:	f7ff ff6f 	bl	8001306 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2002      	movs	r0, #2
 800142e:	f002 fb9c 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001432:	2002      	movs	r0, #2
 8001434:	f002 fbb3 	bl	8003b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	202a      	movs	r0, #42	; 0x2a
 800143e:	f002 fb94 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001442:	202a      	movs	r0, #42	; 0x2a
 8001444:	f002 fbab 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	3740      	adds	r7, #64	; 0x40
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40002800 	.word	0x40002800

08001454 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800145a:	2201      	movs	r2, #1
 800145c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	58000400 	.word	0x58000400

0800146c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001488:	f001 fa6e 	bl	8002968 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800148c:	f7ff ffe2 	bl	8001454 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001490:	2001      	movs	r0, #1
 8001492:	f003 fabf 	bl	8004a14 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}

0800149a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800149e:	f001 fa71 	bl	8002984 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80014a2:	f000 ff8f 	bl	80023c4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}

080014aa <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80014ae:	f001 fa5b 	bl	8002968 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014b2:	2101      	movs	r1, #1
 80014b4:	2000      	movs	r0, #0
 80014b6:	f003 fa29 	bl	800490c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 80014c2:	f001 fa5f 	bl	8002984 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014da:	e7fe      	b.n	80014da <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <HardFault_Handler+0x4>

080014e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <BusFault_Handler+0x4>

080014ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800152a:	f005 f8b9 	bl	80066a0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200018e0 	.word	0x200018e0

08001538 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Channel1_IRQHandler+0x10>)
 800153e:	f002 fdc5 	bl	80040cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001924 	.word	0x20001924

0800154c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART1_IRQHandler+0x10>)
 8001552:	f005 ff05 	bl	8007360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20001984 	.word	0x20001984

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001564:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001568:	f003 f9aa 	bl	80048c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <RTC_Alarm_IRQHandler+0x10>)
 8001576:	f004 ff43 	bl	8006400 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200018e0 	.word	0x200018e0

08001584 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <SUBGHZ_Radio_IRQHandler+0x10>)
 800158a:	f005 fbf1 	bl	8006d70 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20001918 	.word	0x20001918

08001598 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SUBGHZ_Init+0x20>)
 80015ce:	2208      	movs	r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_SUBGHZ_Init+0x20>)
 80015d4:	f005 f950 	bl	8006878 <HAL_SUBGHZ_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80015de:	f7ff fe7d 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20001918 	.word	0x20001918

080015ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffcf 	bl	8001598 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2032      	movs	r0, #50	; 0x32
 8001600:	f002 fab3 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001604:	2032      	movs	r0, #50	; 0x32
 8001606:	f002 faca 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <LL_FLASH_GetUDN+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	1fff7580 	.word	0x1fff7580

0800164c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <LL_FLASH_GetDeviceID+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	1fff7584 	.word	0x1fff7584

08001664 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <LL_FLASH_GetSTCompanyID+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0a1b      	lsrs	r3, r3, #8
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	1fff7584 	.word	0x1fff7584

0800167c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ffc6 	bl	8001612 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001686:	f019 fad3 	bl	801ac30 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 800168a:	f000 f997 	bl	80019bc <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 800168e:	f000 f9b7 	bl	8001a00 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001692:	f019 fd5d 	bl	801b150 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <SystemApp_Init+0x48>)
 8001698:	f019 fe0a 	bl	801b2b0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800169c:	2002      	movs	r0, #2
 800169e:	f019 fe15 	bl	801b2cc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80016a2:	f7ff fc75 	bl	8000f90 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80016a6:	f000 fa75 	bl	8001b94 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80016aa:	f018 fca1 	bl	8019ff0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80016ae:	2101      	movs	r1, #1
 80016b0:	2001      	movs	r0, #1
 80016b2:	f018 fcdd 	bl	801a070 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80016b6:	2101      	movs	r1, #1
 80016b8:	2001      	movs	r0, #1
 80016ba:	f018 fca9 	bl	801a010 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0800189d 	.word	0x0800189d

080016c8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80016cc:	f018 fd00 	bl	801a0d0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80016de:	f7ff fcdf 	bl	80010a0 <SYS_GetBatteryLevel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d902      	bls.n	80016f6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80016f0:	23fe      	movs	r3, #254	; 0xfe
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	e014      	b.n	8001720 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80016fc:	d202      	bcs.n	8001704 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e00d      	b.n	8001720 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800170a:	461a      	mov	r2, r3
 800170c:	4613      	mov	r3, r2
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	461a      	mov	r2, r3
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <GetBatteryLevel+0x68>)
 8001718:	fba3 2302 	umull	r2, r3, r3, r2
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <GetBatteryLevel+0x6c>)
 8001726:	2201      	movs	r2, #1
 8001728:	2100      	movs	r1, #0
 800172a:	2002      	movs	r0, #2
 800172c:	f019 fd3e 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001730:	79fb      	ldrb	r3, [r7, #7]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	1b4e81b5 	.word	0x1b4e81b5
 8001740:	0801b81c 	.word	0x0801b81c

08001744 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800174e:	f7ff fc2d 	bl	8000fac <SYS_GetTemperatureLevel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	da00      	bge.n	800175a <GetTemperatureLevel+0x16>
 8001758:	33ff      	adds	r3, #255	; 0xff
 800175a:	121b      	asrs	r3, r3, #8
 800175c:	b21b      	sxth	r3, r3
 800175e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001760:	88fb      	ldrh	r3, [r7, #6]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800176a:	b590      	push	{r4, r7, lr}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001776:	f7ff ff5f 	bl	8001638 <LL_FLASH_GetUDN>
 800177a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001782:	d138      	bne.n	80017f6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001784:	f001 f90c 	bl	80029a0 <HAL_GetUIDw0>
 8001788:	4604      	mov	r4, r0
 800178a:	f001 f91d 	bl	80029c8 <HAL_GetUIDw2>
 800178e:	4603      	mov	r3, r0
 8001790:	4423      	add	r3, r4
 8001792:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001794:	f001 f90e 	bl	80029b4 <HAL_GetUIDw1>
 8001798:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	0e1a      	lsrs	r2, r3, #24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3307      	adds	r3, #7
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	0c1a      	lsrs	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3306      	adds	r3, #6
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	0a1a      	lsrs	r2, r3, #8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3305      	adds	r3, #5
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	0e1a      	lsrs	r2, r3, #24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3303      	adds	r3, #3
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	0c1a      	lsrs	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0a1a      	lsrs	r2, r3, #8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80017f4:	e031      	b.n	800185a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3307      	adds	r3, #7
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	0a1a      	lsrs	r2, r3, #8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3306      	adds	r3, #6
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	0c1a      	lsrs	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3305      	adds	r3, #5
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	0e1a      	lsrs	r2, r3, #24
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001824:	f7ff ff12 	bl	800164c <LL_FLASH_GetDeviceID>
 8001828:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001834:	f7ff ff16 	bl	8001664 <LL_FLASH_GetSTCompanyID>
 8001838:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3302      	adds	r3, #2
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	0a1a      	lsrs	r2, r3, #8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	b2da      	uxtb	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001862:	b590      	push	{r4, r7, lr}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 800186c:	f7ff fee4 	bl	8001638 <LL_FLASH_GetUDN>
 8001870:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d10b      	bne.n	8001892 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800187a:	f001 f891 	bl	80029a0 <HAL_GetUIDw0>
 800187e:	4604      	mov	r4, r0
 8001880:	f001 f898 	bl	80029b4 <HAL_GetUIDw1>
 8001884:	4603      	mov	r3, r0
 8001886:	405c      	eors	r4, r3
 8001888:	f001 f89e 	bl	80029c8 <HAL_GetUIDw2>
 800188c:	4603      	mov	r3, r0
 800188e:	4063      	eors	r3, r4
 8001890:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001892:	687b      	ldr	r3, [r7, #4]

}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f018 fd20 	bl	801a2f0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <TimestampNow+0x3c>)
 80018ba:	2110      	movs	r1, #16
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f81d 	bl	80018fc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe fc58 	bl	8000178 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0801b828 	.word	0x0801b828

080018dc <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80018e0:	2101      	movs	r1, #1
 80018e2:	2002      	movs	r0, #2
 80018e4:	f018 fb94 	bl	801a010 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2002      	movs	r0, #2
 80018f4:	f018 fb8c 	bl	801a010 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80018fc:	b40c      	push	{r2, r3}
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f018 febf 	bl	801a698 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001924:	b002      	add	sp, #8
 8001926:	4770      	bx	lr

08001928 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001940:	f000 f9f0 	bl	8001d24 <TIMER_IF_GetTimerValue>
 8001944:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001946:	4618      	mov	r0, r3
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fa65 	bl	8001e24 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <LL_AHB2_GRP1_EnableClock>:
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
	...

08001994 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800199e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80019a2:	4905      	ldr	r1, [pc, #20]	; (80019b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	58000800 	.word	0x58000800

080019bc <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 f802 	bl	80019ca <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 80019de:	f000 fffd 	bl	80029dc <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 80019e2:	f001 f807 	bl	80029f4 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 80019e6:	f001 f811 	bl	8002a0c <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 80019ea:	e005      	b.n	80019f8 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 80019ec:	f000 fffc 	bl	80029e8 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 80019f0:	f001 f806 	bl	8002a00 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 80019f4:	f001 f810 	bl	8002a18 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7ff ff9e 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001a26:	2002      	movs	r0, #2
 8001a28:	f7ff ff9b 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff ff98 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff ff95 	bl	8001962 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f002 fcde 	bl	8004404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	483a      	ldr	r0, [pc, #232]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a54:	f002 fcd6 	bl	8004404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4836      	ldr	r0, [pc, #216]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a62:	f002 fccf 	bl	8004404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001a66:	2310      	movs	r3, #16
 8001a68:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4833      	ldr	r0, [pc, #204]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a70:	f002 fcc8 	bl	8004404 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2101      	movs	r1, #1
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7c:	f002 fef0 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a86:	482d      	ldr	r0, [pc, #180]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a88:	f002 feea 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2108      	movs	r1, #8
 8001a90:	482a      	ldr	r0, [pc, #168]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a92:	f002 fee5 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4828      	ldr	r0, [pc, #160]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a9c:	f002 fee0 	bl	8004860 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8001aac:	23f0      	movs	r3, #240	; 0xf0
 8001aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001ab0:	230d      	movs	r3, #13
 8001ab2:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff ff54 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f002 fc9f 	bl	8004404 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff42 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f002 fc8d 	bl	8004404 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8001af2:	2304      	movs	r3, #4
 8001af4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001af6:	230d      	movs	r3, #13
 8001af8:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7ff ff31 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001b06:	f002 fc7d 	bl	8004404 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8001b12:	2310      	movs	r3, #16
 8001b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001b16:	230d      	movs	r3, #13
 8001b18:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7ff ff21 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001b26:	f002 fc6d 	bl	8004404 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001b2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b2e:	f7ff ff31 	bl	8001994 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	48000400 	.word	0x48000400

08001b40 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <EnvSensors_Read+0x40>)
 8001b4a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <EnvSensors_Read+0x44>)
 8001b4e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <EnvSensors_Read+0x48>)
 8001b52:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <EnvSensors_Read+0x4c>)
 8001b6a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <EnvSensors_Read+0x50>)
 8001b70:	611a      	str	r2, [r3, #16]

  return 0;
 8001b72:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	42480000 	.word	0x42480000
 8001b84:	41900000 	.word	0x41900000
 8001b88:	447a0000 	.word	0x447a0000
 8001b8c:	003e090d 	.word	0x003e090d
 8001b90:	000503ab 	.word	0x000503ab

08001b94 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001b98:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <TIMER_IF_Init+0x5c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f083 0301 	eor.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001bde:	f04f 32ff 	mov.w	r2, #4294967295
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001be4:	f7ff fba8 	bl	8001338 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001be8:	f000 f856 	bl	8001c98 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001bf2:	f004 fba9 	bl	8006348 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001c00:	f004 fce0 	bl	80065c4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f000 f9cf 	bl	8001fa8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001c0a:	f000 f85f 	bl	8001ccc <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <TIMER_IF_Init+0x5c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001c14:	79fb      	ldrb	r3, [r7, #7]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000150 	.word	0x20000150
 8001c24:	200018e0 	.word	0x200018e0

08001c28 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	222c      	movs	r2, #44	; 0x2c
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f019 fd52 	bl	801b6e8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001c44:	f000 f828 	bl	8001c98 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <TIMER_IF_StartTimer+0x68>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c64:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <TIMER_IF_StartTimer+0x6c>)
 8001c76:	f004 fa5b 	bl	8006130 <HAL_RTC_SetAlarm_IT>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001c80:	f7ff fb2c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3738      	adds	r7, #56	; 0x38
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000154 	.word	0x20000154
 8001c94:	200018e0 	.word	0x200018e0

08001c98 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <TIMER_IF_StopTimer+0x2c>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <TIMER_IF_StopTimer+0x30>)
 8001cae:	f004 fb4b 	bl	8006348 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <TIMER_IF_StopTimer+0x30>)
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40002800 	.word	0x40002800
 8001cc8:	200018e0 	.word	0x200018e0

08001ccc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001cd0:	f000 f98a 	bl	8001fe8 <GetTimerTicks>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <TIMER_IF_SetTimerContext+0x18>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001cda:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <TIMER_IF_SetTimerContext+0x18>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000154 	.word	0x20000154

08001ce8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <TIMER_IF_GetTimerContext+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000154 	.word	0x20000154

08001cfc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001d06:	f000 f96f 	bl	8001fe8 <GetTimerTicks>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000154 	.word	0x20000154

08001d24 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <TIMER_IF_GetTimerValue+0x24>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001d36:	f000 f957 	bl	8001fe8 <GetTimerTicks>
 8001d3a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000150 	.word	0x20000150

08001d4c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001d56:	2303      	movs	r3, #3
 8001d58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001d5a:	687b      	ldr	r3, [r7, #4]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001d66:	b5b0      	push	{r4, r5, r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	0d95      	lsrs	r5, r2, #22
 8001d7c:	0294      	lsls	r4, r2, #10
 8001d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fee7 	bl	8000b5c <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4613      	mov	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdb0      	pop	{r4, r5, r7, pc}

08001da0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001da0:	b4b0      	push	{r4, r5, r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	f04f 0400 	mov.w	r4, #0
 8001dbc:	f04f 0500 	mov.w	r5, #0
 8001dc0:	015d      	lsls	r5, r3, #5
 8001dc2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001dc6:	0154      	lsls	r4, r2, #5
 8001dc8:	4622      	mov	r2, r4
 8001dca:	462b      	mov	r3, r5
 8001dcc:	1a12      	subs	r2, r2, r0
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	f04f 0400 	mov.w	r4, #0
 8001dd6:	f04f 0500 	mov.w	r5, #0
 8001dda:	009d      	lsls	r5, r3, #2
 8001ddc:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001de0:	0094      	lsls	r4, r2, #2
 8001de2:	4622      	mov	r2, r4
 8001de4:	462b      	mov	r3, r5
 8001de6:	1812      	adds	r2, r2, r0
 8001de8:	eb41 0303 	adc.w	r3, r1, r3
 8001dec:	f04f 0000 	mov.w	r0, #0
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	00d9      	lsls	r1, r3, #3
 8001df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dfa:	00d0      	lsls	r0, r2, #3
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	0a82      	lsrs	r2, r0, #10
 8001e0e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001e12:	0a8b      	lsrs	r3, r1, #10
 8001e14:	4613      	mov	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001e18:	68fb      	ldr	r3, [r7, #12]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bcb0      	pop	{r4, r5, r7}
 8001e22:	4770      	bx	lr

08001e24 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff9a 	bl	8001d66 <TIMER_IF_Convert_ms2Tick>
 8001e32:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001e34:	f000 f8d8 	bl	8001fe8 <GetTimerTicks>
 8001e38:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e3a:	e000      	b.n	8001e3e <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001e3c:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e3e:	f000 f8d3 	bl	8001fe8 <GetTimerTicks>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d8f6      	bhi.n	8001e3c <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001e60:	f019 f834 	bl	801aecc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001e74:	f000 f8a8 	bl	8001fc8 <TIMER_IF_BkUp_Read_MSBticks>
 8001e78:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f892 	bl	8001fa8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001e8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e90:	b088      	sub	sp, #32
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001e9a:	f000 f8a5 	bl	8001fe8 <GetTimerTicks>
 8001e9e:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001ea0:	f000 f892 	bl	8001fc8 <TIMER_IF_BkUp_Read_MSBticks>
 8001ea4:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	2200      	movs	r2, #0
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	eb12 0800 	adds.w	r8, r2, r0
 8001ec6:	eb43 0901 	adc.w	r9, r3, r1
 8001eca:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	0a82      	lsrs	r2, r0, #10
 8001edc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001ee0:	0a8b      	lsrs	r3, r1, #10
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	ea02 0400 	and.w	r4, r2, r0
 8001efa:	ea03 0501 	and.w	r5, r3, r1
 8001efe:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff4b 	bl	8001da0 <TIMER_IF_Convert_Tick2ms>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001f12:	69fb      	ldr	r3, [r7, #28]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001f20 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001f2e:	f004 fbdb 	bl	80066e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200018e0 	.word	0x200018e0

08001f40 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001f4e:	f004 fbcb 	bl	80066e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200018e0 	.word	0x200018e0

08001f60 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001f6e:	f004 fbd3 	bl	8006718 <HAL_RTCEx_BKUPRead>
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001f74:	687b      	ldr	r3, [r7, #4]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200018e0 	.word	0x200018e0

08001f84 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001f92:	f004 fbc1 	bl	8006718 <HAL_RTCEx_BKUPRead>
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200018e0 	.word	0x200018e0

08001fa8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001fb6:	f004 fb97 	bl	80066e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200018e0 	.word	0x200018e0

08001fc8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001fd2:	f004 fba1 	bl	8006718 <HAL_RTCEx_BKUPRead>
 8001fd6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001fd8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200018e0 	.word	0x200018e0

08001fe8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <GetTimerTicks+0x14>)
 8001fee:	f7ff fdde 	bl	8001bae <LL_RTC_TIME_GetSubSecond>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40002800 	.word	0x40002800

08002000 <LL_AHB2_GRP1_EnableClock>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800200e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <LL_APB2_GRP1_EnableClock>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <LL_APB2_GRP1_DisableClock>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	43db      	mvns	r3, r3
 8002072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002076:	4013      	ands	r3, r2
 8002078:	660b      	str	r3, [r1, #96]	; 0x60
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <MX_USART1_UART_Init+0x90>)
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <MX_USART1_UART_Init+0x94>)
 800208c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <MX_USART1_UART_Init+0x90>)
 8002090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002094:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <MX_USART1_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MX_USART1_UART_Init+0x90>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020cc:	4811      	ldr	r0, [pc, #68]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020ce:	f005 f80e 	bl	80070ee <HAL_UART_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020d8:	f7ff f900 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020dc:	2100      	movs	r1, #0
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020e0:	f007 f83b 	bl	800915a <HAL_UARTEx_SetTxFifoThreshold>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020ea:	f7ff f8f7 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ee:	2100      	movs	r1, #0
 80020f0:	4808      	ldr	r0, [pc, #32]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020f2:	f007 f870 	bl	80091d6 <HAL_UARTEx_SetRxFifoThreshold>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f7ff f8ee 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_USART1_UART_Init+0x90>)
 8002102:	f006 ffef 	bl	80090e4 <HAL_UARTEx_EnableFifoMode>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800210c:	f7ff f8e6 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20001984 	.word	0x20001984
 8002118:	40013800 	.word	0x40013800

0800211c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b096      	sub	sp, #88	; 0x58
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2238      	movs	r2, #56	; 0x38
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f019 fad3 	bl	801b6e8 <memset>
  if(uartHandle->Instance==USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_UART_MspInit+0xe8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d156      	bne.n	80021fa <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800214c:	2301      	movs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002150:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002154:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fe54 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002166:	f7ff f8b9 	bl	80012dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800216e:	f7ff ff5f 	bl	8002030 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2002      	movs	r0, #2
 8002174:	f7ff ff44 	bl	8002000 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002188:	2307      	movs	r3, #7
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002190:	4619      	mov	r1, r3
 8002192:	481d      	ldr	r0, [pc, #116]	; (8002208 <HAL_UART_MspInit+0xec>)
 8002194:	f002 f936 	bl	8004404 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_UART_MspInit+0xf0>)
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_UART_MspInit+0xf4>)
 800219c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021a0:	2212      	movs	r2, #18
 80021a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021a6:	2210      	movs	r2, #16
 80021a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021ce:	480f      	ldr	r0, [pc, #60]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021d0:	f001 fd02 	bl	8003bd8 <HAL_DMA_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80021da:	f7ff f87f 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021e2:	679a      	str	r2, [r3, #120]	; 0x78
 80021e4:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2102      	movs	r1, #2
 80021ee:	2024      	movs	r0, #36	; 0x24
 80021f0:	f001 fcbb 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f4:	2024      	movs	r0, #36	; 0x24
 80021f6:	f001 fcd2 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3758      	adds	r7, #88	; 0x58
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40013800 	.word	0x40013800
 8002208:	48000400 	.word	0x48000400
 800220c:	20001924 	.word	0x20001924
 8002210:	40020008 	.word	0x40020008

08002214 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_UART_MspDeInit+0x3c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10f      	bne.n	8002246 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002226:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800222a:	f7ff ff19 	bl	8002060 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800222e:	21c0      	movs	r1, #192	; 0xc0
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <HAL_UART_MspDeInit+0x40>)
 8002232:	f002 fa47 	bl	80046c4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800223a:	4618      	mov	r0, r3
 800223c:	f001 fd74 	bl	8003d28 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002240:	2024      	movs	r0, #36	; 0x24
 8002242:	f001 fcba 	bl	8003bba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40013800 	.word	0x40013800
 8002254:	48000400 	.word	0x48000400

08002258 <LL_APB2_GRP1_ForceReset>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <LL_APB2_GRP1_ReleaseReset>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	43db      	mvns	r3, r3
 800228c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002290:	4013      	ands	r3, r2
 8002292:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
	...

080022a0 <LL_EXTI_EnableIT_0_31>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80022aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022ae:	4905      	ldr	r1, [pc, #20]	; (80022c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	58000800 	.word	0x58000800

080022c8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <vcom_Init+0x28>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80022d6:	f7fe ff75 	bl	80011c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80022da:	f7ff fed3 	bl	8002084 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80022de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80022e2:	f7ff ffdd 	bl	80022a0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80022e6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000158 	.word	0x20000158

080022f4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80022f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022fc:	f7ff ffac 	bl	8002258 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002304:	f7ff ffb9 	bl	800227a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <vcom_DeInit+0x28>)
 800230a:	f7ff ff83 	bl	8002214 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800230e:	200f      	movs	r0, #15
 8002310:	f001 fc53 	bl	8003bba <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002314:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20001984 	.word	0x20001984

08002320 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	461a      	mov	r2, r3
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <vcom_Trace_DMA+0x24>)
 8002334:	f004 ff82 	bl	800723c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002338:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20001984 	.word	0x20001984

08002348 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <vcom_ReceiveInit+0x70>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002356:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800235a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800235c:	f107 0308 	add.w	r3, r7, #8
 8002360:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002364:	4815      	ldr	r0, [pc, #84]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002366:	f006 fe30 	bl	8008fca <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800236a:	bf00      	nop
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <vcom_ReceiveInit+0x74>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d0f7      	beq.n	800236c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800237c:	bf00      	nop
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238c:	d1f7      	bne.n	800237e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800239c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <vcom_ReceiveInit+0x74>)
 80023a0:	f006 fe6e 	bl	8009080 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80023a4:	2201      	movs	r2, #1
 80023a6:	4906      	ldr	r1, [pc, #24]	; (80023c0 <vcom_ReceiveInit+0x78>)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <vcom_ReceiveInit+0x74>)
 80023aa:	f004 fef1 	bl	8007190 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80023ae:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000015c 	.word	0x2000015c
 80023bc:	20001984 	.word	0x20001984
 80023c0:	20001a14 	.word	0x20001a14

080023c4 <vcom_Resume>:

void vcom_Resume(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c8:	4808      	ldr	r0, [pc, #32]	; (80023ec <vcom_Resume+0x28>)
 80023ca:	f004 fe90 	bl	80070ee <HAL_UART_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80023d4:	f7fe ff82 	bl	80012dc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <vcom_Resume+0x2c>)
 80023da:	f001 fbfd 	bl	8003bd8 <HAL_DMA_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80023e4:	f7fe ff7a 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20001984 	.word	0x20001984
 80023f0:	20001924 	.word	0x20001924

080023f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_UART_TxCpltCallback+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2000      	movs	r0, #0
 8002402:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000158 	.word	0x20000158

08002410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_UART_RxCpltCallback+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_UART_RxCpltCallback+0x26>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_UART_RxCpltCallback+0x38>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <HAL_UART_RxCpltCallback+0x3c>)
 8002434:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002436:	2201      	movs	r2, #1
 8002438:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_UART_RxCpltCallback+0x3c>)
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f004 fea8 	bl	8007190 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000015c 	.word	0x2000015c
 800244c:	20001a14 	.word	0x20001a14

08002450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002452:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002454:	f7ff fba5 	bl	8001ba2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <LoopForever+0x6>)
  ldr r1, =_edata
 800245a:	490d      	ldr	r1, [pc, #52]	; (8002490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <LoopForever+0xe>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002470:	4c0a      	ldr	r4, [pc, #40]	; (800249c <LoopForever+0x16>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800247e:	f019 f90f 	bl	801b6a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002482:	f7fe fec6 	bl	8001212 <main>

08002486 <LoopForever>:

LoopForever:
    b LoopForever
 8002486:	e7fe      	b.n	8002486 <LoopForever>
  ldr   r0, =_estack
 8002488:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002494:	0801c624 	.word	0x0801c624
  ldr r2, =_sbss
 8002498:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 800249c:	20001acc 	.word	0x20001acc

080024a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>

080024a2 <LL_AHB2_GRP1_EnableClock>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <BSP_LED_Init+0x80>)
 80024f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	e024      	b.n	800254c <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002502:	2002      	movs	r0, #2
 8002504:	f7ff ffcd 	bl	80024a2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <BSP_LED_Init+0x80>)
 800250c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002510:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <BSP_LED_Init+0x84>)
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f001 ff69 	bl	8004404 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <BSP_LED_Init+0x84>)
 8002536:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a05      	ldr	r2, [pc, #20]	; (8002554 <BSP_LED_Init+0x80>)
 800253e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002542:	2200      	movs	r2, #0
 8002544:	4619      	mov	r1, r3
 8002546:	f002 f98b 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	0801c0b8 	.word	0x0801c0b8
 8002558:	20000004 	.word	0x20000004

0800255c <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a0c      	ldr	r2, [pc, #48]	; (800259c <BSP_LED_On+0x40>)
 800256a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002576:	2300      	movs	r3, #0
 8002578:	e00c      	b.n	8002594 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <BSP_LED_On+0x44>)
 800257e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4a05      	ldr	r2, [pc, #20]	; (800259c <BSP_LED_On+0x40>)
 8002586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800258a:	2200      	movs	r2, #0
 800258c:	4619      	mov	r1, r3
 800258e:	f002 f967 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	0801c0b8 	.word	0x0801c0b8
 80025a0:	20000004 	.word	0x20000004

080025a4 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <BSP_LED_Off+0x40>)
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	e00c      	b.n	80025dc <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <BSP_LED_Off+0x44>)
 80025c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <BSP_LED_Off+0x40>)
 80025ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4619      	mov	r1, r3
 80025d6:	f002 f943 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	0801c0b8 	.word	0x0801c0b8
 80025e8:	20000004 	.word	0x20000004

080025ec <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <BSP_LED_Toggle+0x40>)
 80025fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	e00c      	b.n	8002624 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <BSP_LED_Toggle+0x44>)
 800260e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4905      	ldr	r1, [pc, #20]	; (800262c <BSP_LED_Toggle+0x40>)
 8002616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f002 f936 	bl	800488e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	0801c0b8 	.word	0x0801c0b8
 8002630:	20000004 	.word	0x20000004

08002634 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4a30      	ldr	r2, [pc, #192]	; (8002718 <BSP_PB_Init+0xe4>)
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002660:	2300      	movs	r3, #0
 8002662:	e055      	b.n	8002710 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <BSP_PB_Init+0x3c>
 800266a:	2002      	movs	r0, #2
 800266c:	f7ff ff19 	bl	80024a2 <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4a2a      	ldr	r2, [pc, #168]	; (800271c <BSP_PB_Init+0xe8>)
 8002674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002678:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <BSP_PB_Init+0xec>)
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	f107 020c 	add.w	r2, r7, #12
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f001 feb2 	bl	8004404 <HAL_GPIO_Init>
 80026a0:	e035      	b.n	800270e <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80026a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026a6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <BSP_PB_Init+0xec>)
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	f107 020c 	add.w	r2, r7, #12
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fea4 	bl	8004404 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <BSP_PB_Init+0xf0>)
 80026c2:	441a      	add	r2, r3
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4918      	ldr	r1, [pc, #96]	; (8002728 <BSP_PB_Init+0xf4>)
 80026c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f001 fe85 	bl	80043de <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <BSP_PB_Init+0xf0>)
 80026da:	1898      	adds	r0, r3, r2
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <BSP_PB_Init+0xe4>)
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	461a      	mov	r2, r3
 80026e6:	2100      	movs	r1, #0
 80026e8:	f001 fe60 	bl	80043ac <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <BSP_PB_Init+0xf8>)
 80026f0:	56d0      	ldrsb	r0, [r2, r3]
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <BSP_PB_Init+0xfc>)
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	f001 fa34 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <BSP_PB_Init+0xf8>)
 8002706:	56d3      	ldrsb	r3, [r2, r3]
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fa48 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000001c 	.word	0x2000001c
 800271c:	0801c0c0 	.word	0x0801c0c0
 8002720:	20000010 	.word	0x20000010
 8002724:	20001a18 	.word	0x20001a18
 8002728:	0801c0cc 	.word	0x0801c0cc
 800272c:	0801c0c8 	.word	0x0801c0c8
 8002730:	20000028 	.word	0x20000028

08002734 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff fff1 	bl	8002734 <BSP_PB_Callback>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}

08002756 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800276a:	2310      	movs	r3, #16
 800276c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f001 fe3f 	bl	8004404 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002786:	2320      	movs	r3, #32
 8002788:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002792:	f001 fe37 	bl	8004404 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002796:	2200      	movs	r2, #0
 8002798:	2120      	movs	r1, #32
 800279a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279e:	f002 f85f 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80027a2:	2200      	movs	r2, #0
 80027a4:	2110      	movs	r1, #16
 80027a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027aa:	f002 f859 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d83f      	bhi.n	8002848 <BSP_RADIO_ConfigRFSwitch+0x90>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027fb 	.word	0x080027fb
 80027d8:	08002815 	.word	0x08002815
 80027dc:	0800282f 	.word	0x0800282f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2110      	movs	r1, #16
 80027e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e8:	f002 f83a 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2120      	movs	r1, #32
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f4:	f002 f834 	bl	8004860 <HAL_GPIO_WritePin>
      break;      
 80027f8:	e027      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80027fa:	2201      	movs	r2, #1
 80027fc:	2110      	movs	r1, #16
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f002 f82d 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002806:	2200      	movs	r2, #0
 8002808:	2120      	movs	r1, #32
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f002 f827 	bl	8004860 <HAL_GPIO_WritePin>
      break;
 8002812:	e01a      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002814:	2201      	movs	r2, #1
 8002816:	2110      	movs	r1, #16
 8002818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281c:	f002 f820 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002820:	2201      	movs	r2, #1
 8002822:	2120      	movs	r1, #32
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f002 f81a 	bl	8004860 <HAL_GPIO_WritePin>
      break;
 800282c:	e00d      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800282e:	2200      	movs	r2, #0
 8002830:	2110      	movs	r1, #16
 8002832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002836:	f002 f813 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800283a:	2201      	movs	r2, #1
 800283c:	2120      	movs	r1, #32
 800283e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002842:	f002 f80d 	bl	8004860 <HAL_GPIO_WritePin>
      break;
 8002846:	e000      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002848:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002858:	2302      	movs	r3, #2
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6053      	str	r3, [r2, #4]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	e0042000 	.word	0xe0042000

0800289c <LL_DBGMCU_DisableDBGSleepMode>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6053      	str	r3, [r2, #4]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	e0042000 	.word	0xe0042000

080028b8 <LL_DBGMCU_EnableDBGStopMode>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	6053      	str	r3, [r2, #4]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	e0042000 	.word	0xe0042000

080028d4 <LL_DBGMCU_DisableDBGStopMode>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80028de:	f023 0302 	bic.w	r3, r3, #2
 80028e2:	6053      	str	r3, [r2, #4]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	e0042000 	.word	0xe0042000

080028f0 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a03      	ldr	r2, [pc, #12]	; (8002908 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6053      	str	r3, [r2, #4]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e0042000 	.word	0xe0042000

0800290c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6053      	str	r3, [r2, #4]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	e0042000 	.word	0xe0042000

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002932:	2003      	movs	r0, #3
 8002934:	f001 f90e 	bl	8003b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002938:	f003 f884 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 800293c:	4603      	mov	r3, r0
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_Init+0x3c>)
 8002940:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002942:	200f      	movs	r0, #15
 8002944:	f7fe fff0 	bl	8001928 <HAL_InitTick>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	e001      	b.n	8002958 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002954:	f7fe fdb9 	bl	80014ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002958:	79fb      	ldrb	r3, [r7, #7]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_SuspendTick+0x18>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a03      	ldr	r2, [pc, #12]	; (8002980 <HAL_SuspendTick+0x18>)
 8002972:	f023 0302 	bic.w	r3, r3, #2
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_ResumeTick+0x18>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <HAL_ResumeTick+0x18>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <HAL_GetUIDw0+0x10>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	1fff7590 	.word	0x1fff7590

080029b4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_GetUIDw1+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	1fff7594 	.word	0x1fff7594

080029c8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_GetUIDw2+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	1fff7598 	.word	0x1fff7598

080029dc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80029e0:	f7ff ff4e 	bl	8002880 <LL_DBGMCU_EnableDBGSleepMode>
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80029ec:	f7ff ff56 	bl	800289c <LL_DBGMCU_DisableDBGSleepMode>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80029f8:	f7ff ff5e 	bl	80028b8 <LL_DBGMCU_EnableDBGStopMode>
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a04:	f7ff ff66 	bl	80028d4 <LL_DBGMCU_DisableDBGStopMode>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002a10:	f7ff ff6e 	bl	80028f0 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a1c:	f7ff ff76 	bl	800290c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2107      	movs	r1, #7
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	210f      	movs	r1, #15
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 010f 	and.w	r1, r3, #15
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	0219      	lsls	r1, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b96:	f023 0317 	bic.w	r3, r3, #23
 8002b9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bbc:	f023 0317 	bic.w	r3, r3, #23
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6093      	str	r3, [r2, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	f023 0317 	bic.w	r3, r3, #23
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2a:	f023 0317 	bic.w	r3, r3, #23
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_ADC_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_ADC_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_IsDisableOngoing+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_IsDisableOngoing+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c98:	f023 0317 	bic.w	r3, r3, #23
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cbe:	f023 0317 	bic.w	r3, r3, #23
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1ae      	b.n	8003078 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fe f909 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff44 	bl	8002bce <LL_ADC_IsInternalRegulatorEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d115      	bne.n	8002d78 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff18 	bl	8002b86 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d56:	4b9b      	ldr	r3, [pc, #620]	; (8002fc4 <HAL_ADC_Init+0x2cc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	4a9a      	ldr	r2, [pc, #616]	; (8002fc8 <HAL_ADC_Init+0x2d0>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	3301      	adds	r3, #1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d6a:	e002      	b.n	8002d72 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f9      	bne.n	8002d6c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff26 	bl	8002bce <LL_ADC_IsInternalRegulatorEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff93 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8002dae:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 8154 	bne.w	8003066 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 8150 	bne.w	8003066 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff30 	bl	8002c40 <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d14f      	bne.n	8002e86 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f023 0118 	bic.w	r1, r3, #24
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d111      	bne.n	8002e3e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e26:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002e2c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002e32:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_ADC_Init+0x2d4>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	6979      	ldr	r1, [r7, #20]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e5a:	d014      	beq.n	8002e86 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d00f      	beq.n	8002e86 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e6e:	d00a      	beq.n	8002e86 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_ADC_Init+0x2d8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e80:	4953      	ldr	r1, [pc, #332]	; (8002fd0 <HAL_ADC_Init+0x2d8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7e1b      	ldrb	r3, [r3, #24]
 8002e8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7e5b      	ldrb	r3, [r3, #25]
 8002e90:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e92:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7e9b      	ldrb	r3, [r3, #26]
 8002e98:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e9a:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_ADC_Init+0x1b2>
 8002ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_Init+0x1b4>
 8002eaa:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002eac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002eb2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da04      	bge.n	8002ec6 <HAL_ADC_Init+0x1ce>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	e001      	b.n	8002eca <HAL_ADC_Init+0x1d2>
 8002ec6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002eca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ed2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ed4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d114      	bne.n	8002f10 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7e9b      	ldrb	r3, [r3, #26]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e00b      	b.n	8002f10 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f24:	4313      	orrs	r3, r2
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002f36:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_ADC_Init+0x2dc>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	461a      	mov	r2, r3
 8002f62:	2100      	movs	r1, #0
 8002f64:	f7ff fd7d 	bl	8002a62 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	461a      	mov	r2, r3
 8002f72:	4919      	ldr	r1, [pc, #100]	; (8002fd8 <HAL_ADC_Init+0x2e0>)
 8002f74:	f7ff fd75 	bl	8002a62 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f062 020f 	orn	r2, r2, #15
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e044      	b.n	800301c <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9a:	d13f      	bne.n	800301c <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e00c      	b.n	8002fbc <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d012      	beq.n	8002fdc <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d9ef      	bls.n	8002fa2 <HAL_ADC_Init+0x2aa>
 8002fc2:	e00c      	b.n	8002fde <HAL_ADC_Init+0x2e6>
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	053e2d63 	.word	0x053e2d63
 8002fcc:	1ffffc02 	.word	0x1ffffc02
 8002fd0:	40012708 	.word	0x40012708
 8002fd4:	dffffc02 	.word	0xdffffc02
 8002fd8:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002fdc:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f062 020f 	orn	r2, r2, #15
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff4:	e012      	b.n	800301c <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	3b01      	subs	r3, #1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f003 031c 	and.w	r3, r3, #28
 8003008:	f06f 020f 	mvn.w	r2, #15
 800300c:	fa02 f103 	lsl.w	r1, r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_ADC_Init+0x388>)
 8003024:	4013      	ands	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	d10b      	bne.n	8003044 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003042:	e018      	b.n	8003076 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f023 0312 	bic.w	r3, r3, #18
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003064:	e007      	b.n	8003076 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003076:	7ffb      	ldrb	r3, [r7, #31]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	833fffe7 	.word	0x833fffe7

08003084 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06a      	b.n	800316c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f043 0202 	orr.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fabe 	bl	8003624 <ADC_ConversionStop>
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fb82 	bl	80037bc <ADC_Disable>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd6d 	bl	8002bac <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f240 329f 	movw	r2, #927	; 0x39f
 80030ee:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68d9      	ldr	r1, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_ADC_DeInit+0xf0>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800310e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0207 	bic.w	r2, r2, #7
 800311e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800312e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_ADC_DeInit+0xf4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_ADC_DeInit+0xf4>)
 8003144:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003148:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd ff0c 	bl	8000f68 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	833e0200 	.word	0x833e0200
 8003178:	40012708 	.word	0x40012708

0800317c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fda3 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d132      	bne.n	80031fa <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Start+0x26>
 800319e:	2302      	movs	r3, #2
 80031a0:	e02e      	b.n	8003200 <HAL_ADC_Start+0x84>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa80 	bl	80036b0 <ADC_Enable>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11a      	bne.n	80031f0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	221c      	movs	r2, #28
 80031da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd4d 	bl	8002c88 <LL_ADC_REG_StartConversion>
 80031ee:	e006      	b.n	80031fe <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80031f8:	e001      	b.n	80031fe <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_ADC_Stop+0x16>
 800321a:	2302      	movs	r3, #2
 800321c:	e022      	b.n	8003264 <HAL_ADC_Stop+0x5c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9fc 	bl	8003624 <ADC_ConversionStop>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d111      	bne.n	800325a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fac0 	bl	80037bc <ADC_Disable>
 800323c:	4603      	mov	r3, r0
 800323e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d102      	bne.n	8003284 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800327e:	2308      	movs	r3, #8
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e010      	b.n	80032a6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e077      	b.n	8003392 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032a2:	2304      	movs	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032a6:	f7fe fb49 	bl	800193c <HAL_GetTick>
 80032aa:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032ac:	e021      	b.n	80032f2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d01d      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032b6:	f7fe fb41 	bl	800193c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <HAL_ADC_PollForConversion+0x60>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d112      	bne.n	80032f2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04f      	b.n	8003392 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0d6      	beq.n	80032ae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fbc4 	bl	8002a9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d031      	beq.n	8003380 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7e9b      	ldrb	r3, [r3, #26]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d12d      	bne.n	8003380 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b08      	cmp	r3, #8
 8003330:	d126      	bne.n	8003380 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fccc 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d112      	bne.n	8003368 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 020c 	bic.w	r2, r2, #12
 8003350:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	659a      	str	r2, [r3, #88]	; 0x58
 8003366:	e00b      	b.n	8003380 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	220c      	movs	r2, #12
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x28>
 80033d8:	2302      	movs	r3, #2
 80033da:	e110      	b.n	80035fe <HAL_ADC_ConfigChannel+0x24a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fc73 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 80f7 	bne.w	80035e4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f000 80b1 	beq.w	8003562 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003408:	d004      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800340e:	4a7e      	ldr	r2, [pc, #504]	; (8003608 <HAL_ADC_ConfigChannel+0x254>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f7ff fb70 	bl	8002b04 <LL_ADC_REG_SetSequencerChAdd>
 8003424:	e041      	b.n	80034aa <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	210f      	movs	r1, #15
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_ADC_ConfigChannel+0xa0>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	e011      	b.n	8003478 <HAL_ADC_ConfigChannel+0xc4>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	6849      	ldr	r1, [r1, #4]
 800347c:	f001 011f 	and.w	r1, r1, #31
 8003480:	408b      	lsls	r3, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d808      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fb0c 	bl	8002ac2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7ff fb49 	bl	8002b4e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f280 8097 	bge.w	80035f4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c6:	4851      	ldr	r0, [pc, #324]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80034c8:	f7ff fabe 	bl	8002a48 <LL_ADC_GetCommonPathInternalCh>
 80034cc:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_ADC_ConfigChannel+0x25c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d120      	bne.n	800351a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11b      	bne.n	800351a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e8:	4619      	mov	r1, r3
 80034ea:	4848      	ldr	r0, [pc, #288]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80034ec:	f7ff fa9a 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <HAL_ADC_ConfigChannel+0x260>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_ADC_ConfigChannel+0x264>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800350a:	e002      	b.n	8003512 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3b01      	subs	r3, #1
 8003510:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f9      	bne.n	800350c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003518:	e06c      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <HAL_ADC_ConfigChannel+0x268>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d10c      	bne.n	800353e <HAL_ADC_ConfigChannel+0x18a>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003534:	4619      	mov	r1, r3
 8003536:	4835      	ldr	r0, [pc, #212]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 8003538:	f7ff fa74 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 800353c:	e05a      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a37      	ldr	r2, [pc, #220]	; (8003620 <HAL_ADC_ConfigChannel+0x26c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d155      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	d150      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003558:	4619      	mov	r1, r3
 800355a:	482c      	ldr	r0, [pc, #176]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 800355c:	f7ff fa62 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 8003560:	e048      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356a:	d004      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_ADC_ConfigChannel+0x254>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d107      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f7ff fad1 	bl	8002b28 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	da32      	bge.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800358e:	481f      	ldr	r0, [pc, #124]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 8003590:	f7ff fa5a 	bl	8002a48 <LL_ADC_GetCommonPathInternalCh>
 8003594:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_ADC_ConfigChannel+0x25c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d107      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035a6:	4619      	mov	r1, r3
 80035a8:	4818      	ldr	r0, [pc, #96]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035aa:	f7ff fa3b 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 80035ae:	e021      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_ADC_ConfigChannel+0x268>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d107      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c0:	4619      	mov	r1, r3
 80035c2:	4812      	ldr	r0, [pc, #72]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035c4:	f7ff fa2e 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 80035c8:	e014      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_ADC_ConfigChannel+0x26c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10f      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035da:	4619      	mov	r1, r3
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035de:	f7ff fa21 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 80035e2:	e007      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80035fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	80000004 	.word	0x80000004
 800360c:	40012708 	.word	0x40012708
 8003610:	b0001000 	.word	0xb0001000
 8003614:	20000000 	.word	0x20000000
 8003618:	053e2d63 	.word	0x053e2d63
 800361c:	b8004000 	.word	0xb8004000
 8003620:	b4002000 	.word	0xb4002000

08003624 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fb4f 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d033      	beq.n	80036a4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fb0f 	bl	8002c64 <LL_ADC_IsDisableOngoing>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fb2c 	bl	8002cae <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003656:	f7fe f971 	bl	800193c <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800365c:	e01b      	b.n	8003696 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800365e:	f7fe f96d 	bl	800193c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d914      	bls.n	8003696 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e007      	b.n	80036a6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1dc      	bne.n	800365e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fabd 	bl	8002c40 <LL_ADC_IsEnabled>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d169      	bne.n	80037a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <ADC_Enable+0xfc>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f043 0210 	orr.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f043 0201 	orr.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e055      	b.n	80037a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fa7a 	bl	8002bf4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003700:	482b      	ldr	r0, [pc, #172]	; (80037b0 <ADC_Enable+0x100>)
 8003702:	f7ff f9a1 	bl	8002a48 <LL_ADC_GetCommonPathInternalCh>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00f      	beq.n	8003730 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <ADC_Enable+0x104>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	4a28      	ldr	r2, [pc, #160]	; (80037b8 <ADC_Enable+0x108>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003722:	e002      	b.n	800372a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e5b      	ldrb	r3, [r3, #25]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d033      	beq.n	80037a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003738:	f7fe f900 	bl	800193c <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800373e:	e028      	b.n	8003792 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fa7b 	bl	8002c40 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fa4d 	bl	8002bf4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800375a:	f7fe f8ef 	bl	800193c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d914      	bls.n	8003792 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d00d      	beq.n	8003792 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f043 0210 	orr.w	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e007      	b.n	80037a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d1cf      	bne.n	8003740 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	80000017 	.word	0x80000017
 80037b0:	40012708 	.word	0x40012708
 80037b4:	20000000 	.word	0x20000000
 80037b8:	053e2d63 	.word	0x053e2d63

080037bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fa4b 	bl	8002c64 <LL_ADC_IsDisableOngoing>
 80037ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fa33 	bl	8002c40 <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d047      	beq.n	8003870 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d144      	bne.n	8003870 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0305 	and.w	r3, r3, #5
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10c      	bne.n	800380e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fa0e 	bl	8002c1a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2203      	movs	r2, #3
 8003804:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003806:	f7fe f899 	bl	800193c <HAL_GetTick>
 800380a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800380c:	e029      	b.n	8003862 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e023      	b.n	8003872 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800382a:	f7fe f887 	bl	800193c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d914      	bls.n	8003862 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1dc      	bne.n	800382a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <LL_ADC_IsEnabled>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <LL_ADC_IsEnabled+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_ADC_IsEnabled+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <LL_ADC_IsCalibrationOnGoing>:
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b2:	d101      	bne.n	80038b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADCEx_Calibration_Start+0x1a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e068      	b.n	80039b0 <HAL_ADCEx_Calibration_Start+0xec>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff68 	bl	80037bc <ADC_Disable>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ffc0 	bl	800387a <LL_ADC_IsEnabled>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d14c      	bne.n	800399a <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003908:	f043 0202 	orr.w	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0203 	bic.w	r2, r2, #3
 800392a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800393a:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800393c:	e014      	b.n	8003968 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800394a:	d30d      	bcc.n	8003968 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f023 0312 	bic.w	r3, r3, #18
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e023      	b.n	80039b0 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff96 	bl	800389e <LL_ADC_IsCalibrationOnGoing>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e2      	bne.n	800393e <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f023 0303 	bic.w	r3, r3, #3
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	659a      	str	r2, [r3, #88]	; 0x58
 8003998:	e005      	b.n	80039a6 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <__NVIC_SetPriorityGrouping+0x44>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d4:	4013      	ands	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <__NVIC_SetPriorityGrouping+0x44>)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	60d3      	str	r3, [r2, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <__NVIC_GetPriorityGrouping+0x18>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	f003 0307 	and.w	r3, r3, #7
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	db0b      	blt.n	8003a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	4906      	ldr	r1, [pc, #24]	; (8003a50 <__NVIC_EnableIRQ+0x34>)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db12      	blt.n	8003a8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <__NVIC_DisableIRQ+0x44>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2001      	movs	r0, #1
 8003a76:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7a:	3320      	adds	r3, #32
 8003a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a80:	f3bf 8f4f 	dsb	sy
}
 8003a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a86:	f3bf 8f6f 	isb	sy
}
 8003a8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff2b 	bl	80039b8 <__NVIC_SetPriorityGrouping>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b78:	f7ff ff42 	bl	8003a00 <__NVIC_GetPriorityGrouping>
 8003b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ffb4 	bl	8003af0 <NVIC_EncodePriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff83 	bl	8003a9c <__NVIC_SetPriority>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff35 	bl	8003a1c <__NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff43 	bl	8003a54 <__NVIC_DisableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e08e      	b.n	8003d08 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_DMA_Init+0x138>)
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d80f      	bhi.n	8003c16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b45      	ldr	r3, [pc, #276]	; (8003d14 <HAL_DMA_Init+0x13c>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a45      	ldr	r2, [pc, #276]	; (8003d18 <HAL_DMA_Init+0x140>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	009a      	lsls	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a42      	ldr	r2, [pc, #264]	; (8003d1c <HAL_DMA_Init+0x144>)
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
 8003c14:	e00e      	b.n	8003c34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_DMA_Init+0x148>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <HAL_DMA_Init+0x140>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a3c      	ldr	r2, [pc, #240]	; (8003d24 <HAL_DMA_Init+0x14c>)
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fb24 	bl	80042d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c94:	d102      	bne.n	8003c9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cb2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_DMA_Init+0x106>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d80c      	bhi.n	8003cde <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb4d 	bl	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	e008      	b.n	8003cf0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40020407 	.word	0x40020407
 8003d14:	bffdfff8 	.word	0xbffdfff8
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	bffdfbf8 	.word	0xbffdfbf8
 8003d24:	40020400 	.word	0x40020400

08003d28 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07b      	b.n	8003e32 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_DMA_DeInit+0x114>)
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d80f      	bhi.n	8003d76 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_DMA_DeInit+0x118>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_DMA_DeInit+0x11c>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	009a      	lsls	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <HAL_DMA_DeInit+0x120>)
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
 8003d74:	e00e      	b.n	8003d94 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_DMA_DeInit+0x124>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a30      	ldr	r2, [pc, #192]	; (8003e44 <HAL_DMA_DeInit+0x11c>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <HAL_DMA_DeInit+0x128>)
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f003 021c 	and.w	r2, r3, #28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dae:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa8f 	bl	80042d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00f      	beq.n	8003df0 <HAL_DMA_DeInit+0xc8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d80b      	bhi.n	8003df0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fac3 	bl	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dee:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40020407 	.word	0x40020407
 8003e40:	bffdfff8 	.word	0xbffdfff8
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	bffdfbf8 	.word	0xbffdfbf8
 8003e50:	40020400 	.word	0x40020400

08003e54 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_DMA_Start_IT+0x20>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e069      	b.n	8003f48 <HAL_DMA_Start_IT+0xf4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d155      	bne.n	8003f34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f9d3 	bl	8004258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 020e 	orr.w	r2, r2, #14
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e00f      	b.n	8003eec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 020a 	orr.w	r2, r2, #10
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e008      	b.n	8003f46 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e04f      	b.n	8004002 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d008      	beq.n	8003f80 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2204      	movs	r2, #4
 8003f72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e040      	b.n	8004002 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 020e 	bic.w	r2, r2, #14
 8003f8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f003 021c 	and.w	r2, r3, #28
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d005      	beq.n	8004030 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2204      	movs	r2, #4
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e047      	b.n	80040c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 020e 	bic.w	r2, r2, #14
 800403e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 021c 	and.w	r2, r3, #28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800407c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004094:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800409e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
    }
  }
  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	f003 031c 	and.w	r3, r3, #28
 80040ec:	2204      	movs	r2, #4
 80040ee:	409a      	lsls	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_IRQHandler+0x7c>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d022      	beq.n	8004148 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f003 021c 	and.w	r2, r3, #28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2104      	movs	r1, #4
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8081 	beq.w	8004240 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004146:	e07b      	b.n	8004240 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f003 031c 	and.w	r3, r3, #28
 8004150:	2202      	movs	r2, #2
 8004152:	409a      	lsls	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d03d      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x10c>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d038      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 020a 	bic.w	r2, r2, #10
 8004182:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_DMA_IRQHandler+0x180>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d909      	bls.n	80041ac <HAL_DMA_IRQHandler+0xe0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f003 031c 	and.w	r3, r3, #28
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_DMA_IRQHandler+0x184>)
 80041a2:	2102      	movs	r1, #2
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	6053      	str	r3, [r2, #4]
 80041aa:	e008      	b.n	80041be <HAL_DMA_IRQHandler+0xf2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 031c 	and.w	r3, r3, #28
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_DMA_IRQHandler+0x188>)
 80041b6:	2102      	movs	r1, #2
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d038      	beq.n	8004240 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80041d6:	e033      	b.n	8004240 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 031c 	and.w	r3, r3, #28
 80041e0:	2208      	movs	r2, #8
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02a      	beq.n	8004242 <HAL_DMA_IRQHandler+0x176>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d025      	beq.n	8004242 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 020e 	bic.w	r2, r2, #14
 8004204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	f003 021c 	and.w	r2, r3, #28
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f202 	lsl.w	r2, r1, r2
 8004218:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004240:	bf00      	nop
 8004242:	bf00      	nop
}
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40020080 	.word	0x40020080
 8004250:	40020400 	.word	0x40020400
 8004254:	40020000 	.word	0x40020000

08004258 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 021c 	and.w	r2, r3, #28
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d108      	bne.n	80042b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042b6:	e007      	b.n	80042c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d813      	bhi.n	8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3b08      	subs	r3, #8
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e011      	b.n	8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	009a      	lsls	r2, r3, #2
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800431a:	4413      	add	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3b08      	subs	r3, #8
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	3307      	adds	r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40020407 	.word	0x40020407
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	4002081c 	.word	0x4002081c
 8004360:	40020880 	.word	0x40020880

08004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004374:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004388:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3b01      	subs	r3, #1
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2201      	movs	r2, #1
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	1000823f 	.word	0x1000823f
 80043a8:	40020940 	.word	0x40020940

080043ac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	460b      	mov	r3, r1
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80043be:	7afb      	ldrb	r3, [r7, #11]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	bf00      	nop
  }

  return status;
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e003      	b.n	80043fa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	e140      	b.n	8004696 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8132 	beq.w	8004690 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <HAL_GPIO_Init+0x40>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d123      	bne.n	8004536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	08da      	lsrs	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3208      	adds	r2, #8
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	6939      	ldr	r1, [r7, #16]
 8004532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 808c 	beq.w	8004690 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004578:	4a4e      	ldr	r2, [pc, #312]	; (80046b4 <HAL_GPIO_Init+0x2b0>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	2207      	movs	r2, #7
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045a2:	d00d      	beq.n	80045c0 <HAL_GPIO_Init+0x1bc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a44      	ldr	r2, [pc, #272]	; (80046b8 <HAL_GPIO_Init+0x2b4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <HAL_GPIO_Init+0x1b8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a43      	ldr	r2, [pc, #268]	; (80046bc <HAL_GPIO_Init+0x2b8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_GPIO_Init+0x1b4>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e004      	b.n	80045c2 <HAL_GPIO_Init+0x1be>
 80045b8:	2307      	movs	r3, #7
 80045ba:	e002      	b.n	80045c2 <HAL_GPIO_Init+0x1be>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_GPIO_Init+0x1be>
 80045c0:	2300      	movs	r3, #0
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	f002 0203 	and.w	r2, r2, #3
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	4093      	lsls	r3, r2
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045d2:	4938      	ldr	r1, [pc, #224]	; (80046b4 <HAL_GPIO_Init+0x2b0>)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	3302      	adds	r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004606:	4a2e      	ldr	r2, [pc, #184]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004666:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800468a:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3301      	adds	r3, #1
 8004694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f aeb7 	bne.w	8004414 <HAL_GPIO_Init+0x10>
  }
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	48000400 	.word	0x48000400
 80046bc:	48000800 	.word	0x48000800
 80046c0:	58000800 	.word	0x58000800

080046c4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80046d2:	e0af      	b.n	8004834 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046d4:	2201      	movs	r2, #1
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	4013      	ands	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a2 	beq.w	800482e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80046ea:	4a59      	ldr	r2, [pc, #356]	; (8004850 <HAL_GPIO_DeInit+0x18c>)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	2207      	movs	r2, #7
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004712:	d00d      	beq.n	8004730 <HAL_GPIO_DeInit+0x6c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a4f      	ldr	r2, [pc, #316]	; (8004854 <HAL_GPIO_DeInit+0x190>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <HAL_GPIO_DeInit+0x68>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_GPIO_DeInit+0x194>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_GPIO_DeInit+0x64>
 8004724:	2302      	movs	r3, #2
 8004726:	e004      	b.n	8004732 <HAL_GPIO_DeInit+0x6e>
 8004728:	2307      	movs	r3, #7
 800472a:	e002      	b.n	8004732 <HAL_GPIO_DeInit+0x6e>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_GPIO_DeInit+0x6e>
 8004730:	2300      	movs	r3, #0
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	f002 0203 	and.w	r2, r2, #3
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4093      	lsls	r3, r2
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d136      	bne.n	80047b0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004744:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	4943      	ldr	r1, [pc, #268]	; (800485c <HAL_GPIO_DeInit+0x198>)
 800474e:	4013      	ands	r3, r2
 8004750:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004756:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	43db      	mvns	r3, r3
 800475e:	493f      	ldr	r1, [pc, #252]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004760:	4013      	ands	r3, r2
 8004762:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	493b      	ldr	r1, [pc, #236]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004770:	4013      	ands	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43db      	mvns	r3, r3
 800477c:	4937      	ldr	r1, [pc, #220]	; (800485c <HAL_GPIO_DeInit+0x198>)
 800477e:	4013      	ands	r3, r2
 8004780:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	2207      	movs	r2, #7
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004792:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <HAL_GPIO_DeInit+0x18c>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	482b      	ldr	r0, [pc, #172]	; (8004850 <HAL_GPIO_DeInit+0x18c>)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	400a      	ands	r2, r1
 80047aa:	3302      	adds	r3, #2
 80047ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2103      	movs	r1, #3
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	08d2      	lsrs	r2, r2, #3
 80047e4:	4019      	ands	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2103      	movs	r1, #3
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	2101      	movs	r1, #1
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	2103      	movs	r1, #3
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	401a      	ands	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3301      	adds	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	f47f af49 	bne.w	80046d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	48000400 	.word	0x48000400
 8004858:	48000800 	.word	0x48000800
 800485c:	58000800 	.word	0x58000800

08004860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
 800486c:	4613      	mov	r3, r2
 800486e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004870:	787b      	ldrb	r3, [r7, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800487c:	e002      	b.n	8004884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	041a      	lsls	r2, r3, #16
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	400b      	ands	r3, r1
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	4618      	mov	r0, r3
 80048e0:	f004 fdee 	bl	80094c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58000800 	.word	0x58000800

080048f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	58000400 	.word	0x58000400

0800490c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d10d      	bne.n	8004948 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800492c:	f000 f83c 	bl	80049a8 <HAL_PWREx_DisableLowPowerRunMode>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004936:	e015      	b.n	8004964 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_PWR_EnterSLEEPMode+0x60>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004944:	f000 f822 	bl	800498c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_PWR_EnterSLEEPMode+0x64>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <HAL_PWR_EnterSLEEPMode+0x64>)
 800494e:	f023 0304 	bic.w	r3, r3, #4
 8004952:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800495a:	bf30      	wfi
 800495c:	e002      	b.n	8004964 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800495e:	bf40      	sev
    __WFE();
 8004960:	bf20      	wfe
    __WFE();
 8004962:	bf20      	wfe
  }
}
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	58000400 	.word	0x58000400
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_PWREx_GetVoltageRange+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	58000400 	.word	0x58000400

0800498c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a03      	ldr	r2, [pc, #12]	; (80049a4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499a:	6013      	str	r3, [r2, #0]
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	58000400 	.word	0x58000400

080049a8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80049ae:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2232      	movs	r2, #50	; 0x32
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80049ce:	e002      	b.n	80049d6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e2:	d102      	bne.n	80049ea <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f2      	bne.n	80049d0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f6:	d101      	bne.n	80049fc <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e000      	b.n	80049fe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	58000400 	.word	0x58000400
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	431bde83 	.word	0x431bde83

08004a14 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	4a0c      	ldr	r2, [pc, #48]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a40:	bf30      	wfi
 8004a42:	e002      	b.n	8004a4a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a44:	bf40      	sev
    __WFE();
 8004a46:	bf20      	wfe
    __WFE();
 8004a48:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6113      	str	r3, [r2, #16]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	58000400 	.word	0x58000400
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a78:	d101      	bne.n	8004a7e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	58000400 	.word	0x58000400

08004a8c <LL_RCC_HSE_EnableTcxo>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <LL_RCC_HSE_DisableTcxo>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d101      	bne.n	8004adc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_HSE_Enable>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_HSE_Disable>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_HSE_IsReady>:
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b30:	d101      	bne.n	8004b36 <LL_RCC_HSE_IsReady+0x18>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <LL_RCC_HSE_IsReady+0x1a>
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <LL_RCC_HSI_Enable>:
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <LL_RCC_HSI_Disable>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_HSI_IsReady>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d101      	bne.n	8004b90 <LL_RCC_HSI_IsReady+0x18>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <LL_RCC_HSI_IsReady+0x1a>
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_HSI_SetCalibTrimming>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	061b      	lsls	r3, r3, #24
 8004bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_LSE_IsReady>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d101      	bne.n	8004bda <LL_RCC_LSE_IsReady+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_RCC_LSE_IsReady+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_LSI_Enable>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_LSI_Disable>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_LSI_IsReady>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d101      	bne.n	8004c3c <LL_RCC_LSI_IsReady+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_RCC_LSI_IsReady+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_MSI_Enable>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6013      	str	r3, [r2, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_MSI_Disable>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_MSI_IsReady>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d101      	bne.n	8004c94 <LL_RCC_MSI_IsReady+0x16>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <LL_RCC_MSI_IsReady+0x18>
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d101      	bne.n	8004cb4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <LL_RCC_MSI_GetRange>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_MSI_SetCalibTrimming>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d06:	4313      	orrs	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_SetSysClkSource>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_GetSysClkSource>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <LL_RCC_SetAHBPrescaler>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <LL_RCC_SetAHB3Prescaler>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d86:	f023 020f 	bic.w	r2, r3, #15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <LL_RCC_SetAPB1Prescaler>:
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_SetAPB2Prescaler>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <LL_RCC_GetAHBPrescaler>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <LL_RCC_GetAHB3Prescaler>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <LL_RCC_GetAPB1Prescaler>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_GetAPB2Prescaler>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004e66:	b480      	push	{r7}
 8004e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e78:	6013      	str	r3, [r2, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e94:	d101      	bne.n	8004e9a <LL_RCC_PLL_IsReady+0x18>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <LL_RCC_PLL_IsReady+0x1a>
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f10:	d101      	bne.n	8004f16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d101      	bne.n	8004f3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f56:	d101      	bne.n	8004f5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f78:	d101      	bne.n	8004f7e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e38a      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	f7ff fece 	bl	8004d3a <LL_RCC_GetSysClkSource>
 8004f9e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa0:	f7ff ffa2 	bl	8004ee8 <LL_RCC_PLL_GetMainSource>
 8004fa4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80c9 	beq.w	8005146 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x3e>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d17b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d178      	bne.n	80050b8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fc6:	f7ff fe5a 	bl	8004c7e <LL_RCC_MSI_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_OscConfig+0x54>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e369      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x72>
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff8:	e006      	b.n	8005008 <HAL_RCC_OscConfig+0x80>
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005008:	4293      	cmp	r3, r2
 800500a:	d222      	bcs.n	8005052 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fd4f 	bl	8005ab4 <RCC_SetFlashLatencyFromMSIRange>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e347      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800502a:	f043 0308 	orr.w	r3, r3, #8
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fe4e 	bl	8004cec <LL_RCC_MSI_SetCalibTrimming>
 8005050:	e021      	b.n	8005096 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505c:	f043 0308 	orr.w	r3, r3, #8
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fe35 	bl	8004cec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fd14 	bl	8005ab4 <RCC_SetFlashLatencyFromMSIRange>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e30c      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005096:	f000 fcd5 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 800509a:	4603      	mov	r3, r0
 800509c:	4ab4      	ldr	r2, [pc, #720]	; (8005370 <HAL_RCC_OscConfig+0x3e8>)
 800509e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050a0:	4bb4      	ldr	r3, [pc, #720]	; (8005374 <HAL_RCC_OscConfig+0x3ec>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fc fc3f 	bl	8001928 <HAL_InitTick>
 80050aa:	4603      	mov	r3, r0
 80050ac:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d047      	beq.n	8005144 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	e2fb      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02c      	beq.n	800511a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050c0:	f7ff fdc1 	bl	8004c46 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050c4:	f7fc fc3a 	bl	800193c <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050cc:	f7fc fc36 	bl	800193c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e2e8      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80050de:	f7ff fdce 	bl	8004c7e <LL_RCC_MSI_IsReady>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f1      	beq.n	80050cc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f2:	f043 0308 	orr.w	r3, r3, #8
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fdea 	bl	8004cec <LL_RCC_MSI_SetCalibTrimming>
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800511a:	f7ff fda2 	bl	8004c62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800511e:	f7fc fc0d 	bl	800193c <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005126:	f7fc fc09 	bl	800193c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e2bb      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005138:	f7ff fda1 	bl	8004c7e <LL_RCC_MSI_IsReady>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f1      	bne.n	8005126 <HAL_RCC_OscConfig+0x19e>
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005144:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d05f      	beq.n	8005212 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d005      	beq.n	8005164 <HAL_RCC_OscConfig+0x1dc>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d10d      	bne.n	800517a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d10a      	bne.n	800517a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	f7ff fcdb 	bl	8004b1e <LL_RCC_HSE_IsReady>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d050      	beq.n	8005210 <HAL_RCC_OscConfig+0x288>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d14c      	bne.n	8005210 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e29a      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005198:	d102      	bne.n	80051a0 <HAL_RCC_OscConfig+0x218>
 800519a:	f7ff fca4 	bl	8004ae6 <LL_RCC_HSE_Enable>
 800519e:	e00d      	b.n	80051bc <HAL_RCC_OscConfig+0x234>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80051a8:	d104      	bne.n	80051b4 <HAL_RCC_OscConfig+0x22c>
 80051aa:	f7ff fc6f 	bl	8004a8c <LL_RCC_HSE_EnableTcxo>
 80051ae:	f7ff fc9a 	bl	8004ae6 <LL_RCC_HSE_Enable>
 80051b2:	e003      	b.n	80051bc <HAL_RCC_OscConfig+0x234>
 80051b4:	f7ff fca5 	bl	8004b02 <LL_RCC_HSE_Disable>
 80051b8:	f7ff fc76 	bl	8004aa8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d012      	beq.n	80051ea <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fc fbba 	bl	800193c <HAL_GetTick>
 80051c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051cc:	f7fc fbb6 	bl	800193c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e268      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80051de:	f7ff fc9e 	bl	8004b1e <LL_RCC_HSE_IsReady>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f1      	beq.n	80051cc <HAL_RCC_OscConfig+0x244>
 80051e8:	e013      	b.n	8005212 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fc fba7 	bl	800193c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f2:	f7fc fba3 	bl	800193c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b64      	cmp	r3, #100	; 0x64
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e255      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005204:	f7ff fc8b 	bl	8004b1e <LL_RCC_HSE_IsReady>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f1      	bne.n	80051f2 <HAL_RCC_OscConfig+0x26a>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d04b      	beq.n	80052b6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x2a8>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d113      	bne.n	8005252 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d110      	bne.n	8005252 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005230:	f7ff fca2 	bl	8004b78 <LL_RCC_HSI_IsReady>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x2be>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e234      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fca5 	bl	8004b9a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	e031      	b.n	80052b6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d019      	beq.n	800528e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525a:	f7ff fc71 	bl	8004b40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7fc fb6d 	bl	800193c <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005266:	f7fc fb69 	bl	800193c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e21b      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005278:	f7ff fc7e 	bl	8004b78 <LL_RCC_HSI_IsReady>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f1      	beq.n	8005266 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fc87 	bl	8004b9a <LL_RCC_HSI_SetCalibTrimming>
 800528c:	e013      	b.n	80052b6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528e:	f7ff fc65 	bl	8004b5c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fc fb53 	bl	800193c <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529a:	f7fc fb4f 	bl	800193c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e201      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052ac:	f7ff fc64 	bl	8004b78 <LL_RCC_HSI_IsReady>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f1      	bne.n	800529a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d06e      	beq.n	80053a0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d056      	beq.n	8005378 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	429a      	cmp	r2, r3
 80052e0:	d031      	beq.n	8005346 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e1da      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d013      	beq.n	800532c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8005304:	f7ff fc7e 	bl	8004c04 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005308:	f7fc fb18 	bl	800193c <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005310:	f7fc fb14 	bl	800193c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b11      	cmp	r3, #17
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e1c6      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005322:	f7ff fc7f 	bl	8004c24 <LL_RCC_LSI_IsReady>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f1      	bne.n	8005310 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005334:	f023 0210 	bic.w	r2, r3, #16
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	f7ff fc4d 	bl	8004be4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fc faf7 	bl	800193c <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005352:	f7fc faf3 	bl	800193c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b11      	cmp	r3, #17
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1a5      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005364:	f7ff fc5e 	bl	8004c24 <LL_RCC_LSI_IsReady>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f1      	beq.n	8005352 <HAL_RCC_OscConfig+0x3ca>
 800536e:	e017      	b.n	80053a0 <HAL_RCC_OscConfig+0x418>
 8005370:	20000000 	.word	0x20000000
 8005374:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005378:	f7ff fc44 	bl	8004c04 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc fade 	bl	800193c <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005384:	f7fc fada 	bl	800193c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b11      	cmp	r3, #17
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e18c      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005396:	f7ff fc45 	bl	8004c24 <LL_RCC_LSI_IsReady>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80d8 	beq.w	800555e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80053ae:	f7ff fb5b 	bl	8004a68 <LL_PWR_IsEnabledBkUpAccess>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d113      	bne.n	80053e0 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053b8:	f7ff fa9a 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053bc:	f7fc fabe 	bl	800193c <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c4:	f7fc faba 	bl	800193c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e16c      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80053d6:	f7ff fb47 	bl	8004a68 <LL_PWR_IsEnabledBkUpAccess>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f1      	beq.n	80053c4 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d07b      	beq.n	80054e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b85      	cmp	r3, #133	; 0x85
 80053ee:	d003      	beq.n	80053f8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b05      	cmp	r3, #5
 80053f6:	d109      	bne.n	800540c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fc fa96 	bl	800193c <HAL_GetTick>
 8005410:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc fa88 	bl	800193c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e138      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800543e:	f7ff fbc0 	bl	8004bc2 <LL_RCC_LSE_IsReady>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0ef      	beq.n	8005428 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b81      	cmp	r3, #129	; 0x81
 800544e:	d003      	beq.n	8005458 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b85      	cmp	r3, #133	; 0x85
 8005456:	d121      	bne.n	800549c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fc fa70 	bl	800193c <HAL_GetTick>
 800545c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fc fa62 	bl	800193c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e112      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ec      	beq.n	8005474 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800549a:	e060      	b.n	800555e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fa4e 	bl	800193c <HAL_GetTick>
 80054a0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fa40 	bl	800193c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0f0      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1ec      	bne.n	80054b8 <HAL_RCC_OscConfig+0x530>
 80054de:	e03e      	b.n	800555e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fc fa2c 	bl	800193c <HAL_GetTick>
 80054e4:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fc fa1e 	bl	800193c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0ce      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ec      	bne.n	80054fc <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fc fa0b 	bl	800193c <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800553c:	e00a      	b.n	8005554 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fc f9fd 	bl	800193c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0ad      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005554:	f7ff fb35 	bl	8004bc2 <LL_RCC_LSE_IsReady>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ef      	bne.n	800553e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80a3 	beq.w	80056ae <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b0c      	cmp	r3, #12
 800556c:	d076      	beq.n	800565c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	2b02      	cmp	r3, #2
 8005574:	d14b      	bne.n	800560e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	f7ff fc76 	bl	8004e66 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fc f9df 	bl	800193c <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005582:	f7fc f9db 	bl	800193c <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b0a      	cmp	r3, #10
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e08d      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005594:	f7ff fc75 	bl	8004e82 <LL_RCC_PLL_IsReady>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f1      	bne.n	8005582 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <HAL_RCC_OscConfig+0x730>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b6:	0212      	lsls	r2, r2, #8
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055ca:	430a      	orrs	r2, r1
 80055cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d4:	f7ff fc39 	bl	8004e4a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fc f9a8 	bl	800193c <HAL_GetTick>
 80055ec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fc f9a4 	bl	800193c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b0a      	cmp	r3, #10
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e056      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005602:	f7ff fc3e 	bl	8004e82 <LL_RCC_PLL_IsReady>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f1      	beq.n	80055f0 <HAL_RCC_OscConfig+0x668>
 800560c:	e04f      	b.n	80056ae <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	f7ff fc2a 	bl	8004e66 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561c:	f023 0303 	bic.w	r3, r3, #3
 8005620:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005634:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc f981 	bl	800193c <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fc f97d 	bl	800193c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b0a      	cmp	r3, #10
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e02f      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005650:	f7ff fc17 	bl	8004e82 <LL_RCC_PLL_IsReady>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f1      	bne.n	800563e <HAL_RCC_OscConfig+0x6b6>
 800565a:	e028      	b.n	80056ae <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e023      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	429a      	cmp	r2, r3
 800567c:	d115      	bne.n	80056aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	429a      	cmp	r2, r3
 800568a:	d10e      	bne.n	80056aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	429a      	cmp	r2, r3
 800569a:	d106      	bne.n	80056aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	11c1808c 	.word	0x11c1808c

080056bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e10f      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056d0:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d91b      	bls.n	8005716 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b86      	ldr	r3, [pc, #536]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 0207 	bic.w	r2, r3, #7
 80056e6:	4984      	ldr	r1, [pc, #528]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fc f925 	bl	800193c <HAL_GetTick>
 80056f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056f6:	f7fc f921 	bl	800193c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0f3      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005708:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d1ef      	bne.n	80056f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fb12 	bl	8004d50 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800572c:	f7fc f906 	bl	800193c <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005734:	f7fc f902 	bl	800193c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0d4      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005746:	f7ff fbda 	bl	8004efe <LL_RCC_IsActiveFlag_HPRE>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f1      	beq.n	8005734 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fb08 	bl	8004d76 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005766:	f7fc f8e9 	bl	800193c <HAL_GetTick>
 800576a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800576e:	f7fc f8e5 	bl	800193c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0b7      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005780:	f7ff fbce 	bl	8004f20 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f1      	beq.n	800576e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fb01 	bl	8004da2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057a0:	f7fc f8cc 	bl	800193c <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057a8:	f7fc f8c8 	bl	800193c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e09a      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057ba:	f7ff fbc3 	bl	8004f44 <LL_RCC_IsActiveFlag_PPRE1>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f1      	beq.n	80057a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff faf6 	bl	8004dc8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057dc:	f7fc f8ae 	bl	800193c <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e4:	f7fc f8aa 	bl	800193c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e07c      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057f6:	f7ff fbb6 	bl	8004f66 <LL_RCC_IsActiveFlag_PPRE2>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f1      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d043      	beq.n	8005894 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d106      	bne.n	8005822 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005814:	f7ff f983 	bl	8004b1e <LL_RCC_HSE_IsReady>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11e      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e066      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d106      	bne.n	8005838 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800582a:	f7ff fb2a 	bl	8004e82 <LL_RCC_PLL_IsReady>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d113      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e05b      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005840:	f7ff fa1d 	bl	8004c7e <LL_RCC_MSI_IsReady>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e050      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800584e:	f7ff f993 	bl	8004b78 <LL_RCC_HSI_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e049      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fa57 	bl	8004d14 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fc f869 	bl	800193c <HAL_GetTick>
 800586a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586c:	e00a      	b.n	8005884 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586e:	f7fc f865 	bl	800193c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e035      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005884:	f7ff fa59 	bl	8004d3a <LL_RCC_GetSysClkSource>
 8005888:	4602      	mov	r2, r0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d1ec      	bne.n	800586e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d21b      	bcs.n	80058da <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 0207 	bic.w	r2, r3, #7
 80058aa:	4913      	ldr	r1, [pc, #76]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fc f843 	bl	800193c <HAL_GetTick>
 80058b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058ba:	f7fc f83f 	bl	800193c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e011      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d1ef      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058da:	f000 f8b3 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 80058de:	4603      	mov	r3, r0
 80058e0:	4a06      	ldr	r2, [pc, #24]	; (80058fc <HAL_RCC_ClockConfig+0x240>)
 80058e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_ClockConfig+0x244>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fc f81d 	bl	8001928 <HAL_InitTick>
 80058ee:	4603      	mov	r3, r0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	58004000 	.word	0x58004000
 80058fc:	20000000 	.word	0x20000000
 8005900:	20000034 	.word	0x20000034

08005904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	f7ff fa12 	bl	8004d3a <LL_RCC_GetSysClkSource>
 8005916:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	f7ff fae6 	bl	8004ee8 <LL_RCC_PLL_GetMainSource>
 800591c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d139      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d136      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005930:	f7ff f9b5 	bl	8004c9e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d115      	bne.n	8005966 <HAL_RCC_GetSysClockFreq+0x62>
 800593a:	f7ff f9b0 	bl	8004c9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800593e:	4603      	mov	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d106      	bne.n	8005952 <HAL_RCC_GetSysClockFreq+0x4e>
 8005944:	f7ff f9bb 	bl	8004cbe <LL_RCC_MSI_GetRange>
 8005948:	4603      	mov	r3, r0
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	e005      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x5a>
 8005952:	f7ff f9bf 	bl	8004cd4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005956:	4603      	mov	r3, r0
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	4a36      	ldr	r2, [pc, #216]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x134>)
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	e014      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x8c>
 8005966:	f7ff f99a 	bl	8004c9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d106      	bne.n	800597e <HAL_RCC_GetSysClockFreq+0x7a>
 8005970:	f7ff f9a5 	bl	8004cbe <LL_RCC_MSI_GetRange>
 8005974:	4603      	mov	r3, r0
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	e005      	b.n	800598a <HAL_RCC_GetSysClockFreq+0x86>
 800597e:	f7ff f9a9 	bl	8004cd4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005982:	4603      	mov	r3, r0
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	4a2b      	ldr	r2, [pc, #172]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x134>)
 800598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005990:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d115      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800599c:	e012      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d102      	bne.n	80059aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e00c      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d109      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059b0:	f7ff f888 	bl	8004ac4 <LL_RCC_HSE_IsEnabledDiv2>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e001      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80059c0:	4b1f      	ldr	r3, [pc, #124]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059c2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c4:	f7ff f9b9 	bl	8004d3a <LL_RCC_GetSysClkSource>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d12f      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80059ce:	f7ff fa8b 	bl	8004ee8 <LL_RCC_PLL_GetMainSource>
 80059d2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d003      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0xde>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d003      	beq.n	80059e8 <HAL_RCC_GetSysClockFreq+0xe4>
 80059e0:	e00d      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80059e2:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059e4:	60fb      	str	r3, [r7, #12]
        break;
 80059e6:	e00d      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059e8:	f7ff f86c 	bl	8004ac4 <LL_RCC_HSE_IsEnabledDiv2>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d102      	bne.n	80059f8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059f4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80059f6:	e005      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059fa:	60fb      	str	r3, [r7, #12]
        break;
 80059fc:	e002      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	60fb      	str	r3, [r7, #12]
        break;
 8005a02:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005a04:	f7ff fa4e 	bl	8004ea4 <LL_RCC_PLL_GetN>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	fb03 f402 	mul.w	r4, r3, r2
 8005a10:	f7ff fa5f 	bl	8004ed2 <LL_RCC_PLL_GetDivider>
 8005a14:	4603      	mov	r3, r0
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	3301      	adds	r3, #1
 8005a1a:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a1e:	f7ff fa4d 	bl	8004ebc <LL_RCC_PLL_GetR>
 8005a22:	4603      	mov	r3, r0
 8005a24:	0f5b      	lsrs	r3, r3, #29
 8005a26:	3301      	adds	r3, #1
 8005a28:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a2c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005a2e:	697b      	ldr	r3, [r7, #20]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}
 8005a38:	0801c028 	.word	0x0801c028
 8005a3c:	00f42400 	.word	0x00f42400
 8005a40:	01e84800 	.word	0x01e84800

08005a44 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a44:	b598      	push	{r3, r4, r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a48:	f7ff ff5c 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	f7ff f9ce 	bl	8004dee <LL_RCC_GetAHBPrescaler>
 8005a52:	4603      	mov	r3, r0
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	4a03      	ldr	r2, [pc, #12]	; (8005a68 <HAL_RCC_GetHCLKFreq+0x24>)
 8005a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a60:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd98      	pop	{r3, r4, r7, pc}
 8005a68:	0801bfc8 	.word	0x0801bfc8

08005a6c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a6c:	b598      	push	{r3, r4, r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a70:	f7ff ffe8 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a74:	4604      	mov	r4, r0
 8005a76:	f7ff f9d2 	bl	8004e1e <LL_RCC_GetAPB1Prescaler>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd98      	pop	{r3, r4, r7, pc}
 8005a8c:	0801c008 	.word	0x0801c008

08005a90 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a90:	b598      	push	{r3, r4, r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005a94:	f7ff ffd6 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	f7ff f9cb 	bl	8004e34 <LL_RCC_GetAPB2Prescaler>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	0adb      	lsrs	r3, r3, #11
 8005aa2:	4a03      	ldr	r2, [pc, #12]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd98      	pop	{r3, r4, r7, pc}
 8005ab0:	0801c008 	.word	0x0801c008

08005ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	4a10      	ldr	r2, [pc, #64]	; (8005b08 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aca:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005acc:	f7ff f99a 	bl	8004e04 <LL_RCC_GetAHB3Prescaler>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0c9c      	lsrs	r4, r3, #18
 8005af0:	f7fe ff40 	bl	8004974 <HAL_PWREx_GetVoltageRange>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4619      	mov	r1, r3
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f80b 	bl	8005b14 <RCC_SetFlashLatency>
 8005afe:	4603      	mov	r3, r0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	0801c028 	.word	0x0801c028
 8005b0c:	0801bfc8 	.word	0x0801bfc8
 8005b10:	431bde83 	.word	0x431bde83

08005b14 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005b1e:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <RCC_SetFlashLatency+0xfc>)
 8005b20:	f107 0320 	add.w	r3, r7, #32
 8005b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b28:	6018      	str	r0, [r3, #0]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005b2e:	4a39      	ldr	r2, [pc, #228]	; (8005c14 <RCC_SetFlashLatency+0x100>)
 8005b30:	f107 0318 	add.w	r3, r7, #24
 8005b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b38:	6018      	str	r0, [r3, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005b3e:	4a36      	ldr	r2, [pc, #216]	; (8005c18 <RCC_SetFlashLatency+0x104>)
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	d11d      	bne.n	8005b92 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b56:	2300      	movs	r3, #0
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5a:	e016      	b.n	8005b8a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b64:	4413      	add	r3, r2
 8005b66:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d808      	bhi.n	8005b84 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b82:	e023      	b.n	8005bcc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	3301      	adds	r3, #1
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d9e5      	bls.n	8005b5c <RCC_SetFlashLatency+0x48>
 8005b90:	e01c      	b.n	8005bcc <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b96:	e016      	b.n	8005bc6 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d808      	bhi.n	8005bc0 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bbe:	e005      	b.n	8005bcc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d9e5      	bls.n	8005b98 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bcc:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <RCC_SetFlashLatency+0x108>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f023 0207 	bic.w	r2, r3, #7
 8005bd4:	4911      	ldr	r1, [pc, #68]	; (8005c1c <RCC_SetFlashLatency+0x108>)
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bdc:	f7fb feae 	bl	800193c <HAL_GetTick>
 8005be0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005be2:	e008      	b.n	8005bf6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005be4:	f7fb feaa 	bl	800193c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e007      	b.n	8005c06 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <RCC_SetFlashLatency+0x108>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1ef      	bne.n	8005be4 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3738      	adds	r7, #56	; 0x38
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	0801b834 	.word	0x0801b834
 8005c14:	0801b83c 	.word	0x0801b83c
 8005c18:	0801b844 	.word	0x0801b844
 8005c1c:	58004000 	.word	0x58004000

08005c20 <LL_RCC_LSE_IsReady>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d101      	bne.n	8005c38 <LL_RCC_LSE_IsReady+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_RCC_LSE_IsReady+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_SetUSARTClockSource>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	43db      	mvns	r3, r3
 8005c58:	401a      	ands	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_SetI2SClockSource>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <LL_RCC_SetLPUARTClockSource>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_SetI2CClockSource>:
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	401a      	ands	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <LL_RCC_SetLPTIMClockSource>:
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	43db      	mvns	r3, r3
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <LL_RCC_SetRNGClockSource>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_SetADCClockSource>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <LL_RCC_SetRTCClockSource>:
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <LL_RCC_GetRTCClockSource>:
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <LL_RCC_ForceBackupDomainReset>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr

08005de6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005e14:	2300      	movs	r3, #0
 8005e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e18:	2300      	movs	r3, #0
 8005e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d058      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005e28:	f7fe fd62 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2c:	f7fb fd86 	bl	800193c <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e32:	e009      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e34:	f7fb fd82 	bl	800193c <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d902      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	74fb      	strb	r3, [r7, #19]
        break;
 8005e46:	e006      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e48:	4b7b      	ldr	r3, [pc, #492]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e54:	d1ee      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d13c      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005e5c:	f7ff ffa7 	bl	8005dae <LL_RCC_GetRTCClockSource>
 8005e60:	4602      	mov	r2, r0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d00f      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e78:	f7ff ffa5 	bl	8005dc6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e7c:	f7ff ffb3 	bl	8005de6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d014      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fb fd52 	bl	800193c <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9c:	f7fb fd4e 	bl	800193c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d902      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005eb4:	f7ff feb4 	bl	8005c20 <LL_RCC_LSE_IsReady>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d1ee      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff5b 	bl	8005d84 <LL_RCC_SetRTCClockSource>
 8005ece:	e004      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
 8005ed4:	e001      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed6:	7cfb      	ldrb	r3, [r7, #19]
 8005ed8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fea9 	bl	8005c42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fe9e 	bl	8005c42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fec0 	bl	8005c9c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fee6 	bl	8005cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fedb 	bl	8005cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fed0 	bl	8005cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fea9 	bl	8005cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fe9e 	bl	8005cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fe93 	bl	8005cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d011      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fe5e 	bl	8005c72 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fea5 	bl	8005d30 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d011      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fea3 	bl	8005d5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601c:	d107      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800602e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	58000400 	.word	0x58000400

0800603c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d068      	beq.n	8006120 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb f9ba 	bl	80013dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006070:	4b2e      	ldr	r3, [pc, #184]	; (800612c <HAL_RTC_Init+0xf0>)
 8006072:	22ca      	movs	r2, #202	; 0xca
 8006074:	625a      	str	r2, [r3, #36]	; 0x24
 8006076:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_RTC_Init+0xf0>)
 8006078:	2253      	movs	r2, #83	; 0x53
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa0f 	bl	80064a0 <RTC_EnterInitMode>
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d13f      	bne.n	800610c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RTC_Init+0xf0>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4a26      	ldr	r2, [pc, #152]	; (800612c <HAL_RTC_Init+0xf0>)
 8006092:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800609c:	4b23      	ldr	r3, [pc, #140]	; (800612c <HAL_RTC_Init+0xf0>)
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4319      	orrs	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	430b      	orrs	r3, r1
 80060b0:	491e      	ldr	r1, [pc, #120]	; (800612c <HAL_RTC_Init+0xf0>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	491a      	ldr	r1, [pc, #104]	; (800612c <HAL_RTC_Init+0xf0>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_RTC_Init+0xf0>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	430b      	orrs	r3, r1
 80060d8:	4914      	ldr	r1, [pc, #80]	; (800612c <HAL_RTC_Init+0xf0>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa12 	bl	8006508 <RTC_ExitInitMode>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_RTC_Init+0xf0>)
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a19      	ldr	r1, [r3, #32]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	4319      	orrs	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	430b      	orrs	r3, r1
 8006106:	4909      	ldr	r1, [pc, #36]	; (800612c <HAL_RTC_Init+0xf0>)
 8006108:	4313      	orrs	r3, r2
 800610a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <HAL_RTC_Init+0xf0>)
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40002800 	.word	0x40002800

08006130 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_RTC_SetAlarm_IT+0x1e>
 800614a:	2302      	movs	r3, #2
 800614c:	e0f3      	b.n	8006336 <HAL_RTC_SetAlarm_IT+0x206>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800615e:	4b78      	ldr	r3, [pc, #480]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616e:	d06a      	beq.n	8006246 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d13a      	bne.n	80061ec <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006176:	4b72      	ldr	r3, [pc, #456]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f9f5 	bl	8006584 <RTC_ByteToBcd2>
 800619a:	4603      	mov	r3, r0
 800619c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f9ee 	bl	8006584 <RTC_ByteToBcd2>
 80061a8:	4603      	mov	r3, r0
 80061aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061ac:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	789b      	ldrb	r3, [r3, #2]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f9e6 	bl	8006584 <RTC_ByteToBcd2>
 80061b8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061ba:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	78db      	ldrb	r3, [r3, #3]
 80061c2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061c4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f9d8 	bl	8006584 <RTC_ByteToBcd2>
 80061d4:	4603      	mov	r3, r0
 80061d6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061d8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	e02c      	b.n	8006246 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80061f4:	d00d      	beq.n	8006212 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061fe:	d008      	beq.n	8006212 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006200:	4b4f      	ldr	r3, [pc, #316]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800621e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006224:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	78db      	ldrb	r3, [r3, #3]
 800622a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800622c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006234:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006236:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800623c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006246:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006248:	22ca      	movs	r2, #202	; 0xca
 800624a:	625a      	str	r2, [r3, #36]	; 0x24
 800624c:	4b3c      	ldr	r3, [pc, #240]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800624e:	2253      	movs	r2, #83	; 0x53
 8006250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625a:	d12c      	bne.n	80062b6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800625c:	4b38      	ldr	r3, [pc, #224]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4a37      	ldr	r2, [pc, #220]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006266:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006268:	4b35      	ldr	r3, [pc, #212]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800626a:	2201      	movs	r2, #1
 800626c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006274:	d107      	bne.n	8006286 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4930      	ldr	r1, [pc, #192]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006280:	4313      	orrs	r3, r2
 8006282:	644b      	str	r3, [r1, #68]	; 0x44
 8006284:	e006      	b.n	8006294 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006286:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	f043 0201 	orr.w	r2, r3, #1
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	4a24      	ldr	r2, [pc, #144]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062ae:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80062b2:	6193      	str	r3, [r2, #24]
 80062b4:	e02b      	b.n	800630e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062bc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80062c0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062c4:	2202      	movs	r2, #2
 80062c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d107      	bne.n	80062e0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	4919      	ldr	r1, [pc, #100]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062de:	e006      	b.n	80062ee <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80062e0:	4a17      	ldr	r2, [pc, #92]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80062ee:	4a14      	ldr	r2, [pc, #80]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f043 0202 	orr.w	r2, r3, #2
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006308:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800630c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <HAL_RTC_SetAlarm_IT+0x214>)
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006314:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <HAL_RTC_SetAlarm_IT+0x214>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800631e:	4b08      	ldr	r3, [pc, #32]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006320:	22ff      	movs	r2, #255	; 0xff
 8006322:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}
 800633e:	bf00      	nop
 8006340:	40002800 	.word	0x40002800
 8006344:	58000800 	.word	0x58000800

08006348 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_RTC_DeactivateAlarm+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e048      	b.n	80063f2 <HAL_RTC_DeactivateAlarm+0xaa>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006372:	22ca      	movs	r2, #202	; 0xca
 8006374:	625a      	str	r2, [r3, #36]	; 0x24
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006378:	2253      	movs	r2, #83	; 0x53
 800637a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d115      	bne.n	80063b0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 800638a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800638e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006394:	4a19      	ldr	r2, [pc, #100]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800639a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	f023 0201 	bic.w	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80063ae:	e014      	b.n	80063da <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063b0:	4b12      	ldr	r3, [pc, #72]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4a11      	ldr	r2, [pc, #68]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063b6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80063ba:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c0:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	f023 0202 	bic.w	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063d6:	2202      	movs	r2, #2
 80063d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063dc:	22ff      	movs	r2, #255	; 0xff
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	40002800 	.word	0x40002800

08006400 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_RTC_AlarmIRQHandler+0x50>)
 800640a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	4013      	ands	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006420:	2201      	movs	r2, #1
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fb fd17 	bl	8001e58 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006436:	2202      	movs	r2, #2
 8006438:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f94a 	bl	80066d4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40002800 	.word	0x40002800

08006454 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_RTC_WaitForSynchro+0x48>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4a0e      	ldr	r2, [pc, #56]	; (800649c <HAL_RTC_WaitForSynchro+0x48>)
 8006462:	f023 0320 	bic.w	r3, r3, #32
 8006466:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006468:	f7fb fa68 	bl	800193c <HAL_GetTick>
 800646c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800646e:	e009      	b.n	8006484 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006470:	f7fb fa64 	bl	800193c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800647e:	d901      	bls.n	8006484 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e006      	b.n	8006492 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RTC_WaitForSynchro+0x48>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ef      	beq.n	8006470 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40002800 	.word	0x40002800

080064a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80064ac:	4b15      	ldr	r3, [pc, #84]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d120      	bne.n	80064fa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80064c4:	f7fb fa3a 	bl	800193c <HAL_GetTick>
 80064c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064ca:	e00d      	b.n	80064e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064cc:	f7fb fa36 	bl	800193c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064da:	d905      	bls.n	80064e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2203      	movs	r2, #3
 80064e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <RTC_EnterInitMode+0x5a>
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d1e8      	bne.n	80064cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40002800 	.word	0x40002800

08006508 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4a19      	ldr	r2, [pc, #100]	; (8006580 <RTC_ExitInitMode+0x78>)
 800651a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff91 	bl	8006454 <HAL_RTC_WaitForSynchro>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01e      	beq.n	8006576 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2203      	movs	r2, #3
 800653c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e017      	b.n	8006576 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006546:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	4a0d      	ldr	r2, [pc, #52]	; (8006580 <RTC_ExitInitMode+0x78>)
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff ff7e 	bl	8006454 <HAL_RTC_WaitForSynchro>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2203      	movs	r2, #3
 8006562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <RTC_ExitInitMode+0x78>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	4a04      	ldr	r2, [pc, #16]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006570:	f043 0320 	orr.w	r3, r3, #32
 8006574:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40002800 	.word	0x40002800

08006584 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006596:	e005      	b.n	80065a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	3b0a      	subs	r3, #10
 80065a2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	d8f6      	bhi.n	8006598 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b2db      	uxtb	r3, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_RTCEx_EnableBypassShadow+0x16>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e01f      	b.n	800661a <HAL_RTCEx_EnableBypassShadow+0x56>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065ec:	22ca      	movs	r2, #202	; 0xca
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065f2:	2253      	movs	r2, #83	; 0x53
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065fc:	f043 0320 	orr.w	r3, r3, #32
 8006600:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	40002800 	.word	0x40002800

08006628 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_RTCEx_SetSSRU_IT+0x16>
 800663a:	2302      	movs	r3, #2
 800663c:	e027      	b.n	800668e <HAL_RTCEx_SetSSRU_IT+0x66>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006650:	22ca      	movs	r2, #202	; 0xca
 8006652:	625a      	str	r2, [r3, #36]	; 0x24
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006656:	2253      	movs	r2, #83	; 0x53
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800665a:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	4a0e      	ldr	r2, [pc, #56]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006664:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666c:	4a0b      	ldr	r2, [pc, #44]	; (800669c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800666e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006672:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	40002800 	.word	0x40002800
 800669c:	58000800 	.word	0x58000800

080066a0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80066b6:	2240      	movs	r2, #64	; 0x40
 80066b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb fbd6 	bl	8001e6c <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40002800 	.word	0x40002800

080066d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <HAL_RTCEx_BKUPWrite+0x2c>)
 80066f6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4413      	add	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	4000b100 	.word	0x4000b100

08006718 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <HAL_RTCEx_BKUPRead+0x28>)
 8006724:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	4000b100 	.word	0x4000b100

08006744 <LL_PWR_SetRadioBusyTrigger>:
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006754:	4904      	ldr	r1, [pc, #16]	; (8006768 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4313      	orrs	r3, r2
 800675a:	608b      	str	r3, [r1, #8]
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	58000400 	.word	0x58000400

0800676c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	58000400 	.word	0x58000400

0800678c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006796:	4a04      	ldr	r2, [pc, #16]	; (80067a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	58000400 	.word	0x58000400

080067ac <LL_PWR_ClearFlag_RFBUSY>:
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80067b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b6:	619a      	str	r2, [r3, #24]
}
 80067b8:	bf00      	nop
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	58000400 	.word	0x58000400

080067c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d101      	bne.n	80067d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	58000400 	.word	0x58000400

080067e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d101      	bne.n	80067fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	58000400 	.word	0x58000400

0800680c <LL_RCC_RF_DisableReset>:
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800681c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <LL_RCC_IsRFUnderReset>:
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006840:	d101      	bne.n	8006846 <LL_RCC_IsRFUnderReset+0x1a>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <LL_RCC_IsRFUnderReset+0x1c>
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <LL_EXTI_EnableIT_32_63>:
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <LL_EXTI_EnableIT_32_63+0x24>)
 800685a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800685e:	4905      	ldr	r1, [pc, #20]	; (8006874 <LL_EXTI_EnableIT_32_63+0x24>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	58000800 	.word	0x58000800

08006878 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
    return status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	e04b      	b.n	8006926 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	799b      	ldrb	r3, [r3, #6]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fa fea2 	bl	80015ec <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80068ae:	f7ff ffad 	bl	800680c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80068b2:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <HAL_SUBGHZ_Init+0xb8>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	0cdb      	lsrs	r3, r3, #19
 80068c0:	2264      	movs	r2, #100	; 0x64
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d105      	bne.n	80068da <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	609a      	str	r2, [r3, #8]
      break;
 80068d8:	e007      	b.n	80068ea <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80068e0:	f7ff ffa4 	bl	800682c <LL_RCC_IsRFUnderReset>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1ee      	bne.n	80068c8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80068ea:	f7ff ff3f 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80068ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80068f2:	f7ff ffad 	bl	8006850 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80068f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80068fa:	f7ff ff23 	bl	8006744 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80068fe:	f7ff ff55 	bl	80067ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 faad 	bl	8006e6c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	719a      	strb	r2, [r3, #6]

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000000 	.word	0x20000000

08006934 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	461a      	mov	r2, r3
 8006940:	460b      	mov	r3, r1
 8006942:	817b      	strh	r3, [r7, #10]
 8006944:	4613      	mov	r3, r2
 8006946:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	799b      	ldrb	r3, [r3, #6]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d14a      	bne.n	80069e8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	795b      	ldrb	r3, [r3, #5]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800695a:	2302      	movs	r3, #2
 800695c:	e045      	b.n	80069ea <HAL_SUBGHZ_WriteRegisters+0xb6>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2202      	movs	r2, #2
 8006968:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fb4c 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006970:	f7ff ff0c 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006974:	210d      	movs	r1, #13
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fa98 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800697c:	897b      	ldrh	r3, [r7, #10]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	b29b      	uxth	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	4619      	mov	r1, r3
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fa90 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800698c:	897b      	ldrh	r3, [r7, #10]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fa8a 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	82bb      	strh	r3, [r7, #20]
 800699c:	e00a      	b.n	80069b4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800699e:	8abb      	ldrh	r3, [r7, #20]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fa7f 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80069ae:	8abb      	ldrh	r3, [r7, #20]
 80069b0:	3301      	adds	r3, #1
 80069b2:	82bb      	strh	r3, [r7, #20]
 80069b4:	8aba      	ldrh	r2, [r7, #20]
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3f0      	bcc.n	800699e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80069bc:	f7ff fed6 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fb45 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	75fb      	strb	r3, [r7, #23]
 80069d2:	e001      	b.n	80069d8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	715a      	strb	r2, [r3, #5]

    return status;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	e000      	b.n	80069ea <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b088      	sub	sp, #32
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	461a      	mov	r2, r3
 80069fe:	460b      	mov	r3, r1
 8006a00:	817b      	strh	r3, [r7, #10]
 8006a02:	4613      	mov	r3, r2
 8006a04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	799b      	ldrb	r3, [r3, #6]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d14a      	bne.n	8006aaa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	795b      	ldrb	r3, [r3, #5]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e045      	b.n	8006aac <HAL_SUBGHZ_ReadRegisters+0xba>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 faee 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006a2c:	f7ff feae 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006a30:	211d      	movs	r1, #29
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fa3a 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006a38:	897b      	ldrh	r3, [r7, #10]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fa32 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006a48:	897b      	ldrh	r3, [r7, #10]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fa2c 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa28 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	82fb      	strh	r3, [r7, #22]
 8006a60:	e009      	b.n	8006a76 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006a62:	69b9      	ldr	r1, [r7, #24]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa77 	bl	8006f58 <SUBGHZSPI_Receive>
      pData++;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006a70:	8afb      	ldrh	r3, [r7, #22]
 8006a72:	3301      	adds	r3, #1
 8006a74:	82fb      	strh	r3, [r7, #22]
 8006a76:	8afa      	ldrh	r2, [r7, #22]
 8006a78:	893b      	ldrh	r3, [r7, #8]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d3f1      	bcc.n	8006a62 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006a7e:	f7ff fe75 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fae4 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e001      	b.n	8006a9a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	715a      	strb	r2, [r3, #5]

    return status;
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	e000      	b.n	8006aac <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006aaa:	2302      	movs	r3, #2
  }
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	72fb      	strb	r3, [r7, #11]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	799b      	ldrb	r3, [r3, #6]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d14a      	bne.n	8006b68 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	795b      	ldrb	r3, [r3, #5]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e045      	b.n	8006b6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fa8f 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	2b84      	cmp	r3, #132	; 0x84
 8006aee:	d002      	beq.n	8006af6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	2b94      	cmp	r3, #148	; 0x94
 8006af4:	d103      	bne.n	8006afe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	711a      	strb	r2, [r3, #4]
 8006afc:	e002      	b.n	8006b04 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b04:	f7ff fe42 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f9cd 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	82bb      	strh	r3, [r7, #20]
 8006b16:	e00a      	b.n	8006b2e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006b18:	8abb      	ldrh	r3, [r7, #20]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4619      	mov	r1, r3
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f9c2 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b28:	8abb      	ldrh	r3, [r7, #20]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	82bb      	strh	r3, [r7, #20]
 8006b2e:	8aba      	ldrh	r2, [r7, #20]
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3f0      	bcc.n	8006b18 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b36:	f7ff fe19 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	2b84      	cmp	r3, #132	; 0x84
 8006b3e:	d002      	beq.n	8006b46 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fa85 	bl	8007050 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
 8006b52:	e001      	b.n	8006b58 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	715a      	strb	r2, [r3, #5]

    return status;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	e000      	b.n	8006b6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	460b      	mov	r3, r1
 8006b80:	72fb      	strb	r3, [r7, #11]
 8006b82:	4613      	mov	r3, r2
 8006b84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	799b      	ldrb	r3, [r3, #6]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d13d      	bne.n	8006c10 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	795b      	ldrb	r3, [r3, #5]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e038      	b.n	8006c12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fa2e 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006bac:	f7ff fdee 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f979 	bl	8006eac <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f975 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	82fb      	strh	r3, [r7, #22]
 8006bc6:	e009      	b.n	8006bdc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006bc8:	69b9      	ldr	r1, [r7, #24]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f9c4 	bl	8006f58 <SUBGHZSPI_Receive>
      pData++;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006bd6:	8afb      	ldrh	r3, [r7, #22]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	82fb      	strh	r3, [r7, #22]
 8006bdc:	8afa      	ldrh	r2, [r7, #22]
 8006bde:	893b      	ldrh	r3, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d3f1      	bcc.n	8006bc8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006be4:	f7ff fdc2 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fa31 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e001      	b.n	8006c00 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	715a      	strb	r2, [r3, #5]

    return status;
 8006c0c:	7ffb      	ldrb	r3, [r7, #31]
 8006c0e:	e000      	b.n	8006c12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b086      	sub	sp, #24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	461a      	mov	r2, r3
 8006c26:	460b      	mov	r3, r1
 8006c28:	72fb      	strb	r3, [r7, #11]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	799b      	ldrb	r3, [r3, #6]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d13e      	bne.n	8006cb6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	795b      	ldrb	r3, [r3, #5]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e039      	b.n	8006cb8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9dc 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c50:	f7ff fd9c 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006c54:	210e      	movs	r1, #14
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f928 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f923 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	82bb      	strh	r3, [r7, #20]
 8006c6a:	e00a      	b.n	8006c82 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c6c:	8abb      	ldrh	r3, [r7, #20]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f918 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c7c:	8abb      	ldrh	r3, [r7, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	82bb      	strh	r3, [r7, #20]
 8006c82:	8aba      	ldrh	r2, [r7, #20]
 8006c84:	893b      	ldrh	r3, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3f0      	bcc.n	8006c6c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c8a:	f7ff fd6f 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f9de 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
 8006ca0:	e001      	b.n	8006ca6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	715a      	strb	r2, [r3, #5]

    return status;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	e000      	b.n	8006cb8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	460b      	mov	r3, r1
 8006cce:	72fb      	strb	r3, [r7, #11]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	799b      	ldrb	r3, [r3, #6]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d141      	bne.n	8006d66 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	795b      	ldrb	r3, [r3, #5]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e03c      	b.n	8006d68 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f987 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006cfa:	f7ff fd47 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006cfe:	211e      	movs	r1, #30
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f8d3 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f8ce 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006d10:	2100      	movs	r1, #0
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f8ca 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	82fb      	strh	r3, [r7, #22]
 8006d1c:	e009      	b.n	8006d32 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d1e:	69b9      	ldr	r1, [r7, #24]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f919 	bl	8006f58 <SUBGHZSPI_Receive>
      pData++;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	82fb      	strh	r3, [r7, #22]
 8006d32:	8afa      	ldrh	r2, [r7, #22]
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3f1      	bcc.n	8006d1e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d3a:	f7ff fd17 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f986 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e001      	b.n	8006d56 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	715a      	strb	r2, [r3, #5]

    return status;
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	e000      	b.n	8006d68 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8006d78:	2300      	movs	r3, #0
 8006d7a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8006d7c:	f107 020c 	add.w	r2, r7, #12
 8006d80:	2302      	movs	r3, #2
 8006d82:	2112      	movs	r1, #18
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fef4 	bl	8006b72 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8006d8a:	7b3b      	ldrb	r3, [r7, #12]
 8006d8c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	b21a      	sxth	r2, r3
 8006d94:	7b7b      	ldrb	r3, [r7, #13]
 8006d96:	b21b      	sxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f012 ff53 	bl	8019c54 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006dae:	89fb      	ldrh	r3, [r7, #14]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f012 ff58 	bl	8019c70 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f012 ffa7 	bl	8019d20 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f012 ffac 	bl	8019d3c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f012 ffb1 	bl	8019d58 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006df6:	89fb      	ldrh	r3, [r7, #14]
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f012 ff7e 	bl	8019d04 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006e08:	89fb      	ldrh	r3, [r7, #14]
 8006e0a:	099b      	lsrs	r3, r3, #6
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f012 ff39 	bl	8019c8c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
 8006e1c:	09db      	lsrs	r3, r3, #7
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006e26:	89fb      	ldrh	r3, [r7, #14]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006e32:	2101      	movs	r1, #1
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f012 ff37 	bl	8019ca8 <HAL_SUBGHZ_CADStatusCallback>
 8006e3a:	e003      	b.n	8006e44 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f012 ff32 	bl	8019ca8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	0a5b      	lsrs	r3, r3, #9
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f012 ff47 	bl	8019ce4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006e56:	f107 020c 	add.w	r2, r7, #12
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fe28 	bl	8006ab4 <HAL_SUBGHZ_ExecSetCmd>
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006e80:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006e88:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006e8a:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e8c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006e90:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006e92:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e9c:	6013      	str	r3, [r2, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr
 8006ea8:	58010000 	.word	0x58010000

08006eac <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ebc:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <SUBGHZSPI_Transmit+0xa0>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	0cdb      	lsrs	r3, r3, #19
 8006eca:	2264      	movs	r2, #100	; 0x64
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	609a      	str	r2, [r3, #8]
      break;
 8006ee2:	e008      	b.n	8006ef6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006eea:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <SUBGHZSPI_Transmit+0xa4>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d1ed      	bne.n	8006ed2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <SUBGHZSPI_Transmit+0xa8>)
 8006ef8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f00:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <SUBGHZSPI_Transmit+0xa0>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	0cdb      	lsrs	r3, r3, #19
 8006f0e:	2264      	movs	r2, #100	; 0x64
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e008      	b.n	8006f3a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <SUBGHZSPI_Transmit+0xa4>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d1ed      	bne.n	8006f16 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <SUBGHZSPI_Transmit+0xa4>)
 8006f3c:	68db      	ldr	r3, [r3, #12]

  return status;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000000 	.word	0x20000000
 8006f50:	58010000 	.word	0x58010000
 8006f54:	5801000c 	.word	0x5801000c

08006f58 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f66:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <SUBGHZSPI_Receive+0xa4>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	0cdb      	lsrs	r3, r3, #19
 8006f74:	2264      	movs	r2, #100	; 0x64
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d105      	bne.n	8006f8e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	609a      	str	r2, [r3, #8]
      break;
 8006f8c:	e008      	b.n	8006fa0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <SUBGHZSPI_Receive+0xa8>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d1ed      	bne.n	8006f7c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006fa0:	4b18      	ldr	r3, [pc, #96]	; (8007004 <SUBGHZSPI_Receive+0xac>)
 8006fa2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	22ff      	movs	r2, #255	; 0xff
 8006fa8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <SUBGHZSPI_Receive+0xa4>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	0cdb      	lsrs	r3, r3, #19
 8006fb8:	2264      	movs	r2, #100	; 0x64
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	609a      	str	r2, [r3, #8]
      break;
 8006fd0:	e008      	b.n	8006fe4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <SUBGHZSPI_Receive+0xa8>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d1ed      	bne.n	8006fc0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <SUBGHZSPI_Receive+0xa8>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	701a      	strb	r2, [r3, #0]

  return status;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000000 	.word	0x20000000
 8007000:	58010000 	.word	0x58010000
 8007004:	5801000c 	.word	0x5801000c

08007008 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d111      	bne.n	800703c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <SUBGHZ_CheckDeviceReady+0x44>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4613      	mov	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007028:	f7ff fbb0 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3b01      	subs	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f9      	bne.n	800702c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007038:	f7ff fb98 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f807 	bl	8007050 <SUBGHZ_WaitOnBusy>
 8007042:	4603      	mov	r3, r0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20000000 	.word	0x20000000

08007050 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <SUBGHZ_WaitOnBusy+0x58>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	0d1b      	lsrs	r3, r3, #20
 800706a:	2264      	movs	r2, #100	; 0x64
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007072:	f7ff fbb9 	bl	80067e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007076:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	609a      	str	r2, [r3, #8]
      break;
 8007088:	e009      	b.n	800709e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3b01      	subs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007090:	f7ff fb98 	bl	80067c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4013      	ands	r3, r2
 800709a:	2b01      	cmp	r3, #1
 800709c:	d0e9      	beq.n	8007072 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000000 	.word	0x20000000

080070ac <LL_RCC_GetUSARTClockSource>:
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80070b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	401a      	ands	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	4313      	orrs	r3, r2
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <LL_RCC_GetLPUARTClockSource>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80070d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4013      	ands	r3, r2
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e042      	b.n	8007186 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb f802 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2224      	movs	r2, #36	; 0x24
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc4b 	bl	80079cc <UART_SetConfig>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e022      	b.n	8007186 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fe8f 	bl	8007e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800716c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 ff15 	bl	8007fae <UART_CheckIdleState>
 8007184:	4603      	mov	r3, r0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d142      	bne.n	800722e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_UART_Receive_IT+0x24>
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e03b      	b.n	8007230 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Receive_IT+0x36>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e034      	b.n	8007230 <HAL_UART_Receive_IT+0xa0>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <HAL_UART_Receive_IT+0xa8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01f      	beq.n	800721e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d018      	beq.n	800721e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	613b      	str	r3, [r7, #16]
   return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	623b      	str	r3, [r7, #32]
 800720c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	69f9      	ldr	r1, [r7, #28]
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	61bb      	str	r3, [r7, #24]
   return(result);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e6      	bne.n	80071ec <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	461a      	mov	r2, r3
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 ffd5 	bl	80081d4 <UART_Start_Receive_IT>
 800722a:	4603      	mov	r3, r0
 800722c:	e000      	b.n	8007230 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800722e:	2302      	movs	r3, #2
  }
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	; 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40008000 	.word	0x40008000

0800723c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007250:	2b20      	cmp	r3, #32
 8007252:	d17a      	bne.n	800734a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Transmit_DMA+0x24>
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e073      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_UART_Transmit_DMA+0x36>
 800726e:	2302      	movs	r3, #2
 8007270:	e06c      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2221      	movs	r2, #33	; 0x21
 800729c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02c      	beq.n	8007302 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ac:	4a29      	ldr	r2, [pc, #164]	; (8007354 <HAL_UART_Transmit_DMA+0x118>)
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b4:	4a28      	ldr	r2, [pc, #160]	; (8007358 <HAL_UART_Transmit_DMA+0x11c>)
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072bc:	4a27      	ldr	r2, [pc, #156]	; (800735c <HAL_UART_Transmit_DMA+0x120>)
 80072be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c4:	2200      	movs	r2, #0
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	4619      	mov	r1, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3328      	adds	r3, #40	; 0x28
 80072d8:	461a      	mov	r2, r3
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	f7fc fdba 	bl	8003e54 <HAL_DMA_Start_IT>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2210      	movs	r2, #16
 80072ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e024      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2240      	movs	r2, #64	; 0x40
 8007308:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	613b      	str	r3, [r7, #16]
   return(result);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007332:	623a      	str	r2, [r7, #32]
 8007334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	69f9      	ldr	r1, [r7, #28]
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	; 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	08008523 	.word	0x08008523
 8007358:	080085bd 	.word	0x080085bd
 800735c:	080085d9 	.word	0x080085d9

08007360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b0ba      	sub	sp, #232	; 0xe8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800738a:	f640 030f 	movw	r3, #2063	; 0x80f
 800738e:	4013      	ands	r3, r2
 8007390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11b      	bne.n	80073d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 82d6 	beq.w	8007976 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
      }
      return;
 80073d2:	e2d0      	b.n	8007976 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 811f 	beq.w	800761c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073e2:	4b8b      	ldr	r3, [pc, #556]	; (8007610 <HAL_UART_IRQHandler+0x2b0>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073ee:	4b89      	ldr	r3, [pc, #548]	; (8007614 <HAL_UART_IRQHandler+0x2b4>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8112 	beq.w	800761c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d011      	beq.n	8007428 <HAL_UART_IRQHandler+0xc8>
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2201      	movs	r2, #1
 8007416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d011      	beq.n	8007458 <HAL_UART_IRQHandler+0xf8>
 8007434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2202      	movs	r2, #2
 8007446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800744e:	f043 0204 	orr.w	r2, r3, #4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_UART_IRQHandler+0x128>
 8007464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2204      	movs	r2, #4
 8007476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747e:	f043 0202 	orr.w	r2, r3, #2
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074a4:	4b5a      	ldr	r3, [pc, #360]	; (8007610 <HAL_UART_IRQHandler+0x2b0>)
 80074a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2208      	movs	r2, #8
 80074b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ba:	f043 0208 	orr.w	r2, r3, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d012      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 823c 	beq.w	800797a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d013      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800750e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800751a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800753c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d005      	beq.n	800755a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800754e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007556:	2b00      	cmp	r3, #0
 8007558:	d04f      	beq.n	80075fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ff7c 	bl	8008458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d141      	bne.n	80075f2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800759a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800759e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1d9      	bne.n	800756e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d013      	beq.n	80075ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c6:	4a14      	ldr	r2, [pc, #80]	; (8007618 <HAL_UART_IRQHandler+0x2b8>)
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc fd1c 	bl	800400c <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d017      	beq.n	800760a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00f      	b.n	800760a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9d9 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e00b      	b.n	800760a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9d5 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	e007      	b.n	800760a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9d1 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007608:	e1b7      	b.n	800797a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760a:	bf00      	nop
    return;
 800760c:	e1b5      	b.n	800797a <HAL_UART_IRQHandler+0x61a>
 800760e:	bf00      	nop
 8007610:	10000001 	.word	0x10000001
 8007614:	04000120 	.word	0x04000120
 8007618:	08008659 	.word	0x08008659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007620:	2b01      	cmp	r3, #1
 8007622:	f040 814a 	bne.w	80078ba <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8143 	beq.w	80078ba <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 813c 	beq.w	80078ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2210      	movs	r2, #16
 8007648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	f040 80b5 	bne.w	80077c4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007666:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8187 	beq.w	800797e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800767a:	429a      	cmp	r2, r3
 800767c:	f080 817f 	bcs.w	800797e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	f040 8086 	bne.w	80077a8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1da      	bne.n	800769c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800770a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800770e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800771c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e1      	bne.n	80076e6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800774c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e3      	bne.n	8007722 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007778:	f023 0310 	bic.w	r3, r3, #16
 800777c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800778a:	65bb      	str	r3, [r7, #88]	; 0x58
 800778c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e4      	bne.n	8007768 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fc fbd4 	bl	8003f50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8f9 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077c2:	e0dc      	b.n	800797e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80ce 	beq.w	8007982 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80077e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80c9 	beq.w	8007982 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007812:	647b      	str	r3, [r7, #68]	; 0x44
 8007814:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e4      	bne.n	80077f0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	623b      	str	r3, [r7, #32]
   return(result);
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800784e:	633a      	str	r2, [r7, #48]	; 0x30
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e1      	bne.n	8007826 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60fb      	str	r3, [r7, #12]
   return(result);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	617b      	str	r3, [r7, #20]
   return(result);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e4      	bne.n	8007876 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f87e 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078b8:	e063      	b.n	8007982 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00e      	beq.n	80078e4 <HAL_UART_IRQHandler+0x584>
 80078c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fb59 	bl	8008f94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078e2:	e051      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d014      	beq.n	800791a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03a      	beq.n	8007986 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
    }
    return;
 8007918:	e035      	b.n	8007986 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <HAL_UART_IRQHandler+0x5da>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fea6 	bl	8008684 <UART_EndTransmit_IT>
    return;
 8007938:	e026      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_UART_IRQHandler+0x5fa>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fb30 	bl	8008fb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007958:	e016      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_UART_IRQHandler+0x628>
 8007966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796a:	2b00      	cmp	r3, #0
 800796c:	da0c      	bge.n	8007988 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fb19 	bl	8008fa6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007974:	e008      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
      return;
 8007976:	bf00      	nop
 8007978:	e006      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
    return;
 800797a:	bf00      	nop
 800797c:	e004      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
      return;
 800797e:	bf00      	nop
 8007980:	e002      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
      return;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
    return;
 8007986:	bf00      	nop
  }
}
 8007988:	37e8      	adds	r7, #232	; 0xe8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop

08007990 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
	...

080079cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079cc:	b5b0      	push	{r4, r5, r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4bab      	ldr	r3, [pc, #684]	; (8007ca4 <UART_SetConfig+0x2d8>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	69f9      	ldr	r1, [r7, #28]
 8007a00:	430b      	orrs	r3, r1
 8007a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4aa0      	ldr	r2, [pc, #640]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	69f9      	ldr	r1, [r7, #28]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	f023 010f 	bic.w	r1, r3, #15
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a91      	ldr	r2, [pc, #580]	; (8007cac <UART_SetConfig+0x2e0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d122      	bne.n	8007ab2 <UART_SetConfig+0xe6>
 8007a6c:	2003      	movs	r0, #3
 8007a6e:	f7ff fb1d 	bl	80070ac <LL_RCC_GetUSARTClockSource>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d817      	bhi.n	8007aac <UART_SetConfig+0xe0>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0xb8>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007a9b 	.word	0x08007a9b
 8007a90:	08007aa7 	.word	0x08007aa7
 8007a94:	2301      	movs	r3, #1
 8007a96:	76fb      	strb	r3, [r7, #27]
 8007a98:	e072      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	76fb      	strb	r3, [r7, #27]
 8007a9e:	e06f      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	76fb      	strb	r3, [r7, #27]
 8007aa4:	e06c      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	76fb      	strb	r3, [r7, #27]
 8007aaa:	e069      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007aac:	2310      	movs	r3, #16
 8007aae:	76fb      	strb	r3, [r7, #27]
 8007ab0:	e066      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a7e      	ldr	r2, [pc, #504]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d134      	bne.n	8007b26 <UART_SetConfig+0x15a>
 8007abc:	200c      	movs	r0, #12
 8007abe:	f7ff faf5 	bl	80070ac <LL_RCC_GetUSARTClockSource>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007ac8:	2b0c      	cmp	r3, #12
 8007aca:	d829      	bhi.n	8007b20 <UART_SetConfig+0x154>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x108>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007b09 	.word	0x08007b09
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b21 	.word	0x08007b21
 8007aec:	08007b21 	.word	0x08007b21
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007b0f 	.word	0x08007b0f
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b1b 	.word	0x08007b1b
 8007b08:	2300      	movs	r3, #0
 8007b0a:	76fb      	strb	r3, [r7, #27]
 8007b0c:	e038      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	76fb      	strb	r3, [r7, #27]
 8007b12:	e035      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b14:	2304      	movs	r3, #4
 8007b16:	76fb      	strb	r3, [r7, #27]
 8007b18:	e032      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	76fb      	strb	r3, [r7, #27]
 8007b1e:	e02f      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b20:	2310      	movs	r3, #16
 8007b22:	76fb      	strb	r3, [r7, #27]
 8007b24:	e02c      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a5f      	ldr	r2, [pc, #380]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d125      	bne.n	8007b7c <UART_SetConfig+0x1b0>
 8007b30:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007b34:	f7ff facc 	bl	80070d0 <LL_RCC_GetLPUARTClockSource>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b3e:	d017      	beq.n	8007b70 <UART_SetConfig+0x1a4>
 8007b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b44:	d817      	bhi.n	8007b76 <UART_SetConfig+0x1aa>
 8007b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b4a:	d00b      	beq.n	8007b64 <UART_SetConfig+0x198>
 8007b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b50:	d811      	bhi.n	8007b76 <UART_SetConfig+0x1aa>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <UART_SetConfig+0x192>
 8007b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5a:	d006      	beq.n	8007b6a <UART_SetConfig+0x19e>
 8007b5c:	e00b      	b.n	8007b76 <UART_SetConfig+0x1aa>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	76fb      	strb	r3, [r7, #27]
 8007b62:	e00d      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b64:	2302      	movs	r3, #2
 8007b66:	76fb      	strb	r3, [r7, #27]
 8007b68:	e00a      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b6a:	2304      	movs	r3, #4
 8007b6c:	76fb      	strb	r3, [r7, #27]
 8007b6e:	e007      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b70:	2308      	movs	r3, #8
 8007b72:	76fb      	strb	r3, [r7, #27]
 8007b74:	e004      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b76:	2310      	movs	r3, #16
 8007b78:	76fb      	strb	r3, [r7, #27]
 8007b7a:	e001      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a48      	ldr	r2, [pc, #288]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f040 8098 	bne.w	8007cbc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b8c:	7efb      	ldrb	r3, [r7, #27]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d823      	bhi.n	8007bda <UART_SetConfig+0x20e>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x1cc>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bdb 	.word	0x08007bdb
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bdb 	.word	0x08007bdb
 8007ba8:	08007bcb 	.word	0x08007bcb
 8007bac:	08007bdb 	.word	0x08007bdb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007bdb 	.word	0x08007bdb
 8007bb8:	08007bd3 	.word	0x08007bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd ff56 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007bc0:	6178      	str	r0, [r7, #20]
        break;
 8007bc2:	e00f      	b.n	8007be4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc4:	4b3b      	ldr	r3, [pc, #236]	; (8007cb4 <UART_SetConfig+0x2e8>)
 8007bc6:	617b      	str	r3, [r7, #20]
        break;
 8007bc8:	e00c      	b.n	8007be4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bca:	f7fd fe9b 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007bce:	6178      	str	r0, [r7, #20]
        break;
 8007bd0:	e008      	b.n	8007be4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd6:	617b      	str	r3, [r7, #20]
        break;
 8007bd8:	e004      	b.n	8007be4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	76bb      	strb	r3, [r7, #26]
        break;
 8007be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8128 	beq.w	8007e3c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	4a31      	ldr	r2, [pc, #196]	; (8007cb8 <UART_SetConfig+0x2ec>)
 8007bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4413      	add	r3, r2
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d305      	bcc.n	8007c1c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d902      	bls.n	8007c22 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	76bb      	strb	r3, [r7, #26]
 8007c20:	e10c      	b.n	8007e3c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f04f 0100 	mov.w	r1, #0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	4a22      	ldr	r2, [pc, #136]	; (8007cb8 <UART_SetConfig+0x2ec>)
 8007c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	f7f8 ff8f 	bl	8000b5c <__aeabi_uldivmod>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	f04f 0300 	mov.w	r3, #0
 8007c4e:	020b      	lsls	r3, r1, #8
 8007c50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c54:	0202      	lsls	r2, r0, #8
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	6849      	ldr	r1, [r1, #4]
 8007c5a:	0849      	lsrs	r1, r1, #1
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	f04f 0100 	mov.w	r1, #0
 8007c62:	1814      	adds	r4, r2, r0
 8007c64:	eb43 0501 	adc.w	r5, r3, r1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7f8 ff71 	bl	8000b5c <__aeabi_uldivmod>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4613      	mov	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c88:	d308      	bcc.n	8007c9c <UART_SetConfig+0x2d0>
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c90:	d204      	bcs.n	8007c9c <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e0cf      	b.n	8007e3c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	76bb      	strb	r3, [r7, #26]
 8007ca0:	e0cc      	b.n	8007e3c <UART_SetConfig+0x470>
 8007ca2:	bf00      	nop
 8007ca4:	cfff69f3 	.word	0xcfff69f3
 8007ca8:	40008000 	.word	0x40008000
 8007cac:	40013800 	.word	0x40013800
 8007cb0:	40004400 	.word	0x40004400
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	0801c0d8 	.word	0x0801c0d8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc4:	d165      	bne.n	8007d92 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8007cc6:	7efb      	ldrb	r3, [r7, #27]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d828      	bhi.n	8007d1e <UART_SetConfig+0x352>
 8007ccc:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <UART_SetConfig+0x308>)
 8007cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd2:	bf00      	nop
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007d01 	.word	0x08007d01
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	08007d1f 	.word	0x08007d1f
 8007ce4:	08007d0f 	.word	0x08007d0f
 8007ce8:	08007d1f 	.word	0x08007d1f
 8007cec:	08007d1f 	.word	0x08007d1f
 8007cf0:	08007d1f 	.word	0x08007d1f
 8007cf4:	08007d17 	.word	0x08007d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf8:	f7fd feb8 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007cfc:	6178      	str	r0, [r7, #20]
        break;
 8007cfe:	e013      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d00:	f7fd fec6 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 8007d04:	6178      	str	r0, [r7, #20]
        break;
 8007d06:	e00f      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d08:	4b56      	ldr	r3, [pc, #344]	; (8007e64 <UART_SetConfig+0x498>)
 8007d0a:	617b      	str	r3, [r7, #20]
        break;
 8007d0c:	e00c      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0e:	f7fd fdf9 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007d12:	6178      	str	r0, [r7, #20]
        break;
 8007d14:	e008      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1a:	617b      	str	r3, [r7, #20]
        break;
 8007d1c:	e004      	b.n	8007d28 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	76bb      	strb	r3, [r7, #26]
        break;
 8007d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8086 	beq.w	8007e3c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	4a4c      	ldr	r2, [pc, #304]	; (8007e68 <UART_SetConfig+0x49c>)
 8007d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d42:	005a      	lsls	r2, r3, #1
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	085b      	lsrs	r3, r3, #1
 8007d4a:	441a      	add	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	d916      	bls.n	8007d8c <UART_SetConfig+0x3c0>
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d64:	d212      	bcs.n	8007d8c <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f023 030f 	bic.w	r3, r3, #15
 8007d6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	89fb      	ldrh	r3, [r7, #14]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	89fa      	ldrh	r2, [r7, #14]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e057      	b.n	8007e3c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	76bb      	strb	r3, [r7, #26]
 8007d90:	e054      	b.n	8007e3c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d92:	7efb      	ldrb	r3, [r7, #27]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d828      	bhi.n	8007dea <UART_SetConfig+0x41e>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x3d4>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007deb 	.word	0x08007deb
 8007db0:	08007ddb 	.word	0x08007ddb
 8007db4:	08007deb 	.word	0x08007deb
 8007db8:	08007deb 	.word	0x08007deb
 8007dbc:	08007deb 	.word	0x08007deb
 8007dc0:	08007de3 	.word	0x08007de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd fe52 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6178      	str	r0, [r7, #20]
        break;
 8007dca:	e013      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dcc:	f7fd fe60 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 8007dd0:	6178      	str	r0, [r7, #20]
        break;
 8007dd2:	e00f      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <UART_SetConfig+0x498>)
 8007dd6:	617b      	str	r3, [r7, #20]
        break;
 8007dd8:	e00c      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fd fd93 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007dde:	6178      	str	r0, [r7, #20]
        break;
 8007de0:	e008      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007de6:	617b      	str	r3, [r7, #20]
        break;
 8007de8:	e004      	b.n	8007df4 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	76bb      	strb	r3, [r7, #26]
        break;
 8007df2:	bf00      	nop
    }

    if (pclk != 0U)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d020      	beq.n	8007e3c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <UART_SetConfig+0x49c>)
 8007e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e04:	461a      	mov	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	441a      	add	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d908      	bls.n	8007e38 <UART_SetConfig+0x46c>
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d204      	bcs.n	8007e38 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	e001      	b.n	8007e3c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e58:	7ebb      	ldrb	r3, [r7, #26]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bdb0      	pop	{r4, r5, r7, pc}
 8007e62:	bf00      	nop
 8007e64:	00f42400 	.word	0x00f42400
 8007e68:	0801c0d8 	.word	0x0801c0d8

08007e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01a      	beq.n	8007f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6a:	d10a      	bne.n	8007f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af02      	add	r7, sp, #8
 8007fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fbe:	f7f9 fcbd 	bl	800193c <HAL_GetTick>
 8007fc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d10e      	bne.n	8007ff0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f82f 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e025      	b.n	800803c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d10e      	bne.n	800801c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f819 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e00f      	b.n	800803c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b09c      	sub	sp, #112	; 0x70
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	4613      	mov	r3, r2
 8008052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008054:	e0a9      	b.n	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	f000 80a5 	beq.w	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008060:	f7f9 fc6c 	bl	800193c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <UART_WaitOnFlagUntilTimeout+0x32>
 8008070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008072:	2b00      	cmp	r3, #0
 8008074:	d140      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800808a:	667b      	str	r3, [r7, #100]	; 0x64
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008096:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800809a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f023 0301 	bic.w	r3, r3, #1
 80080be:	663b      	str	r3, [r7, #96]	; 0x60
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80080ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e5      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e069      	b.n	80081cc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d051      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008114:	d149      	bne.n	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800811e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	637b      	str	r3, [r7, #52]	; 0x34
 8008140:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e6      	bne.n	8008120 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3308      	adds	r3, #8
 8008158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	613b      	str	r3, [r7, #16]
   return(result);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	66bb      	str	r3, [r7, #104]	; 0x68
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008172:	623a      	str	r2, [r7, #32]
 8008174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	69f9      	ldr	r1, [r7, #28]
 8008178:	6a3a      	ldr	r2, [r7, #32]
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e5      	bne.n	8008152 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e010      	b.n	80081cc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69da      	ldr	r2, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4013      	ands	r3, r2
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	bf0c      	ite	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	2300      	movne	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	f43f af46 	beq.w	8008056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3770      	adds	r7, #112	; 0x70
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b09d      	sub	sp, #116	; 0x74
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008206:	d10e      	bne.n	8008226 <UART_Start_Receive_IT+0x52>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <UART_Start_Receive_IT+0x48>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800821a:	e02d      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008224:	e028      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10d      	bne.n	800824a <UART_Start_Receive_IT+0x76>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <UART_Start_Receive_IT+0x6c>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	22ff      	movs	r2, #255	; 0xff
 800823a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800823e:	e01b      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	227f      	movs	r2, #127	; 0x7f
 8008244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008248:	e016      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008252:	d10d      	bne.n	8008270 <UART_Start_Receive_IT+0x9c>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <UART_Start_Receive_IT+0x92>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	227f      	movs	r2, #127	; 0x7f
 8008260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008264:	e008      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	223f      	movs	r2, #63	; 0x3f
 800826a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800826e:	e003      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2222      	movs	r2, #34	; 0x22
 8008284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80082aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c4:	d14d      	bne.n	8008362 <UART_Start_Receive_IT+0x18e>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d347      	bcc.n	8008362 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082da:	d107      	bne.n	80082ec <UART_Start_Receive_IT+0x118>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4a38      	ldr	r2, [pc, #224]	; (80083c8 <UART_Start_Receive_IT+0x1f4>)
 80082e8:	671a      	str	r2, [r3, #112]	; 0x70
 80082ea:	e002      	b.n	80082f2 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a37      	ldr	r2, [pc, #220]	; (80083cc <UART_Start_Receive_IT+0x1f8>)
 80082f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800830e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008318:	64bb      	str	r3, [r7, #72]	; 0x48
 800831a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800831e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e6      	bne.n	80082fa <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008342:	667b      	str	r3, [r7, #100]	; 0x64
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800834c:	637a      	str	r2, [r7, #52]	; 0x34
 800834e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_Start_Receive_IT+0x158>
 8008360:	e02c      	b.n	80083bc <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	d107      	bne.n	800837c <UART_Start_Receive_IT+0x1a8>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <UART_Start_Receive_IT+0x1fc>)
 8008378:	671a      	str	r2, [r3, #112]	; 0x70
 800837a:	e002      	b.n	8008382 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <UART_Start_Receive_IT+0x200>)
 8008380:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	613b      	str	r3, [r7, #16]
   return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800839e:	663b      	str	r3, [r7, #96]	; 0x60
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e6      	bne.n	800838a <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3774      	adds	r7, #116	; 0x74
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr
 80083c8:	08008c95 	.word	0x08008c95
 80083cc:	0800899d 	.word	0x0800899d
 80083d0:	0800883b 	.word	0x0800883b
 80083d4:	080086db 	.word	0x080086db

080083d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b08f      	sub	sp, #60	; 0x3c
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008400:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e6      	bne.n	80083e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	60bb      	str	r3, [r7, #8]
   return(result);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008428:	633b      	str	r3, [r7, #48]	; 0x30
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008432:	61ba      	str	r2, [r7, #24]
 8008434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6979      	ldr	r1, [r7, #20]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	613b      	str	r3, [r7, #16]
   return(result);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800844e:	bf00      	nop
 8008450:	373c      	adds	r7, #60	; 0x3c
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b095      	sub	sp, #84	; 0x54
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	643b      	str	r3, [r7, #64]	; 0x40
 8008480:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e6      	bne.n	8008460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e3      	bne.n	8008492 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d118      	bne.n	8008504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0310 	bic.w	r3, r3, #16
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	613b      	str	r3, [r7, #16]
   return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008518:	bf00      	nop
 800851a:	3754      	adds	r7, #84	; 0x54
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b090      	sub	sp, #64	; 0x40
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d137      	bne.n	80085ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	2200      	movs	r2, #0
 8008542:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	623b      	str	r3, [r7, #32]
   return(result);
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008566:	633a      	str	r2, [r7, #48]	; 0x30
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e5      	bne.n	8008546 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	60fb      	str	r3, [r7, #12]
   return(result);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	69b9      	ldr	r1, [r7, #24]
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	617b      	str	r3, [r7, #20]
   return(result);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085ac:	e002      	b.n	80085b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80085ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085b0:	f7f9 ff20 	bl	80023f4 <HAL_UART_TxCpltCallback>
}
 80085b4:	bf00      	nop
 80085b6:	3740      	adds	r7, #64	; 0x40
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff f9e0 	bl	8007990 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008600:	2b80      	cmp	r3, #128	; 0x80
 8008602:	d109      	bne.n	8008618 <UART_DMAError+0x40>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b21      	cmp	r3, #33	; 0x21
 8008608:	d106      	bne.n	8008618 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008612:	6978      	ldr	r0, [r7, #20]
 8008614:	f7ff fee0 	bl	80083d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d109      	bne.n	800863a <UART_DMAError+0x62>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b22      	cmp	r3, #34	; 0x22
 800862a:	d106      	bne.n	800863a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2200      	movs	r2, #0
 8008630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008634:	6978      	ldr	r0, [r7, #20]
 8008636:	f7ff ff0f 	bl	8008458 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008640:	f043 0210 	orr.w	r2, r3, #16
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800864a:	6978      	ldr	r0, [r7, #20]
 800864c:	f7ff f9a9 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008650:	bf00      	nop
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff f993 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	60bb      	str	r3, [r7, #8]
   return(result);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	61bb      	str	r3, [r7, #24]
 80086ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	613b      	str	r3, [r7, #16]
   return(result);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e6      	bne.n	800868c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7f9 fe91 	bl	80023f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086d2:	bf00      	nop
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b096      	sub	sp, #88	; 0x58
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f2:	2b22      	cmp	r3, #34	; 0x22
 80086f4:	f040 8095 	bne.w	8008822 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008702:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008706:	b2d9      	uxtb	r1, r3
 8008708:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800870c:	b2da      	uxtb	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	400a      	ands	r2, r1
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800873a:	b29b      	uxth	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d178      	bne.n	8008832 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008754:	653b      	str	r3, [r7, #80]	; 0x50
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875e:	647b      	str	r3, [r7, #68]	; 0x44
 8008760:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	623b      	str	r3, [r7, #32]
   return(result);
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008792:	633a      	str	r2, [r7, #48]	; 0x30
 8008794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e5      	bne.n	8008772 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d12e      	bne.n	800881a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0310 	bic.w	r3, r3, #16
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	69b9      	ldr	r1, [r7, #24]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	617b      	str	r3, [r7, #20]
   return(result);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e6      	bne.n	80087c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b10      	cmp	r3, #16
 8008800:	d103      	bne.n	800880a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2210      	movs	r2, #16
 8008808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff f8ce 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008818:	e00b      	b.n	8008832 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7f9 fdf8 	bl	8002410 <HAL_UART_RxCpltCallback>
}
 8008820:	e007      	b.n	8008832 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0208 	orr.w	r2, r2, #8
 8008830:	619a      	str	r2, [r3, #24]
}
 8008832:	bf00      	nop
 8008834:	3758      	adds	r7, #88	; 0x58
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b096      	sub	sp, #88	; 0x58
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008848:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008852:	2b22      	cmp	r3, #34	; 0x22
 8008854:	f040 8095 	bne.w	8008982 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008866:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008868:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800886c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008870:	4013      	ands	r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008876:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	1c9a      	adds	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d178      	bne.n	8008992 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088be:	643b      	str	r3, [r7, #64]	; 0x40
 80088c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e6      	bne.n	80088a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e5      	bne.n	80088d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d12e      	bne.n	800897a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f023 0310 	bic.w	r3, r3, #16
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6979      	ldr	r1, [r7, #20]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	613b      	str	r3, [r7, #16]
   return(result);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b10      	cmp	r3, #16
 8008960:	d103      	bne.n	800896a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2210      	movs	r2, #16
 8008968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff f81e 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008978:	e00b      	b.n	8008992 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7f9 fd48 	bl	8002410 <HAL_UART_RxCpltCallback>
}
 8008980:	e007      	b.n	8008992 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699a      	ldr	r2, [r3, #24]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0208 	orr.w	r2, r2, #8
 8008990:	619a      	str	r2, [r3, #24]
}
 8008992:	bf00      	nop
 8008994:	3758      	adds	r7, #88	; 0x58
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b0a6      	sub	sp, #152	; 0x98
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d2:	2b22      	cmp	r3, #34	; 0x22
 80089d4:	f040 814f 	bne.w	8008c76 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089e2:	e0f6      	b.n	8008bd2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80089f2:	b2d9      	uxtb	r1, r3
 80089f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fe:	400a      	ands	r2, r1
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d053      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d011      	beq.n	8008a66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a5c:	f043 0201 	orr.w	r2, r3, #1
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d011      	beq.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2202      	movs	r2, #2
 8008a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8c:	f043 0204 	orr.w	r2, r3, #4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d011      	beq.n	8008ac6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abc:	f043 0202 	orr.w	r2, r3, #2
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d006      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fe ff66 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d173      	bne.n	8008bd2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b0e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e4      	bne.n	8008aea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b44:	657a      	str	r2, [r7, #84]	; 0x54
 8008b46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e3      	bne.n	8008b20 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d12e      	bne.n	8008bcc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	f023 0310 	bic.w	r3, r3, #16
 8008b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b92:	643b      	str	r3, [r7, #64]	; 0x40
 8008b94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e6      	bne.n	8008b74 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b10      	cmp	r3, #16
 8008bb2:	d103      	bne.n	8008bbc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2210      	movs	r2, #16
 8008bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7fe fef5 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8008bca:	e002      	b.n	8008bd2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7f9 fc1f 	bl	8002410 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d006      	beq.n	8008be8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f47f aefe 	bne.w	80089e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008bf2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d045      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d23e      	bcs.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e5      	bne.n	8008c08 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008c40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f043 0320 	orr.w	r3, r3, #32
 8008c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	6979      	ldr	r1, [r7, #20]
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e6      	bne.n	8008c42 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c74:	e007      	b.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	619a      	str	r2, [r3, #24]
}
 8008c86:	bf00      	nop
 8008c88:	3798      	adds	r7, #152	; 0x98
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	080086db 	.word	0x080086db

08008c94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b0a8      	sub	sp, #160	; 0xa0
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ca2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cca:	2b22      	cmp	r3, #34	; 0x22
 8008ccc:	f040 8153 	bne.w	8008f76 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cd6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cda:	e0fa      	b.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008cee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008cf2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d04:	1c9a      	adds	r2, r3, #2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d053      	beq.n	8008dda <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d011      	beq.n	8008d62 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008d3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d58:	f043 0201 	orr.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d011      	beq.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d88:	f043 0204 	orr.w	r2, r3, #4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d011      	beq.n	8008dc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2204      	movs	r2, #4
 8008db0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008db8:	f043 0202 	orr.w	r2, r3, #2
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7fe fde8 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d175      	bne.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e0a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e4      	bne.n	8008de6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3308      	adds	r3, #8
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e44:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e1      	bne.n	8008e1c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d12e      	bne.n	8008ecc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	f023 0310 	bic.w	r3, r3, #16
 8008e88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e92:	647b      	str	r3, [r7, #68]	; 0x44
 8008e94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	2b10      	cmp	r3, #16
 8008eb2:	d103      	bne.n	8008ebc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2210      	movs	r2, #16
 8008eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7fe fd75 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8008eca:	e002      	b.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7f9 fa9f 	bl	8002410 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ed2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f47f aefa 	bne.w	8008cdc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008eee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ef2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d045      	beq.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f00:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d23e      	bcs.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	623b      	str	r3, [r7, #32]
   return(result);
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f28:	633a      	str	r2, [r7, #48]	; 0x30
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a14      	ldr	r2, [pc, #80]	; (8008f90 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008f40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f043 0320 	orr.w	r3, r3, #32
 8008f56:	673b      	str	r3, [r7, #112]	; 0x70
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	69b9      	ldr	r1, [r7, #24]
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f74:	e007      	b.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699a      	ldr	r2, [r3, #24]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f042 0208 	orr.w	r2, r2, #8
 8008f84:	619a      	str	r2, [r3, #24]
}
 8008f86:	bf00      	nop
 8008f88:	37a0      	adds	r7, #160	; 0xa0
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	0800883b 	.word	0x0800883b

08008f94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bc80      	pop	{r7}
 8008fc8:	4770      	bx	lr

08008fca <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af02      	add	r7, sp, #8
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	1d3b      	adds	r3, r7, #4
 8008fd4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e046      	b.n	8009078 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2224      	movs	r2, #36	; 0x24
 8008ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 0201 	bic.w	r2, r2, #1
 8009008:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009024:	1d3b      	adds	r3, r7, #4
 8009026:	e893 0006 	ldmia.w	r3, {r1, r2}
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f911 	bl	8009252 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009040:	f7f8 fc7c 	bl	800193c <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009046:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2200      	movs	r2, #0
 8009050:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7fe fff5 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	75fb      	strb	r3, [r7, #23]
 8009064:	e003      	b.n	800906e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_UARTEx_EnableStopMode+0x16>
 8009092:	2302      	movs	r3, #2
 8009094:	e021      	b.n	80090da <HAL_UARTEx_EnableStopMode+0x5a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f043 0302 	orr.w	r3, r3, #2
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3724      	adds	r7, #36	; 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_UARTEx_EnableFifoMode+0x16>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e02b      	b.n	8009152 <HAL_UARTEx_EnableFifoMode+0x6e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2224      	movs	r2, #36	; 0x24
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009130:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8ac 	bl	8009298 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800916e:	2302      	movs	r3, #2
 8009170:	e02d      	b.n	80091ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2224      	movs	r2, #36	; 0x24
 800917e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f872 	bl	8009298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e02d      	b.n	800924a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2224      	movs	r2, #36	; 0x24
 80091fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f834 	bl	8009298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	1d3b      	adds	r3, r7, #4
 800925c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f023 0210 	bic.w	r2, r3, #16
 800926a:	893b      	ldrh	r3, [r7, #8]
 800926c:	4619      	mov	r1, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009280:	7abb      	ldrb	r3, [r7, #10]
 8009282:	061a      	lsls	r2, r3, #24
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
}
 800928c:	bf00      	nop
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr
	...

08009298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092b8:	e031      	b.n	800931e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ba:	2308      	movs	r3, #8
 80092bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092be:	2308      	movs	r3, #8
 80092c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	0e5b      	lsrs	r3, r3, #25
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	0f5b      	lsrs	r3, r3, #29
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	7b3a      	ldrb	r2, [r7, #12]
 80092e6:	4910      	ldr	r1, [pc, #64]	; (8009328 <UARTEx_SetNbDataToProcess+0x90>)
 80092e8:	5c8a      	ldrb	r2, [r1, r2]
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092ee:	7b3a      	ldrb	r2, [r7, #12]
 80092f0:	490e      	ldr	r1, [pc, #56]	; (800932c <UARTEx_SetNbDataToProcess+0x94>)
 80092f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	7b7a      	ldrb	r2, [r7, #13]
 8009304:	4908      	ldr	r1, [pc, #32]	; (8009328 <UARTEx_SetNbDataToProcess+0x90>)
 8009306:	5c8a      	ldrb	r2, [r1, r2]
 8009308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800930c:	7b7a      	ldrb	r2, [r7, #13]
 800930e:	4907      	ldr	r1, [pc, #28]	; (800932c <UARTEx_SetNbDataToProcess+0x94>)
 8009310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009312:	fb93 f3f2 	sdiv	r3, r3, r2
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800931e:	bf00      	nop
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr
 8009328:	0801c0f0 	.word	0x0801c0f0
 800932c:	0801c0f8 	.word	0x0801c0f8

08009330 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009334:	f7f8 f9a2 	bl	800167c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009338:	f000 f80a 	bl	8009350 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800933c:	bf00      	nop
 800933e:	bd80      	pop	{r7, pc}

08009340 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	f011 fafc 	bl	801a944 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800934c:	bf00      	nop
 800934e:	bd80      	pop	{r7, pc}

08009350 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 8009356:	2000      	movs	r0, #0
 8009358:	f7f9 f8bc 	bl	80024d4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800935c:	2001      	movs	r0, #1
 800935e:	f7f9 f8b9 	bl	80024d4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009362:	2002      	movs	r0, #2
 8009364:	f7f9 f8b6 	bl	80024d4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009368:	2101      	movs	r1, #1
 800936a:	2000      	movs	r0, #0
 800936c:	f7f9 f962 	bl	8002634 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8009370:	2300      	movs	r3, #0
 8009372:	9302      	str	r3, [sp, #8]
 8009374:	2301      	movs	r3, #1
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	2301      	movs	r3, #1
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4b3f      	ldr	r3, [pc, #252]	; (800947c <LoRaWAN_Init+0x12c>)
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	2002      	movs	r0, #2
 8009384:	f011 ff12 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009388:	2300      	movs	r3, #0
 800938a:	9302      	str	r3, [sp, #8]
 800938c:	2303      	movs	r3, #3
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	2302      	movs	r3, #2
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	4b3a      	ldr	r3, [pc, #232]	; (8009480 <LoRaWAN_Init+0x130>)
 8009396:	2200      	movs	r2, #0
 8009398:	2100      	movs	r1, #0
 800939a:	2002      	movs	r0, #2
 800939c:	f011 ff06 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 80093a0:	2300      	movs	r3, #0
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	2301      	movs	r3, #1
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	2301      	movs	r3, #1
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4b35      	ldr	r3, [pc, #212]	; (8009484 <LoRaWAN_Init+0x134>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	2002      	movs	r0, #2
 80093b4:	f011 fefa 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80093b8:	2300      	movs	r3, #0
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <LoRaWAN_Init+0x138>)
 80093be:	2200      	movs	r2, #0
 80093c0:	f04f 31ff 	mov.w	r1, #4294967295
 80093c4:	4831      	ldr	r0, [pc, #196]	; (800948c <LoRaWAN_Init+0x13c>)
 80093c6:	f011 fc43 	bl	801ac50 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80093ca:	2300      	movs	r3, #0
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <LoRaWAN_Init+0x140>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	f04f 31ff 	mov.w	r1, #4294967295
 80093d6:	482f      	ldr	r0, [pc, #188]	; (8009494 <LoRaWAN_Init+0x144>)
 80093d8:	f011 fc3a 	bl	801ac50 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80093dc:	2300      	movs	r3, #0
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4b2d      	ldr	r3, [pc, #180]	; (8009498 <LoRaWAN_Init+0x148>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	f04f 31ff 	mov.w	r1, #4294967295
 80093e8:	482c      	ldr	r0, [pc, #176]	; (800949c <LoRaWAN_Init+0x14c>)
 80093ea:	f011 fc31 	bl	801ac50 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80093ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80093f2:	4826      	ldr	r0, [pc, #152]	; (800948c <LoRaWAN_Init+0x13c>)
 80093f4:	f011 fd40 	bl	801ae78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80093f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80093fc:	4825      	ldr	r0, [pc, #148]	; (8009494 <LoRaWAN_Init+0x144>)
 80093fe:	f011 fd3b 	bl	801ae78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8009402:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009406:	4825      	ldr	r0, [pc, #148]	; (800949c <LoRaWAN_Init+0x14c>)
 8009408:	f011 fd36 	bl	801ae78 <UTIL_TIMER_SetPeriod>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800940c:	4a24      	ldr	r2, [pc, #144]	; (80094a0 <LoRaWAN_Init+0x150>)
 800940e:	2100      	movs	r1, #0
 8009410:	2001      	movs	r0, #1
 8009412:	f011 fb7b 	bl	801ab0c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009416:	4a23      	ldr	r2, [pc, #140]	; (80094a4 <LoRaWAN_Init+0x154>)
 8009418:	2100      	movs	r1, #0
 800941a:	2002      	movs	r0, #2
 800941c:	f011 fb76 	bl	801ab0c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009420:	f000 fb1a 	bl	8009a58 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8009424:	4820      	ldr	r0, [pc, #128]	; (80094a8 <LoRaWAN_Init+0x158>)
 8009426:	f001 ff93 	bl	800b350 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800942a:	4820      	ldr	r0, [pc, #128]	; (80094ac <LoRaWAN_Init+0x15c>)
 800942c:	f001 ffdc 	bl	800b3e8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009430:	481a      	ldr	r0, [pc, #104]	; (800949c <LoRaWAN_Init+0x14c>)
 8009432:	f011 fc43 	bl	801acbc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8009436:	4b1e      	ldr	r3, [pc, #120]	; (80094b0 <LoRaWAN_Init+0x160>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f002 f90a 	bl	800b654 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009440:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <LoRaWAN_Init+0x164>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d111      	bne.n	800946c <LoRaWAN_Init+0x11c>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009448:	2300      	movs	r3, #0
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	4b1a      	ldr	r3, [pc, #104]	; (80094b8 <LoRaWAN_Init+0x168>)
 800944e:	2200      	movs	r2, #0
 8009450:	f04f 31ff 	mov.w	r1, #4294967295
 8009454:	4819      	ldr	r0, [pc, #100]	; (80094bc <LoRaWAN_Init+0x16c>)
 8009456:	f011 fbfb 	bl	801ac50 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800945a:	f242 7110 	movw	r1, #10000	; 0x2710
 800945e:	4817      	ldr	r0, [pc, #92]	; (80094bc <LoRaWAN_Init+0x16c>)
 8009460:	f011 fd0a 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009464:	4815      	ldr	r0, [pc, #84]	; (80094bc <LoRaWAN_Init+0x16c>)
 8009466:	f011 fc29 	bl	801acbc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800946a:	e003      	b.n	8009474 <LoRaWAN_Init+0x124>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800946c:	2101      	movs	r1, #1
 800946e:	2000      	movs	r0, #0
 8009470:	f7f9 f8e0 	bl	8002634 <BSP_PB_Init>
}
 8009474:	bf00      	nop
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	0801b850 	.word	0x0801b850
 8009480:	0801b870 	.word	0x0801b870
 8009484:	0801b890 	.word	0x0801b890
 8009488:	080098c9 	.word	0x080098c9
 800948c:	20000270 	.word	0x20000270
 8009490:	080098df 	.word	0x080098df
 8009494:	20000288 	.word	0x20000288
 8009498:	080098f5 	.word	0x080098f5
 800949c:	200002a0 	.word	0x200002a0
 80094a0:	0800b641 	.word	0x0800b641
 80094a4:	08009639 	.word	0x08009639
 80094a8:	2000003c 	.word	0x2000003c
 80094ac:	20000070 	.word	0x20000070
 80094b0:	20000038 	.word	0x20000038
 80094b4:	20000160 	.word	0x20000160
 80094b8:	080098a5 	.word	0x080098a5
 80094bc:	20000164 	.word	0x20000164

080094c0 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d0:	d007      	beq.n	80094e2 <HAL_GPIO_EXTI_Callback+0x22>
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d6:	dc09      	bgt.n	80094ec <HAL_GPIO_EXTI_Callback+0x2c>
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d009      	beq.n	80094f0 <HAL_GPIO_EXTI_Callback+0x30>
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d009      	beq.n	80094f4 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 80094e0:	e004      	b.n	80094ec <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80094e2:	2100      	movs	r1, #0
 80094e4:	2002      	movs	r0, #2
 80094e6:	f011 fb33 	bl	801ab50 <UTIL_SEQ_SetTask>
      break;
 80094ea:	e004      	b.n	80094f6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 80094f4:	bf00      	nop
  }
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009500:	b5b0      	push	{r4, r5, r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af06      	add	r7, sp, #24
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <OnRxData+0x16>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d078      	beq.n	8009608 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 8009516:	2000      	movs	r0, #0
 8009518:	f7f9 f820 	bl	800255c <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800951c:	483f      	ldr	r0, [pc, #252]	; (800961c <OnRxData+0x11c>)
 800951e:	f011 fbcd 	bl	801acbc <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8009522:	4b3f      	ldr	r3, [pc, #252]	; (8009620 <OnRxData+0x120>)
 8009524:	2200      	movs	r2, #0
 8009526:	2100      	movs	r1, #0
 8009528:	2002      	movs	r0, #2
 800952a:	f011 fe3f 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8009538:	4611      	mov	r1, r2
 800953a:	4a3a      	ldr	r2, [pc, #232]	; (8009624 <OnRxData+0x124>)
 800953c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	7809      	ldrb	r1, [r1, #0]
 8009544:	4608      	mov	r0, r1
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800954c:	460c      	mov	r4, r1
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8009554:	460d      	mov	r5, r1
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	9504      	str	r5, [sp, #16]
 8009560:	9403      	str	r4, [sp, #12]
 8009562:	9002      	str	r0, [sp, #8]
 8009564:	9201      	str	r2, [sp, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	4b2f      	ldr	r3, [pc, #188]	; (8009628 <OnRxData+0x128>)
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2003      	movs	r0, #3
 8009570:	f011 fe1c 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d021      	beq.n	80095c0 <OnRxData+0xc0>
 800957c:	2b03      	cmp	r3, #3
 800957e:	d145      	bne.n	800960c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d117      	bne.n	80095b8 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d00e      	beq.n	80095b0 <OnRxData+0xb0>
 8009592:	2b02      	cmp	r3, #2
 8009594:	dc12      	bgt.n	80095bc <OnRxData+0xbc>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <OnRxData+0xa0>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d004      	beq.n	80095a8 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800959e:	e00d      	b.n	80095bc <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 80095a0:	2000      	movs	r0, #0
 80095a2:	f002 f9b9 	bl	800b918 <LmHandlerRequestClass>
              break;
 80095a6:	e00a      	b.n	80095be <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 80095a8:	2001      	movs	r0, #1
 80095aa:	f002 f9b5 	bl	800b918 <LmHandlerRequestClass>
              break;
 80095ae:	e006      	b.n	80095be <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 80095b0:	2002      	movs	r0, #2
 80095b2:	f002 f9b1 	bl	800b918 <LmHandlerRequestClass>
              break;
 80095b6:	e002      	b.n	80095be <OnRxData+0xbe>
          }
        }
 80095b8:	bf00      	nop
 80095ba:	e02a      	b.n	8009612 <OnRxData+0x112>
              break;
 80095bc:	bf00      	nop
        break;
 80095be:	e028      	b.n	8009612 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d123      	bne.n	8009610 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	4b15      	ldr	r3, [pc, #84]	; (800962c <OnRxData+0x12c>)
 80095d6:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 80095d8:	4b14      	ldr	r3, [pc, #80]	; (800962c <OnRxData+0x12c>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d109      	bne.n	80095f4 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 80095e0:	4b13      	ldr	r3, [pc, #76]	; (8009630 <OnRxData+0x130>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	2100      	movs	r1, #0
 80095e6:	2003      	movs	r0, #3
 80095e8:	f011 fde0 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 80095ec:	2002      	movs	r0, #2
 80095ee:	f7f8 ffd9 	bl	80025a4 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 80095f2:	e00d      	b.n	8009610 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <OnRxData+0x134>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	2100      	movs	r1, #0
 80095fa:	2003      	movs	r0, #3
 80095fc:	f011 fdd6 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8009600:	2002      	movs	r0, #2
 8009602:	f7f8 ffab 	bl	800255c <BSP_LED_On>
        break;
 8009606:	e003      	b.n	8009610 <OnRxData+0x110>

      default:

        break;
    }
  }
 8009608:	bf00      	nop
 800960a:	e002      	b.n	8009612 <OnRxData+0x112>
        break;
 800960c:	bf00      	nop
 800960e:	e000      	b.n	8009612 <OnRxData+0x112>
        break;
 8009610:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bdb0      	pop	{r4, r5, r7, pc}
 800961a:	bf00      	nop
 800961c:	20000288 	.word	0x20000288
 8009620:	0801b8b0 	.word	0x0801b8b0
 8009624:	20000088 	.word	0x20000088
 8009628:	0801b8e4 	.word	0x0801b8e4
 800962c:	2000026e 	.word	0x2000026e
 8009630:	0801b92c 	.word	0x0801b92c
 8009634:	0801b938 	.word	0x0801b938

08009638 <SendTxData>:

static void SendTxData(void)
{
 8009638:	b590      	push	{r4, r7, lr}
 800963a:	b091      	sub	sp, #68	; 0x44
 800963c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800965e:	f107 0308 	add.w	r3, r7, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f7f8 fa6c 	bl	8001b40 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8009668:	f7f7 fca0 	bl	8000fac <SYS_GetTemperatureLevel>
 800966c:	4603      	mov	r3, r0
 800966e:	121b      	asrs	r3, r3, #8
 8009670:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4983      	ldr	r1, [pc, #524]	; (8009884 <SendTxData+0x24c>)
 8009676:	4618      	mov	r0, r3
 8009678:	f7f7 f900 	bl	800087c <__aeabi_fmul>
 800967c:	4603      	mov	r3, r0
 800967e:	4982      	ldr	r1, [pc, #520]	; (8009888 <SendTxData+0x250>)
 8009680:	4618      	mov	r0, r3
 8009682:	f7f7 f9af 	bl	80009e4 <__aeabi_fdiv>
 8009686:	4603      	mov	r3, r0
 8009688:	4618      	mov	r0, r3
 800968a:	f7f7 fa47 	bl	8000b1c <__aeabi_f2uiz>
 800968e:	4603      	mov	r3, r0
 8009690:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009692:	4b7e      	ldr	r3, [pc, #504]	; (800988c <SendTxData+0x254>)
 8009694:	2202      	movs	r2, #2
 8009696:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	497b      	ldr	r1, [pc, #492]	; (8009888 <SendTxData+0x250>)
 800969c:	4618      	mov	r0, r3
 800969e:	f7f7 f8ed 	bl	800087c <__aeabi_fmul>
 80096a2:	4603      	mov	r3, r0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f7 fa39 	bl	8000b1c <__aeabi_f2uiz>
 80096aa:	4603      	mov	r3, r0
 80096ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 80096ae:	4b77      	ldr	r3, [pc, #476]	; (800988c <SendTxData+0x254>)
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	1c59      	adds	r1, r3, #1
 80096b6:	6379      	str	r1, [r7, #52]	; 0x34
 80096b8:	4413      	add	r3, r2
 80096ba:	4a75      	ldr	r2, [pc, #468]	; (8009890 <SendTxData+0x258>)
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80096c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	b298      	uxth	r0, r3
 80096c6:	4b71      	ldr	r3, [pc, #452]	; (800988c <SendTxData+0x254>)
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096cc:	1c59      	adds	r1, r3, #1
 80096ce:	6379      	str	r1, [r7, #52]	; 0x34
 80096d0:	4413      	add	r3, r2
 80096d2:	b2c2      	uxtb	r2, r0
 80096d4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80096d6:	4b6d      	ldr	r3, [pc, #436]	; (800988c <SendTxData+0x254>)
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096dc:	1c59      	adds	r1, r3, #1
 80096de:	6379      	str	r1, [r7, #52]	; 0x34
 80096e0:	4413      	add	r3, r2
 80096e2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80096e8:	4b68      	ldr	r3, [pc, #416]	; (800988c <SendTxData+0x254>)
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ee:	1c59      	adds	r1, r3, #1
 80096f0:	6379      	str	r1, [r7, #52]	; 0x34
 80096f2:	4413      	add	r3, r2
 80096f4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80096fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	b298      	uxth	r0, r3
 8009700:	4b62      	ldr	r3, [pc, #392]	; (800988c <SendTxData+0x254>)
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009706:	1c59      	adds	r1, r3, #1
 8009708:	6379      	str	r1, [r7, #52]	; 0x34
 800970a:	4413      	add	r3, r2
 800970c:	b2c2      	uxtb	r2, r0
 800970e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009710:	4b5e      	ldr	r3, [pc, #376]	; (800988c <SendTxData+0x254>)
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	1c59      	adds	r1, r3, #1
 8009718:	6379      	str	r1, [r7, #52]	; 0x34
 800971a:	4413      	add	r3, r2
 800971c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009722:	4b5c      	ldr	r3, [pc, #368]	; (8009894 <SendTxData+0x25c>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b08      	cmp	r3, #8
 8009728:	d007      	beq.n	800973a <SendTxData+0x102>
 800972a:	4b5a      	ldr	r3, [pc, #360]	; (8009894 <SendTxData+0x25c>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d003      	beq.n	800973a <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009732:	4b58      	ldr	r3, [pc, #352]	; (8009894 <SendTxData+0x25c>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d120      	bne.n	800977c <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800973a:	4b54      	ldr	r3, [pc, #336]	; (800988c <SendTxData+0x254>)
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009740:	1c59      	adds	r1, r3, #1
 8009742:	6379      	str	r1, [r7, #52]	; 0x34
 8009744:	4413      	add	r3, r2
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800974a:	4b50      	ldr	r3, [pc, #320]	; (800988c <SendTxData+0x254>)
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	1c59      	adds	r1, r3, #1
 8009752:	6379      	str	r1, [r7, #52]	; 0x34
 8009754:	4413      	add	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800975a:	4b4c      	ldr	r3, [pc, #304]	; (800988c <SendTxData+0x254>)
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	1c59      	adds	r1, r3, #1
 8009762:	6379      	str	r1, [r7, #52]	; 0x34
 8009764:	4413      	add	r3, r2
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800976a:	4b48      	ldr	r3, [pc, #288]	; (800988c <SendTxData+0x254>)
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	1c59      	adds	r1, r3, #1
 8009772:	6379      	str	r1, [r7, #52]	; 0x34
 8009774:	4413      	add	r3, r2
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e05b      	b.n	8009834 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009784:	4b41      	ldr	r3, [pc, #260]	; (800988c <SendTxData+0x254>)
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	1c59      	adds	r1, r3, #1
 800978c:	6379      	str	r1, [r7, #52]	; 0x34
 800978e:	18d4      	adds	r4, r2, r3
 8009790:	f7f7 ffa0 	bl	80016d4 <GetBatteryLevel>
 8009794:	4603      	mov	r3, r0
 8009796:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	1418      	asrs	r0, r3, #16
 800979c:	4b3b      	ldr	r3, [pc, #236]	; (800988c <SendTxData+0x254>)
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a2:	1c59      	adds	r1, r3, #1
 80097a4:	6379      	str	r1, [r7, #52]	; 0x34
 80097a6:	4413      	add	r3, r2
 80097a8:	b2c2      	uxtb	r2, r0
 80097aa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	1218      	asrs	r0, r3, #8
 80097b0:	4b36      	ldr	r3, [pc, #216]	; (800988c <SendTxData+0x254>)
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b6:	1c59      	adds	r1, r3, #1
 80097b8:	6379      	str	r1, [r7, #52]	; 0x34
 80097ba:	4413      	add	r3, r2
 80097bc:	b2c2      	uxtb	r2, r0
 80097be:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 80097c0:	4b32      	ldr	r3, [pc, #200]	; (800988c <SendTxData+0x254>)
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	6379      	str	r1, [r7, #52]	; 0x34
 80097ca:	4413      	add	r3, r2
 80097cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	1418      	asrs	r0, r3, #16
 80097d6:	4b2d      	ldr	r3, [pc, #180]	; (800988c <SendTxData+0x254>)
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	1c59      	adds	r1, r3, #1
 80097de:	6379      	str	r1, [r7, #52]	; 0x34
 80097e0:	4413      	add	r3, r2
 80097e2:	b2c2      	uxtb	r2, r0
 80097e4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	1218      	asrs	r0, r3, #8
 80097ea:	4b28      	ldr	r3, [pc, #160]	; (800988c <SendTxData+0x254>)
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f0:	1c59      	adds	r1, r3, #1
 80097f2:	6379      	str	r1, [r7, #52]	; 0x34
 80097f4:	4413      	add	r3, r2
 80097f6:	b2c2      	uxtb	r2, r0
 80097f8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 80097fa:	4b24      	ldr	r3, [pc, #144]	; (800988c <SendTxData+0x254>)
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	1c59      	adds	r1, r3, #1
 8009802:	6379      	str	r1, [r7, #52]	; 0x34
 8009804:	4413      	add	r3, r2
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800980c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b298      	uxth	r0, r3
 8009812:	4b1e      	ldr	r3, [pc, #120]	; (800988c <SendTxData+0x254>)
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009818:	1c59      	adds	r1, r3, #1
 800981a:	6379      	str	r1, [r7, #52]	; 0x34
 800981c:	4413      	add	r3, r2
 800981e:	b2c2      	uxtb	r2, r0
 8009820:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8009822:	4b1a      	ldr	r3, [pc, #104]	; (800988c <SendTxData+0x254>)
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	1c59      	adds	r1, r3, #1
 800982a:	6379      	str	r1, [r7, #52]	; 0x34
 800982c:	4413      	add	r3, r2
 800982e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 8009834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009836:	b2da      	uxtb	r2, r3
 8009838:	4b14      	ldr	r3, [pc, #80]	; (800988c <SendTxData+0x254>)
 800983a:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800983c:	1d3a      	adds	r2, r7, #4
 800983e:	2300      	movs	r3, #0
 8009840:	2100      	movs	r1, #0
 8009842:	4812      	ldr	r0, [pc, #72]	; (800988c <SendTxData+0x254>)
 8009844:	f001 ff7c 	bl	800b740 <LmHandlerSend>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <SendTxData+0x260>)
 8009850:	2201      	movs	r2, #1
 8009852:	2100      	movs	r1, #0
 8009854:	2001      	movs	r0, #1
 8009856:	f011 fca9 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800985a:	e00e      	b.n	800987a <SendTxData+0x242>
  else if (nextTxIn > 0)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a0d      	ldr	r2, [pc, #52]	; (800989c <SendTxData+0x264>)
 8009866:	fba2 2303 	umull	r2, r3, r2, r3
 800986a:	099b      	lsrs	r3, r3, #6
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <SendTxData+0x268>)
 8009870:	2201      	movs	r2, #1
 8009872:	2100      	movs	r1, #0
 8009874:	2001      	movs	r0, #1
 8009876:	f011 fc99 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800987a:	bf00      	nop
 800987c:	373c      	adds	r7, #60	; 0x3c
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	42c80000 	.word	0x42c80000
 8009888:	41200000 	.word	0x41200000
 800988c:	20000080 	.word	0x20000080
 8009890:	2000026e 	.word	0x2000026e
 8009894:	20000070 	.word	0x20000070
 8009898:	0801b944 	.word	0x0801b944
 800989c:	10624dd3 	.word	0x10624dd3
 80098a0:	0801b954 	.word	0x0801b954

080098a4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80098ac:	2100      	movs	r1, #0
 80098ae:	2002      	movs	r0, #2
 80098b0:	f011 f94e 	bl	801ab50 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 80098b4:	4803      	ldr	r0, [pc, #12]	; (80098c4 <OnTxTimerEvent+0x20>)
 80098b6:	f011 fa01 	bl	801acbc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000164 	.word	0x20000164

080098c8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 80098d0:	2001      	movs	r0, #1
 80098d2:	f7f8 fe67 	bl	80025a4 <BSP_LED_Off>
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7f8 fe5c 	bl	80025a4 <BSP_LED_Off>
}
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 80098fc:	2002      	movs	r0, #2
 80098fe:	f7f8 fe75 	bl	80025ec <BSP_LED_Toggle>
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af04      	add	r7, sp, #16
 8009912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d044      	beq.n	80099a4 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d040      	beq.n	80099a4 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 8009922:	2001      	movs	r0, #1
 8009924:	f7f8 fe1a 	bl	800255c <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 8009928:	4820      	ldr	r0, [pc, #128]	; (80099ac <OnTxData+0xa0>)
 800992a:	f011 f9c7 	bl	801acbc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800992e:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <OnTxData+0xa4>)
 8009930:	2200      	movs	r2, #0
 8009932:	2100      	movs	r1, #0
 8009934:	2002      	movs	r0, #2
 8009936:	f011 fc39 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	7b12      	ldrb	r2, [r2, #12]
 8009942:	4611      	mov	r1, r2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800994a:	4610      	mov	r0, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	f992 2014 	ldrsb.w	r2, [r2, #20]
 8009952:	9203      	str	r2, [sp, #12]
 8009954:	9002      	str	r0, [sp, #8]
 8009956:	9101      	str	r1, [sp, #4]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	4b16      	ldr	r3, [pc, #88]	; (80099b4 <OnTxData+0xa8>)
 800995c:	2200      	movs	r2, #0
 800995e:	2100      	movs	r1, #0
 8009960:	2003      	movs	r0, #3
 8009962:	f011 fc23 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <OnTxData+0xac>)
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	2003      	movs	r0, #3
 800996e:	f011 fc1d 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	789b      	ldrb	r3, [r3, #2]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d10e      	bne.n	8009998 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	78db      	ldrb	r3, [r3, #3]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <OnTxData+0x7a>
 8009982:	4b0e      	ldr	r3, [pc, #56]	; (80099bc <OnTxData+0xb0>)
 8009984:	e000      	b.n	8009988 <OnTxData+0x7c>
 8009986:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <OnTxData+0xb4>)
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <OnTxData+0xb8>)
 800998c:	2200      	movs	r2, #0
 800998e:	2100      	movs	r1, #0
 8009990:	2003      	movs	r0, #3
 8009992:	f011 fc0b 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8009996:	e005      	b.n	80099a4 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8009998:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <OnTxData+0xbc>)
 800999a:	2200      	movs	r2, #0
 800999c:	2100      	movs	r1, #0
 800999e:	2003      	movs	r0, #3
 80099a0:	f011 fc04 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000270 	.word	0x20000270
 80099b0:	0801b974 	.word	0x0801b974
 80099b4:	0801b9a8 	.word	0x0801b9a8
 80099b8:	0801b9dc 	.word	0x0801b9dc
 80099bc:	0801b9ec 	.word	0x0801b9ec
 80099c0:	0801b9f0 	.word	0x0801b9f0
 80099c4:	0801b9f8 	.word	0x0801b9f8
 80099c8:	0801ba0c 	.word	0x0801ba0c

080099cc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d028      	beq.n	8009a2c <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d11d      	bne.n	8009a20 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80099e4:	4813      	ldr	r0, [pc, #76]	; (8009a34 <OnJoinRequest+0x68>)
 80099e6:	f011 f9d7 	bl	801ad98 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 80099ea:	2002      	movs	r0, #2
 80099ec:	f7f8 fdda 	bl	80025a4 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80099f0:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <OnJoinRequest+0x6c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	2002      	movs	r0, #2
 80099f8:	f011 fbd8 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	789b      	ldrb	r3, [r3, #2]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d106      	bne.n	8009a12 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <OnJoinRequest+0x70>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	2100      	movs	r1, #0
 8009a0a:	2002      	movs	r0, #2
 8009a0c:	f011 fbce 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 8009a10:	e00c      	b.n	8009a2c <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <OnJoinRequest+0x74>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	2002      	movs	r0, #2
 8009a1a:	f011 fbc7 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 8009a1e:	e005      	b.n	8009a2c <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <OnJoinRequest+0x78>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	2100      	movs	r1, #0
 8009a26:	2002      	movs	r0, #2
 8009a28:	f011 fbc0 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 8009a2c:	bf00      	nop
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	200002a0 	.word	0x200002a0
 8009a38:	0801ba1c 	.word	0x0801ba1c
 8009a3c:	0801ba34 	.word	0x0801ba34
 8009a40:	0801ba54 	.word	0x0801ba54
 8009a44:	0801ba74 	.word	0x0801ba74

08009a48 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	2001      	movs	r0, #1
 8009a50:	f011 f87e 	bl	801ab50 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009a54:	bf00      	nop
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8009a5c:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009a62:	4b17      	ldr	r3, [pc, #92]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009a68:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009a6e:	4b14      	ldr	r3, [pc, #80]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8009a74:	4b12      	ldr	r3, [pc, #72]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f043 0320 	orr.w	r3, r3, #32
 8009a7c:	4a10      	ldr	r2, [pc, #64]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a7e:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 8009a80:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a88:	4a0d      	ldr	r2, [pc, #52]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a8a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009a8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10c      	bne.n	8009aae <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <LoraInfo_Init+0x6c>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	f011 fb86 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009aa0:	bf00      	nop
 8009aa2:	f011 fb71 	bl	801b188 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d1fa      	bne.n	8009aa2 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009aac:	e7fe      	b.n	8009aac <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009aae:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <LoraInfo_Init+0x68>)
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009aba:	bf00      	nop
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200002b8 	.word	0x200002b8
 8009ac4:	0801bacc 	.word	0x0801bacc

08009ac8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <LoraInfo_GetPtr+0x10>)
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bc80      	pop	{r7}
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	200002b8 	.word	0x200002b8

08009adc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8009ae0:	f7f8 fe39 	bl	8002756 <BSP_RADIO_Init>
 8009ae4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b082      	sub	sp, #8
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	4603      	mov	r3, r0
 8009af2:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f8 fe5e 	bl	80027b8 <BSP_RADIO_ConfigRFSwitch>
 8009afc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8009b0a:	f7f8 fea3 	bl	8002854 <BSP_RADIO_GetTxConfig>
 8009b0e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8009b18:	f7f8 fea3 	bl	8002862 <BSP_RADIO_IsTCXO>
 8009b1c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8009b26:	f7f8 fea3 	bl	8002870 <BSP_RADIO_IsDCDC>
 8009b2a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	33f1      	adds	r3, #241	; 0xf1
 8009b3c:	2210      	movs	r2, #16
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f00d f92d 	bl	8016da0 <memset1>
    ctx->M_n = 0;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	22f0      	movs	r2, #240	; 0xf0
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f00d f923 	bl	8016da0 <memset1>
}
 8009b5a:	bf00      	nop
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2110      	movs	r1, #16
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f000 fe60 	bl	800a838 <lorawan_aes_set_key>
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08c      	sub	sp, #48	; 0x30
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80a1 	beq.w	8009cda <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009b9e:	f1c3 0310 	rsb	r3, r3, #16
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f203 1201 	addw	r2, r3, #257	; 0x101
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bb8:	4413      	add	r3, r2
 8009bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bbc:	b292      	uxth	r2, r2
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f00d f8b2 	bl	8016d2a <memcpy1>
        ctx->M_n += mlen;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	441a      	add	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bdc:	2b0f      	cmp	r3, #15
 8009bde:	f240 808d 	bls.w	8009cfc <AES_CMAC_Update+0x17c>
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	429a      	cmp	r2, r3
 8009be8:	f000 8088 	beq.w	8009cfc <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8009bec:	2300      	movs	r3, #0
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bf0:	e015      	b.n	8009c1e <AES_CMAC_Update+0x9e>
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	4413      	add	r3, r2
 8009bf8:	33f1      	adds	r3, #241	; 0xf1
 8009bfa:	781a      	ldrb	r2, [r3, #0]
 8009bfc:	68f9      	ldr	r1, [r7, #12]
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	440b      	add	r3, r1
 8009c02:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	4053      	eors	r3, r2
 8009c0a:	b2d9      	uxtb	r1, r3
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	4413      	add	r3, r2
 8009c12:	33f1      	adds	r3, #241	; 0xf1
 8009c14:	460a      	mov	r2, r1
 8009c16:	701a      	strb	r2, [r3, #0]
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	2b0f      	cmp	r3, #15
 8009c22:	dde6      	ble.n	8009bf2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009c2a:	f107 0314 	add.w	r3, r7, #20
 8009c2e:	2210      	movs	r2, #16
 8009c30:	4618      	mov	r0, r3
 8009c32:	f00d f87a 	bl	8016d2a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	f107 0114 	add.w	r1, r7, #20
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fed7 	bl	800a9f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	33f1      	adds	r3, #241	; 0xf1
 8009c4a:	f107 0114 	add.w	r1, r7, #20
 8009c4e:	2210      	movs	r2, #16
 8009c50:	4618      	mov	r0, r3
 8009c52:	f00d f86a 	bl	8016d2a <memcpy1>

        data += mlen;
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	4413      	add	r3, r2
 8009c5c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8009c66:	e038      	b.n	8009cda <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8009c68:	2300      	movs	r3, #0
 8009c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c6c:	e013      	b.n	8009c96 <AES_CMAC_Update+0x116>
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	4413      	add	r3, r2
 8009c74:	33f1      	adds	r3, #241	; 0xf1
 8009c76:	781a      	ldrb	r2, [r3, #0]
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	440b      	add	r3, r1
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	4053      	eors	r3, r2
 8009c82:	b2d9      	uxtb	r1, r3
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	4413      	add	r3, r2
 8009c8a:	33f1      	adds	r3, #241	; 0xf1
 8009c8c:	460a      	mov	r2, r1
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	3301      	adds	r3, #1
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	2b0f      	cmp	r3, #15
 8009c9a:	dde8      	ble.n	8009c6e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009ca2:	f107 0314 	add.w	r3, r7, #20
 8009ca6:	2210      	movs	r2, #16
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f00d f83e 	bl	8016d2a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	f107 0114 	add.w	r1, r7, #20
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fe9b 	bl	800a9f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	33f1      	adds	r3, #241	; 0xf1
 8009cc2:	f107 0114 	add.w	r1, r7, #20
 8009cc6:	2210      	movs	r2, #16
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f00d f82e 	bl	8016d2a <memcpy1>

        data += 16;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	3310      	adds	r3, #16
 8009cd2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3b10      	subs	r3, #16
 8009cd8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b10      	cmp	r3, #16
 8009cde:	d8c3      	bhi.n	8009c68 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	b292      	uxth	r2, r2
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f00d f81c 	bl	8016d2a <memcpy1>
    ctx->M_n = len;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009cfa:	e000      	b.n	8009cfe <AES_CMAC_Update+0x17e>
            return;
 8009cfc:	bf00      	nop
}
 8009cfe:	3730      	adds	r7, #48	; 0x30
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b092      	sub	sp, #72	; 0x48
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8009d0e:	f107 031c 	add.w	r3, r7, #28
 8009d12:	2210      	movs	r2, #16
 8009d14:	2100      	movs	r1, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	f00d f842 	bl	8016da0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	f107 011c 	add.w	r1, r7, #28
 8009d22:	f107 031c 	add.w	r3, r7, #28
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fe64 	bl	800a9f4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8009d2c:	7f3b      	ldrb	r3, [r7, #28]
 8009d2e:	b25b      	sxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da31      	bge.n	8009d98 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8009d34:	2300      	movs	r3, #0
 8009d36:	647b      	str	r3, [r7, #68]	; 0x44
 8009d38:	e01c      	b.n	8009d74 <AES_CMAC_Final+0x70>
 8009d3a:	f107 021c 	add.w	r2, r7, #28
 8009d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d40:	4413      	add	r3, r2
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	b25a      	sxtb	r2, r3
 8009d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009d50:	440b      	add	r3, r1
 8009d52:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009d56:	09db      	lsrs	r3, r3, #7
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	b25b      	sxtb	r3, r3
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b25b      	sxtb	r3, r3
 8009d60:	b2d9      	uxtb	r1, r3
 8009d62:	f107 021c 	add.w	r2, r7, #28
 8009d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d68:	4413      	add	r3, r2
 8009d6a:	460a      	mov	r2, r1
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d70:	3301      	adds	r3, #1
 8009d72:	647b      	str	r3, [r7, #68]	; 0x44
 8009d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d76:	2b0e      	cmp	r3, #14
 8009d78:	dddf      	ble.n	8009d3a <AES_CMAC_Final+0x36>
 8009d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8009d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d8a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009d8e:	43db      	mvns	r3, r3
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d96:	e028      	b.n	8009dea <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 8009d98:	2300      	movs	r3, #0
 8009d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d9c:	e01c      	b.n	8009dd8 <AES_CMAC_Final+0xd4>
 8009d9e:	f107 021c 	add.w	r2, r7, #28
 8009da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009da4:	4413      	add	r3, r2
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	b25a      	sxtb	r2, r3
 8009dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dae:	3301      	adds	r3, #1
 8009db0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009db4:	440b      	add	r3, r1
 8009db6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009dba:	09db      	lsrs	r3, r3, #7
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	b25b      	sxtb	r3, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	b25b      	sxtb	r3, r3
 8009dc4:	b2d9      	uxtb	r1, r3
 8009dc6:	f107 021c 	add.w	r2, r7, #28
 8009dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dcc:	4413      	add	r3, r2
 8009dce:	460a      	mov	r2, r1
 8009dd0:	701a      	strb	r2, [r3, #0]
 8009dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8009dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dda:	2b0e      	cmp	r3, #14
 8009ddc:	dddf      	ble.n	8009d9e <AES_CMAC_Final+0x9a>
 8009dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009df0:	2b10      	cmp	r3, #16
 8009df2:	d11d      	bne.n	8009e30 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8009df4:	2300      	movs	r3, #0
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df8:	e016      	b.n	8009e28 <AES_CMAC_Final+0x124>
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfe:	4413      	add	r3, r2
 8009e00:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009e04:	781a      	ldrb	r2, [r3, #0]
 8009e06:	f107 011c 	add.w	r1, r7, #28
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	440b      	add	r3, r1
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	4053      	eors	r3, r2
 8009e12:	b2d9      	uxtb	r1, r3
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e18:	4413      	add	r3, r2
 8009e1a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009e1e:	460a      	mov	r2, r1
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	3301      	adds	r3, #1
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	dde5      	ble.n	8009dfa <AES_CMAC_Final+0xf6>
 8009e2e:	e098      	b.n	8009f62 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8009e30:	7f3b      	ldrb	r3, [r7, #28]
 8009e32:	b25b      	sxtb	r3, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	da31      	bge.n	8009e9c <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 8009e38:	2300      	movs	r3, #0
 8009e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e3c:	e01c      	b.n	8009e78 <AES_CMAC_Final+0x174>
 8009e3e:	f107 021c 	add.w	r2, r7, #28
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	4413      	add	r3, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	b25a      	sxtb	r2, r3
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009e54:	440b      	add	r3, r1
 8009e56:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009e5a:	09db      	lsrs	r3, r3, #7
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	b25b      	sxtb	r3, r3
 8009e60:	4313      	orrs	r3, r2
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	b2d9      	uxtb	r1, r3
 8009e66:	f107 021c 	add.w	r2, r7, #28
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6c:	4413      	add	r3, r2
 8009e6e:	460a      	mov	r2, r1
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e74:	3301      	adds	r3, #1
 8009e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	2b0e      	cmp	r3, #14
 8009e7c:	dddf      	ble.n	8009e3e <AES_CMAC_Final+0x13a>
 8009e7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8009e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e8e:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009e92:	43db      	mvns	r3, r3
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9a:	e028      	b.n	8009eee <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009ea0:	e01c      	b.n	8009edc <AES_CMAC_Final+0x1d8>
 8009ea2:	f107 021c 	add.w	r2, r7, #28
 8009ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea8:	4413      	add	r3, r2
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	b25a      	sxtb	r2, r3
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009eb8:	440b      	add	r3, r1
 8009eba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009ebe:	09db      	lsrs	r3, r3, #7
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	b25b      	sxtb	r3, r3
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	b25b      	sxtb	r3, r3
 8009ec8:	b2d9      	uxtb	r1, r3
 8009eca:	f107 021c 	add.w	r2, r7, #28
 8009ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed0:	4413      	add	r3, r2
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed8:	3301      	adds	r3, #1
 8009eda:	637b      	str	r3, [r7, #52]	; 0x34
 8009edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ede:	2b0e      	cmp	r3, #14
 8009ee0:	dddf      	ble.n	8009ea2 <AES_CMAC_Final+0x19e>
 8009ee2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	2280      	movs	r2, #128	; 0x80
 8009efa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009efe:	e007      	b.n	8009f10 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	4413      	add	r3, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f24:	2b0f      	cmp	r3, #15
 8009f26:	d9eb      	bls.n	8009f00 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 8009f28:	2300      	movs	r3, #0
 8009f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f2c:	e016      	b.n	8009f5c <AES_CMAC_Final+0x258>
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	4413      	add	r3, r2
 8009f34:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f38:	781a      	ldrb	r2, [r3, #0]
 8009f3a:	f107 011c 	add.w	r1, r7, #28
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	440b      	add	r3, r1
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	4053      	eors	r3, r2
 8009f46:	b2d9      	uxtb	r1, r3
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f52:	460a      	mov	r2, r1
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	3301      	adds	r3, #1
 8009f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	2b0f      	cmp	r3, #15
 8009f60:	dde5      	ble.n	8009f2e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 8009f62:	2300      	movs	r3, #0
 8009f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f66:	e015      	b.n	8009f94 <AES_CMAC_Final+0x290>
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	4413      	add	r3, r2
 8009f6e:	33f1      	adds	r3, #241	; 0xf1
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	440b      	add	r3, r1
 8009f78:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	4053      	eors	r3, r2
 8009f80:	b2d9      	uxtb	r1, r3
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f86:	4413      	add	r3, r2
 8009f88:	33f1      	adds	r3, #241	; 0xf1
 8009f8a:	460a      	mov	r2, r1
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	3301      	adds	r3, #1
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	dde6      	ble.n	8009f68 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f00c febf 	bl	8016d2a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	f107 030c 	add.w	r3, r7, #12
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fd1d 	bl	800a9f4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8009fba:	f107 031c 	add.w	r3, r7, #28
 8009fbe:	2210      	movs	r2, #16
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f00c feec 	bl	8016da0 <memset1>
}
 8009fc8:	bf00      	nop
 8009fca:	3748      	adds	r7, #72	; 0x48
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781a      	ldrb	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	7852      	ldrb	r2, [r2, #1]
 8009fea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3302      	adds	r3, #2
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	7892      	ldrb	r2, [r2, #2]
 8009ff4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3303      	adds	r3, #3
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	78d2      	ldrb	r2, [r2, #3]
 8009ffe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	7912      	ldrb	r2, [r2, #4]
 800a008:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3305      	adds	r3, #5
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	7952      	ldrb	r2, [r2, #5]
 800a012:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3306      	adds	r3, #6
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	7992      	ldrb	r2, [r2, #6]
 800a01c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3307      	adds	r3, #7
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	79d2      	ldrb	r2, [r2, #7]
 800a026:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3308      	adds	r3, #8
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	7a12      	ldrb	r2, [r2, #8]
 800a030:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3309      	adds	r3, #9
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	7a52      	ldrb	r2, [r2, #9]
 800a03a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	330a      	adds	r3, #10
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	7a92      	ldrb	r2, [r2, #10]
 800a044:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	330b      	adds	r3, #11
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	7ad2      	ldrb	r2, [r2, #11]
 800a04e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	330c      	adds	r3, #12
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	7b12      	ldrb	r2, [r2, #12]
 800a058:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	330d      	adds	r3, #13
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	7b52      	ldrb	r2, [r2, #13]
 800a062:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	330e      	adds	r3, #14
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	7b92      	ldrb	r2, [r2, #14]
 800a06c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	330f      	adds	r3, #15
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	7bd2      	ldrb	r2, [r2, #15]
 800a076:	701a      	strb	r2, [r3, #0]
#endif
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr

0800a082 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a082:	b480      	push	{r7}
 800a084:	b085      	sub	sp, #20
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a090:	e007      	b.n	800a0a2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	1c53      	adds	r3, r2, #1
 800a096:	60bb      	str	r3, [r7, #8]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	60f9      	str	r1, [r7, #12]
 800a09e:	7812      	ldrb	r2, [r2, #0]
 800a0a0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	1e5a      	subs	r2, r3, #1
 800a0a6:	71fa      	strb	r2, [r7, #7]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1f2      	bne.n	800a092 <copy_block_nn+0x10>
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr

0800a0b8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	781a      	ldrb	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	4053      	eors	r3, r2
 800a0cc:	b2da      	uxtb	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	7819      	ldrb	r1, [r3, #0]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	781a      	ldrb	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	404a      	eors	r2, r1
 800a0e4:	b2d2      	uxtb	r2, r2
 800a0e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3302      	adds	r3, #2
 800a0ec:	7819      	ldrb	r1, [r3, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3302      	adds	r3, #2
 800a0f8:	404a      	eors	r2, r1
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3303      	adds	r3, #3
 800a102:	7819      	ldrb	r1, [r3, #0]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	3303      	adds	r3, #3
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3303      	adds	r3, #3
 800a10e:	404a      	eors	r2, r1
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3304      	adds	r3, #4
 800a118:	7819      	ldrb	r1, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	3304      	adds	r3, #4
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	404a      	eors	r2, r1
 800a126:	b2d2      	uxtb	r2, r2
 800a128:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	3305      	adds	r3, #5
 800a12e:	7819      	ldrb	r1, [r3, #0]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	3305      	adds	r3, #5
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3305      	adds	r3, #5
 800a13a:	404a      	eors	r2, r1
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3306      	adds	r3, #6
 800a144:	7819      	ldrb	r1, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	3306      	adds	r3, #6
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3306      	adds	r3, #6
 800a150:	404a      	eors	r2, r1
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3307      	adds	r3, #7
 800a15a:	7819      	ldrb	r1, [r3, #0]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	3307      	adds	r3, #7
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3307      	adds	r3, #7
 800a166:	404a      	eors	r2, r1
 800a168:	b2d2      	uxtb	r2, r2
 800a16a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3308      	adds	r3, #8
 800a170:	7819      	ldrb	r1, [r3, #0]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	3308      	adds	r3, #8
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3308      	adds	r3, #8
 800a17c:	404a      	eors	r2, r1
 800a17e:	b2d2      	uxtb	r2, r2
 800a180:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3309      	adds	r3, #9
 800a186:	7819      	ldrb	r1, [r3, #0]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	3309      	adds	r3, #9
 800a18c:	781a      	ldrb	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3309      	adds	r3, #9
 800a192:	404a      	eors	r2, r1
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	330a      	adds	r3, #10
 800a19c:	7819      	ldrb	r1, [r3, #0]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	330a      	adds	r3, #10
 800a1a2:	781a      	ldrb	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	330a      	adds	r3, #10
 800a1a8:	404a      	eors	r2, r1
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	330b      	adds	r3, #11
 800a1b2:	7819      	ldrb	r1, [r3, #0]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	330b      	adds	r3, #11
 800a1b8:	781a      	ldrb	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	330b      	adds	r3, #11
 800a1be:	404a      	eors	r2, r1
 800a1c0:	b2d2      	uxtb	r2, r2
 800a1c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	330c      	adds	r3, #12
 800a1c8:	7819      	ldrb	r1, [r3, #0]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	330c      	adds	r3, #12
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	330c      	adds	r3, #12
 800a1d4:	404a      	eors	r2, r1
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	330d      	adds	r3, #13
 800a1de:	7819      	ldrb	r1, [r3, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	330d      	adds	r3, #13
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	330d      	adds	r3, #13
 800a1ea:	404a      	eors	r2, r1
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	330e      	adds	r3, #14
 800a1f4:	7819      	ldrb	r1, [r3, #0]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	330e      	adds	r3, #14
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	330e      	adds	r3, #14
 800a200:	404a      	eors	r2, r1
 800a202:	b2d2      	uxtb	r2, r2
 800a204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	330f      	adds	r3, #15
 800a20a:	7819      	ldrb	r1, [r3, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	330f      	adds	r3, #15
 800a210:	781a      	ldrb	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	330f      	adds	r3, #15
 800a216:	404a      	eors	r2, r1
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	701a      	strb	r2, [r3, #0]
#endif
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	bc80      	pop	{r7}
 800a224:	4770      	bx	lr

0800a226 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	781a      	ldrb	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	4053      	eors	r3, r2
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	3301      	adds	r3, #1
 800a246:	7819      	ldrb	r1, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3301      	adds	r3, #1
 800a24c:	781a      	ldrb	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	404a      	eors	r2, r1
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	3302      	adds	r3, #2
 800a25c:	7819      	ldrb	r1, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3302      	adds	r3, #2
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3302      	adds	r3, #2
 800a268:	404a      	eors	r2, r1
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	3303      	adds	r3, #3
 800a272:	7819      	ldrb	r1, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3303      	adds	r3, #3
 800a278:	781a      	ldrb	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3303      	adds	r3, #3
 800a27e:	404a      	eors	r2, r1
 800a280:	b2d2      	uxtb	r2, r2
 800a282:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	3304      	adds	r3, #4
 800a288:	7819      	ldrb	r1, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3304      	adds	r3, #4
 800a28e:	781a      	ldrb	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3304      	adds	r3, #4
 800a294:	404a      	eors	r2, r1
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	3305      	adds	r3, #5
 800a29e:	7819      	ldrb	r1, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3305      	adds	r3, #5
 800a2a4:	781a      	ldrb	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3305      	adds	r3, #5
 800a2aa:	404a      	eors	r2, r1
 800a2ac:	b2d2      	uxtb	r2, r2
 800a2ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	3306      	adds	r3, #6
 800a2b4:	7819      	ldrb	r1, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3306      	adds	r3, #6
 800a2ba:	781a      	ldrb	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3306      	adds	r3, #6
 800a2c0:	404a      	eors	r2, r1
 800a2c2:	b2d2      	uxtb	r2, r2
 800a2c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	3307      	adds	r3, #7
 800a2ca:	7819      	ldrb	r1, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3307      	adds	r3, #7
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3307      	adds	r3, #7
 800a2d6:	404a      	eors	r2, r1
 800a2d8:	b2d2      	uxtb	r2, r2
 800a2da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	7819      	ldrb	r1, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	404a      	eors	r2, r1
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	3309      	adds	r3, #9
 800a2f6:	7819      	ldrb	r1, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3309      	adds	r3, #9
 800a2fc:	781a      	ldrb	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3309      	adds	r3, #9
 800a302:	404a      	eors	r2, r1
 800a304:	b2d2      	uxtb	r2, r2
 800a306:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	330a      	adds	r3, #10
 800a30c:	7819      	ldrb	r1, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	330a      	adds	r3, #10
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	330a      	adds	r3, #10
 800a318:	404a      	eors	r2, r1
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	330b      	adds	r3, #11
 800a322:	7819      	ldrb	r1, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	330b      	adds	r3, #11
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	330b      	adds	r3, #11
 800a32e:	404a      	eors	r2, r1
 800a330:	b2d2      	uxtb	r2, r2
 800a332:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	330c      	adds	r3, #12
 800a338:	7819      	ldrb	r1, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	330c      	adds	r3, #12
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	330c      	adds	r3, #12
 800a344:	404a      	eors	r2, r1
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	330d      	adds	r3, #13
 800a34e:	7819      	ldrb	r1, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	330d      	adds	r3, #13
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	330d      	adds	r3, #13
 800a35a:	404a      	eors	r2, r1
 800a35c:	b2d2      	uxtb	r2, r2
 800a35e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	330e      	adds	r3, #14
 800a364:	7819      	ldrb	r1, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	330e      	adds	r3, #14
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	330e      	adds	r3, #14
 800a370:	404a      	eors	r2, r1
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	330f      	adds	r3, #15
 800a37a:	7819      	ldrb	r1, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	330f      	adds	r3, #15
 800a380:	781a      	ldrb	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	330f      	adds	r3, #15
 800a386:	404a      	eors	r2, r1
 800a388:	b2d2      	uxtb	r2, r2
 800a38a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr

0800a396 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff fe88 	bl	800a0b8 <xor_block>
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	4b48      	ldr	r3, [pc, #288]	; (800a4e0 <shift_sub_rows+0x130>)
 800a3c0:	5c9a      	ldrb	r2, [r3, r2]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4a43      	ldr	r2, [pc, #268]	; (800a4e0 <shift_sub_rows+0x130>)
 800a3d4:	5c52      	ldrb	r2, [r2, r1]
 800a3d6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3308      	adds	r3, #8
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	4a3e      	ldr	r2, [pc, #248]	; (800a4e0 <shift_sub_rows+0x130>)
 800a3e6:	5c52      	ldrb	r2, [r2, r1]
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	330c      	adds	r3, #12
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	330c      	adds	r3, #12
 800a3f6:	4a3a      	ldr	r2, [pc, #232]	; (800a4e0 <shift_sub_rows+0x130>)
 800a3f8:	5c52      	ldrb	r2, [r2, r1]
 800a3fa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	73fb      	strb	r3, [r7, #15]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3305      	adds	r3, #5
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a34      	ldr	r2, [pc, #208]	; (800a4e0 <shift_sub_rows+0x130>)
 800a410:	5c52      	ldrb	r2, [r2, r1]
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3309      	adds	r3, #9
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	4619      	mov	r1, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3305      	adds	r3, #5
 800a420:	4a2f      	ldr	r2, [pc, #188]	; (800a4e0 <shift_sub_rows+0x130>)
 800a422:	5c52      	ldrb	r2, [r2, r1]
 800a424:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	330d      	adds	r3, #13
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3309      	adds	r3, #9
 800a432:	4a2b      	ldr	r2, [pc, #172]	; (800a4e0 <shift_sub_rows+0x130>)
 800a434:	5c52      	ldrb	r2, [r2, r1]
 800a436:	701a      	strb	r2, [r3, #0]
 800a438:	7bfa      	ldrb	r2, [r7, #15]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	330d      	adds	r3, #13
 800a43e:	4928      	ldr	r1, [pc, #160]	; (800a4e0 <shift_sub_rows+0x130>)
 800a440:	5c8a      	ldrb	r2, [r1, r2]
 800a442:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	789b      	ldrb	r3, [r3, #2]
 800a448:	73fb      	strb	r3, [r7, #15]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	330a      	adds	r3, #10
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	4619      	mov	r1, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3302      	adds	r3, #2
 800a456:	4a22      	ldr	r2, [pc, #136]	; (800a4e0 <shift_sub_rows+0x130>)
 800a458:	5c52      	ldrb	r2, [r2, r1]
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	7bfa      	ldrb	r2, [r7, #15]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	330a      	adds	r3, #10
 800a462:	491f      	ldr	r1, [pc, #124]	; (800a4e0 <shift_sub_rows+0x130>)
 800a464:	5c8a      	ldrb	r2, [r1, r2]
 800a466:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	799b      	ldrb	r3, [r3, #6]
 800a46c:	73fb      	strb	r3, [r7, #15]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	330e      	adds	r3, #14
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	4619      	mov	r1, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	3306      	adds	r3, #6
 800a47a:	4a19      	ldr	r2, [pc, #100]	; (800a4e0 <shift_sub_rows+0x130>)
 800a47c:	5c52      	ldrb	r2, [r2, r1]
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	7bfa      	ldrb	r2, [r7, #15]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	330e      	adds	r3, #14
 800a486:	4916      	ldr	r1, [pc, #88]	; (800a4e0 <shift_sub_rows+0x130>)
 800a488:	5c8a      	ldrb	r2, [r1, r2]
 800a48a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	7bdb      	ldrb	r3, [r3, #15]
 800a490:	73fb      	strb	r3, [r7, #15]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	330b      	adds	r3, #11
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4619      	mov	r1, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	330f      	adds	r3, #15
 800a49e:	4a10      	ldr	r2, [pc, #64]	; (800a4e0 <shift_sub_rows+0x130>)
 800a4a0:	5c52      	ldrb	r2, [r2, r1]
 800a4a2:	701a      	strb	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	3307      	adds	r3, #7
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	330b      	adds	r3, #11
 800a4b0:	4a0b      	ldr	r2, [pc, #44]	; (800a4e0 <shift_sub_rows+0x130>)
 800a4b2:	5c52      	ldrb	r2, [r2, r1]
 800a4b4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3303      	adds	r3, #3
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3307      	adds	r3, #7
 800a4c2:	4a07      	ldr	r2, [pc, #28]	; (800a4e0 <shift_sub_rows+0x130>)
 800a4c4:	5c52      	ldrb	r2, [r2, r1]
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3303      	adds	r3, #3
 800a4ce:	4904      	ldr	r1, [pc, #16]	; (800a4e0 <shift_sub_rows+0x130>)
 800a4d0:	5c8a      	ldrb	r2, [r1, r2]
 800a4d2:	701a      	strb	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	0801c100 	.word	0x0801c100

0800a4e4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a4ec:	f107 0308 	add.w	r3, r7, #8
 800a4f0:	6879      	ldr	r1, [r7, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff fd6c 	bl	8009fd0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a4f8:	7a3b      	ldrb	r3, [r7, #8]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4b9a      	ldr	r3, [pc, #616]	; (800a768 <mix_sub_columns+0x284>)
 800a4fe:	5c9a      	ldrb	r2, [r3, r2]
 800a500:	7b7b      	ldrb	r3, [r7, #13]
 800a502:	4619      	mov	r1, r3
 800a504:	4b99      	ldr	r3, [pc, #612]	; (800a76c <mix_sub_columns+0x288>)
 800a506:	5c5b      	ldrb	r3, [r3, r1]
 800a508:	4053      	eors	r3, r2
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	7cbb      	ldrb	r3, [r7, #18]
 800a50e:	4619      	mov	r1, r3
 800a510:	4b97      	ldr	r3, [pc, #604]	; (800a770 <mix_sub_columns+0x28c>)
 800a512:	5c5b      	ldrb	r3, [r3, r1]
 800a514:	4053      	eors	r3, r2
 800a516:	b2da      	uxtb	r2, r3
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	4619      	mov	r1, r3
 800a51c:	4b94      	ldr	r3, [pc, #592]	; (800a770 <mix_sub_columns+0x28c>)
 800a51e:	5c5b      	ldrb	r3, [r3, r1]
 800a520:	4053      	eors	r3, r2
 800a522:	b2da      	uxtb	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a528:	7a3b      	ldrb	r3, [r7, #8]
 800a52a:	461a      	mov	r2, r3
 800a52c:	4b90      	ldr	r3, [pc, #576]	; (800a770 <mix_sub_columns+0x28c>)
 800a52e:	5c9a      	ldrb	r2, [r3, r2]
 800a530:	7b7b      	ldrb	r3, [r7, #13]
 800a532:	4619      	mov	r1, r3
 800a534:	4b8c      	ldr	r3, [pc, #560]	; (800a768 <mix_sub_columns+0x284>)
 800a536:	5c5b      	ldrb	r3, [r3, r1]
 800a538:	4053      	eors	r3, r2
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	7cbb      	ldrb	r3, [r7, #18]
 800a53e:	4619      	mov	r1, r3
 800a540:	4b8a      	ldr	r3, [pc, #552]	; (800a76c <mix_sub_columns+0x288>)
 800a542:	5c5b      	ldrb	r3, [r3, r1]
 800a544:	4053      	eors	r3, r2
 800a546:	b2d9      	uxtb	r1, r3
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	461a      	mov	r2, r3
 800a54c:	4b88      	ldr	r3, [pc, #544]	; (800a770 <mix_sub_columns+0x28c>)
 800a54e:	5c9a      	ldrb	r2, [r3, r2]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3301      	adds	r3, #1
 800a554:	404a      	eors	r2, r1
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a55a:	7a3b      	ldrb	r3, [r7, #8]
 800a55c:	461a      	mov	r2, r3
 800a55e:	4b84      	ldr	r3, [pc, #528]	; (800a770 <mix_sub_columns+0x28c>)
 800a560:	5c9a      	ldrb	r2, [r3, r2]
 800a562:	7b7b      	ldrb	r3, [r7, #13]
 800a564:	4619      	mov	r1, r3
 800a566:	4b82      	ldr	r3, [pc, #520]	; (800a770 <mix_sub_columns+0x28c>)
 800a568:	5c5b      	ldrb	r3, [r3, r1]
 800a56a:	4053      	eors	r3, r2
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	7cbb      	ldrb	r3, [r7, #18]
 800a570:	4619      	mov	r1, r3
 800a572:	4b7d      	ldr	r3, [pc, #500]	; (800a768 <mix_sub_columns+0x284>)
 800a574:	5c5b      	ldrb	r3, [r3, r1]
 800a576:	4053      	eors	r3, r2
 800a578:	b2d9      	uxtb	r1, r3
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	461a      	mov	r2, r3
 800a57e:	4b7b      	ldr	r3, [pc, #492]	; (800a76c <mix_sub_columns+0x288>)
 800a580:	5c9a      	ldrb	r2, [r3, r2]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	3302      	adds	r3, #2
 800a586:	404a      	eors	r2, r1
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a58c:	7a3b      	ldrb	r3, [r7, #8]
 800a58e:	461a      	mov	r2, r3
 800a590:	4b76      	ldr	r3, [pc, #472]	; (800a76c <mix_sub_columns+0x288>)
 800a592:	5c9a      	ldrb	r2, [r3, r2]
 800a594:	7b7b      	ldrb	r3, [r7, #13]
 800a596:	4619      	mov	r1, r3
 800a598:	4b75      	ldr	r3, [pc, #468]	; (800a770 <mix_sub_columns+0x28c>)
 800a59a:	5c5b      	ldrb	r3, [r3, r1]
 800a59c:	4053      	eors	r3, r2
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	7cbb      	ldrb	r3, [r7, #18]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4b72      	ldr	r3, [pc, #456]	; (800a770 <mix_sub_columns+0x28c>)
 800a5a6:	5c5b      	ldrb	r3, [r3, r1]
 800a5a8:	4053      	eors	r3, r2
 800a5aa:	b2d9      	uxtb	r1, r3
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4b6d      	ldr	r3, [pc, #436]	; (800a768 <mix_sub_columns+0x284>)
 800a5b2:	5c9a      	ldrb	r2, [r3, r2]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3303      	adds	r3, #3
 800a5b8:	404a      	eors	r2, r1
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a5be:	7b3b      	ldrb	r3, [r7, #12]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4b69      	ldr	r3, [pc, #420]	; (800a768 <mix_sub_columns+0x284>)
 800a5c4:	5c9a      	ldrb	r2, [r3, r2]
 800a5c6:	7c7b      	ldrb	r3, [r7, #17]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4b68      	ldr	r3, [pc, #416]	; (800a76c <mix_sub_columns+0x288>)
 800a5cc:	5c5b      	ldrb	r3, [r3, r1]
 800a5ce:	4053      	eors	r3, r2
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	7dbb      	ldrb	r3, [r7, #22]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4b66      	ldr	r3, [pc, #408]	; (800a770 <mix_sub_columns+0x28c>)
 800a5d8:	5c5b      	ldrb	r3, [r3, r1]
 800a5da:	4053      	eors	r3, r2
 800a5dc:	b2d9      	uxtb	r1, r3
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4b63      	ldr	r3, [pc, #396]	; (800a770 <mix_sub_columns+0x28c>)
 800a5e4:	5c9a      	ldrb	r2, [r3, r2]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	404a      	eors	r2, r1
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a5f0:	7b3b      	ldrb	r3, [r7, #12]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	4b5e      	ldr	r3, [pc, #376]	; (800a770 <mix_sub_columns+0x28c>)
 800a5f6:	5c9a      	ldrb	r2, [r3, r2]
 800a5f8:	7c7b      	ldrb	r3, [r7, #17]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4b5a      	ldr	r3, [pc, #360]	; (800a768 <mix_sub_columns+0x284>)
 800a5fe:	5c5b      	ldrb	r3, [r3, r1]
 800a600:	4053      	eors	r3, r2
 800a602:	b2da      	uxtb	r2, r3
 800a604:	7dbb      	ldrb	r3, [r7, #22]
 800a606:	4619      	mov	r1, r3
 800a608:	4b58      	ldr	r3, [pc, #352]	; (800a76c <mix_sub_columns+0x288>)
 800a60a:	5c5b      	ldrb	r3, [r3, r1]
 800a60c:	4053      	eors	r3, r2
 800a60e:	b2d9      	uxtb	r1, r3
 800a610:	7afb      	ldrb	r3, [r7, #11]
 800a612:	461a      	mov	r2, r3
 800a614:	4b56      	ldr	r3, [pc, #344]	; (800a770 <mix_sub_columns+0x28c>)
 800a616:	5c9a      	ldrb	r2, [r3, r2]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3305      	adds	r3, #5
 800a61c:	404a      	eors	r2, r1
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800a622:	7b3b      	ldrb	r3, [r7, #12]
 800a624:	461a      	mov	r2, r3
 800a626:	4b52      	ldr	r3, [pc, #328]	; (800a770 <mix_sub_columns+0x28c>)
 800a628:	5c9a      	ldrb	r2, [r3, r2]
 800a62a:	7c7b      	ldrb	r3, [r7, #17]
 800a62c:	4619      	mov	r1, r3
 800a62e:	4b50      	ldr	r3, [pc, #320]	; (800a770 <mix_sub_columns+0x28c>)
 800a630:	5c5b      	ldrb	r3, [r3, r1]
 800a632:	4053      	eors	r3, r2
 800a634:	b2da      	uxtb	r2, r3
 800a636:	7dbb      	ldrb	r3, [r7, #22]
 800a638:	4619      	mov	r1, r3
 800a63a:	4b4b      	ldr	r3, [pc, #300]	; (800a768 <mix_sub_columns+0x284>)
 800a63c:	5c5b      	ldrb	r3, [r3, r1]
 800a63e:	4053      	eors	r3, r2
 800a640:	b2d9      	uxtb	r1, r3
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	461a      	mov	r2, r3
 800a646:	4b49      	ldr	r3, [pc, #292]	; (800a76c <mix_sub_columns+0x288>)
 800a648:	5c9a      	ldrb	r2, [r3, r2]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3306      	adds	r3, #6
 800a64e:	404a      	eors	r2, r1
 800a650:	b2d2      	uxtb	r2, r2
 800a652:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800a654:	7b3b      	ldrb	r3, [r7, #12]
 800a656:	461a      	mov	r2, r3
 800a658:	4b44      	ldr	r3, [pc, #272]	; (800a76c <mix_sub_columns+0x288>)
 800a65a:	5c9a      	ldrb	r2, [r3, r2]
 800a65c:	7c7b      	ldrb	r3, [r7, #17]
 800a65e:	4619      	mov	r1, r3
 800a660:	4b43      	ldr	r3, [pc, #268]	; (800a770 <mix_sub_columns+0x28c>)
 800a662:	5c5b      	ldrb	r3, [r3, r1]
 800a664:	4053      	eors	r3, r2
 800a666:	b2da      	uxtb	r2, r3
 800a668:	7dbb      	ldrb	r3, [r7, #22]
 800a66a:	4619      	mov	r1, r3
 800a66c:	4b40      	ldr	r3, [pc, #256]	; (800a770 <mix_sub_columns+0x28c>)
 800a66e:	5c5b      	ldrb	r3, [r3, r1]
 800a670:	4053      	eors	r3, r2
 800a672:	b2d9      	uxtb	r1, r3
 800a674:	7afb      	ldrb	r3, [r7, #11]
 800a676:	461a      	mov	r2, r3
 800a678:	4b3b      	ldr	r3, [pc, #236]	; (800a768 <mix_sub_columns+0x284>)
 800a67a:	5c9a      	ldrb	r2, [r3, r2]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3307      	adds	r3, #7
 800a680:	404a      	eors	r2, r1
 800a682:	b2d2      	uxtb	r2, r2
 800a684:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800a686:	7c3b      	ldrb	r3, [r7, #16]
 800a688:	461a      	mov	r2, r3
 800a68a:	4b37      	ldr	r3, [pc, #220]	; (800a768 <mix_sub_columns+0x284>)
 800a68c:	5c9a      	ldrb	r2, [r3, r2]
 800a68e:	7d7b      	ldrb	r3, [r7, #21]
 800a690:	4619      	mov	r1, r3
 800a692:	4b36      	ldr	r3, [pc, #216]	; (800a76c <mix_sub_columns+0x288>)
 800a694:	5c5b      	ldrb	r3, [r3, r1]
 800a696:	4053      	eors	r3, r2
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	7abb      	ldrb	r3, [r7, #10]
 800a69c:	4619      	mov	r1, r3
 800a69e:	4b34      	ldr	r3, [pc, #208]	; (800a770 <mix_sub_columns+0x28c>)
 800a6a0:	5c5b      	ldrb	r3, [r3, r1]
 800a6a2:	4053      	eors	r3, r2
 800a6a4:	b2d9      	uxtb	r1, r3
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4b31      	ldr	r3, [pc, #196]	; (800a770 <mix_sub_columns+0x28c>)
 800a6ac:	5c9a      	ldrb	r2, [r3, r2]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	404a      	eors	r2, r1
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800a6b8:	7c3b      	ldrb	r3, [r7, #16]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	4b2c      	ldr	r3, [pc, #176]	; (800a770 <mix_sub_columns+0x28c>)
 800a6be:	5c9a      	ldrb	r2, [r3, r2]
 800a6c0:	7d7b      	ldrb	r3, [r7, #21]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4b28      	ldr	r3, [pc, #160]	; (800a768 <mix_sub_columns+0x284>)
 800a6c6:	5c5b      	ldrb	r3, [r3, r1]
 800a6c8:	4053      	eors	r3, r2
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	7abb      	ldrb	r3, [r7, #10]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4b26      	ldr	r3, [pc, #152]	; (800a76c <mix_sub_columns+0x288>)
 800a6d2:	5c5b      	ldrb	r3, [r3, r1]
 800a6d4:	4053      	eors	r3, r2
 800a6d6:	b2d9      	uxtb	r1, r3
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4b24      	ldr	r3, [pc, #144]	; (800a770 <mix_sub_columns+0x28c>)
 800a6de:	5c9a      	ldrb	r2, [r3, r2]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3309      	adds	r3, #9
 800a6e4:	404a      	eors	r2, r1
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800a6ea:	7c3b      	ldrb	r3, [r7, #16]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b20      	ldr	r3, [pc, #128]	; (800a770 <mix_sub_columns+0x28c>)
 800a6f0:	5c9a      	ldrb	r2, [r3, r2]
 800a6f2:	7d7b      	ldrb	r3, [r7, #21]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4b1e      	ldr	r3, [pc, #120]	; (800a770 <mix_sub_columns+0x28c>)
 800a6f8:	5c5b      	ldrb	r3, [r3, r1]
 800a6fa:	4053      	eors	r3, r2
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	7abb      	ldrb	r3, [r7, #10]
 800a700:	4619      	mov	r1, r3
 800a702:	4b19      	ldr	r3, [pc, #100]	; (800a768 <mix_sub_columns+0x284>)
 800a704:	5c5b      	ldrb	r3, [r3, r1]
 800a706:	4053      	eors	r3, r2
 800a708:	b2d9      	uxtb	r1, r3
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	461a      	mov	r2, r3
 800a70e:	4b17      	ldr	r3, [pc, #92]	; (800a76c <mix_sub_columns+0x288>)
 800a710:	5c9a      	ldrb	r2, [r3, r2]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	330a      	adds	r3, #10
 800a716:	404a      	eors	r2, r1
 800a718:	b2d2      	uxtb	r2, r2
 800a71a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800a71c:	7c3b      	ldrb	r3, [r7, #16]
 800a71e:	461a      	mov	r2, r3
 800a720:	4b12      	ldr	r3, [pc, #72]	; (800a76c <mix_sub_columns+0x288>)
 800a722:	5c9a      	ldrb	r2, [r3, r2]
 800a724:	7d7b      	ldrb	r3, [r7, #21]
 800a726:	4619      	mov	r1, r3
 800a728:	4b11      	ldr	r3, [pc, #68]	; (800a770 <mix_sub_columns+0x28c>)
 800a72a:	5c5b      	ldrb	r3, [r3, r1]
 800a72c:	4053      	eors	r3, r2
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	7abb      	ldrb	r3, [r7, #10]
 800a732:	4619      	mov	r1, r3
 800a734:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <mix_sub_columns+0x28c>)
 800a736:	5c5b      	ldrb	r3, [r3, r1]
 800a738:	4053      	eors	r3, r2
 800a73a:	b2d9      	uxtb	r1, r3
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	461a      	mov	r2, r3
 800a740:	4b09      	ldr	r3, [pc, #36]	; (800a768 <mix_sub_columns+0x284>)
 800a742:	5c9a      	ldrb	r2, [r3, r2]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	330b      	adds	r3, #11
 800a748:	404a      	eors	r2, r1
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800a74e:	7d3b      	ldrb	r3, [r7, #20]
 800a750:	461a      	mov	r2, r3
 800a752:	4b05      	ldr	r3, [pc, #20]	; (800a768 <mix_sub_columns+0x284>)
 800a754:	5c9a      	ldrb	r2, [r3, r2]
 800a756:	7a7b      	ldrb	r3, [r7, #9]
 800a758:	4619      	mov	r1, r3
 800a75a:	4b04      	ldr	r3, [pc, #16]	; (800a76c <mix_sub_columns+0x288>)
 800a75c:	5c5b      	ldrb	r3, [r3, r1]
 800a75e:	4053      	eors	r3, r2
 800a760:	b2da      	uxtb	r2, r3
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	4619      	mov	r1, r3
 800a766:	e005      	b.n	800a774 <mix_sub_columns+0x290>
 800a768:	0801c200 	.word	0x0801c200
 800a76c:	0801c300 	.word	0x0801c300
 800a770:	0801c100 	.word	0x0801c100
 800a774:	4b2d      	ldr	r3, [pc, #180]	; (800a82c <mix_sub_columns+0x348>)
 800a776:	5c5b      	ldrb	r3, [r3, r1]
 800a778:	4053      	eors	r3, r2
 800a77a:	b2d9      	uxtb	r1, r3
 800a77c:	7cfb      	ldrb	r3, [r7, #19]
 800a77e:	461a      	mov	r2, r3
 800a780:	4b2a      	ldr	r3, [pc, #168]	; (800a82c <mix_sub_columns+0x348>)
 800a782:	5c9a      	ldrb	r2, [r3, r2]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	330c      	adds	r3, #12
 800a788:	404a      	eors	r2, r1
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800a78e:	7d3b      	ldrb	r3, [r7, #20]
 800a790:	461a      	mov	r2, r3
 800a792:	4b26      	ldr	r3, [pc, #152]	; (800a82c <mix_sub_columns+0x348>)
 800a794:	5c9a      	ldrb	r2, [r3, r2]
 800a796:	7a7b      	ldrb	r3, [r7, #9]
 800a798:	4619      	mov	r1, r3
 800a79a:	4b25      	ldr	r3, [pc, #148]	; (800a830 <mix_sub_columns+0x34c>)
 800a79c:	5c5b      	ldrb	r3, [r3, r1]
 800a79e:	4053      	eors	r3, r2
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4b23      	ldr	r3, [pc, #140]	; (800a834 <mix_sub_columns+0x350>)
 800a7a8:	5c5b      	ldrb	r3, [r3, r1]
 800a7aa:	4053      	eors	r3, r2
 800a7ac:	b2d9      	uxtb	r1, r3
 800a7ae:	7cfb      	ldrb	r3, [r7, #19]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	4b1e      	ldr	r3, [pc, #120]	; (800a82c <mix_sub_columns+0x348>)
 800a7b4:	5c9a      	ldrb	r2, [r3, r2]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	330d      	adds	r3, #13
 800a7ba:	404a      	eors	r2, r1
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800a7c0:	7d3b      	ldrb	r3, [r7, #20]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4b19      	ldr	r3, [pc, #100]	; (800a82c <mix_sub_columns+0x348>)
 800a7c6:	5c9a      	ldrb	r2, [r3, r2]
 800a7c8:	7a7b      	ldrb	r3, [r7, #9]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4b17      	ldr	r3, [pc, #92]	; (800a82c <mix_sub_columns+0x348>)
 800a7ce:	5c5b      	ldrb	r3, [r3, r1]
 800a7d0:	4053      	eors	r3, r2
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4b15      	ldr	r3, [pc, #84]	; (800a830 <mix_sub_columns+0x34c>)
 800a7da:	5c5b      	ldrb	r3, [r3, r1]
 800a7dc:	4053      	eors	r3, r2
 800a7de:	b2d9      	uxtb	r1, r3
 800a7e0:	7cfb      	ldrb	r3, [r7, #19]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4b13      	ldr	r3, [pc, #76]	; (800a834 <mix_sub_columns+0x350>)
 800a7e6:	5c9a      	ldrb	r2, [r3, r2]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	330e      	adds	r3, #14
 800a7ec:	404a      	eors	r2, r1
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800a7f2:	7d3b      	ldrb	r3, [r7, #20]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <mix_sub_columns+0x350>)
 800a7f8:	5c9a      	ldrb	r2, [r3, r2]
 800a7fa:	7a7b      	ldrb	r3, [r7, #9]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <mix_sub_columns+0x348>)
 800a800:	5c5b      	ldrb	r3, [r3, r1]
 800a802:	4053      	eors	r3, r2
 800a804:	b2da      	uxtb	r2, r3
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	4619      	mov	r1, r3
 800a80a:	4b08      	ldr	r3, [pc, #32]	; (800a82c <mix_sub_columns+0x348>)
 800a80c:	5c5b      	ldrb	r3, [r3, r1]
 800a80e:	4053      	eors	r3, r2
 800a810:	b2d9      	uxtb	r1, r3
 800a812:	7cfb      	ldrb	r3, [r7, #19]
 800a814:	461a      	mov	r2, r3
 800a816:	4b06      	ldr	r3, [pc, #24]	; (800a830 <mix_sub_columns+0x34c>)
 800a818:	5c9a      	ldrb	r2, [r3, r2]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	330f      	adds	r3, #15
 800a81e:	404a      	eors	r2, r1
 800a820:	b2d2      	uxtb	r2, r2
 800a822:	701a      	strb	r2, [r3, #0]
  }
 800a824:	bf00      	nop
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	0801c100 	.word	0x0801c100
 800a830:	0801c200 	.word	0x0801c200
 800a834:	0801c300 	.word	0x0801c300

0800a838 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	460b      	mov	r3, r1
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800a846:	7afb      	ldrb	r3, [r7, #11]
 800a848:	3b10      	subs	r3, #16
 800a84a:	2b10      	cmp	r3, #16
 800a84c:	bf8c      	ite	hi
 800a84e:	2201      	movhi	r2, #1
 800a850:	2200      	movls	r2, #0
 800a852:	b2d2      	uxtb	r2, r2
 800a854:	2a00      	cmp	r2, #0
 800a856:	d10d      	bne.n	800a874 <lorawan_aes_set_key+0x3c>
 800a858:	2201      	movs	r2, #1
 800a85a:	fa02 f303 	lsl.w	r3, r2, r3
 800a85e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a866:	2b00      	cmp	r3, #0
 800a868:	bf14      	ite	ne
 800a86a:	2301      	movne	r3, #1
 800a86c:	2300      	moveq	r3, #0
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800a87c:	23ff      	movs	r3, #255	; 0xff
 800a87e:	e0b2      	b.n	800a9e6 <lorawan_aes_set_key+0x1ae>
        break;
 800a880:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7afa      	ldrb	r2, [r7, #11]
 800a886:	68f9      	ldr	r1, [r7, #12]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fbfa 	bl	800a082 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	331c      	adds	r3, #28
 800a892:	b2db      	uxtb	r3, r3
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800a898:	7c7b      	ldrb	r3, [r7, #17]
 800a89a:	091b      	lsrs	r3, r3, #4
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a8a8:	7afb      	ldrb	r3, [r7, #11]
 800a8aa:	75fb      	strb	r3, [r7, #23]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75bb      	strb	r3, [r7, #22]
 800a8b0:	e093      	b.n	800a9da <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	3b04      	subs	r3, #4
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	5cd3      	ldrb	r3, [r2, r3]
 800a8ba:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	3b03      	subs	r3, #3
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	5cd3      	ldrb	r3, [r2, r3]
 800a8c4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	3b02      	subs	r3, #2
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	5cd3      	ldrb	r3, [r2, r3]
 800a8ce:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	5cd3      	ldrb	r3, [r2, r3]
 800a8d8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	7afa      	ldrb	r2, [r7, #11]
 800a8de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8e2:	fb02 f201 	mul.w	r2, r2, r1
 800a8e6:	1a9b      	subs	r3, r3, r2
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d127      	bne.n	800a93e <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800a8ee:	7d7b      	ldrb	r3, [r7, #21]
 800a8f0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800a8f2:	7d3b      	ldrb	r3, [r7, #20]
 800a8f4:	4a3e      	ldr	r2, [pc, #248]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a8f6:	5cd2      	ldrb	r2, [r2, r3]
 800a8f8:	7dbb      	ldrb	r3, [r7, #22]
 800a8fa:	4053      	eors	r3, r2
 800a8fc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800a8fe:	7cfb      	ldrb	r3, [r7, #19]
 800a900:	4a3b      	ldr	r2, [pc, #236]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a902:	5cd3      	ldrb	r3, [r2, r3]
 800a904:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800a906:	7cbb      	ldrb	r3, [r7, #18]
 800a908:	4a39      	ldr	r2, [pc, #228]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a90a:	5cd3      	ldrb	r3, [r2, r3]
 800a90c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800a90e:	7c3b      	ldrb	r3, [r7, #16]
 800a910:	4a37      	ldr	r2, [pc, #220]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a912:	5cd3      	ldrb	r3, [r2, r3]
 800a914:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800a916:	7dbb      	ldrb	r3, [r7, #22]
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	b25a      	sxtb	r2, r3
 800a91c:	7dbb      	ldrb	r3, [r7, #22]
 800a91e:	09db      	lsrs	r3, r3, #7
 800a920:	b2db      	uxtb	r3, r3
 800a922:	4619      	mov	r1, r3
 800a924:	0049      	lsls	r1, r1, #1
 800a926:	440b      	add	r3, r1
 800a928:	4619      	mov	r1, r3
 800a92a:	00c8      	lsls	r0, r1, #3
 800a92c:	4619      	mov	r1, r3
 800a92e:	4603      	mov	r3, r0
 800a930:	440b      	add	r3, r1
 800a932:	b2db      	uxtb	r3, r3
 800a934:	b25b      	sxtb	r3, r3
 800a936:	4053      	eors	r3, r2
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	75bb      	strb	r3, [r7, #22]
 800a93c:	e01c      	b.n	800a978 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800a93e:	7afb      	ldrb	r3, [r7, #11]
 800a940:	2b18      	cmp	r3, #24
 800a942:	d919      	bls.n	800a978 <lorawan_aes_set_key+0x140>
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	7afa      	ldrb	r2, [r7, #11]
 800a948:	fbb3 f1f2 	udiv	r1, r3, r2
 800a94c:	fb02 f201 	mul.w	r2, r2, r1
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b10      	cmp	r3, #16
 800a956:	d10f      	bne.n	800a978 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800a958:	7d7b      	ldrb	r3, [r7, #21]
 800a95a:	4a25      	ldr	r2, [pc, #148]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a95c:	5cd3      	ldrb	r3, [r2, r3]
 800a95e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800a960:	7d3b      	ldrb	r3, [r7, #20]
 800a962:	4a23      	ldr	r2, [pc, #140]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a964:	5cd3      	ldrb	r3, [r2, r3]
 800a966:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800a968:	7cfb      	ldrb	r3, [r7, #19]
 800a96a:	4a21      	ldr	r2, [pc, #132]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a96c:	5cd3      	ldrb	r3, [r2, r3]
 800a96e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800a970:	7cbb      	ldrb	r3, [r7, #18]
 800a972:	4a1f      	ldr	r2, [pc, #124]	; (800a9f0 <lorawan_aes_set_key+0x1b8>)
 800a974:	5cd3      	ldrb	r3, [r2, r3]
 800a976:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800a978:	7dfa      	ldrb	r2, [r7, #23]
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800a980:	7c3b      	ldrb	r3, [r7, #16]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	5cd1      	ldrb	r1, [r2, r3]
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	7d7a      	ldrb	r2, [r7, #21]
 800a98a:	404a      	eors	r2, r1
 800a98c:	b2d1      	uxtb	r1, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800a992:	7c3b      	ldrb	r3, [r7, #16]
 800a994:	3301      	adds	r3, #1
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	5cd1      	ldrb	r1, [r2, r3]
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	3301      	adds	r3, #1
 800a99e:	7d3a      	ldrb	r2, [r7, #20]
 800a9a0:	404a      	eors	r2, r1
 800a9a2:	b2d1      	uxtb	r1, r2
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800a9a8:	7c3b      	ldrb	r3, [r7, #16]
 800a9aa:	3302      	adds	r3, #2
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	5cd1      	ldrb	r1, [r2, r3]
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	7cfa      	ldrb	r2, [r7, #19]
 800a9b6:	404a      	eors	r2, r1
 800a9b8:	b2d1      	uxtb	r1, r2
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800a9be:	7c3b      	ldrb	r3, [r7, #16]
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	5cd1      	ldrb	r1, [r2, r3]
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	3303      	adds	r3, #3
 800a9ca:	7cba      	ldrb	r2, [r7, #18]
 800a9cc:	404a      	eors	r2, r1
 800a9ce:	b2d1      	uxtb	r1, r2
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	3304      	adds	r3, #4
 800a9d8:	75fb      	strb	r3, [r7, #23]
 800a9da:	7dfa      	ldrb	r2, [r7, #23]
 800a9dc:	7c7b      	ldrb	r3, [r7, #17]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	f4ff af67 	bcc.w	800a8b2 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	0801c100 	.word	0x0801c100

0800a9f4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08a      	sub	sp, #40	; 0x28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d038      	beq.n	800aa7c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	f107 0314 	add.w	r3, r7, #20
 800aa10:	68f9      	ldr	r1, [r7, #12]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fc07 	bl	800a226 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa1e:	e014      	b.n	800aa4a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800aa20:	f107 0314 	add.w	r3, r7, #20
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff fd5d 	bl	800a4e4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa30:	0112      	lsls	r2, r2, #4
 800aa32:	441a      	add	r2, r3
 800aa34:	f107 0314 	add.w	r3, r7, #20
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff fcab 	bl	800a396 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800aa40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa44:	3301      	adds	r3, #1
 800aa46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800aa50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d3e3      	bcc.n	800aa20 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800aa58:	f107 0314 	add.w	r3, r7, #20
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff fca7 	bl	800a3b0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa68:	0112      	lsls	r2, r2, #4
 800aa6a:	441a      	add	r2, r3
 800aa6c:	f107 0314 	add.w	r3, r7, #20
 800aa70:	4619      	mov	r1, r3
 800aa72:	68b8      	ldr	r0, [r7, #8]
 800aa74:	f7ff fbd7 	bl	800a226 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e000      	b.n	800aa7e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800aa7c:	23ff      	movs	r3, #255	; 0xff
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa8a:	b09d      	sub	sp, #116	; 0x74
 800aa8c:	af10      	add	r7, sp, #64	; 0x40
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800aa94:	2306      	movs	r3, #6
 800aa96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800aa9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800aa9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fa01 	bl	800aeac <SecureElementGetKeyByID>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800aab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 80b0 	bne.w	800ac1a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800aaba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800aac2:	4b58      	ldr	r3, [pc, #352]	; (800ac24 <PrintKey+0x19c>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	2100      	movs	r1, #0
 800aac8:	2002      	movs	r0, #2
 800aaca:	f010 fb6f 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800aace:	e056      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800aad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d106      	bne.n	800aae6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800aad8:	4b53      	ldr	r3, [pc, #332]	; (800ac28 <PrintKey+0x1a0>)
 800aada:	2200      	movs	r2, #0
 800aadc:	2100      	movs	r1, #0
 800aade:	2002      	movs	r0, #2
 800aae0:	f010 fb64 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800aae4:	e04b      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800aae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d106      	bne.n	800aafc <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800aaee:	4b4f      	ldr	r3, [pc, #316]	; (800ac2c <PrintKey+0x1a4>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	2002      	movs	r0, #2
 800aaf6:	f010 fb59 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800aafa:	e040      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800aafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d106      	bne.n	800ab12 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ab04:	4b4a      	ldr	r3, [pc, #296]	; (800ac30 <PrintKey+0x1a8>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	2002      	movs	r0, #2
 800ab0c:	f010 fb4e 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800ab10:	e035      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ab12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	d106      	bne.n	800ab28 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ab1a:	4b46      	ldr	r3, [pc, #280]	; (800ac34 <PrintKey+0x1ac>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	2002      	movs	r0, #2
 800ab22:	f010 fb43 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800ab26:	e02a      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ab28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab2c:	2b7f      	cmp	r3, #127	; 0x7f
 800ab2e:	d106      	bne.n	800ab3e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ab30:	4b41      	ldr	r3, [pc, #260]	; (800ac38 <PrintKey+0x1b0>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	2002      	movs	r0, #2
 800ab38:	f010 fb38 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800ab3c:	e01f      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ab3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab42:	2b80      	cmp	r3, #128	; 0x80
 800ab44:	d106      	bne.n	800ab54 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ab46:	4b3d      	ldr	r3, [pc, #244]	; (800ac3c <PrintKey+0x1b4>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	2002      	movs	r0, #2
 800ab4e:	f010 fb2d 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800ab52:	e014      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ab54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab58:	2b81      	cmp	r3, #129	; 0x81
 800ab5a:	d106      	bne.n	800ab6a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ab5c:	4b38      	ldr	r3, [pc, #224]	; (800ac40 <PrintKey+0x1b8>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	2002      	movs	r0, #2
 800ab64:	f010 fb22 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 800ab68:	e009      	b.n	800ab7e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ab6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab6e:	2b82      	cmp	r3, #130	; 0x82
 800ab70:	d105      	bne.n	800ab7e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ab72:	4b34      	ldr	r3, [pc, #208]	; (800ac44 <PrintKey+0x1bc>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	2100      	movs	r1, #0
 800ab78:	2002      	movs	r0, #2
 800ab7a:	f010 fb17 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	4618      	mov	r0, r3
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	789b      	ldrb	r3, [r3, #2]
 800ab88:	461c      	mov	r4, r3
 800ab8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8c:	78db      	ldrb	r3, [r3, #3]
 800ab8e:	461d      	mov	r5, r3
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	791b      	ldrb	r3, [r3, #4]
 800ab94:	461e      	mov	r6, r3
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	795b      	ldrb	r3, [r3, #5]
 800ab9a:	623b      	str	r3, [r7, #32]
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	799b      	ldrb	r3, [r3, #6]
 800aba0:	61fb      	str	r3, [r7, #28]
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	79db      	ldrb	r3, [r3, #7]
 800aba6:	61bb      	str	r3, [r7, #24]
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	7a1b      	ldrb	r3, [r3, #8]
 800abac:	617b      	str	r3, [r7, #20]
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	7a5b      	ldrb	r3, [r3, #9]
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb6:	7a9b      	ldrb	r3, [r3, #10]
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	7adb      	ldrb	r3, [r3, #11]
 800abbe:	60bb      	str	r3, [r7, #8]
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	7b1b      	ldrb	r3, [r3, #12]
 800abc4:	607b      	str	r3, [r7, #4]
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	7b5b      	ldrb	r3, [r3, #13]
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	7b9b      	ldrb	r3, [r3, #14]
 800abd0:	4619      	mov	r1, r3
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	7bdb      	ldrb	r3, [r3, #15]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	7c1b      	ldrb	r3, [r3, #16]
 800abdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800abde:	920e      	str	r2, [sp, #56]	; 0x38
 800abe0:	910d      	str	r1, [sp, #52]	; 0x34
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	920c      	str	r2, [sp, #48]	; 0x30
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	920b      	str	r2, [sp, #44]	; 0x2c
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	920a      	str	r2, [sp, #40]	; 0x28
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	9209      	str	r2, [sp, #36]	; 0x24
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	9208      	str	r2, [sp, #32]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	9207      	str	r2, [sp, #28]
 800abfa:	69ba      	ldr	r2, [r7, #24]
 800abfc:	9206      	str	r2, [sp, #24]
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	9205      	str	r2, [sp, #20]
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	9603      	str	r6, [sp, #12]
 800ac08:	9502      	str	r5, [sp, #8]
 800ac0a:	9401      	str	r4, [sp, #4]
 800ac0c:	9000      	str	r0, [sp, #0]
 800ac0e:	4b0e      	ldr	r3, [pc, #56]	; (800ac48 <PrintKey+0x1c0>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	2100      	movs	r1, #0
 800ac14:	2002      	movs	r0, #2
 800ac16:	f010 fac9 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800ac1a:	bf00      	nop
 800ac1c:	3734      	adds	r7, #52	; 0x34
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	bf00      	nop
 800ac24:	0801bb1c 	.word	0x0801bb1c
 800ac28:	0801bb34 	.word	0x0801bb34
 800ac2c:	0801bb4c 	.word	0x0801bb4c
 800ac30:	0801bb64 	.word	0x0801bb64
 800ac34:	0801bb7c 	.word	0x0801bb7c
 800ac38:	0801bb94 	.word	0x0801bb94
 800ac3c:	0801bbac 	.word	0x0801bbac
 800ac40:	0801bbc4 	.word	0x0801bbc4
 800ac44:	0801bbdc 	.word	0x0801bbdc
 800ac48:	0801bbf4 	.word	0x0801bbf4

0800ac4c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ac58:	2300      	movs	r3, #0
 800ac5a:	73fb      	strb	r3, [r7, #15]
 800ac5c:	e01a      	b.n	800ac94 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ac5e:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <GetKeyByID+0x5c>)
 800ac60:	6819      	ldr	r1, [r3, #0]
 800ac62:	7bfa      	ldrb	r2, [r7, #15]
 800ac64:	4613      	mov	r3, r2
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	4413      	add	r3, r2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	3310      	adds	r3, #16
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	79fa      	ldrb	r2, [r7, #7]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d10b      	bne.n	800ac8e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ac76:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <GetKeyByID+0x5c>)
 800ac78:	6819      	ldr	r1, [r3, #0]
 800ac7a:	7bfa      	ldrb	r2, [r7, #15]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	4413      	add	r3, r2
 800ac82:	3310      	adds	r3, #16
 800ac84:	18ca      	adds	r2, r1, r3
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	e006      	b.n	800ac9c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	3301      	adds	r3, #1
 800ac92:	73fb      	strb	r3, [r7, #15]
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	2b09      	cmp	r3, #9
 800ac98:	d9e1      	bls.n	800ac5e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ac9a:	2303      	movs	r3, #3
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bc80      	pop	{r7}
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	200002c8 	.word	0x200002c8

0800acac <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b0d1      	sub	sp, #324	; 0x144
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	f107 040c 	add.w	r4, r7, #12
 800acb6:	6020      	str	r0, [r4, #0]
 800acb8:	f107 0008 	add.w	r0, r7, #8
 800acbc:	6001      	str	r1, [r0, #0]
 800acbe:	4619      	mov	r1, r3
 800acc0:	1dbb      	adds	r3, r7, #6
 800acc2:	801a      	strh	r2, [r3, #0]
 800acc4:	1d7b      	adds	r3, r7, #5
 800acc6:	460a      	mov	r2, r1
 800acc8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800acca:	f107 0308 	add.w	r3, r7, #8
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <ComputeCmac+0x30>
 800acd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800acdc:	2302      	movs	r3, #2
 800acde:	e04e      	b.n	800ad7e <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ace0:	f107 0314 	add.w	r3, r7, #20
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe ff23 	bl	8009b30 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800acea:	f107 0210 	add.w	r2, r7, #16
 800acee:	1d7b      	adds	r3, r7, #5
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff ffa9 	bl	800ac4c <GetKeyByID>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ad00:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d138      	bne.n	800ad7a <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ad08:	f107 0310 	add.w	r3, r7, #16
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	f107 0314 	add.w	r3, r7, #20
 800ad14:	4611      	mov	r1, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe ff23 	bl	8009b62 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ad1c:	f107 030c 	add.w	r3, r7, #12
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ad26:	f107 030c 	add.w	r3, r7, #12
 800ad2a:	f107 0014 	add.w	r0, r7, #20
 800ad2e:	2210      	movs	r2, #16
 800ad30:	6819      	ldr	r1, [r3, #0]
 800ad32:	f7fe ff25 	bl	8009b80 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ad36:	1dbb      	adds	r3, r7, #6
 800ad38:	881a      	ldrh	r2, [r3, #0]
 800ad3a:	f107 0308 	add.w	r3, r7, #8
 800ad3e:	f107 0014 	add.w	r0, r7, #20
 800ad42:	6819      	ldr	r1, [r3, #0]
 800ad44:	f7fe ff1c 	bl	8009b80 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ad48:	f107 0214 	add.w	r2, r7, #20
 800ad4c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ad50:	4611      	mov	r1, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe ffd6 	bl	8009d04 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ad58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ad5c:	061a      	lsls	r2, r3, #24
 800ad5e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ad62:	041b      	lsls	r3, r3, #16
 800ad64:	431a      	orrs	r2, r3
 800ad66:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ad6a:	021b      	lsls	r3, r3, #8
 800ad6c:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ad6e:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ad72:	431a      	orrs	r2, r3
 800ad74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ad78:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ad7a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd90      	pop	{r4, r7, pc}

0800ad88 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ad88:	b5b0      	push	{r4, r5, r7, lr}
 800ad8a:	b0b2      	sub	sp, #200	; 0xc8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	22c0      	movs	r2, #192	; 0xc0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f010 fca4 	bl	801b6e8 <memset>
 800ada0:	4a3b      	ldr	r2, [pc, #236]	; (800ae90 <SecureElementInit+0x108>)
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adaa:	e883 0003 	stmia.w	r3, {r0, r1}
 800adae:	4a39      	ldr	r2, [pc, #228]	; (800ae94 <SecureElementInit+0x10c>)
 800adb0:	f107 0310 	add.w	r3, r7, #16
 800adb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adb8:	e883 0003 	stmia.w	r3, {r0, r1}
 800adbc:	4b36      	ldr	r3, [pc, #216]	; (800ae98 <SecureElementInit+0x110>)
 800adbe:	f107 0419 	add.w	r4, r7, #25
 800adc2:	461d      	mov	r5, r3
 800adc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adc6:	6020      	str	r0, [r4, #0]
 800adc8:	6061      	str	r1, [r4, #4]
 800adca:	60a2      	str	r2, [r4, #8]
 800adcc:	60e3      	str	r3, [r4, #12]
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800add4:	4b30      	ldr	r3, [pc, #192]	; (800ae98 <SecureElementInit+0x110>)
 800add6:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800adda:	461d      	mov	r5, r3
 800addc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adde:	6020      	str	r0, [r4, #0]
 800ade0:	6061      	str	r1, [r4, #4]
 800ade2:	60a2      	str	r2, [r4, #8]
 800ade4:	60e3      	str	r3, [r4, #12]
 800ade6:	2302      	movs	r3, #2
 800ade8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800adec:	4b2b      	ldr	r3, [pc, #172]	; (800ae9c <SecureElementInit+0x114>)
 800adee:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800adf2:	461d      	mov	r5, r3
 800adf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	6061      	str	r1, [r4, #4]
 800adfa:	60a2      	str	r2, [r4, #8]
 800adfc:	60e3      	str	r3, [r4, #12]
 800adfe:	2303      	movs	r3, #3
 800ae00:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ae04:	4b25      	ldr	r3, [pc, #148]	; (800ae9c <SecureElementInit+0x114>)
 800ae06:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ae0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae10:	2304      	movs	r3, #4
 800ae12:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800ae16:	237f      	movs	r3, #127	; 0x7f
 800ae18:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800ae22:	2381      	movs	r3, #129	; 0x81
 800ae24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800ae28:	2382      	movs	r3, #130	; 0x82
 800ae2a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800ae2e:	2383      	movs	r3, #131	; 0x83
 800ae30:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e023      	b.n	800ae86 <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ae3e:	4a18      	ldr	r2, [pc, #96]	; (800aea0 <SecureElementInit+0x118>)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ae44:	4b16      	ldr	r3, [pc, #88]	; (800aea0 <SecureElementInit+0x118>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f107 0108 	add.w	r1, r7, #8
 800ae4c:	22c0      	movs	r2, #192	; 0xc0
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f00b ff6b 	bl	8016d2a <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ae54:	4b13      	ldr	r3, [pc, #76]	; (800aea4 <SecureElementInit+0x11c>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	2100      	movs	r1, #0
 800ae5a:	2002      	movs	r0, #2
 800ae5c:	f010 f9a6 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ae60:	2000      	movs	r0, #0
 800ae62:	f7ff fe11 	bl	800aa88 <PrintKey>
    PrintKey(NWK_KEY);
 800ae66:	2001      	movs	r0, #1
 800ae68:	f7ff fe0e 	bl	800aa88 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <SecureElementInit+0x120>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2100      	movs	r1, #0
 800ae72:	2002      	movs	r0, #2
 800ae74:	f010 f99a 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ae78:	2003      	movs	r0, #3
 800ae7a:	f7ff fe05 	bl	800aa88 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ae7e:	2002      	movs	r0, #2
 800ae80:	f7ff fe02 	bl	800aa88 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	37c8      	adds	r7, #200	; 0xc8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	0801bc78 	.word	0x0801bc78
 800ae94:	0801bc80 	.word	0x0801bc80
 800ae98:	0801bc88 	.word	0x0801bc88
 800ae9c:	0801bc98 	.word	0x0801bc98
 800aea0:	200002c8 	.word	0x200002c8
 800aea4:	0801bc48 	.word	0x0801bc48
 800aea8:	0801bc60 	.word	0x0801bc60

0800aeac <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73fb      	strb	r3, [r7, #15]
 800aebc:	e01a      	b.n	800aef4 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800aebe:	4b12      	ldr	r3, [pc, #72]	; (800af08 <SecureElementGetKeyByID+0x5c>)
 800aec0:	6819      	ldr	r1, [r3, #0]
 800aec2:	7bfa      	ldrb	r2, [r7, #15]
 800aec4:	4613      	mov	r3, r2
 800aec6:	011b      	lsls	r3, r3, #4
 800aec8:	4413      	add	r3, r2
 800aeca:	440b      	add	r3, r1
 800aecc:	3310      	adds	r3, #16
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	79fa      	ldrb	r2, [r7, #7]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d10b      	bne.n	800aeee <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <SecureElementGetKeyByID+0x5c>)
 800aed8:	6819      	ldr	r1, [r3, #0]
 800aeda:	7bfa      	ldrb	r2, [r7, #15]
 800aedc:	4613      	mov	r3, r2
 800aede:	011b      	lsls	r3, r3, #4
 800aee0:	4413      	add	r3, r2
 800aee2:	3310      	adds	r3, #16
 800aee4:	18ca      	adds	r2, r1, r3
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800aeea:	2300      	movs	r3, #0
 800aeec:	e006      	b.n	800aefc <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	3301      	adds	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	2b09      	cmp	r3, #9
 800aef8:	d9e1      	bls.n	800aebe <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800aefa:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	200002c8 	.word	0x200002c8

0800af0c <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	4603      	mov	r3, r0
 800af14:	6039      	str	r1, [r7, #0]
 800af16:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800af1e:	2302      	movs	r3, #2
 800af20:	e04c      	b.n	800afbc <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800af22:	2300      	movs	r3, #0
 800af24:	77fb      	strb	r3, [r7, #31]
 800af26:	e045      	b.n	800afb4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800af28:	4b26      	ldr	r3, [pc, #152]	; (800afc4 <SecureElementSetKey+0xb8>)
 800af2a:	6819      	ldr	r1, [r3, #0]
 800af2c:	7ffa      	ldrb	r2, [r7, #31]
 800af2e:	4613      	mov	r3, r2
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	4413      	add	r3, r2
 800af34:	440b      	add	r3, r1
 800af36:	3310      	adds	r3, #16
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	79fa      	ldrb	r2, [r7, #7]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d136      	bne.n	800afae <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	2b80      	cmp	r3, #128	; 0x80
 800af44:	d123      	bne.n	800af8e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800af46:	2306      	movs	r3, #6
 800af48:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	f107 0310 	add.w	r3, r7, #16
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	605a      	str	r2, [r3, #4]
 800af58:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800af5a:	f107 030c 	add.w	r3, r7, #12
 800af5e:	227f      	movs	r2, #127	; 0x7f
 800af60:	2110      	movs	r1, #16
 800af62:	6838      	ldr	r0, [r7, #0]
 800af64:	f000 f87d 	bl	800b062 <SecureElementAesEncrypt>
 800af68:	4603      	mov	r3, r0
 800af6a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800af6c:	4b15      	ldr	r3, [pc, #84]	; (800afc4 <SecureElementSetKey+0xb8>)
 800af6e:	6819      	ldr	r1, [r3, #0]
 800af70:	7ffa      	ldrb	r2, [r7, #31]
 800af72:	4613      	mov	r3, r2
 800af74:	011b      	lsls	r3, r3, #4
 800af76:	4413      	add	r3, r2
 800af78:	3310      	adds	r3, #16
 800af7a:	440b      	add	r3, r1
 800af7c:	3301      	adds	r3, #1
 800af7e:	f107 010c 	add.w	r1, r7, #12
 800af82:	2210      	movs	r2, #16
 800af84:	4618      	mov	r0, r3
 800af86:	f00b fed0 	bl	8016d2a <memcpy1>
                return retval;
 800af8a:	7fbb      	ldrb	r3, [r7, #30]
 800af8c:	e016      	b.n	800afbc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800af8e:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <SecureElementSetKey+0xb8>)
 800af90:	6819      	ldr	r1, [r3, #0]
 800af92:	7ffa      	ldrb	r2, [r7, #31]
 800af94:	4613      	mov	r3, r2
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	4413      	add	r3, r2
 800af9a:	3310      	adds	r3, #16
 800af9c:	440b      	add	r3, r1
 800af9e:	3301      	adds	r3, #1
 800afa0:	2210      	movs	r2, #16
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f00b fec0 	bl	8016d2a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800afaa:	2300      	movs	r3, #0
 800afac:	e006      	b.n	800afbc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800afae:	7ffb      	ldrb	r3, [r7, #31]
 800afb0:	3301      	adds	r3, #1
 800afb2:	77fb      	strb	r3, [r7, #31]
 800afb4:	7ffb      	ldrb	r3, [r7, #31]
 800afb6:	2b09      	cmp	r3, #9
 800afb8:	d9b6      	bls.n	800af28 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800afba:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	200002c8 	.word	0x200002c8

0800afc8 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af02      	add	r7, sp, #8
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4611      	mov	r1, r2
 800afd4:	461a      	mov	r2, r3
 800afd6:	460b      	mov	r3, r1
 800afd8:	80fb      	strh	r3, [r7, #6]
 800afda:	4613      	mov	r3, r2
 800afdc:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800afde:	797b      	ldrb	r3, [r7, #5]
 800afe0:	2b7e      	cmp	r3, #126	; 0x7e
 800afe2:	d901      	bls.n	800afe8 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e009      	b.n	800affc <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800afe8:	7979      	ldrb	r1, [r7, #5]
 800afea:	88fa      	ldrh	r2, [r7, #6]
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	460b      	mov	r3, r1
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7ff fe59 	bl	800acac <ComputeCmac>
 800affa:	4603      	mov	r3, r0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af02      	add	r7, sp, #8
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	607a      	str	r2, [r7, #4]
 800b00e:	461a      	mov	r2, r3
 800b010:	460b      	mov	r3, r1
 800b012:	817b      	strh	r3, [r7, #10]
 800b014:	4613      	mov	r3, r2
 800b016:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b01e:	2302      	movs	r3, #2
 800b020:	e01b      	b.n	800b05a <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b022:	2306      	movs	r3, #6
 800b024:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b02a:	7a79      	ldrb	r1, [r7, #9]
 800b02c:	897a      	ldrh	r2, [r7, #10]
 800b02e:	f107 0310 	add.w	r3, r7, #16
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	460b      	mov	r3, r1
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	2000      	movs	r0, #0
 800b03a:	f7ff fe37 	bl	800acac <ComputeCmac>
 800b03e:	4603      	mov	r3, r0
 800b040:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800b048:	7dfb      	ldrb	r3, [r7, #23]
 800b04a:	e006      	b.n	800b05a <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d001      	beq.n	800b058 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b054:	2301      	movs	r3, #1
 800b056:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b058:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b0c2      	sub	sp, #264	; 0x108
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	4608      	mov	r0, r1
 800b06c:	4611      	mov	r1, r2
 800b06e:	1d3a      	adds	r2, r7, #4
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	4603      	mov	r3, r0
 800b074:	817b      	strh	r3, [r7, #10]
 800b076:	460b      	mov	r3, r1
 800b078:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <SecureElementAesEncrypt+0x26>
 800b080:	1d3b      	adds	r3, r7, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b088:	2302      	movs	r3, #2
 800b08a:	e043      	b.n	800b114 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b08c:	897b      	ldrh	r3, [r7, #10]
 800b08e:	f003 030f 	and.w	r3, r3, #15
 800b092:	b29b      	uxth	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b098:	2305      	movs	r3, #5
 800b09a:	e03b      	b.n	800b114 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b09c:	f107 0314 	add.w	r3, r7, #20
 800b0a0:	22f0      	movs	r2, #240	; 0xf0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f00b fe7b 	bl	8016da0 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b0aa:	f107 0210 	add.w	r2, r7, #16
 800b0ae:	7a7b      	ldrb	r3, [r7, #9]
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fdca 	bl	800ac4c <GetKeyByID>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b0be:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d124      	bne.n	800b110 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	f107 0214 	add.w	r2, r7, #20
 800b0ce:	2110      	movs	r1, #16
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff fbb1 	bl	800a838 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800b0dc:	e015      	b.n	800b10a <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800b0de:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	18d0      	adds	r0, r2, r3
 800b0e6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b0ea:	1d3a      	adds	r2, r7, #4
 800b0ec:	6812      	ldr	r2, [r2, #0]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f107 0214 	add.w	r2, r7, #20
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f7ff fc7d 	bl	800a9f4 <lorawan_aes_encrypt>
            block = block + 16;
 800b0fa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b0fe:	3310      	adds	r3, #16
 800b100:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800b104:	897b      	ldrh	r3, [r7, #10]
 800b106:	3b10      	subs	r3, #16
 800b108:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800b10a:	897b      	ldrh	r3, [r7, #10]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e6      	bne.n	800b0de <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b110:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800b114:	4618      	mov	r0, r3
 800b116:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b088      	sub	sp, #32
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
 800b12a:	4613      	mov	r3, r2
 800b12c:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b134:	2302      	movs	r3, #2
 800b136:	e02e      	b.n	800b196 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b138:	2306      	movs	r3, #6
 800b13a:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b13c:	78bb      	ldrb	r3, [r7, #2]
 800b13e:	2b7f      	cmp	r3, #127	; 0x7f
 800b140:	d104      	bne.n	800b14c <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b142:	78fb      	ldrb	r3, [r7, #3]
 800b144:	2b04      	cmp	r3, #4
 800b146:	d001      	beq.n	800b14c <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b148:	2303      	movs	r3, #3
 800b14a:	e024      	b.n	800b196 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	f107 0310 	add.w	r3, r7, #16
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	605a      	str	r2, [r3, #4]
 800b15a:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b15c:	f107 030c 	add.w	r3, r7, #12
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	2110      	movs	r1, #16
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff ff7c 	bl	800b062 <SecureElementAesEncrypt>
 800b16a:	4603      	mov	r3, r0
 800b16c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b16e:	7ffb      	ldrb	r3, [r7, #31]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b174:	7ffb      	ldrb	r3, [r7, #31]
 800b176:	e00e      	b.n	800b196 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800b178:	f107 020c 	add.w	r2, r7, #12
 800b17c:	78bb      	ldrb	r3, [r7, #2]
 800b17e:	4611      	mov	r1, r2
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fec3 	bl	800af0c <SecureElementSetKey>
 800b186:	4603      	mov	r3, r0
 800b188:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b18a:	7ffb      	ldrb	r3, [r7, #31]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b190:	7ffb      	ldrb	r3, [r7, #31]
 800b192:	e000      	b.n	800b196 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b194:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b196:	4618      	mov	r0, r3
 800b198:	3720      	adds	r7, #32
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b086      	sub	sp, #24
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607b      	str	r3, [r7, #4]
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73fb      	strb	r3, [r7, #15]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d005      	beq.n	800b1c2 <SecureElementProcessJoinAccept+0x24>
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <SecureElementProcessJoinAccept+0x24>
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	e064      	b.n	800b290 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b1c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1ca:	2b21      	cmp	r3, #33	; 0x21
 800b1cc:	d901      	bls.n	800b1d2 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b1ce:	2305      	movs	r3, #5
 800b1d0:	e05e      	b.n	800b290 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b1d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1e2:	f00b fda2 	bl	8016d2a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	1c58      	adds	r0, r3, #1
 800b1ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	b299      	uxth	r1, r3
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	7dfa      	ldrb	r2, [r7, #23]
 800b1fa:	f7ff ff32 	bl	800b062 <SecureElementAesEncrypt>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b204:	2307      	movs	r3, #7
 800b206:	e043      	b.n	800b290 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	330b      	adds	r3, #11
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	09db      	lsrs	r3, r3, #7
 800b210:	b2da      	uxtb	r2, r3
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b21a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b21e:	3b04      	subs	r3, #4
 800b220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b222:	4413      	add	r3, r2
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b22c:	3b03      	subs	r3, #3
 800b22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b230:	4413      	add	r3, r2
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	021b      	lsls	r3, r3, #8
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	4313      	orrs	r3, r2
 800b23a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b23c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b240:	3b02      	subs	r3, #2
 800b242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b244:	4413      	add	r3, r2
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	041b      	lsls	r3, r3, #16
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b250:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b254:	3b01      	subs	r3, #1
 800b256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b258:	4413      	add	r3, r2
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	061b      	lsls	r3, r3, #24
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	4313      	orrs	r3, r2
 800b262:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10e      	bne.n	800b28a <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b26c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b270:	b29b      	uxth	r3, r3
 800b272:	3b04      	subs	r3, #4
 800b274:	b299      	uxth	r1, r3
 800b276:	2301      	movs	r3, #1
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b27c:	f7ff fec2 	bl	800b004 <SecureElementVerifyAesCmac>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b286:	2301      	movs	r3, #1
 800b288:	e002      	b.n	800b290 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b28a:	2304      	movs	r3, #4
 800b28c:	e000      	b.n	800b290 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e006      	b.n	800b2b8 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b2aa:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <SecureElementRandomNumber+0x28>)
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	4798      	blx	r3
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	0801c4cc 	.word	0x0801c4cc

0800b2c4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	e007      	b.n	800b2e6 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800b2d6:	4b06      	ldr	r3, [pc, #24]	; (800b2f0 <SecureElementSetDevEui+0x2c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2208      	movs	r2, #8
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f00b fd23 	bl	8016d2a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200002c8 	.word	0x200002c8

0800b2f4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800b2f8:	4b02      	ldr	r3, [pc, #8]	; (800b304 <SecureElementGetDevEui+0x10>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bc80      	pop	{r7}
 800b302:	4770      	bx	lr
 800b304:	200002c8 	.word	0x200002c8

0800b308 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b316:	2302      	movs	r3, #2
 800b318:	e008      	b.n	800b32c <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800b31a:	4b06      	ldr	r3, [pc, #24]	; (800b334 <SecureElementSetJoinEui+0x2c>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3308      	adds	r3, #8
 800b320:	2208      	movs	r2, #8
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	4618      	mov	r0, r3
 800b326:	f00b fd00 	bl	8016d2a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	200002c8 	.word	0x200002c8

0800b338 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800b33c:	4b03      	ldr	r3, [pc, #12]	; (800b34c <SecureElementGetJoinEui+0x14>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
}
 800b342:	4618      	mov	r0, r3
 800b344:	46bd      	mov	sp, r7
 800b346:	bc80      	pop	{r7}
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	200002c8 	.word	0x200002c8

0800b350 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800b358:	4a1a      	ldr	r2, [pc, #104]	; (800b3c4 <LmHandlerInit+0x74>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b35e:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <LmHandlerInit+0x78>)
 800b360:	4a1a      	ldr	r2, [pc, #104]	; (800b3cc <LmHandlerInit+0x7c>)
 800b362:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b364:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <LmHandlerInit+0x78>)
 800b366:	4a1a      	ldr	r2, [pc, #104]	; (800b3d0 <LmHandlerInit+0x80>)
 800b368:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b36a:	4b17      	ldr	r3, [pc, #92]	; (800b3c8 <LmHandlerInit+0x78>)
 800b36c:	4a19      	ldr	r2, [pc, #100]	; (800b3d4 <LmHandlerInit+0x84>)
 800b36e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b370:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <LmHandlerInit+0x78>)
 800b372:	4a19      	ldr	r2, [pc, #100]	; (800b3d8 <LmHandlerInit+0x88>)
 800b374:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b376:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <LmHandlerInit+0x74>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a17      	ldr	r2, [pc, #92]	; (800b3dc <LmHandlerInit+0x8c>)
 800b37e:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b380:	4b10      	ldr	r3, [pc, #64]	; (800b3c4 <LmHandlerInit+0x74>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4a15      	ldr	r2, [pc, #84]	; (800b3dc <LmHandlerInit+0x8c>)
 800b388:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b38a:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <LmHandlerInit+0x74>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	4a12      	ldr	r2, [pc, #72]	; (800b3dc <LmHandlerInit+0x8c>)
 800b392:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <LmHandlerInit+0x8c>)
 800b396:	4a12      	ldr	r2, [pc, #72]	; (800b3e0 <LmHandlerInit+0x90>)
 800b398:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <LmHandlerInit+0x74>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	4a0e      	ldr	r2, [pc, #56]	; (800b3dc <LmHandlerInit+0x8c>)
 800b3a2:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800b3a4:	490f      	ldr	r1, [pc, #60]	; (800b3e4 <LmHandlerInit+0x94>)
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	f000 fcfe 	bl	800bda8 <LmHandlerPackageRegister>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	e000      	b.n	800b3ba <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	200002f0 	.word	0x200002f0
 800b3c8:	200002f4 	.word	0x200002f4
 800b3cc:	0800bafd 	.word	0x0800bafd
 800b3d0:	0800bb65 	.word	0x0800bb65
 800b3d4:	0800bc45 	.word	0x0800bc45
 800b3d8:	0800bd09 	.word	0x0800bd09
 800b3dc:	20000304 	.word	0x20000304
 800b3e0:	0800c019 	.word	0x0800c019
 800b3e4:	200000b8 	.word	0x200000b8

0800b3e8 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ea:	b099      	sub	sp, #100	; 0x64
 800b3ec:	af08      	add	r7, sp, #32
 800b3ee:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800b3f4:	2210      	movs	r2, #16
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	4882      	ldr	r0, [pc, #520]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b3fa:	f00e fe9f 	bl	801a13c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800b3fe:	f7fe fb63 	bl	8009ac8 <LoraInfo_GetPtr>
 800b402:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800b404:	4b7f      	ldr	r3, [pc, #508]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	2301      	movs	r3, #1
 800b40c:	4093      	lsls	r3, r2
 800b40e:	461a      	mov	r2, r3
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	4013      	ands	r3, r2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00c      	beq.n	800b434 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800b41a:	4b7a      	ldr	r3, [pc, #488]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	4979      	ldr	r1, [pc, #484]	; (800b608 <LmHandlerConfigure+0x220>)
 800b422:	487a      	ldr	r0, [pc, #488]	; (800b60c <LmHandlerConfigure+0x224>)
 800b424:	f004 fb1a 	bl	800fa5c <LoRaMacInitialization>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d009      	beq.n	800b442 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800b42e:	f04f 33ff 	mov.w	r3, #4294967295
 800b432:	e0e2      	b.n	800b5fa <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800b434:	4b76      	ldr	r3, [pc, #472]	; (800b610 <LmHandlerConfigure+0x228>)
 800b436:	2201      	movs	r2, #1
 800b438:	2100      	movs	r1, #0
 800b43a:	2000      	movs	r0, #0
 800b43c:	f00f feb6 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800b440:	e7fe      	b.n	800b440 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800b442:	f000 fdfa 	bl	800c03a <NvmDataMgmtRestore>
 800b446:	4603      	mov	r3, r0
 800b448:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800b44a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800b450:	4b70      	ldr	r3, [pc, #448]	; (800b614 <LmHandlerConfigure+0x22c>)
 800b452:	2201      	movs	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e002      	b.n	800b45e <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800b458:	4b6e      	ldr	r3, [pc, #440]	; (800b614 <LmHandlerConfigure+0x22c>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800b45e:	2302      	movs	r3, #2
 800b460:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b462:	f107 0314 	add.w	r3, r7, #20
 800b466:	4618      	mov	r0, r3
 800b468:	f004 fe42 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2208      	movs	r2, #8
 800b470:	4619      	mov	r1, r3
 800b472:	4869      	ldr	r0, [pc, #420]	; (800b618 <LmHandlerConfigure+0x230>)
 800b474:	f00b fc59 	bl	8016d2a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800b478:	2303      	movs	r3, #3
 800b47a:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b47c:	f107 0314 	add.w	r3, r7, #20
 800b480:	4618      	mov	r0, r3
 800b482:	f004 fe35 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	2208      	movs	r2, #8
 800b48a:	4619      	mov	r1, r3
 800b48c:	4863      	ldr	r0, [pc, #396]	; (800b61c <LmHandlerConfigure+0x234>)
 800b48e:	f00b fc4c 	bl	8016d2a <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800b492:	4b63      	ldr	r3, [pc, #396]	; (800b620 <LmHandlerConfigure+0x238>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	4798      	blx	r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	4a5e      	ldr	r2, [pc, #376]	; (800b618 <LmHandlerConfigure+0x230>)
 800b49e:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800b4a0:	2306      	movs	r3, #6
 800b4a2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800b4a4:	4b5c      	ldr	r3, [pc, #368]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b4aa:	f107 0314 	add.w	r3, r7, #20
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f004 ff7c 	bl	80103ac <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b4b4:	4b58      	ldr	r3, [pc, #352]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4b57      	ldr	r3, [pc, #348]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4b55      	ldr	r3, [pc, #340]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4c2:	789b      	ldrb	r3, [r3, #2]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	4b54      	ldr	r3, [pc, #336]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4c8:	78db      	ldrb	r3, [r3, #3]
 800b4ca:	461c      	mov	r4, r3
 800b4cc:	4b52      	ldr	r3, [pc, #328]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4ce:	791b      	ldrb	r3, [r3, #4]
 800b4d0:	461d      	mov	r5, r3
 800b4d2:	4b51      	ldr	r3, [pc, #324]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4d4:	795b      	ldrb	r3, [r3, #5]
 800b4d6:	461e      	mov	r6, r3
 800b4d8:	4b4f      	ldr	r3, [pc, #316]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4da:	799b      	ldrb	r3, [r3, #6]
 800b4dc:	603b      	str	r3, [r7, #0]
 800b4de:	4b4e      	ldr	r3, [pc, #312]	; (800b618 <LmHandlerConfigure+0x230>)
 800b4e0:	79db      	ldrb	r3, [r3, #7]
 800b4e2:	9307      	str	r3, [sp, #28]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	9306      	str	r3, [sp, #24]
 800b4e8:	9605      	str	r6, [sp, #20]
 800b4ea:	9504      	str	r5, [sp, #16]
 800b4ec:	9403      	str	r4, [sp, #12]
 800b4ee:	9002      	str	r0, [sp, #8]
 800b4f0:	9101      	str	r1, [sp, #4]
 800b4f2:	9200      	str	r2, [sp, #0]
 800b4f4:	4b4b      	ldr	r3, [pc, #300]	; (800b624 <LmHandlerConfigure+0x23c>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	2002      	movs	r0, #2
 800b4fc:	f00f fe56 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b500:	4b45      	ldr	r3, [pc, #276]	; (800b618 <LmHandlerConfigure+0x230>)
 800b502:	7a1b      	ldrb	r3, [r3, #8]
 800b504:	461a      	mov	r2, r3
 800b506:	4b44      	ldr	r3, [pc, #272]	; (800b618 <LmHandlerConfigure+0x230>)
 800b508:	7a5b      	ldrb	r3, [r3, #9]
 800b50a:	4619      	mov	r1, r3
 800b50c:	4b42      	ldr	r3, [pc, #264]	; (800b618 <LmHandlerConfigure+0x230>)
 800b50e:	7a9b      	ldrb	r3, [r3, #10]
 800b510:	4618      	mov	r0, r3
 800b512:	4b41      	ldr	r3, [pc, #260]	; (800b618 <LmHandlerConfigure+0x230>)
 800b514:	7adb      	ldrb	r3, [r3, #11]
 800b516:	461c      	mov	r4, r3
 800b518:	4b3f      	ldr	r3, [pc, #252]	; (800b618 <LmHandlerConfigure+0x230>)
 800b51a:	7b1b      	ldrb	r3, [r3, #12]
 800b51c:	461d      	mov	r5, r3
 800b51e:	4b3e      	ldr	r3, [pc, #248]	; (800b618 <LmHandlerConfigure+0x230>)
 800b520:	7b5b      	ldrb	r3, [r3, #13]
 800b522:	461e      	mov	r6, r3
 800b524:	4b3c      	ldr	r3, [pc, #240]	; (800b618 <LmHandlerConfigure+0x230>)
 800b526:	7b9b      	ldrb	r3, [r3, #14]
 800b528:	603b      	str	r3, [r7, #0]
 800b52a:	4b3b      	ldr	r3, [pc, #236]	; (800b618 <LmHandlerConfigure+0x230>)
 800b52c:	7bdb      	ldrb	r3, [r3, #15]
 800b52e:	9307      	str	r3, [sp, #28]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	9306      	str	r3, [sp, #24]
 800b534:	9605      	str	r6, [sp, #20]
 800b536:	9504      	str	r5, [sp, #16]
 800b538:	9403      	str	r4, [sp, #12]
 800b53a:	9002      	str	r0, [sp, #8]
 800b53c:	9101      	str	r1, [sp, #4]
 800b53e:	9200      	str	r2, [sp, #0]
 800b540:	4b39      	ldr	r3, [pc, #228]	; (800b628 <LmHandlerConfigure+0x240>)
 800b542:	2200      	movs	r2, #0
 800b544:	2100      	movs	r1, #0
 800b546:	2002      	movs	r0, #2
 800b548:	f00f fe30 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800b54c:	4b37      	ldr	r3, [pc, #220]	; (800b62c <LmHandlerConfigure+0x244>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	4b37      	ldr	r3, [pc, #220]	; (800b630 <LmHandlerConfigure+0x248>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	4619      	mov	r1, r3
 800b558:	4b36      	ldr	r3, [pc, #216]	; (800b634 <LmHandlerConfigure+0x24c>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	4618      	mov	r0, r3
 800b55e:	4b36      	ldr	r3, [pc, #216]	; (800b638 <LmHandlerConfigure+0x250>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	9002      	str	r0, [sp, #8]
 800b566:	9101      	str	r1, [sp, #4]
 800b568:	9200      	str	r2, [sp, #0]
 800b56a:	4b34      	ldr	r3, [pc, #208]	; (800b63c <LmHandlerConfigure+0x254>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	2100      	movs	r1, #0
 800b570:	2002      	movs	r0, #2
 800b572:	f00f fe1b 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b576:	230f      	movs	r3, #15
 800b578:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b57a:	2301      	movs	r3, #1
 800b57c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b57e:	f107 0314 	add.w	r3, r7, #20
 800b582:	4618      	mov	r0, r3
 800b584:	f004 ff12 	bl	80103ac <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800b588:	2305      	movs	r3, #5
 800b58a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b58c:	2300      	movs	r3, #0
 800b58e:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b590:	f107 0314 	add.w	r3, r7, #20
 800b594:	4618      	mov	r0, r3
 800b596:	f004 ff09 	bl	80103ac <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b59a:	2310      	movs	r3, #16
 800b59c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f004 ff00 	bl	80103ac <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b5b0:	4b14      	ldr	r3, [pc, #80]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b5b2:	789b      	ldrb	r3, [r3, #2]
 800b5b4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b5b6:	f107 0314 	add.w	r3, r7, #20
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f004 fef6 	bl	80103ac <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b5c0:	230f      	movs	r3, #15
 800b5c2:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	f107 020c 	add.w	r2, r7, #12
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f007 fccb 	bl	8012f6a <RegionGetPhyParam>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	bf14      	ite	ne
 800b5de:	2301      	movne	r3, #1
 800b5e0:	2300      	moveq	r3, #0
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	4b07      	ldr	r3, [pc, #28]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b5e6:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800b5e8:	2014      	movs	r0, #20
 800b5ea:	f000 fa6f 	bl	800bacc <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b5ee:	4b05      	ldr	r3, [pc, #20]	; (800b604 <LmHandlerConfigure+0x21c>)
 800b5f0:	795b      	ldrb	r3, [r3, #5]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f005 fc4e 	bl	8010e94 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3744      	adds	r7, #68	; 0x44
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b602:	bf00      	nop
 800b604:	200002e0 	.word	0x200002e0
 800b608:	20000304 	.word	0x20000304
 800b60c:	200002f4 	.word	0x200002f4
 800b610:	0801bca8 	.word	0x0801bca8
 800b614:	20000422 	.word	0x20000422
 800b618:	200000a0 	.word	0x200000a0
 800b61c:	200000a8 	.word	0x200000a8
 800b620:	200002f0 	.word	0x200002f0
 800b624:	0801bcf4 	.word	0x0801bcf4
 800b628:	0801bd30 	.word	0x0801bd30
 800b62c:	200000b7 	.word	0x200000b7
 800b630:	200000b6 	.word	0x200000b6
 800b634:	200000b5 	.word	0x200000b5
 800b638:	200000b4 	.word	0x200000b4
 800b63c:	0801bd6c 	.word	0x0801bd6c

0800b640 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800b644:	f002 f9b8 	bl	800d9b8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800b648:	f000 fc9a 	bl	800bf80 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800b64c:	f000 fcee 	bl	800c02c <NvmDataMgmtStore>
}
 800b650:	bf00      	nop
 800b652:	bd80      	pop	{r7, pc}

0800b654 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b090      	sub	sp, #64	; 0x40
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d111      	bne.n	800b688 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b664:	4b23      	ldr	r3, [pc, #140]	; (800b6f4 <LmHandlerJoin+0xa0>)
 800b666:	2202      	movs	r2, #2
 800b668:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800b66a:	f004 fcab 	bl	800ffc4 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800b66e:	2301      	movs	r3, #1
 800b670:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b672:	4b21      	ldr	r3, [pc, #132]	; (800b6f8 <LmHandlerJoin+0xa4>)
 800b674:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800b67c:	f107 0308 	add.w	r3, r7, #8
 800b680:	4618      	mov	r0, r3
 800b682:	f005 f9d1 	bl	8010a28 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800b686:	e030      	b.n	800b6ea <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b688:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <LmHandlerJoin+0xa0>)
 800b68a:	2201      	movs	r2, #1
 800b68c:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b68e:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <LmHandlerJoin+0xa4>)
 800b690:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800b694:	4b17      	ldr	r3, [pc, #92]	; (800b6f4 <LmHandlerJoin+0xa0>)
 800b696:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b698:	4b16      	ldr	r3, [pc, #88]	; (800b6f4 <LmHandlerJoin+0xa0>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800b69e:	4b17      	ldr	r3, [pc, #92]	; (800b6fc <LmHandlerJoin+0xa8>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	f083 0301 	eor.w	r3, r3, #1
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d008      	beq.n	800b6be <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b6ac:	2327      	movs	r3, #39	; 0x27
 800b6ae:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b6b0:	4b13      	ldr	r3, [pc, #76]	; (800b700 <LmHandlerJoin+0xac>)
 800b6b2:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800b6b4:	f107 031c 	add.w	r3, r7, #28
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f004 fe77 	bl	80103ac <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800b6be:	f004 fc81 	bl	800ffc4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b6cc:	f107 031c 	add.w	r3, r7, #28
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f004 fe6b 	bl	80103ac <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <LmHandlerJoin+0xb0>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <LmHandlerJoin+0xa0>)
 800b6de:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800b6e0:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <LmHandlerJoin+0xa4>)
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f917 	bl	800b918 <LmHandlerRequestClass>
}
 800b6ea:	bf00      	nop
 800b6ec:	3740      	adds	r7, #64	; 0x40
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200000c4 	.word	0x200000c4
 800b6f8:	200002e0 	.word	0x200002e0
 800b6fc:	20000422 	.word	0x20000422
 800b700:	01000300 	.word	0x01000300
 800b704:	200002f0 	.word	0x200002f0

0800b708 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08a      	sub	sp, #40	; 0x28
 800b70c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b70e:	2301      	movs	r3, #1
 800b710:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b712:	463b      	mov	r3, r7
 800b714:	4618      	mov	r0, r3
 800b716:	f004 fceb 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800b720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b724:	2b00      	cmp	r3, #0
 800b726:	d106      	bne.n	800b736 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b728:	793b      	ldrb	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800b72e:	2300      	movs	r3, #0
 800b730:	e002      	b.n	800b738 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800b732:	2301      	movs	r3, #1
 800b734:	e000      	b.n	800b738 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800b736:	2300      	movs	r3, #0
    }
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3728      	adds	r7, #40	; 0x28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08c      	sub	sp, #48	; 0x30
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	607a      	str	r2, [r7, #4]
 800b74a:	461a      	mov	r2, r3
 800b74c:	460b      	mov	r3, r1
 800b74e:	72fb      	strb	r3, [r7, #11]
 800b750:	4613      	mov	r3, r2
 800b752:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b754:	23ff      	movs	r3, #255	; 0xff
 800b756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800b75a:	f001 fe97 	bl	800d48c <LoRaMacIsBusy>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b764:	f06f 0301 	mvn.w	r3, #1
 800b768:	e0b4      	b.n	800b8d4 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b76a:	f7ff ffcd 	bl	800b708 <LmHandlerJoinStatus>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b01      	cmp	r3, #1
 800b772:	d007      	beq.n	800b784 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800b774:	4b59      	ldr	r3, [pc, #356]	; (800b8dc <LmHandlerSend+0x19c>)
 800b776:	789b      	ldrb	r3, [r3, #2]
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff ff6b 	bl	800b654 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b77e:	f06f 0302 	mvn.w	r3, #2
 800b782:	e0a7      	b.n	800b8d4 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800b784:	4b56      	ldr	r3, [pc, #344]	; (800b8e0 <LmHandlerSend+0x1a0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	4798      	blx	r3
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00d      	beq.n	800b7ae <LmHandlerSend+0x6e>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	781a      	ldrb	r2, [r3, #0]
 800b796:	4b52      	ldr	r3, [pc, #328]	; (800b8e0 <LmHandlerSend+0x1a0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d006      	beq.n	800b7ae <LmHandlerSend+0x6e>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800b7a8:	f06f 0303 	mvn.w	r3, #3
 800b7ac:	e092      	b.n	800b8d4 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b7ae:	4b4d      	ldr	r3, [pc, #308]	; (800b8e4 <LmHandlerSend+0x1a4>)
 800b7b0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800b7b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	785b      	ldrb	r3, [r3, #1]
 800b7bc:	f107 0214 	add.w	r2, r7, #20
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f004 fc0c 	bl	800ffe0 <LoRaMacQueryTxPossible>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d009      	beq.n	800b7e2 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800b7ce:	4b46      	ldr	r3, [pc, #280]	; (800b8e8 <LmHandlerSend+0x1a8>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b7e0:	e017      	b.n	800b812 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800b7e2:	4a41      	ldr	r2, [pc, #260]	; (800b8e8 <LmHandlerSend+0x1a8>)
 800b7e4:	7afb      	ldrb	r3, [r7, #11]
 800b7e6:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	785b      	ldrb	r3, [r3, #1]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d102      	bne.n	800b808 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800b802:	2300      	movs	r3, #0
 800b804:	763b      	strb	r3, [r7, #24]
 800b806:	e004      	b.n	800b812 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800b808:	2301      	movs	r3, #1
 800b80a:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800b80c:	2308      	movs	r3, #8
 800b80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800b812:	4b35      	ldr	r3, [pc, #212]	; (800b8e8 <LmHandlerSend+0x1a8>)
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	330c      	adds	r3, #12
 800b818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b81c:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800b820:	4b30      	ldr	r3, [pc, #192]	; (800b8e4 <LmHandlerSend+0x1a4>)
 800b822:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800b826:	4b30      	ldr	r3, [pc, #192]	; (800b8e8 <LmHandlerSend+0x1a8>)
 800b828:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800b82a:	7aba      	ldrb	r2, [r7, #10]
 800b82c:	f107 0318 	add.w	r3, r7, #24
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f005 fa38 	bl	8010ca8 <LoRaMacMcpsRequest>
 800b838:	4603      	mov	r3, r0
 800b83a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800b844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800b84a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b84e:	2b11      	cmp	r3, #17
 800b850:	d83a      	bhi.n	800b8c8 <LmHandlerSend+0x188>
 800b852:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <LmHandlerSend+0x118>)
 800b854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b858:	0800b8a1 	.word	0x0800b8a1
 800b85c:	0800b8a9 	.word	0x0800b8a9
 800b860:	0800b8c9 	.word	0x0800b8c9
 800b864:	0800b8c9 	.word	0x0800b8c9
 800b868:	0800b8c9 	.word	0x0800b8c9
 800b86c:	0800b8c9 	.word	0x0800b8c9
 800b870:	0800b8c9 	.word	0x0800b8c9
 800b874:	0800b8b1 	.word	0x0800b8b1
 800b878:	0800b8c9 	.word	0x0800b8c9
 800b87c:	0800b8c9 	.word	0x0800b8c9
 800b880:	0800b8c9 	.word	0x0800b8c9
 800b884:	0800b8c1 	.word	0x0800b8c1
 800b888:	0800b8c9 	.word	0x0800b8c9
 800b88c:	0800b8c9 	.word	0x0800b8c9
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8a9 	.word	0x0800b8a9
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8b9 	.word	0x0800b8b9
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8a6:	e013      	b.n	800b8d0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800b8a8:	23fe      	movs	r3, #254	; 0xfe
 800b8aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8ae:	e00f      	b.n	800b8d0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b8b0:	23fd      	movs	r3, #253	; 0xfd
 800b8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8b6:	e00b      	b.n	800b8d0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800b8b8:	23fb      	movs	r3, #251	; 0xfb
 800b8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8be:	e007      	b.n	800b8d0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800b8c0:	23fa      	movs	r3, #250	; 0xfa
 800b8c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8c6:	e003      	b.n	800b8d0 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b8c8:	23ff      	movs	r3, #255	; 0xff
 800b8ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8ce:	bf00      	nop
    }

    return lmhStatus;
 800b8d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3730      	adds	r7, #48	; 0x30
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	200000c4 	.word	0x200000c4
 800b8e0:	200002cc 	.word	0x200002cc
 800b8e4:	200002e0 	.word	0x200002e0
 800b8e8:	20000318 	.word	0x20000318

0800b8ec <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800b8f2:	230a      	movs	r3, #10
 800b8f4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f005 f895 	bl	8010a28 <LoRaMacMlmeRequest>
 800b8fe:	4603      	mov	r3, r0
 800b900:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800b908:	2300      	movs	r3, #0
 800b90a:	e001      	b.n	800b910 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800b90c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b910:	4618      	mov	r0, r3
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08c      	sub	sp, #48	; 0x30
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b922:	2300      	movs	r3, #0
 800b924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800b928:	f001 fdb0 	bl	800d48c <LoRaMacIsBusy>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b932:	f06f 0301 	mvn.w	r3, #1
 800b936:	e07b      	b.n	800ba30 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800b938:	f7ff fee6 	bl	800b708 <LmHandlerJoinStatus>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d002      	beq.n	800b948 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b942:	f06f 0302 	mvn.w	r3, #2
 800b946:	e073      	b.n	800ba30 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800b948:	2300      	movs	r3, #0
 800b94a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b94c:	f107 0308 	add.w	r3, r7, #8
 800b950:	4618      	mov	r0, r3
 800b952:	f004 fbcd 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800b95c:	f04f 33ff 	mov.w	r3, #4294967295
 800b960:	e066      	b.n	800ba30 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800b962:	7b3b      	ldrb	r3, [r7, #12]
 800b964:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800b968:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d055      	beq.n	800ba1e <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800b972:	79fb      	ldrb	r3, [r7, #7]
 800b974:	2b02      	cmp	r3, #2
 800b976:	d02c      	beq.n	800b9d2 <LmHandlerRequestClass+0xba>
 800b978:	2b02      	cmp	r3, #2
 800b97a:	dc52      	bgt.n	800ba22 <LmHandlerRequestClass+0x10a>
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <LmHandlerRequestClass+0x6e>
 800b980:	2b01      	cmp	r3, #1
 800b982:	d022      	beq.n	800b9ca <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800b984:	e04d      	b.n	800ba22 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800b986:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d04b      	beq.n	800ba26 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800b98e:	79fb      	ldrb	r3, [r7, #7]
 800b990:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b992:	f107 0308 	add.w	r3, r7, #8
 800b996:	4618      	mov	r0, r3
 800b998:	f004 fd08 	bl	80103ac <LoRaMacMibSetRequestConfirm>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10f      	bne.n	800b9c2 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 fb1f 	bl	800bfe8 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800b9aa:	4b23      	ldr	r3, [pc, #140]	; (800ba38 <LmHandlerRequestClass+0x120>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d038      	beq.n	800ba26 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800b9b4:	4b20      	ldr	r3, [pc, #128]	; (800ba38 <LmHandlerRequestClass+0x120>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ba:	79fa      	ldrb	r2, [r7, #7]
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
            break;
 800b9c0:	e031      	b.n	800ba26 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800b9c2:	23ff      	movs	r3, #255	; 0xff
 800b9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b9c8:	e02d      	b.n	800ba26 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800b9ca:	23ff      	movs	r3, #255	; 0xff
 800b9cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b9d0:	e02c      	b.n	800ba2c <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800b9d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800b9da:	23ff      	movs	r3, #255	; 0xff
 800b9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b9e0:	e023      	b.n	800ba2a <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800b9e2:	79fb      	ldrb	r3, [r7, #7]
 800b9e4:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f004 fcde 	bl	80103ac <LoRaMacMibSetRequestConfirm>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10f      	bne.n	800ba16 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 faf5 	bl	800bfe8 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800b9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <LmHandlerRequestClass+0x120>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d010      	beq.n	800ba2a <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800ba08:	4b0b      	ldr	r3, [pc, #44]	; (800ba38 <LmHandlerRequestClass+0x120>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0e:	79fa      	ldrb	r2, [r7, #7]
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
            break;
 800ba14:	e009      	b.n	800ba2a <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ba16:	23ff      	movs	r3, #255	; 0xff
 800ba18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ba1c:	e005      	b.n	800ba2a <LmHandlerRequestClass+0x112>
        }
    }
 800ba1e:	bf00      	nop
 800ba20:	e004      	b.n	800ba2c <LmHandlerRequestClass+0x114>
            break;
 800ba22:	bf00      	nop
 800ba24:	e002      	b.n	800ba2c <LmHandlerRequestClass+0x114>
            break;
 800ba26:	bf00      	nop
 800ba28:	e000      	b.n	800ba2c <LmHandlerRequestClass+0x114>
            break;
 800ba2a:	bf00      	nop
    return errorStatus;
 800ba2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3730      	adds	r7, #48	; 0x30
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	200002f0 	.word	0x200002f0

0800ba3c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08c      	sub	sp, #48	; 0x30
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	e010      	b.n	800ba72 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ba50:	2300      	movs	r3, #0
 800ba52:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800ba54:	f107 030c 	add.w	r3, r7, #12
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f004 fb49 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295
 800ba68:	e003      	b.n	800ba72 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ba6a:	7c3a      	ldrb	r2, [r7, #16]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3730      	adds	r7, #48	; 0x30
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08c      	sub	sp, #48	; 0x30
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d102      	bne.n	800ba90 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8e:	e016      	b.n	800babe <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ba90:	231f      	movs	r3, #31
 800ba92:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800ba94:	f107 030c 	add.w	r3, r7, #12
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f004 fb29 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295
 800baa8:	e009      	b.n	800babe <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800baaa:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f993 2000 	ldrsb.w	r2, [r3]
 800bab8:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <LmHandlerGetTxDatarate+0x4c>)
 800baba:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3730      	adds	r7, #48	; 0x30
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	200002e0 	.word	0x200002e0

0800bacc <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08c      	sub	sp, #48	; 0x30
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800bad4:	2322      	movs	r3, #34	; 0x22
 800bad6:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800badc:	f107 030c 	add.w	r3, r7, #12
 800bae0:	4618      	mov	r0, r3
 800bae2:	f004 fc63 	bl	80103ac <LoRaMacMibSetRequestConfirm>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e000      	b.n	800baf4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3730      	adds	r7, #48	; 0x30
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800bb04:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <McpsConfirm+0x60>)
 800bb06:	2201      	movs	r2, #1
 800bb08:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	785a      	ldrb	r2, [r3, #1]
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <McpsConfirm+0x60>)
 800bb10:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	789b      	ldrb	r3, [r3, #2]
 800bb16:	b25a      	sxtb	r2, r3
 800bb18:	4b10      	ldr	r3, [pc, #64]	; (800bb5c <McpsConfirm+0x60>)
 800bb1a:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	4a0e      	ldr	r2, [pc, #56]	; (800bb5c <McpsConfirm+0x60>)
 800bb22:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800bb2a:	4b0c      	ldr	r3, [pc, #48]	; (800bb5c <McpsConfirm+0x60>)
 800bb2c:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <McpsConfirm+0x60>)
 800bb36:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	791b      	ldrb	r3, [r3, #4]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <McpsConfirm+0x60>)
 800bb40:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <McpsConfirm+0x64>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	4804      	ldr	r0, [pc, #16]	; (800bb5c <McpsConfirm+0x60>)
 800bb4a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f000 f99a 	bl	800be88 <LmHandlerPackagesNotify>
}
 800bb54:	bf00      	nop
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20000318 	.word	0x20000318
 800bb60:	200002f0 	.word	0x200002f0

0800bb64 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800bb72:	4b32      	ldr	r3, [pc, #200]	; (800bc3c <McpsIndication+0xd8>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	785a      	ldrb	r2, [r3, #1]
 800bb7c:	4b2f      	ldr	r3, [pc, #188]	; (800bc3c <McpsIndication+0xd8>)
 800bb7e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800bb80:	4b2e      	ldr	r3, [pc, #184]	; (800bc3c <McpsIndication+0xd8>)
 800bb82:	785b      	ldrb	r3, [r3, #1]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d154      	bne.n	800bc32 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	791b      	ldrb	r3, [r3, #4]
 800bb8c:	b25a      	sxtb	r2, r3
 800bb8e:	4b2b      	ldr	r3, [pc, #172]	; (800bc3c <McpsIndication+0xd8>)
 800bb90:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb98:	b25a      	sxtb	r2, r3
 800bb9a:	4b28      	ldr	r3, [pc, #160]	; (800bc3c <McpsIndication+0xd8>)
 800bb9c:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bba4:	4b25      	ldr	r3, [pc, #148]	; (800bc3c <McpsIndication+0xd8>)
 800bba6:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	78db      	ldrb	r3, [r3, #3]
 800bbac:	b25a      	sxtb	r2, r3
 800bbae:	4b23      	ldr	r3, [pc, #140]	; (800bc3c <McpsIndication+0xd8>)
 800bbb0:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	4a21      	ldr	r2, [pc, #132]	; (800bc3c <McpsIndication+0xd8>)
 800bbb8:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	78db      	ldrb	r3, [r3, #3]
 800bbbe:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	7b1b      	ldrb	r3, [r3, #12]
 800bbc4:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <McpsIndication+0xdc>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	f107 0218 	add.w	r2, r7, #24
 800bbd6:	4919      	ldr	r1, [pc, #100]	; (800bc3c <McpsIndication+0xd8>)
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800bbdc:	4b18      	ldr	r3, [pc, #96]	; (800bc40 <McpsIndication+0xdc>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d007      	beq.n	800bbf6 <McpsIndication+0x92>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	7e1b      	ldrb	r3, [r3, #24]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800bbee:	4b14      	ldr	r3, [pc, #80]	; (800bc40 <McpsIndication+0xdc>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800bbf6:	6879      	ldr	r1, [r7, #4]
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	f000 f945 	bl	800be88 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800bbfe:	f107 0317 	add.w	r3, r7, #23
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7ff ff1a 	bl	800ba3c <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	795b      	ldrb	r3, [r3, #5]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d111      	bne.n	800bc34 <McpsIndication+0xd0>
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10e      	bne.n	800bc34 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800bc16:	2300      	movs	r3, #0
 800bc18:	733b      	strb	r3, [r7, #12]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	737b      	strb	r3, [r7, #13]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800bc22:	f107 000c 	add.w	r0, r7, #12
 800bc26:	2301      	movs	r3, #1
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	f7ff fd88 	bl	800b740 <LmHandlerSend>
 800bc30:	e000      	b.n	800bc34 <McpsIndication+0xd0>
        return;
 800bc32:	bf00      	nop
    }
}
 800bc34:	3720      	adds	r7, #32
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200000c8 	.word	0x200000c8
 800bc40:	200002f0 	.word	0x200002f0

0800bc44 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08c      	sub	sp, #48	; 0x30
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800bc4c:	4b28      	ldr	r3, [pc, #160]	; (800bcf0 <MlmeConfirm+0xac>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	785a      	ldrb	r2, [r3, #1]
 800bc56:	4b26      	ldr	r3, [pc, #152]	; (800bcf0 <MlmeConfirm+0xac>)
 800bc58:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800bc5a:	4b26      	ldr	r3, [pc, #152]	; (800bcf4 <MlmeConfirm+0xb0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	4823      	ldr	r0, [pc, #140]	; (800bcf0 <MlmeConfirm+0xac>)
 800bc62:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	2002      	movs	r0, #2
 800bc68:	f000 f90e 	bl	800be88 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b0a      	cmp	r3, #10
 800bc72:	d035      	beq.n	800bce0 <MlmeConfirm+0x9c>
 800bc74:	2b0a      	cmp	r3, #10
 800bc76:	dc35      	bgt.n	800bce4 <MlmeConfirm+0xa0>
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d002      	beq.n	800bc82 <MlmeConfirm+0x3e>
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	d023      	beq.n	800bcc8 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800bc80:	e030      	b.n	800bce4 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800bc82:	2306      	movs	r3, #6
 800bc84:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f004 fa30 	bl	80100f0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	4a19      	ldr	r2, [pc, #100]	; (800bcf8 <MlmeConfirm+0xb4>)
 800bc94:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800bc96:	4819      	ldr	r0, [pc, #100]	; (800bcfc <MlmeConfirm+0xb8>)
 800bc98:	f7ff fef0 	bl	800ba7c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d108      	bne.n	800bcb6 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800bca4:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <MlmeConfirm+0xb8>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800bcaa:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <MlmeConfirm+0xbc>)
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fe32 	bl	800b918 <LmHandlerRequestClass>
 800bcb4:	e002      	b.n	800bcbc <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800bcb6:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <MlmeConfirm+0xb8>)
 800bcb8:	22ff      	movs	r2, #255	; 0xff
 800bcba:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bcbc:	4b0d      	ldr	r3, [pc, #52]	; (800bcf4 <MlmeConfirm+0xb0>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	480e      	ldr	r0, [pc, #56]	; (800bcfc <MlmeConfirm+0xb8>)
 800bcc4:	4798      	blx	r3
        break;
 800bcc6:	e00e      	b.n	800bce6 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800bcc8:	4b0e      	ldr	r3, [pc, #56]	; (800bd04 <MlmeConfirm+0xc0>)
 800bcca:	2201      	movs	r2, #1
 800bccc:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	7a1a      	ldrb	r2, [r3, #8]
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <MlmeConfirm+0xc0>)
 800bcd4:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7a5a      	ldrb	r2, [r3, #9]
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <MlmeConfirm+0xc0>)
 800bcdc:	73da      	strb	r2, [r3, #15]
        break;
 800bcde:	e002      	b.n	800bce6 <MlmeConfirm+0xa2>
        break;
 800bce0:	bf00      	nop
 800bce2:	e000      	b.n	800bce6 <MlmeConfirm+0xa2>
        break;
 800bce4:	bf00      	nop
    }
}
 800bce6:	bf00      	nop
 800bce8:	3730      	adds	r7, #48	; 0x30
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20000318 	.word	0x20000318
 800bcf4:	200002f0 	.word	0x200002f0
 800bcf8:	200000a0 	.word	0x200000a0
 800bcfc:	200000c4 	.word	0x200000c4
 800bd00:	200002e0 	.word	0x200002e0
 800bd04:	200000c8 	.word	0x200000c8

0800bd08 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800bd12:	4b22      	ldr	r3, [pc, #136]	; (800bd9c <MlmeIndication+0x94>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	785a      	ldrb	r2, [r3, #1]
 800bd1c:	4b1f      	ldr	r3, [pc, #124]	; (800bd9c <MlmeIndication+0x94>)
 800bd1e:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd26:	b25a      	sxtb	r2, r3
 800bd28:	4b1c      	ldr	r3, [pc, #112]	; (800bd9c <MlmeIndication+0x94>)
 800bd2a:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bd32:	4b1a      	ldr	r3, [pc, #104]	; (800bd9c <MlmeIndication+0x94>)
 800bd34:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	78db      	ldrb	r3, [r3, #3]
 800bd3a:	b25a      	sxtb	r2, r3
 800bd3c:	4b17      	ldr	r3, [pc, #92]	; (800bd9c <MlmeIndication+0x94>)
 800bd3e:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800bd40:	4b16      	ldr	r3, [pc, #88]	; (800bd9c <MlmeIndication+0x94>)
 800bd42:	785b      	ldrb	r3, [r3, #1]
 800bd44:	2b0e      	cmp	r3, #14
 800bd46:	d005      	beq.n	800bd54 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800bd48:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <MlmeIndication+0x98>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4e:	4913      	ldr	r1, [pc, #76]	; (800bd9c <MlmeIndication+0x94>)
 800bd50:	2000      	movs	r0, #0
 800bd52:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b07      	cmp	r3, #7
 800bd5a:	d117      	bne.n	800bd8c <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	723b      	strb	r3, [r7, #8]
 800bd60:	2300      	movs	r3, #0
 800bd62:	727b      	strb	r3, [r7, #9]
 800bd64:	2300      	movs	r3, #0
 800bd66:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <MlmeIndication+0x9c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	4798      	blx	r3
 800bd70:	4603      	mov	r3, r0
 800bd72:	f083 0301 	eor.w	r3, r3, #1
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d009      	beq.n	800bd90 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800bd7c:	f107 0008 	add.w	r0, r7, #8
 800bd80:	2301      	movs	r3, #1
 800bd82:	2200      	movs	r2, #0
 800bd84:	2100      	movs	r1, #0
 800bd86:	f7ff fcdb 	bl	800b740 <LmHandlerSend>
            }
        }
        break;
 800bd8a:	e001      	b.n	800bd90 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800bd8c:	bf00      	nop
 800bd8e:	e000      	b.n	800bd92 <MlmeIndication+0x8a>
        break;
 800bd90:	bf00      	nop
    }
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200000c8 	.word	0x200000c8
 800bda0:	200002f0 	.word	0x200002f0
 800bda4:	200002cc 	.word	0x200002cc

0800bda8 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	60fb      	str	r3, [r7, #12]
    switch( id )
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d103      	bne.n	800bdc6 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800bdbe:	f000 f943 	bl	800c048 <LmhpCompliancePackageFactory>
 800bdc2:	60f8      	str	r0, [r7, #12]
            break;
 800bdc4:	e000      	b.n	800bdc8 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800bdc6:	bf00      	nop
        }
    }
    if( package != NULL )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d02b      	beq.n	800be26 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800bdce:	79fb      	ldrb	r3, [r7, #7]
 800bdd0:	4918      	ldr	r1, [pc, #96]	; (800be34 <LmHandlerPackageRegister+0x8c>)
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	4a16      	ldr	r2, [pc, #88]	; (800be34 <LmHandlerPackageRegister+0x8c>)
 800bddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde0:	4a15      	ldr	r2, [pc, #84]	; (800be38 <LmHandlerPackageRegister+0x90>)
 800bde2:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	4a13      	ldr	r2, [pc, #76]	; (800be34 <LmHandlerPackageRegister+0x8c>)
 800bde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdec:	4a13      	ldr	r2, [pc, #76]	; (800be3c <LmHandlerPackageRegister+0x94>)
 800bdee:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	4a10      	ldr	r2, [pc, #64]	; (800be34 <LmHandlerPackageRegister+0x8c>)
 800bdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf8:	4a11      	ldr	r2, [pc, #68]	; (800be40 <LmHandlerPackageRegister+0x98>)
 800bdfa:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800bdfc:	4b11      	ldr	r3, [pc, #68]	; (800be44 <LmHandlerPackageRegister+0x9c>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	490c      	ldr	r1, [pc, #48]	; (800be34 <LmHandlerPackageRegister+0x8c>)
 800be04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be08:	6912      	ldr	r2, [r2, #16]
 800be0a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	4a09      	ldr	r2, [pc, #36]	; (800be34 <LmHandlerPackageRegister+0x8c>)
 800be10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	4a0c      	ldr	r2, [pc, #48]	; (800be48 <LmHandlerPackageRegister+0xa0>)
 800be18:	6851      	ldr	r1, [r2, #4]
 800be1a:	4a0b      	ldr	r2, [pc, #44]	; (800be48 <LmHandlerPackageRegister+0xa0>)
 800be1c:	7852      	ldrb	r2, [r2, #1]
 800be1e:	6838      	ldr	r0, [r7, #0]
 800be20:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800be22:	2300      	movs	r3, #0
 800be24:	e001      	b.n	800be2a <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800be26:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200002cc 	.word	0x200002cc
 800be38:	0800b655 	.word	0x0800b655
 800be3c:	0800b741 	.word	0x0800b741
 800be40:	0800b8ed 	.word	0x0800b8ed
 800be44:	200002f0 	.word	0x200002f0
 800be48:	200000d8 	.word	0x200000d8

0800be4c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	2b04      	cmp	r3, #4
 800be5a:	d80e      	bhi.n	800be7a <LmHandlerPackageIsInitialized+0x2e>
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	4a09      	ldr	r2, [pc, #36]	; (800be84 <LmHandlerPackageIsInitialized+0x38>)
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d007      	beq.n	800be7a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	4a05      	ldr	r2, [pc, #20]	; (800be84 <LmHandlerPackageIsInitialized+0x38>)
 800be6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	4798      	blx	r3
 800be76:	4603      	mov	r3, r0
 800be78:	e000      	b.n	800be7c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800be7a:	2300      	movs	r3, #0
    }
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	200002cc 	.word	0x200002cc

0800be88 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	4603      	mov	r3, r0
 800be90:	6039      	str	r1, [r7, #0]
 800be92:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800be94:	2300      	movs	r3, #0
 800be96:	73fb      	strb	r3, [r7, #15]
 800be98:	e067      	b.n	800bf6a <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800be9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be9e:	4a37      	ldr	r2, [pc, #220]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d051      	beq.n	800bf4c <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d03d      	beq.n	800bf2a <LmHandlerPackagesNotify+0xa2>
 800beae:	2b02      	cmp	r3, #2
 800beb0:	dc4e      	bgt.n	800bf50 <LmHandlerPackagesNotify+0xc8>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d002      	beq.n	800bebc <LmHandlerPackagesNotify+0x34>
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d011      	beq.n	800bede <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800beba:	e049      	b.n	800bf50 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800bebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bec0:	4a2e      	ldr	r2, [pc, #184]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d043      	beq.n	800bf54 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800becc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bed0:	4a2a      	ldr	r2, [pc, #168]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	6838      	ldr	r0, [r7, #0]
 800beda:	4798      	blx	r3
                    break;
 800bedc:	e03a      	b.n	800bf54 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800bede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee2:	4a26      	ldr	r2, [pc, #152]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee8:	69db      	ldr	r3, [r3, #28]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d034      	beq.n	800bf58 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800beee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bef2:	4a22      	ldr	r2, [pc, #136]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bef8:	781a      	ldrb	r2, [r3, #0]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800befe:	429a      	cmp	r2, r3
 800bf00:	d00a      	beq.n	800bf18 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800bf02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d126      	bne.n	800bf58 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800bf0a:	4b1c      	ldr	r3, [pc, #112]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	4798      	blx	r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d01f      	beq.n	800bf58 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800bf18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf1c:	4a17      	ldr	r2, [pc, #92]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bf1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf22:	69db      	ldr	r3, [r3, #28]
 800bf24:	6838      	ldr	r0, [r7, #0]
 800bf26:	4798      	blx	r3
                    break;
 800bf28:	e016      	b.n	800bf58 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800bf2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2e:	4a13      	ldr	r2, [pc, #76]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bf30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d010      	beq.n	800bf5c <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800bf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf3e:	4a0f      	ldr	r2, [pc, #60]	; (800bf7c <LmHandlerPackagesNotify+0xf4>)
 800bf40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	6838      	ldr	r0, [r7, #0]
 800bf48:	4798      	blx	r3
                    break;
 800bf4a:	e007      	b.n	800bf5c <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800bf4c:	bf00      	nop
 800bf4e:	e006      	b.n	800bf5e <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf50:	bf00      	nop
 800bf52:	e004      	b.n	800bf5e <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf54:	bf00      	nop
 800bf56:	e002      	b.n	800bf5e <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf58:	bf00      	nop
 800bf5a:	e000      	b.n	800bf5e <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf5c:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800bf5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	3301      	adds	r3, #1
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	73fb      	strb	r3, [r7, #15]
 800bf6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	dd93      	ble.n	800be9a <LmHandlerPackagesNotify+0x12>
    }
}
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	200002cc 	.word	0x200002cc

0800bf80 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800bf86:	2300      	movs	r3, #0
 800bf88:	71fb      	strb	r3, [r7, #7]
 800bf8a:	e022      	b.n	800bfd2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800bf8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf90:	4a14      	ldr	r2, [pc, #80]	; (800bfe4 <LmHandlerPackagesProcess+0x64>)
 800bf92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d015      	beq.n	800bfc6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800bf9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf9e:	4a11      	ldr	r2, [pc, #68]	; (800bfe4 <LmHandlerPackagesProcess+0x64>)
 800bfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00d      	beq.n	800bfc6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff ff4d 	bl	800be4c <LmHandlerPackageIsInitialized>
 800bfb2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800bfb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfbc:	4a09      	ldr	r2, [pc, #36]	; (800bfe4 <LmHandlerPackagesProcess+0x64>)
 800bfbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800bfc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	3301      	adds	r3, #1
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	71fb      	strb	r3, [r7, #7]
 800bfd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	ddd8      	ble.n	800bf8c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800bfda:	bf00      	nop
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	200002cc 	.word	0x200002cc

0800bfe8 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	4603      	mov	r3, r0
 800bff0:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	4a06      	ldr	r2, [pc, #24]	; (800c010 <DisplayClassUpdate+0x28>)
 800bff6:	5cd3      	ldrb	r3, [r2, r3]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4b06      	ldr	r3, [pc, #24]	; (800c014 <DisplayClassUpdate+0x2c>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	2100      	movs	r1, #0
 800c000:	2002      	movs	r0, #2
 800c002:	f00f f8d3 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	0801bdb0 	.word	0x0801bdb0
 800c014:	0801bd94 	.word	0x0801bd94

0800c018 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c022:	bf00      	nop
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	bc80      	pop	{r7}
 800c02a:	4770      	bx	lr

0800c02c <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800c030:	2300      	movs	r3, #0
#endif
}
 800c032:	4618      	mov	r0, r3
 800c034:	46bd      	mov	sp, r7
 800c036:	bc80      	pop	{r7}
 800c038:	4770      	bx	lr

0800c03a <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800c03a:	b480      	push	{r7}
 800c03c:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	46bd      	mov	sp, r7
 800c044:	bc80      	pop	{r7}
 800c046:	4770      	bx	lr

0800c048 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c04c:	4b02      	ldr	r3, [pc, #8]	; (800c058 <LmhpCompliancePackageFactory+0x10>)
}
 800c04e:	4618      	mov	r0, r3
 800c050:	46bd      	mov	sp, r7
 800c052:	bc80      	pop	{r7}
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	200000e0 	.word	0x200000e0

0800c05c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	4613      	mov	r3, r2
 800c068:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00f      	beq.n	800c090 <LmhpComplianceInit+0x34>
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00c      	beq.n	800c090 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800c076:	4a0c      	ldr	r2, [pc, #48]	; (800c0a8 <LmhpComplianceInit+0x4c>)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c07c:	4a0b      	ldr	r2, [pc, #44]	; (800c0ac <LmhpComplianceInit+0x50>)
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c082:	4a0a      	ldr	r2, [pc, #40]	; (800c0ac <LmhpComplianceInit+0x50>)
 800c084:	79fb      	ldrb	r3, [r7, #7]
 800c086:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c088:	4b08      	ldr	r3, [pc, #32]	; (800c0ac <LmhpComplianceInit+0x50>)
 800c08a:	2201      	movs	r2, #1
 800c08c:	701a      	strb	r2, [r3, #0]
 800c08e:	e006      	b.n	800c09e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <LmhpComplianceInit+0x4c>)
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c096:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <LmhpComplianceInit+0x50>)
 800c098:	2200      	movs	r2, #0
 800c09a:	701a      	strb	r2, [r3, #0]
    }
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bc80      	pop	{r7}
 800c0a6:	4770      	bx	lr
 800c0a8:	20000450 	.word	0x20000450
 800c0ac:	2000043c 	.word	0x2000043c

0800c0b0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c0b4:	4b02      	ldr	r3, [pc, #8]	; (800c0c0 <LmhpComplianceIsInitialized+0x10>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bc80      	pop	{r7}
 800c0be:	4770      	bx	lr
 800c0c0:	2000043c 	.word	0x2000043c

0800c0c4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c0c8:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <LmhpComplianceIsRunning+0x24>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f083 0301 	eor.w	r3, r3, #1
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e001      	b.n	800c0de <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c0da:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <LmhpComplianceIsRunning+0x24>)
 800c0dc:	785b      	ldrb	r3, [r3, #1]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bc80      	pop	{r7}
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	2000043c 	.word	0x2000043c

0800c0ec <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800c0f4:	4b0f      	ldr	r3, [pc, #60]	; (800c134 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	f083 0301 	eor.w	r3, r3, #1
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d112      	bne.n	800c128 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c102:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c104:	785b      	ldrb	r3, [r3, #1]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00f      	beq.n	800c12a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d10b      	bne.n	800c12a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c116:	2b00      	cmp	r3, #0
 800c118:	d007      	beq.n	800c12a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c11a:	4b06      	ldr	r3, [pc, #24]	; (800c134 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c11c:	899b      	ldrh	r3, [r3, #12]
 800c11e:	3301      	adds	r3, #1
 800c120:	b29a      	uxth	r2, r3
 800c122:	4b04      	ldr	r3, [pc, #16]	; (800c134 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c124:	819a      	strh	r2, [r3, #12]
 800c126:	e000      	b.n	800c12a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c128:	bf00      	nop
    }
}
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bc80      	pop	{r7}
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	2000043c 	.word	0x2000043c

0800c138 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c140:	4b12      	ldr	r3, [pc, #72]	; (800c18c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f083 0301 	eor.w	r3, r3, #1
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d116      	bne.n	800c17c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c14e:	4b0f      	ldr	r3, [pc, #60]	; (800c18c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c150:	785b      	ldrb	r3, [r3, #1]
 800c152:	f083 0301 	eor.w	r3, r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d111      	bne.n	800c180 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b04      	cmp	r3, #4
 800c162:	d10e      	bne.n	800c182 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c164:	4b09      	ldr	r3, [pc, #36]	; (800c18c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c166:	2201      	movs	r2, #1
 800c168:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7a1a      	ldrb	r2, [r3, #8]
 800c16e:	4b07      	ldr	r3, [pc, #28]	; (800c18c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c170:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	7a5a      	ldrb	r2, [r3, #9]
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c178:	741a      	strb	r2, [r3, #16]
 800c17a:	e002      	b.n	800c182 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c17c:	bf00      	nop
 800c17e:	e000      	b.n	800c182 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c180:	bf00      	nop
    }
}
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	bc80      	pop	{r7}
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	2000043c 	.word	0x2000043c

0800c190 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c190:	b590      	push	{r4, r7, lr}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c196:	4b33      	ldr	r3, [pc, #204]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	f083 0301 	eor.w	r3, r3, #1
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a8:	e058      	b.n	800c25c <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800c1aa:	4b2e      	ldr	r3, [pc, #184]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1ac:	785b      	ldrb	r3, [r3, #1]
 800c1ae:	f083 0301 	eor.w	r3, r3, #1
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e04f      	b.n	800c25c <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c1bc:	4b29      	ldr	r3, [pc, #164]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1be:	7b9b      	ldrb	r3, [r3, #14]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d019      	beq.n	800c1f8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c1c4:	4b27      	ldr	r3, [pc, #156]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c1ca:	4b26      	ldr	r3, [pc, #152]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c1d0:	4b24      	ldr	r3, [pc, #144]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	2205      	movs	r2, #5
 800c1d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c1d8:	4b22      	ldr	r3, [pc, #136]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	4a21      	ldr	r2, [pc, #132]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1e0:	7bd2      	ldrb	r2, [r2, #15]
 800c1e2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c1e4:	4b1f      	ldr	r3, [pc, #124]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	3302      	adds	r3, #2
 800c1ea:	4a1e      	ldr	r2, [pc, #120]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1ec:	7c12      	ldrb	r2, [r2, #16]
 800c1ee:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c1f0:	4b1c      	ldr	r3, [pc, #112]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	709a      	strb	r2, [r3, #2]
 800c1f6:	e01c      	b.n	800c232 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c1f8:	4b1a      	ldr	r3, [pc, #104]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c1fa:	789b      	ldrb	r3, [r3, #2]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d005      	beq.n	800c20c <LmhpComplianceTxProcess+0x7c>
 800c200:	2b04      	cmp	r3, #4
 800c202:	d116      	bne.n	800c232 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800c204:	4b17      	ldr	r3, [pc, #92]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c206:	2201      	movs	r2, #1
 800c208:	709a      	strb	r2, [r3, #2]
            break;
 800c20a:	e012      	b.n	800c232 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800c20c:	4b15      	ldr	r3, [pc, #84]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c20e:	2202      	movs	r2, #2
 800c210:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c212:	4b14      	ldr	r3, [pc, #80]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c214:	899b      	ldrh	r3, [r3, #12]
 800c216:	0a1b      	lsrs	r3, r3, #8
 800c218:	b29a      	uxth	r2, r3
 800c21a:	4b12      	ldr	r3, [pc, #72]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	b2d2      	uxtb	r2, r2
 800c220:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c222:	4b10      	ldr	r3, [pc, #64]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c224:	899a      	ldrh	r2, [r3, #12]
 800c226:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	3301      	adds	r3, #1
 800c22c:	b2d2      	uxtb	r2, r2
 800c22e:	701a      	strb	r2, [r3, #0]
            break;
 800c230:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c232:	23e0      	movs	r3, #224	; 0xe0
 800c234:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c236:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c238:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c23a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c23e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c240:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800c242:	4809      	ldr	r0, [pc, #36]	; (800c268 <LmhpComplianceTxProcess+0xd8>)
 800c244:	f00e fd3a 	bl	801acbc <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800c248:	4b08      	ldr	r3, [pc, #32]	; (800c26c <LmhpComplianceTxProcess+0xdc>)
 800c24a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <LmhpComplianceTxProcess+0xd4>)
 800c24e:	78db      	ldrb	r3, [r3, #3]
 800c250:	4619      	mov	r1, r3
 800c252:	4638      	mov	r0, r7
 800c254:	2301      	movs	r3, #1
 800c256:	2200      	movs	r2, #0
 800c258:	47a0      	blx	r4
 800c25a:	4603      	mov	r3, r0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	bd90      	pop	{r4, r7, pc}
 800c264:	2000043c 	.word	0x2000043c
 800c268:	20000424 	.word	0x20000424
 800c26c:	200000e0 	.word	0x200000e0

0800c270 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b0a2      	sub	sp, #136	; 0x88
 800c274:	af02      	add	r7, sp, #8
 800c276:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c278:	4bae      	ldr	r3, [pc, #696]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	f083 0301 	eor.w	r3, r3, #1
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	f040 81c0 	bne.w	800c608 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7b5b      	ldrb	r3, [r3, #13]
 800c28c:	f083 0301 	eor.w	r3, r3, #1
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	f040 81ba 	bne.w	800c60c <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c298:	4ba6      	ldr	r3, [pc, #664]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c29a:	785b      	ldrb	r3, [r3, #1]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00c      	beq.n	800c2ba <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	7b9b      	ldrb	r3, [r3, #14]
 800c2a4:	f083 0301 	eor.w	r3, r3, #1
 800c2a8:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d005      	beq.n	800c2ba <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c2ae:	4ba1      	ldr	r3, [pc, #644]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2b0:	899b      	ldrh	r3, [r3, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	4b9f      	ldr	r3, [pc, #636]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2b8:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	78db      	ldrb	r3, [r3, #3]
 800c2be:	2be0      	cmp	r3, #224	; 0xe0
 800c2c0:	f040 81a6 	bne.w	800c610 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c2c4:	4b9b      	ldr	r3, [pc, #620]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	f083 0301 	eor.w	r3, r3, #1
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d060      	beq.n	800c394 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7b1b      	ldrb	r3, [r3, #12]
 800c2d6:	2b04      	cmp	r3, #4
 800c2d8:	f040 819f 	bne.w	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	f040 8199 	bne.w	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	f040 8192 	bne.w	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	f040 818b 	bne.w	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	3303      	adds	r3, #3
 800c30a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f040 8184 	bne.w	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800c312:	4b88      	ldr	r3, [pc, #544]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c314:	2200      	movs	r2, #0
 800c316:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800c318:	4b86      	ldr	r3, [pc, #536]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c31a:	22e0      	movs	r2, #224	; 0xe0
 800c31c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800c31e:	4b85      	ldr	r3, [pc, #532]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c320:	2202      	movs	r2, #2
 800c322:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800c324:	4b83      	ldr	r3, [pc, #524]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c326:	2200      	movs	r2, #0
 800c328:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800c32a:	4b82      	ldr	r3, [pc, #520]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800c330:	4b80      	ldr	r3, [pc, #512]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c332:	2200      	movs	r2, #0
 800c334:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800c336:	4b7f      	ldr	r3, [pc, #508]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c338:	2200      	movs	r2, #0
 800c33a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800c33c:	4b7d      	ldr	r3, [pc, #500]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c33e:	2201      	movs	r2, #1
 800c340:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800c342:	4b7c      	ldr	r3, [pc, #496]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c344:	2201      	movs	r2, #1
 800c346:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800c348:	2304      	movs	r3, #4
 800c34a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800c34c:	2301      	movs	r3, #1
 800c34e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c350:	f107 0308 	add.w	r3, r7, #8
 800c354:	4618      	mov	r0, r3
 800c356:	f004 f829 	bl	80103ac <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800c35a:	2000      	movs	r0, #0
 800c35c:	f004 fd9a 	bl	8010e94 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800c360:	4b75      	ldr	r3, [pc, #468]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800c36a:	4b73      	ldr	r3, [pc, #460]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800c372:	2300      	movs	r3, #0
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	4b71      	ldr	r3, [pc, #452]	; (800c53c <LmhpComplianceOnMcpsIndication+0x2cc>)
 800c378:	2200      	movs	r2, #0
 800c37a:	f04f 31ff 	mov.w	r1, #4294967295
 800c37e:	4870      	ldr	r0, [pc, #448]	; (800c540 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c380:	f00e fc66 	bl	801ac50 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800c384:	f241 3188 	movw	r1, #5000	; 0x1388
 800c388:	486d      	ldr	r0, [pc, #436]	; (800c540 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c38a:	f00e fd75 	bl	801ae78 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800c38e:	f7ff feff 	bl	800c190 <LmhpComplianceTxProcess>
 800c392:	e142      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	4b66      	ldr	r3, [pc, #408]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c39c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800c39e:	4b65      	ldr	r3, [pc, #404]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c3a0:	789b      	ldrb	r3, [r3, #2]
 800c3a2:	2b0a      	cmp	r3, #10
 800c3a4:	f200 8136 	bhi.w	800c614 <LmhpComplianceOnMcpsIndication+0x3a4>
 800c3a8:	a201      	add	r2, pc, #4	; (adr r2, 800c3b0 <LmhpComplianceOnMcpsIndication+0x140>)
 800c3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ae:	bf00      	nop
 800c3b0:	0800c3dd 	.word	0x0800c3dd
 800c3b4:	0800c427 	.word	0x0800c427
 800c3b8:	0800c42f 	.word	0x0800c42f
 800c3bc:	0800c43d 	.word	0x0800c43d
 800c3c0:	0800c44b 	.word	0x0800c44b
 800c3c4:	0800c4a3 	.word	0x0800c4a3
 800c3c8:	0800c4b5 	.word	0x0800c4b5
 800c3cc:	0800c505 	.word	0x0800c505
 800c3d0:	0800c5c1 	.word	0x0800c5c1
 800c3d4:	0800c5d3 	.word	0x0800c5d3
 800c3d8:	0800c5ed 	.word	0x0800c5ed
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800c3dc:	4858      	ldr	r0, [pc, #352]	; (800c540 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c3de:	f00e fcdb 	bl	801ad98 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c3e2:	4b54      	ldr	r3, [pc, #336]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c3e8:	4b52      	ldr	r3, [pc, #328]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800c3ee:	2304      	movs	r3, #4
 800c3f0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c3f2:	4b51      	ldr	r3, [pc, #324]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c3fa:	f107 0308 	add.w	r3, r7, #8
 800c3fe:	4618      	mov	r0, r3
 800c400:	f003 ffd4 	bl	80103ac <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c404:	4b4c      	ldr	r3, [pc, #304]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f004 fd42 	bl	8010e94 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c410:	4b49      	ldr	r3, [pc, #292]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 80fe 	beq.w	800c618 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c41c:	4b46      	ldr	r3, [pc, #280]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	4798      	blx	r3
                }
            }
            break;
 800c424:	e0f8      	b.n	800c618 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800c426:	4b43      	ldr	r3, [pc, #268]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c428:	2202      	movs	r2, #2
 800c42a:	719a      	strb	r2, [r3, #6]
            break;
 800c42c:	e0f5      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800c42e:	4b41      	ldr	r3, [pc, #260]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c430:	2201      	movs	r2, #1
 800c432:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c434:	4b3f      	ldr	r3, [pc, #252]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c436:	2201      	movs	r2, #1
 800c438:	709a      	strb	r2, [r3, #2]
            break;
 800c43a:	e0ee      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800c43c:	4b3d      	ldr	r3, [pc, #244]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c43e:	2200      	movs	r2, #0
 800c440:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c442:	4b3c      	ldr	r3, [pc, #240]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c444:	2201      	movs	r2, #1
 800c446:	709a      	strb	r2, [r3, #2]
            break;
 800c448:	e0e7      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7b1a      	ldrb	r2, [r3, #12]
 800c44e:	4b39      	ldr	r3, [pc, #228]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c450:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800c452:	4b38      	ldr	r3, [pc, #224]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	2204      	movs	r2, #4
 800c458:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c45a:	2301      	movs	r3, #1
 800c45c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c460:	e012      	b.n	800c488 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	689a      	ldr	r2, [r3, #8]
 800c466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c46a:	4413      	add	r3, r2
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	4b31      	ldr	r3, [pc, #196]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c470:	6899      	ldr	r1, [r3, #8]
 800c472:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c476:	440b      	add	r3, r1
 800c478:	3201      	adds	r2, #1
 800c47a:	b2d2      	uxtb	r2, r2
 800c47c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c47e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c482:	3301      	adds	r3, #1
 800c484:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c488:	4b2a      	ldr	r3, [pc, #168]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c48a:	795a      	ldrb	r2, [r3, #5]
 800c48c:	4b29      	ldr	r3, [pc, #164]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c48e:	799b      	ldrb	r3, [r3, #6]
 800c490:	4293      	cmp	r3, r2
 800c492:	bf28      	it	cs
 800c494:	4613      	movcs	r3, r2
 800c496:	b2db      	uxtb	r3, r3
 800c498:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d3e0      	bcc.n	800c462 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800c4a0:	e0bb      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800c4a2:	2304      	movs	r3, #4
 800c4a4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800c4a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f004 fabb 	bl	8010a28 <LoRaMacMlmeRequest>
            }
            break;
 800c4b2:	e0b2      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800c4b4:	4822      	ldr	r0, [pc, #136]	; (800c540 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c4b6:	f00e fc6f 	bl	801ad98 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c4ba:	4b1e      	ldr	r3, [pc, #120]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c4c0:	4b1c      	ldr	r3, [pc, #112]	; (800c534 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c4ca:	4b1b      	ldr	r3, [pc, #108]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c4d2:	f107 0308 	add.w	r3, r7, #8
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f003 ff68 	bl	80103ac <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c4dc:	4b16      	ldr	r3, [pc, #88]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	785b      	ldrb	r3, [r3, #1]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f004 fcd6 	bl	8010e94 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c4e8:	4b13      	ldr	r3, [pc, #76]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c4f2:	4b11      	ldr	r3, [pc, #68]	; (800c538 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800c4fa:	4b12      	ldr	r3, [pc, #72]	; (800c544 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	2002      	movs	r0, #2
 800c500:	4798      	blx	r3
            }
            break;
 800c502:	e08a      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7b1b      	ldrb	r3, [r3, #12]
 800c508:	2b03      	cmp	r3, #3
 800c50a:	d11d      	bne.n	800c548 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800c50c:	2305      	movs	r3, #5
 800c50e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	3301      	adds	r3, #1
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	021b      	lsls	r3, r3, #8
 800c51c:	b21a      	sxth	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	3302      	adds	r3, #2
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	b21b      	sxth	r3, r3
 800c528:	4313      	orrs	r3, r2
 800c52a:	b21b      	sxth	r3, r3
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800c532:	e03c      	b.n	800c5ae <LmhpComplianceOnMcpsIndication+0x33e>
 800c534:	2000043c 	.word	0x2000043c
 800c538:	20000450 	.word	0x20000450
 800c53c:	0800c631 	.word	0x0800c631
 800c540:	20000424 	.word	0x20000424
 800c544:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	7b1b      	ldrb	r3, [r3, #12]
 800c54c:	2b07      	cmp	r3, #7
 800c54e:	d12e      	bne.n	800c5ae <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800c550:	2306      	movs	r3, #6
 800c552:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	3301      	adds	r3, #1
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	b21a      	sxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	3302      	adds	r3, #2
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	b21b      	sxth	r3, r3
 800c56c:	4313      	orrs	r3, r2
 800c56e:	b21b      	sxth	r3, r3
 800c570:	b29b      	uxth	r3, r3
 800c572:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	3303      	adds	r3, #3
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	041a      	lsls	r2, r3, #16
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	3304      	adds	r3, #4
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	021b      	lsls	r3, r3, #8
 800c58a:	4313      	orrs	r3, r2
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	6892      	ldr	r2, [r2, #8]
 800c590:	3205      	adds	r2, #5
 800c592:	7812      	ldrb	r2, [r2, #0]
 800c594:	4313      	orrs	r3, r2
 800c596:	461a      	mov	r2, r3
 800c598:	2364      	movs	r3, #100	; 0x64
 800c59a:	fb03 f302 	mul.w	r3, r3, r2
 800c59e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	3306      	adds	r3, #6
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	b25b      	sxtb	r3, r3
 800c5aa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800c5ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f004 fa38 	bl	8010a28 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800c5b8:	4b19      	ldr	r3, [pc, #100]	; (800c620 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	709a      	strb	r2, [r3, #2]
            }
            break;
 800c5be:	e02c      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800c5c0:	230a      	movs	r3, #10
 800c5c2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800c5c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f004 fa2c 	bl	8010a28 <LoRaMacMlmeRequest>
            }
            break;
 800c5d0:	e023      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f003 fee1 	bl	80103ac <LoRaMacMibSetRequestConfirm>
            }
            break;
 800c5ea:	e016      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800c5ec:	230d      	movs	r3, #13
 800c5ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	785b      	ldrb	r3, [r3, #1]
 800c5f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800c5fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c600:	4618      	mov	r0, r3
 800c602:	f004 fa11 	bl	8010a28 <LoRaMacMlmeRequest>
            }
            break;
 800c606:	e008      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800c608:	bf00      	nop
 800c60a:	e006      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800c60c:	bf00      	nop
 800c60e:	e004      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800c610:	bf00      	nop
 800c612:	e002      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800c614:	bf00      	nop
 800c616:	e000      	b.n	800c61a <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800c618:	bf00      	nop
        }
    }
}
 800c61a:	3780      	adds	r7, #128	; 0x80
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	2000043c 	.word	0x2000043c

0800c624 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800c624:	b480      	push	{r7}
 800c626:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800c628:	bf00      	nop
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bc80      	pop	{r7}
 800c62e:	4770      	bx	lr

0800c630 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800c638:	f7ff fdaa 	bl	800c190 <LmhpComplianceTxProcess>
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800c644:	b590      	push	{r4, r7, lr}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800c64a:	f00e fcbf 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 800c64e:	4603      	mov	r3, r0
 800c650:	4a16      	ldr	r2, [pc, #88]	; (800c6ac <OnRadioTxDone+0x68>)
 800c652:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800c654:	4c16      	ldr	r4, [pc, #88]	; (800c6b0 <OnRadioTxDone+0x6c>)
 800c656:	463b      	mov	r3, r7
 800c658:	4618      	mov	r0, r3
 800c65a:	f00d fe49 	bl	801a2f0 <SysTimeGet>
 800c65e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800c662:	463a      	mov	r2, r7
 800c664:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c668:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800c66c:	4a11      	ldr	r2, [pc, #68]	; (800c6b4 <OnRadioTxDone+0x70>)
 800c66e:	7813      	ldrb	r3, [r2, #0]
 800c670:	f043 0310 	orr.w	r3, r3, #16
 800c674:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c676:	4b0e      	ldr	r3, [pc, #56]	; (800c6b0 <OnRadioTxDone+0x6c>)
 800c678:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <OnRadioTxDone+0x52>
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <OnRadioTxDone+0x6c>)
 800c682:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c68c:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <OnRadioTxDone+0x6c>)
 800c68e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800c696:	4b08      	ldr	r3, [pc, #32]	; (800c6b8 <OnRadioTxDone+0x74>)
 800c698:	2201      	movs	r2, #1
 800c69a:	2100      	movs	r1, #0
 800c69c:	2002      	movs	r0, #2
 800c69e:	f00e fd85 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800c6a2:	bf00      	nop
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd90      	pop	{r4, r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20001a30 	.word	0x20001a30
 800c6b0:	20000454 	.word	0x20000454
 800c6b4:	20000f6c 	.word	0x20000f6c
 800c6b8:	0801bdb4 	.word	0x0801bdb4

0800c6bc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	817b      	strh	r3, [r7, #10]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	813b      	strh	r3, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800c6d6:	f00e fc79 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	4a16      	ldr	r2, [pc, #88]	; (800c738 <OnRadioRxDone+0x7c>)
 800c6de:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800c6e0:	4a15      	ldr	r2, [pc, #84]	; (800c738 <OnRadioRxDone+0x7c>)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800c6e6:	4a14      	ldr	r2, [pc, #80]	; (800c738 <OnRadioRxDone+0x7c>)
 800c6e8:	897b      	ldrh	r3, [r7, #10]
 800c6ea:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800c6ec:	4a12      	ldr	r2, [pc, #72]	; (800c738 <OnRadioRxDone+0x7c>)
 800c6ee:	893b      	ldrh	r3, [r7, #8]
 800c6f0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800c6f2:	4a11      	ldr	r2, [pc, #68]	; (800c738 <OnRadioRxDone+0x7c>)
 800c6f4:	79fb      	ldrb	r3, [r7, #7]
 800c6f6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800c6f8:	4a10      	ldr	r2, [pc, #64]	; (800c73c <OnRadioRxDone+0x80>)
 800c6fa:	7813      	ldrb	r3, [r2, #0]
 800c6fc:	f043 0308 	orr.w	r3, r3, #8
 800c700:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c702:	4b0f      	ldr	r3, [pc, #60]	; (800c740 <OnRadioRxDone+0x84>)
 800c704:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00a      	beq.n	800c722 <OnRadioRxDone+0x66>
 800c70c:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <OnRadioRxDone+0x84>)
 800c70e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d004      	beq.n	800c722 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c718:	4b09      	ldr	r3, [pc, #36]	; (800c740 <OnRadioRxDone+0x84>)
 800c71a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800c722:	4b08      	ldr	r3, [pc, #32]	; (800c744 <OnRadioRxDone+0x88>)
 800c724:	2201      	movs	r2, #1
 800c726:	2100      	movs	r1, #0
 800c728:	2002      	movs	r0, #2
 800c72a:	f00e fd3f 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800c72e:	bf00      	nop
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20001a34 	.word	0x20001a34
 800c73c:	20000f6c 	.word	0x20000f6c
 800c740:	20000454 	.word	0x20000454
 800c744:	0801bdc4 	.word	0x0801bdc4

0800c748 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800c74c:	4a0e      	ldr	r2, [pc, #56]	; (800c788 <OnRadioTxTimeout+0x40>)
 800c74e:	7813      	ldrb	r3, [r2, #0]
 800c750:	f043 0304 	orr.w	r3, r3, #4
 800c754:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c756:	4b0d      	ldr	r3, [pc, #52]	; (800c78c <OnRadioTxTimeout+0x44>)
 800c758:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00a      	beq.n	800c776 <OnRadioTxTimeout+0x2e>
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <OnRadioTxTimeout+0x44>)
 800c762:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d004      	beq.n	800c776 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c76c:	4b07      	ldr	r3, [pc, #28]	; (800c78c <OnRadioTxTimeout+0x44>)
 800c76e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800c776:	4b06      	ldr	r3, [pc, #24]	; (800c790 <OnRadioTxTimeout+0x48>)
 800c778:	2201      	movs	r2, #1
 800c77a:	2100      	movs	r1, #0
 800c77c:	2002      	movs	r0, #2
 800c77e:	f00e fd15 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800c782:	bf00      	nop
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	20000f6c 	.word	0x20000f6c
 800c78c:	20000454 	.word	0x20000454
 800c790:	0801bdd4 	.word	0x0801bdd4

0800c794 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800c798:	4a0b      	ldr	r2, [pc, #44]	; (800c7c8 <OnRadioRxError+0x34>)
 800c79a:	7813      	ldrb	r3, [r2, #0]
 800c79c:	f043 0302 	orr.w	r3, r3, #2
 800c7a0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c7a2:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <OnRadioRxError+0x38>)
 800c7a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00a      	beq.n	800c7c2 <OnRadioRxError+0x2e>
 800c7ac:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <OnRadioRxError+0x38>)
 800c7ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d004      	beq.n	800c7c2 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c7b8:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <OnRadioRxError+0x38>)
 800c7ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	4798      	blx	r3
    }
}
 800c7c2:	bf00      	nop
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000f6c 	.word	0x20000f6c
 800c7cc:	20000454 	.word	0x20000454

0800c7d0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800c7d4:	4a0e      	ldr	r2, [pc, #56]	; (800c810 <OnRadioRxTimeout+0x40>)
 800c7d6:	7813      	ldrb	r3, [r2, #0]
 800c7d8:	f043 0301 	orr.w	r3, r3, #1
 800c7dc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c7de:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <OnRadioRxTimeout+0x44>)
 800c7e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <OnRadioRxTimeout+0x2e>
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <OnRadioRxTimeout+0x44>)
 800c7ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d004      	beq.n	800c7fe <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c7f4:	4b07      	ldr	r3, [pc, #28]	; (800c814 <OnRadioRxTimeout+0x44>)
 800c7f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800c7fe:	4b06      	ldr	r3, [pc, #24]	; (800c818 <OnRadioRxTimeout+0x48>)
 800c800:	2201      	movs	r2, #1
 800c802:	2100      	movs	r1, #0
 800c804:	2002      	movs	r0, #2
 800c806:	f00e fcd1 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 800c80a:	bf00      	nop
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20000f6c 	.word	0x20000f6c
 800c814:	20000454 	.word	0x20000454
 800c818:	0801bde4 	.word	0x0801bde4

0800c81c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c820:	4b08      	ldr	r3, [pc, #32]	; (800c844 <UpdateRxSlotIdleState+0x28>)
 800c822:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c826:	2b02      	cmp	r3, #2
 800c828:	d004      	beq.n	800c834 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800c82a:	4b07      	ldr	r3, [pc, #28]	; (800c848 <UpdateRxSlotIdleState+0x2c>)
 800c82c:	2206      	movs	r2, #6
 800c82e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800c832:	e003      	b.n	800c83c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c834:	4b04      	ldr	r3, [pc, #16]	; (800c848 <UpdateRxSlotIdleState+0x2c>)
 800c836:	2202      	movs	r2, #2
 800c838:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800c83c:	bf00      	nop
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr
 800c844:	2000095c 	.word	0x2000095c
 800c848:	20000454 	.word	0x20000454

0800c84c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08e      	sub	sp, #56	; 0x38
 800c850:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c852:	4b44      	ldr	r3, [pc, #272]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c854:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d002      	beq.n	800c862 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800c85c:	4b42      	ldr	r3, [pc, #264]	; (800c968 <ProcessRadioTxDone+0x11c>)
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800c862:	4b42      	ldr	r3, [pc, #264]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c864:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800c868:	4619      	mov	r1, r3
 800c86a:	4841      	ldr	r0, [pc, #260]	; (800c970 <ProcessRadioTxDone+0x124>)
 800c86c:	f00e fb04 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c870:	483f      	ldr	r0, [pc, #252]	; (800c970 <ProcessRadioTxDone+0x124>)
 800c872:	f00e fa23 	bl	801acbc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800c876:	4b3d      	ldr	r3, [pc, #244]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c878:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800c87c:	4619      	mov	r1, r3
 800c87e:	483d      	ldr	r0, [pc, #244]	; (800c974 <ProcessRadioTxDone+0x128>)
 800c880:	f00e fafa 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c884:	483b      	ldr	r0, [pc, #236]	; (800c974 <ProcessRadioTxDone+0x128>)
 800c886:	f00e fa19 	bl	801acbc <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800c88a:	4b36      	ldr	r3, [pc, #216]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c88c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c890:	2b02      	cmp	r3, #2
 800c892:	d004      	beq.n	800c89e <ProcessRadioTxDone+0x52>
 800c894:	4b35      	ldr	r3, [pc, #212]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c896:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d019      	beq.n	800c8d2 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800c89e:	2316      	movs	r3, #22
 800c8a0:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c8a4:	4b2f      	ldr	r3, [pc, #188]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c8a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8aa:	f107 0220 	add.w	r2, r7, #32
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f006 fb5a 	bl	8012f6a <RegionGetPhyParam>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c8ba:	4b2c      	ldr	r3, [pc, #176]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c8bc:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	482c      	ldr	r0, [pc, #176]	; (800c978 <ProcessRadioTxDone+0x12c>)
 800c8c8:	f00e fad6 	bl	801ae78 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800c8cc:	482a      	ldr	r0, [pc, #168]	; (800c978 <ProcessRadioTxDone+0x12c>)
 800c8ce:	f00e f9f5 	bl	801acbc <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c8d2:	4b2a      	ldr	r3, [pc, #168]	; (800c97c <ProcessRadioTxDone+0x130>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a23      	ldr	r2, [pc, #140]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800c8da:	4b24      	ldr	r3, [pc, #144]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c8dc:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800c8e0:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c8e2:	4b26      	ldr	r3, [pc, #152]	; (800c97c <ProcessRadioTxDone+0x130>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c8e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f00d fd37 	bl	801a360 <SysTimeGetMcuTime>
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	4b1b      	ldr	r3, [pc, #108]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c8f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800c8fa:	9200      	str	r2, [sp, #0]
 800c8fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c900:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c904:	ca06      	ldmia	r2, {r1, r2}
 800c906:	f00d fc8c 	bl	801a222 <SysTimeSub>
 800c90a:	f107 0314 	add.w	r3, r7, #20
 800c90e:	463a      	mov	r2, r7
 800c910:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c914:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c918:	4b14      	ldr	r3, [pc, #80]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c91a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800c91e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800c920:	2301      	movs	r3, #1
 800c922:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c924:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c926:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800c92e:	2300      	movs	r3, #0
 800c930:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c932:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <ProcessRadioTxDone+0x118>)
 800c934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c938:	f107 0208 	add.w	r2, r7, #8
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f006 fb35 	bl	8012fae <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800c944:	4b09      	ldr	r3, [pc, #36]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c946:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c94a:	f083 0301 	eor.w	r3, r3, #1
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d003      	beq.n	800c95c <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <ProcessRadioTxDone+0x120>)
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800c95c:	bf00      	nop
 800c95e:	3730      	adds	r7, #48	; 0x30
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	2000095c 	.word	0x2000095c
 800c968:	0801c4cc 	.word	0x0801c4cc
 800c96c:	20000454 	.word	0x20000454
 800c970:	200007d4 	.word	0x200007d4
 800c974:	200007ec 	.word	0x200007ec
 800c978:	2000084c 	.word	0x2000084c
 800c97c:	20001a30 	.word	0x20001a30

0800c980 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800c984:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <PrepareRxDoneAbort+0x48>)
 800c986:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c98e:	4a0e      	ldr	r2, [pc, #56]	; (800c9c8 <PrepareRxDoneAbort+0x48>)
 800c990:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800c994:	4b0c      	ldr	r3, [pc, #48]	; (800c9c8 <PrepareRxDoneAbort+0x48>)
 800c996:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800c99e:	2000      	movs	r0, #0
 800c9a0:	f001 f8f8 	bl	800db94 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800c9a4:	4a08      	ldr	r2, [pc, #32]	; (800c9c8 <PrepareRxDoneAbort+0x48>)
 800c9a6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c9aa:	f043 0302 	orr.w	r3, r3, #2
 800c9ae:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c9b2:	4a05      	ldr	r2, [pc, #20]	; (800c9c8 <PrepareRxDoneAbort+0x48>)
 800c9b4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c9b8:	f043 0320 	orr.w	r3, r3, #32
 800c9bc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800c9c0:	f7ff ff2c 	bl	800c81c <UpdateRxSlotIdleState>
}
 800c9c4:	bf00      	nop
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	20000454 	.word	0x20000454

0800c9cc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800c9cc:	b5b0      	push	{r4, r5, r7, lr}
 800c9ce:	b0a6      	sub	sp, #152	; 0x98
 800c9d0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800c9d2:	2313      	movs	r3, #19
 800c9d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800c9d8:	4bb9      	ldr	r3, [pc, #740]	; (800ccc0 <ProcessRadioRxDone+0x2f4>)
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800c9de:	4bb8      	ldr	r3, [pc, #736]	; (800ccc0 <ProcessRadioRxDone+0x2f4>)
 800c9e0:	891b      	ldrh	r3, [r3, #8]
 800c9e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800c9e6:	4bb6      	ldr	r3, [pc, #728]	; (800ccc0 <ProcessRadioRxDone+0x2f4>)
 800c9e8:	895b      	ldrh	r3, [r3, #10]
 800c9ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800c9ee:	4bb4      	ldr	r3, [pc, #720]	; (800ccc0 <ProcessRadioRxDone+0x2f4>)
 800c9f0:	7b1b      	ldrb	r3, [r3, #12]
 800c9f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ca00:	4bb0      	ldr	r3, [pc, #704]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800ca02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ca06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800ca16:	4bac      	ldr	r3, [pc, #688]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800ca1e:	4aaa      	ldr	r2, [pc, #680]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca20:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ca24:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800ca28:	4aa7      	ldr	r2, [pc, #668]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca2e:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800ca32:	4ba5      	ldr	r3, [pc, #660]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca34:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800ca38:	4ba3      	ldr	r3, [pc, #652]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca3a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800ca3e:	4ba2      	ldr	r3, [pc, #648]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800ca46:	4ba0      	ldr	r3, [pc, #640]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800ca4e:	4b9e      	ldr	r3, [pc, #632]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800ca56:	4b9c      	ldr	r3, [pc, #624]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800ca5e:	4b9a      	ldr	r3, [pc, #616]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800ca66:	4b98      	ldr	r3, [pc, #608]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800ca6e:	4b96      	ldr	r3, [pc, #600]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ca76:	4b94      	ldr	r3, [pc, #592]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ca7e:	4b92      	ldr	r3, [pc, #584]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800ca86:	4b90      	ldr	r3, [pc, #576]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ca8e:	4b8e      	ldr	r3, [pc, #568]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800ca96:	4b8d      	ldr	r3, [pc, #564]	; (800cccc <ProcessRadioRxDone+0x300>)
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ca9c:	488c      	ldr	r0, [pc, #560]	; (800ccd0 <ProcessRadioRxDone+0x304>)
 800ca9e:	f00e f97b 	bl	801ad98 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800caa2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800caa6:	4619      	mov	r1, r3
 800caa8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800caaa:	f004 fb28 	bl	80110fe <LoRaMacClassBRxBeacon>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00a      	beq.n	800caca <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800cab4:	4a84      	ldr	r2, [pc, #528]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800cab6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800caba:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800cabe:	4a82      	ldr	r2, [pc, #520]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800cac0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cac4:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800cac8:	e3bf      	b.n	800d24a <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800caca:	4b7e      	ldr	r3, [pc, #504]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cacc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d11e      	bne.n	800cb12 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800cad4:	f004 fb26 	bl	8011124 <LoRaMacClassBIsPingExpected>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cade:	2000      	movs	r0, #0
 800cae0:	f004 fad7 	bl	8011092 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800cae4:	2000      	movs	r0, #0
 800cae6:	f004 faf8 	bl	80110da <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800caea:	4b77      	ldr	r3, [pc, #476]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800caec:	2204      	movs	r2, #4
 800caee:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800caf2:	e00e      	b.n	800cb12 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800caf4:	f004 fb1d 	bl	8011132 <LoRaMacClassBIsMulticastExpected>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d009      	beq.n	800cb12 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cafe:	2000      	movs	r0, #0
 800cb00:	f004 fad1 	bl	80110a6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cb04:	2000      	movs	r0, #0
 800cb06:	f004 faf1 	bl	80110ec <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800cb0a:	4b6f      	ldr	r3, [pc, #444]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800cb0c:	2205      	movs	r2, #5
 800cb0e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800cb12:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800cb16:	1c5a      	adds	r2, r3, #1
 800cb18:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb20:	4413      	add	r3, r2
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800cb28:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800cb2c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	3b01      	subs	r3, #1
 800cb34:	2b06      	cmp	r3, #6
 800cb36:	f200 8362 	bhi.w	800d1fe <ProcessRadioRxDone+0x832>
 800cb3a:	a201      	add	r2, pc, #4	; (adr r2, 800cb40 <ProcessRadioRxDone+0x174>)
 800cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb40:	0800cb5d 	.word	0x0800cb5d
 800cb44:	0800d1ff 	.word	0x0800d1ff
 800cb48:	0800ccdd 	.word	0x0800ccdd
 800cb4c:	0800d1ff 	.word	0x0800d1ff
 800cb50:	0800ccd5 	.word	0x0800ccd5
 800cb54:	0800d1ff 	.word	0x0800d1ff
 800cb58:	0800d1a5 	.word	0x0800d1a5
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800cb5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cb60:	2b10      	cmp	r3, #16
 800cb62:	d806      	bhi.n	800cb72 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb64:	4b58      	ldr	r3, [pc, #352]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cb6c:	f7ff ff08 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cb70:	e36b      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800cb72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb74:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800cb76:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cb7e:	4b51      	ldr	r3, [pc, #324]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cb80:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d006      	beq.n	800cb96 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb88:	4b4f      	ldr	r3, [pc, #316]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cb90:	f7ff fef6 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cb94:	e359      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800cb96:	f7fe fbcf 	bl	800b338 <SecureElementGetJoinEui>
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	f107 0308 	add.w	r3, r7, #8
 800cba0:	461a      	mov	r2, r3
 800cba2:	20ff      	movs	r0, #255	; 0xff
 800cba4:	f005 fc60 	bl	8012468 <LoRaMacCryptoHandleJoinAccept>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800cbae:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d172      	bne.n	800cc9c <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800cbb6:	7c7b      	ldrb	r3, [r7, #17]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b42      	ldr	r3, [pc, #264]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbbc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800cbc0:	4b40      	ldr	r3, [pc, #256]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbc2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cbc6:	7cbb      	ldrb	r3, [r7, #18]
 800cbc8:	021b      	lsls	r3, r3, #8
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	4a3d      	ldr	r2, [pc, #244]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbce:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800cbd2:	4b3c      	ldr	r3, [pc, #240]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbd4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cbd8:	7cfb      	ldrb	r3, [r7, #19]
 800cbda:	041b      	lsls	r3, r3, #16
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	4a39      	ldr	r2, [pc, #228]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbe0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	4a37      	ldr	r2, [pc, #220]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbe8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cbec:	7e3b      	ldrb	r3, [r7, #24]
 800cbee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	4b33      	ldr	r3, [pc, #204]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cbf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cbfc:	7e3b      	ldrb	r3, [r7, #24]
 800cbfe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	461a      	mov	r2, r3
 800cc06:	4b2f      	ldr	r3, [pc, #188]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cc0c:	7e3b      	ldrb	r3, [r7, #24]
 800cc0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	4b2b      	ldr	r3, [pc, #172]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800cc1c:	7e7b      	ldrb	r3, [r7, #25]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4b28      	ldr	r3, [pc, #160]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc22:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cc24:	4b27      	ldr	r3, [pc, #156]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d102      	bne.n	800cc32 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cc2c:	4b25      	ldr	r3, [pc, #148]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc2e:	2201      	movs	r2, #1
 800cc30:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cc32:	4b24      	ldr	r3, [pc, #144]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc3a:	fb02 f303 	mul.w	r3, r2, r3
 800cc3e:	4a21      	ldr	r2, [pc, #132]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc40:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cc42:	4b20      	ldr	r3, [pc, #128]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc46:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800cc4a:	4a1e      	ldr	r2, [pc, #120]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc4c:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800cc4e:	4b1d      	ldr	r3, [pc, #116]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800cc56:	f107 0308 	add.w	r3, r7, #8
 800cc5a:	3312      	adds	r3, #18
 800cc5c:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800cc5e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	3b11      	subs	r3, #17
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800cc6c:	4b15      	ldr	r3, [pc, #84]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc72:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f006 f9e8 	bl	801304e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cc7e:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <ProcessRadioRxDone+0x2f8>)
 800cc80:	2202      	movs	r2, #2
 800cc82:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cc86:	2001      	movs	r0, #1
 800cc88:	f004 ff18 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00e      	beq.n	800ccb0 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800cc92:	2101      	movs	r1, #1
 800cc94:	2000      	movs	r0, #0
 800cc96:	f004 fe85 	bl	80119a4 <LoRaMacConfirmQueueSetStatus>
 800cc9a:	e009      	b.n	800ccb0 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	f004 ff0d 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d003      	beq.n	800ccb0 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800cca8:	2101      	movs	r1, #1
 800ccaa:	2007      	movs	r0, #7
 800ccac:	f004 fe7a 	bl	80119a4 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ccb0:	4a05      	ldr	r2, [pc, #20]	; (800ccc8 <ProcessRadioRxDone+0x2fc>)
 800ccb2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ccb6:	f043 0308 	orr.w	r3, r3, #8
 800ccba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800ccbe:	e2a5      	b.n	800d20c <ProcessRadioRxDone+0x840>
 800ccc0:	20001a34 	.word	0x20001a34
 800ccc4:	2000095c 	.word	0x2000095c
 800ccc8:	20000454 	.word	0x20000454
 800cccc:	0801c4cc 	.word	0x0801c4cc
 800ccd0:	200007ec 	.word	0x200007ec
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ccd4:	4bae      	ldr	r3, [pc, #696]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ccdc:	4bad      	ldr	r3, [pc, #692]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ccde:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800cce2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800cce6:	4baa      	ldr	r3, [pc, #680]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cce8:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800ccec:	b25b      	sxtb	r3, r3
 800ccee:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ccf2:	230d      	movs	r3, #13
 800ccf4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ccf8:	4ba6      	ldr	r3, [pc, #664]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ccfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d002      	beq.n	800cd08 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cd02:	230e      	movs	r3, #14
 800cd04:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cd08:	4ba2      	ldr	r3, [pc, #648]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cd0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd0e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cd12:	4611      	mov	r1, r2
 800cd14:	4618      	mov	r0, r3
 800cd16:	f006 f928 	bl	8012f6a <RegionGetPhyParam>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800cd1e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd22:	3b0d      	subs	r3, #13
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	b21b      	sxth	r3, r3
 800cd28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd2c:	b21a      	sxth	r2, r3
 800cd2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd30:	b21b      	sxth	r3, r3
 800cd32:	429a      	cmp	r2, r3
 800cd34:	dc03      	bgt.n	800cd3e <ProcessRadioRxDone+0x372>
 800cd36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd3a:	2b0b      	cmp	r3, #11
 800cd3c:	d806      	bhi.n	800cd4c <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd3e:	4b94      	ldr	r3, [pc, #592]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cd46:	f7ff fe1b 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cd4a:	e27e      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800cd4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd4e:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800cd50:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800cd5a:	4b8f      	ldr	r3, [pc, #572]	; (800cf98 <ProcessRadioRxDone+0x5cc>)
 800cd5c:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800cd5e:	23ff      	movs	r3, #255	; 0xff
 800cd60:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800cd64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f005 fe7c 	bl	8012a66 <LoRaMacParserData>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d006      	beq.n	800cd82 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd74:	4b86      	ldr	r3, [pc, #536]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cd7c:	f7ff fe00 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cd80:	e263      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	4a82      	ldr	r2, [pc, #520]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cd86:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800cd8a:	1cba      	adds	r2, r7, #2
 800cd8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd90:	4611      	mov	r1, r2
 800cd92:	4618      	mov	r0, r3
 800cd94:	f002 fcde 	bl	800f754 <DetermineFrameType>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d006      	beq.n	800cdac <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd9e:	4b7c      	ldr	r3, [pc, #496]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cda6:	f7ff fdeb 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cdaa:	e24e      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800cdbc:	e049      	b.n	800ce52 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cdbe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800cdc2:	4a74      	ldr	r2, [pc, #464]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cdc4:	212c      	movs	r1, #44	; 0x2c
 800cdc6:	fb01 f303 	mul.w	r3, r1, r3
 800cdca:	4413      	add	r3, r2
 800cdcc:	33d4      	adds	r3, #212	; 0xd4
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d138      	bne.n	800ce48 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800cdd6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800cdda:	4a6e      	ldr	r2, [pc, #440]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cddc:	212c      	movs	r1, #44	; 0x2c
 800cdde:	fb01 f303 	mul.w	r3, r1, r3
 800cde2:	4413      	add	r3, r2
 800cde4:	33d2      	adds	r3, #210	; 0xd2
 800cde6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d02d      	beq.n	800ce48 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800cdec:	2301      	movs	r3, #1
 800cdee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800cdf2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800cdf6:	4a67      	ldr	r2, [pc, #412]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cdf8:	212c      	movs	r1, #44	; 0x2c
 800cdfa:	fb01 f303 	mul.w	r3, r1, r3
 800cdfe:	4413      	add	r3, r2
 800ce00:	33d3      	adds	r3, #211	; 0xd3
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ce08:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce0c:	4a61      	ldr	r2, [pc, #388]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ce0e:	212c      	movs	r1, #44	; 0x2c
 800ce10:	fb01 f303 	mul.w	r3, r1, r3
 800ce14:	4413      	add	r3, r2
 800ce16:	33f0      	adds	r3, #240	; 0xf0
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ce1e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce22:	4a5c      	ldr	r2, [pc, #368]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ce24:	212c      	movs	r1, #44	; 0x2c
 800ce26:	fb01 f303 	mul.w	r3, r1, r3
 800ce2a:	4413      	add	r3, r2
 800ce2c:	33d4      	adds	r3, #212	; 0xd4
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ce34:	4b57      	ldr	r3, [pc, #348]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ce36:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d10e      	bne.n	800ce5c <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ce3e:	4b54      	ldr	r3, [pc, #336]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800ce40:	2203      	movs	r2, #3
 800ce42:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800ce46:	e009      	b.n	800ce5c <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce48:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800ce52:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d0b1      	beq.n	800cdbe <ProcessRadioRxDone+0x3f2>
 800ce5a:	e000      	b.n	800ce5e <ProcessRadioRxDone+0x492>
                    break;
 800ce5c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ce5e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d117      	bne.n	800ce96 <ProcessRadioRxDone+0x4ca>
 800ce66:	78bb      	ldrb	r3, [r7, #2]
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d10d      	bne.n	800ce88 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ce6c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce70:	f003 0320 	and.w	r3, r3, #32
 800ce74:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ce7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce82:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d006      	beq.n	800ce96 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce88:	4b41      	ldr	r3, [pc, #260]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ce90:	f7ff fd76 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800ce94:	e1d9      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ce96:	2315      	movs	r3, #21
 800ce98:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ce9c:	4b3d      	ldr	r3, [pc, #244]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ce9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cea2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cea6:	4611      	mov	r1, r2
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f006 f85e 	bl	8012f6a <RegionGetPhyParam>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ceb2:	78b9      	ldrb	r1, [r7, #2]
 800ceb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	4d36      	ldr	r5, [pc, #216]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800ceba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800cebe:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800cec2:	1d3a      	adds	r2, r7, #4
 800cec4:	9202      	str	r2, [sp, #8]
 800cec6:	1cfa      	adds	r2, r7, #3
 800cec8:	9201      	str	r2, [sp, #4]
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800ced0:	4622      	mov	r2, r4
 800ced2:	f000 fe95 	bl	800dc00 <GetFCntDown>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cedc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d031      	beq.n	800cf48 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800cee4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cee8:	2b07      	cmp	r3, #7
 800ceea:	d119      	bne.n	800cf20 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ceec:	4b28      	ldr	r3, [pc, #160]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800ceee:	2208      	movs	r2, #8
 800cef0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800cef4:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cef6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d11d      	bne.n	800cf3a <ProcessRadioRxDone+0x56e>
 800cefe:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800cf02:	f023 031f 	bic.w	r3, r3, #31
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2ba0      	cmp	r3, #160	; 0xa0
 800cf0a:	d116      	bne.n	800cf3a <ProcessRadioRxDone+0x56e>
 800cf0c:	4b21      	ldr	r3, [pc, #132]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cf0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d111      	bne.n	800cf3a <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800cf16:	4b1f      	ldr	r3, [pc, #124]	; (800cf94 <ProcessRadioRxDone+0x5c8>)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800cf1e:	e00c      	b.n	800cf3a <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800cf20:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf24:	2b08      	cmp	r3, #8
 800cf26:	d104      	bne.n	800cf32 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800cf28:	4b19      	ldr	r3, [pc, #100]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cf2a:	220a      	movs	r2, #10
 800cf2c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800cf30:	e003      	b.n	800cf3a <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf32:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a14      	ldr	r2, [pc, #80]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cf3e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800cf42:	f7ff fd1d 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cf46:	e180      	b.n	800d24a <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800cf48:	78fa      	ldrb	r2, [r7, #3]
 800cf4a:	6879      	ldr	r1, [r7, #4]
 800cf4c:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800cf50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	460b      	mov	r3, r1
 800cf58:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cf5c:	f005 fbd0 	bl	8012700 <LoRaMacCryptoUnsecureMessage>
 800cf60:	4603      	mov	r3, r0
 800cf62:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cf66:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d016      	beq.n	800cf9c <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800cf6e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d104      	bne.n	800cf80 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800cf76:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cf78:	220b      	movs	r2, #11
 800cf7a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800cf7e:	e003      	b.n	800cf88 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800cf80:	4b03      	ldr	r3, [pc, #12]	; (800cf90 <ProcessRadioRxDone+0x5c4>)
 800cf82:	220c      	movs	r2, #12
 800cf84:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800cf88:	f7ff fcfa 	bl	800c980 <PrepareRxDoneAbort>
                return;
 800cf8c:	e15d      	b.n	800d24a <ProcessRadioRxDone+0x87e>
 800cf8e:	bf00      	nop
 800cf90:	20000454 	.word	0x20000454
 800cf94:	2000095c 	.word	0x2000095c
 800cf98:	2000068c 	.word	0x2000068c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cf9c:	4bac      	ldr	r3, [pc, #688]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800cfa4:	4aaa      	ldr	r2, [pc, #680]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cfa6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800cfaa:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800cfae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cfb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	4ba5      	ldr	r3, [pc, #660]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cfbc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800cfc0:	4ba3      	ldr	r3, [pc, #652]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800cfc8:	4ba1      	ldr	r3, [pc, #644]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a9f      	ldr	r2, [pc, #636]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cfd4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cfd8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cfdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	bf14      	ite	ne
 800cfe6:	2301      	movne	r3, #1
 800cfe8:	2300      	moveq	r3, #0
 800cfea:	b2da      	uxtb	r2, r3
 800cfec:	4b98      	ldr	r3, [pc, #608]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cfee:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cff2:	4b97      	ldr	r3, [pc, #604]	; (800d250 <ProcessRadioRxDone+0x884>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cffa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cffe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	bf14      	ite	ne
 800d008:	2301      	movne	r3, #1
 800d00a:	2300      	moveq	r3, #0
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	4b90      	ldr	r3, [pc, #576]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d010:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d014:	4b8e      	ldr	r3, [pc, #568]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d016:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d01e:	4b8c      	ldr	r3, [pc, #560]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d020:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d024:	2b01      	cmp	r3, #1
 800d026:	d102      	bne.n	800d02e <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d028:	4b8a      	ldr	r3, [pc, #552]	; (800d254 <ProcessRadioRxDone+0x888>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d02e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d032:	2b01      	cmp	r3, #1
 800d034:	d104      	bne.n	800d040 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d036:	4b86      	ldr	r3, [pc, #536]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d038:	2202      	movs	r2, #2
 800d03a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d03e:	e01f      	b.n	800d080 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d040:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d044:	f023 031f 	bic.w	r3, r3, #31
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	2ba0      	cmp	r3, #160	; 0xa0
 800d04c:	d110      	bne.n	800d070 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d04e:	4b81      	ldr	r3, [pc, #516]	; (800d254 <ProcessRadioRxDone+0x888>)
 800d050:	2201      	movs	r2, #1
 800d052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d056:	4b7f      	ldr	r3, [pc, #508]	; (800d254 <ProcessRadioRxDone+0x888>)
 800d058:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d062:	4a7c      	ldr	r2, [pc, #496]	; (800d254 <ProcessRadioRxDone+0x888>)
 800d064:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d066:	4b7a      	ldr	r3, [pc, #488]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d06e:	e007      	b.n	800d080 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d070:	4b78      	ldr	r3, [pc, #480]	; (800d254 <ProcessRadioRxDone+0x888>)
 800d072:	2200      	movs	r2, #0
 800d074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d078:	4b75      	ldr	r3, [pc, #468]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d080:	4b73      	ldr	r3, [pc, #460]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d082:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d086:	4a72      	ldr	r2, [pc, #456]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d088:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800d08c:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800d090:	4618      	mov	r0, r3
 800d092:	f001 ff0d 	bl	800eeb0 <RemoveMacCommands>

            switch( fType )
 800d096:	78bb      	ldrb	r3, [r7, #2]
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d874      	bhi.n	800d186 <ProcessRadioRxDone+0x7ba>
 800d09c:	a201      	add	r2, pc, #4	; (adr r2, 800d0a4 <ProcessRadioRxDone+0x6d8>)
 800d09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a2:	bf00      	nop
 800d0a4:	0800d0b5 	.word	0x0800d0b5
 800d0a8:	0800d105 	.word	0x0800d105
 800d0ac:	0800d13b 	.word	0x0800d13b
 800d0b0:	0800d161 	.word	0x0800d161
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d0b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d0b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	461c      	mov	r4, r3
 800d0c0:	4b63      	ldr	r3, [pc, #396]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d0c2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d0c6:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d0ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d0ce:	f102 0010 	add.w	r0, r2, #16
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	2100      	movs	r1, #0
 800d0da:	f000 ff03 	bl	800dee4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0de:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d0e2:	4b5b      	ldr	r3, [pc, #364]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d0e4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0ea:	4a59      	ldr	r2, [pc, #356]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d0ec:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d0f0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d0f4:	4b56      	ldr	r3, [pc, #344]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d0f6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d0fa:	4b55      	ldr	r3, [pc, #340]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d102:	e047      	b.n	800d194 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d104:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d108:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	461c      	mov	r4, r3
 800d110:	4b4f      	ldr	r3, [pc, #316]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d112:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d116:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d11a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d11e:	f102 0010 	add.w	r0, r2, #16
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	460b      	mov	r3, r1
 800d126:	4622      	mov	r2, r4
 800d128:	2100      	movs	r1, #0
 800d12a:	f000 fedb 	bl	800dee4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d12e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d132:	4b47      	ldr	r3, [pc, #284]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d134:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d138:	e02c      	b.n	800d194 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d13a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d13c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d140:	4b43      	ldr	r3, [pc, #268]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d142:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d146:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	460b      	mov	r3, r1
 800d14e:	2100      	movs	r1, #0
 800d150:	f000 fec8 	bl	800dee4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d154:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d158:	4b3d      	ldr	r3, [pc, #244]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d15a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d15e:	e019      	b.n	800d194 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d160:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d164:	4b3a      	ldr	r3, [pc, #232]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d166:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16c:	4a38      	ldr	r2, [pc, #224]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d16e:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d172:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d176:	4b36      	ldr	r3, [pc, #216]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d178:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d17c:	4b34      	ldr	r3, [pc, #208]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d184:	e006      	b.n	800d194 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d186:	4b32      	ldr	r3, [pc, #200]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800d18e:	f7ff fbf7 	bl	800c980 <PrepareRxDoneAbort>
                    break;
 800d192:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d194:	4a2e      	ldr	r2, [pc, #184]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d196:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d19a:	f043 0302 	orr.w	r3, r3, #2
 800d19e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800d1a2:	e033      	b.n	800d20c <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d1a4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d1a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d1aa:	18d1      	adds	r1, r2, r3
 800d1ac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	4826      	ldr	r0, [pc, #152]	; (800d258 <ProcessRadioRxDone+0x88c>)
 800d1be:	f009 fdb4 	bl	8016d2a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d1c2:	4b23      	ldr	r3, [pc, #140]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d1c4:	2203      	movs	r2, #3
 800d1c6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d1ca:	4b21      	ldr	r3, [pc, #132]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d1d2:	4b1f      	ldr	r3, [pc, #124]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d1d4:	4a20      	ldr	r2, [pc, #128]	; (800d258 <ProcessRadioRxDone+0x88c>)
 800d1d6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d1da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	4b19      	ldr	r3, [pc, #100]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d1ea:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d1ee:	4a18      	ldr	r2, [pc, #96]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d1f0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d1f4:	f043 0302 	orr.w	r3, r3, #2
 800d1f8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800d1fc:	e006      	b.n	800d20c <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1fe:	4b14      	ldr	r3, [pc, #80]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d200:	2201      	movs	r2, #1
 800d202:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800d206:	f7ff fbbb 	bl	800c980 <PrepareRxDoneAbort>
            break;
 800d20a:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d20c:	4b10      	ldr	r3, [pc, #64]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d20e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d212:	2b00      	cmp	r3, #0
 800d214:	d008      	beq.n	800d228 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d216:	4b0e      	ldr	r3, [pc, #56]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d218:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00b      	beq.n	800d238 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d220:	2000      	movs	r0, #0
 800d222:	f000 fcb7 	bl	800db94 <OnAckTimeoutTimerEvent>
 800d226:	e007      	b.n	800d238 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d228:	4b0a      	ldr	r3, [pc, #40]	; (800d254 <ProcessRadioRxDone+0x888>)
 800d22a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d102      	bne.n	800d238 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d232:	2000      	movs	r0, #0
 800d234:	f000 fcae 	bl	800db94 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d238:	4a05      	ldr	r2, [pc, #20]	; (800d250 <ProcessRadioRxDone+0x884>)
 800d23a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d23e:	f043 0320 	orr.w	r3, r3, #32
 800d242:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d246:	f7ff fae9 	bl	800c81c <UpdateRxSlotIdleState>
}
 800d24a:	3788      	adds	r7, #136	; 0x88
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bdb0      	pop	{r4, r5, r7, pc}
 800d250:	20000454 	.word	0x20000454
 800d254:	2000095c 	.word	0x2000095c
 800d258:	2000068c 	.word	0x2000068c

0800d25c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d260:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <ProcessRadioTxTimeout+0x4c>)
 800d262:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d266:	2b02      	cmp	r3, #2
 800d268:	d002      	beq.n	800d270 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800d26a:	4b10      	ldr	r3, [pc, #64]	; (800d2ac <ProcessRadioTxTimeout+0x50>)
 800d26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800d270:	f7ff fad4 	bl	800c81c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d274:	4b0e      	ldr	r3, [pc, #56]	; (800d2b0 <ProcessRadioTxTimeout+0x54>)
 800d276:	2202      	movs	r2, #2
 800d278:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d27c:	2002      	movs	r0, #2
 800d27e:	f004 fbe9 	bl	8011a54 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d282:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <ProcessRadioTxTimeout+0x54>)
 800d284:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800d28c:	4b08      	ldr	r3, [pc, #32]	; (800d2b0 <ProcessRadioTxTimeout+0x54>)
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d294:	4a06      	ldr	r2, [pc, #24]	; (800d2b0 <ProcessRadioTxTimeout+0x54>)
 800d296:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d29a:	f043 0320 	orr.w	r3, r3, #32
 800d29e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800d2a2:	bf00      	nop
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	2000095c 	.word	0x2000095c
 800d2ac:	0801c4cc 	.word	0x0801c4cc
 800d2b0:	20000454 	.word	0x20000454

0800d2b4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	460a      	mov	r2, r1
 800d2be:	71fb      	strb	r3, [r7, #7]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d2c8:	4b40      	ldr	r3, [pc, #256]	; (800d3cc <HandleRadioRxErrorTimeout+0x118>)
 800d2ca:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d002      	beq.n	800d2d8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800d2d2:	4b3f      	ldr	r3, [pc, #252]	; (800d3d0 <HandleRadioRxErrorTimeout+0x11c>)
 800d2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d2d8:	f003 ff1d 	bl	8011116 <LoRaMacClassBIsBeaconExpected>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d007      	beq.n	800d2f2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d2e2:	2002      	movs	r0, #2
 800d2e4:	f003 fecb 	bl	801107e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f003 feed 	bl	80110c8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d2f2:	4b36      	ldr	r3, [pc, #216]	; (800d3cc <HandleRadioRxErrorTimeout+0x118>)
 800d2f4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d119      	bne.n	800d330 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d2fc:	f003 ff12 	bl	8011124 <LoRaMacClassBIsPingExpected>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d007      	beq.n	800d316 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d306:	2000      	movs	r0, #0
 800d308:	f003 fec3 	bl	8011092 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d30c:	2000      	movs	r0, #0
 800d30e:	f003 fee4 	bl	80110da <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d312:	2301      	movs	r3, #1
 800d314:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d316:	f003 ff0c 	bl	8011132 <LoRaMacClassBIsMulticastExpected>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d007      	beq.n	800d330 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d320:	2000      	movs	r0, #0
 800d322:	f003 fec0 	bl	80110a6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d326:	2000      	movs	r0, #0
 800d328:	f003 fee0 	bl	80110ec <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800d32c:	2301      	movs	r3, #1
 800d32e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	f083 0301 	eor.w	r3, r3, #1
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d040      	beq.n	800d3be <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d33c:	4b25      	ldr	r3, [pc, #148]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d33e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800d342:	2b00      	cmp	r3, #0
 800d344:	d122      	bne.n	800d38c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800d346:	4b23      	ldr	r3, [pc, #140]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d348:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d003      	beq.n	800d358 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d350:	4a20      	ldr	r2, [pc, #128]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d352:	79fb      	ldrb	r3, [r7, #7]
 800d354:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d358:	79fb      	ldrb	r3, [r7, #7]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f004 fb7a 	bl	8011a54 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d360:	4b1a      	ldr	r3, [pc, #104]	; (800d3cc <HandleRadioRxErrorTimeout+0x118>)
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	4618      	mov	r0, r3
 800d366:	f00d fe43 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 800d36a:	4602      	mov	r2, r0
 800d36c:	4b19      	ldr	r3, [pc, #100]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d36e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d372:	429a      	cmp	r2, r3
 800d374:	d323      	bcc.n	800d3be <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d376:	4818      	ldr	r0, [pc, #96]	; (800d3d8 <HandleRadioRxErrorTimeout+0x124>)
 800d378:	f00d fd0e 	bl	801ad98 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d37c:	4a15      	ldr	r2, [pc, #84]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d37e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d382:	f043 0320 	orr.w	r3, r3, #32
 800d386:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800d38a:	e018      	b.n	800d3be <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800d38c:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d38e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d396:	4a0f      	ldr	r2, [pc, #60]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d398:	79bb      	ldrb	r3, [r7, #6]
 800d39a:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d39e:	79bb      	ldrb	r3, [r7, #6]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f004 fb57 	bl	8011a54 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d3a6:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <HandleRadioRxErrorTimeout+0x118>)
 800d3a8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d006      	beq.n	800d3be <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d3b0:	4a08      	ldr	r2, [pc, #32]	; (800d3d4 <HandleRadioRxErrorTimeout+0x120>)
 800d3b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d3b6:	f043 0320 	orr.w	r3, r3, #32
 800d3ba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800d3be:	f7ff fa2d 	bl	800c81c <UpdateRxSlotIdleState>
}
 800d3c2:	bf00      	nop
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	2000095c 	.word	0x2000095c
 800d3d0:	0801c4cc 	.word	0x0801c4cc
 800d3d4:	20000454 	.word	0x20000454
 800d3d8:	200007ec 	.word	0x200007ec

0800d3dc <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d3e0:	2106      	movs	r1, #6
 800d3e2:	2005      	movs	r0, #5
 800d3e4:	f7ff ff66 	bl	800d2b4 <HandleRadioRxErrorTimeout>
}
 800d3e8:	bf00      	nop
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d3f0:	2104      	movs	r1, #4
 800d3f2:	2003      	movs	r0, #3
 800d3f4:	f7ff ff5e 	bl	800d2b4 <HandleRadioRxErrorTimeout>
}
 800d3f8:	bf00      	nop
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d402:	f3ef 8310 	mrs	r3, PRIMASK
 800d406:	607b      	str	r3, [r7, #4]
  return(result);
 800d408:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800d40a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d40c:	b672      	cpsid	i
}
 800d40e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800d410:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <LoRaMacHandleIrqEvents+0x8c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800d416:	4b1c      	ldr	r3, [pc, #112]	; (800d488 <LoRaMacHandleIrqEvents+0x8c>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	f383 8810 	msr	PRIMASK, r3
}
 800d426:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d027      	beq.n	800d47e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800d42e:	783b      	ldrb	r3, [r7, #0]
 800d430:	f003 0310 	and.w	r3, r3, #16
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800d43a:	f7ff fa07 	bl	800c84c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800d43e:	783b      	ldrb	r3, [r7, #0]
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800d44a:	f7ff fabf 	bl	800c9cc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800d44e:	783b      	ldrb	r3, [r7, #0]
 800d450:	f003 0304 	and.w	r3, r3, #4
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800d45a:	f7ff feff 	bl	800d25c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800d45e:	783b      	ldrb	r3, [r7, #0]
 800d460:	f003 0302 	and.w	r3, r3, #2
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800d46a:	f7ff ffb7 	bl	800d3dc <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800d46e:	783b      	ldrb	r3, [r7, #0]
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800d47a:	f7ff ffb7 	bl	800d3ec <ProcessRadioRxTimeout>
        }
    }
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	20000f6c 	.word	0x20000f6c

0800d48c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d490:	4b08      	ldr	r3, [pc, #32]	; (800d4b4 <LoRaMacIsBusy+0x28>)
 800d492:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d49a:	4b06      	ldr	r3, [pc, #24]	; (800d4b4 <LoRaMacIsBusy+0x28>)
 800d49c:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d101      	bne.n	800d4a8 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e000      	b.n	800d4aa <LoRaMacIsBusy+0x1e>
    }
    return true;
 800d4a8:	2301      	movs	r3, #1
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bc80      	pop	{r7}
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	20000454 	.word	0x20000454

0800d4b8 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800d4c2:	4a04      	ldr	r2, [pc, #16]	; (800d4d4 <LoRaMacEnableRequests+0x1c>)
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800d4ca:	bf00      	nop
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bc80      	pop	{r7}
 800d4d2:	4770      	bx	lr
 800d4d4:	20000454 	.word	0x20000454

0800d4d8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800d4de:	4b2c      	ldr	r3, [pc, #176]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d4e0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d4e4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800d4e6:	4b2a      	ldr	r3, [pc, #168]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d4e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d14a      	bne.n	800d586 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d4f0:	4b27      	ldr	r3, [pc, #156]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d4f2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d006      	beq.n	800d50e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d500:	4a23      	ldr	r2, [pc, #140]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d502:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d506:	f36f 0300 	bfc	r3, #0, #1
 800d50a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d50e:	4b20      	ldr	r3, [pc, #128]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d510:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d514:	f003 0304 	and.w	r3, r3, #4
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d006      	beq.n	800d52c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d51e:	4a1c      	ldr	r2, [pc, #112]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d520:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d524:	f36f 0382 	bfc	r3, #2, #1
 800d528:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d52c:	2001      	movs	r0, #1
 800d52e:	f7ff ffc3 	bl	800d4b8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800d532:	793b      	ldrb	r3, [r7, #4]
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d005      	beq.n	800d54a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d53e:	4b14      	ldr	r3, [pc, #80]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d540:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4813      	ldr	r0, [pc, #76]	; (800d594 <LoRaMacHandleRequestEvents+0xbc>)
 800d548:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800d54a:	793b      	ldrb	r3, [r7, #4]
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00e      	beq.n	800d574 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d556:	4810      	ldr	r0, [pc, #64]	; (800d598 <LoRaMacHandleRequestEvents+0xc0>)
 800d558:	f004 faca 	bl	8011af0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d55c:	f004 fb14 	bl	8011b88 <LoRaMacConfirmQueueGetCnt>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d006      	beq.n	800d574 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d566:	4a0a      	ldr	r2, [pc, #40]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d568:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d56c:	f043 0304 	orr.w	r3, r3, #4
 800d570:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800d574:	f003 fdfb 	bl	801116e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d578:	4a05      	ldr	r2, [pc, #20]	; (800d590 <LoRaMacHandleRequestEvents+0xb8>)
 800d57a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d57e:	f36f 1345 	bfc	r3, #5, #1
 800d582:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800d586:	bf00      	nop
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	20000454 	.word	0x20000454
 800d594:	2000088c 	.word	0x2000088c
 800d598:	200008a0 	.word	0x200008a0

0800d59c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d5a2:	4b0a      	ldr	r3, [pc, #40]	; (800d5cc <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800d5a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10a      	bne.n	800d5c2 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800d5b0:	1dfb      	adds	r3, r7, #7
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f004 f882 	bl	80116bc <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800d5be:	f000 fc81 	bl	800dec4 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20000454 	.word	0x20000454

0800d5d0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b088      	sub	sp, #32
 800d5d4:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800d5d6:	4b25      	ldr	r3, [pc, #148]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d5d8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d5dc:	f003 0308 	and.w	r3, r3, #8
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00d      	beq.n	800d602 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800d5e6:	4a21      	ldr	r2, [pc, #132]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d5e8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d5ec:	f36f 03c3 	bfc	r3, #3, #1
 800d5f0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800d5f4:	4b1d      	ldr	r3, [pc, #116]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d5f6:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	491c      	ldr	r1, [pc, #112]	; (800d670 <LoRaMacHandleIndicationEvents+0xa0>)
 800d5fe:	481d      	ldr	r0, [pc, #116]	; (800d674 <LoRaMacHandleIndicationEvents+0xa4>)
 800d600:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800d602:	4b1a      	ldr	r3, [pc, #104]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d604:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d608:	f003 0310 	and.w	r3, r3, #16
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d012      	beq.n	800d638 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800d612:	2307      	movs	r3, #7
 800d614:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800d61a:	4b14      	ldr	r3, [pc, #80]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d61c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	1d3a      	adds	r2, r7, #4
 800d624:	4912      	ldr	r1, [pc, #72]	; (800d670 <LoRaMacHandleIndicationEvents+0xa0>)
 800d626:	4610      	mov	r0, r2
 800d628:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800d62a:	4a10      	ldr	r2, [pc, #64]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d62c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d630:	f36f 1304 	bfc	r3, #4, #1
 800d634:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d638:	4b0c      	ldr	r3, [pc, #48]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d63a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00d      	beq.n	800d664 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800d648:	4a08      	ldr	r2, [pc, #32]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d64a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d64e:	f36f 0341 	bfc	r3, #1, #1
 800d652:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800d656:	4b05      	ldr	r3, [pc, #20]	; (800d66c <LoRaMacHandleIndicationEvents+0x9c>)
 800d658:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	4904      	ldr	r1, [pc, #16]	; (800d670 <LoRaMacHandleIndicationEvents+0xa0>)
 800d660:	4805      	ldr	r0, [pc, #20]	; (800d678 <LoRaMacHandleIndicationEvents+0xa8>)
 800d662:	4798      	blx	r3
    }
}
 800d664:	bf00      	nop
 800d666:	3720      	adds	r7, #32
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	20000454 	.word	0x20000454
 800d670:	200008d0 	.word	0x200008d0
 800d674:	200008b4 	.word	0x200008b4
 800d678:	20000870 	.word	0x20000870

0800d67c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d682:	4b32      	ldr	r3, [pc, #200]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d684:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d058      	beq.n	800d744 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800d692:	2300      	movs	r3, #0
 800d694:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800d696:	2300      	movs	r3, #0
 800d698:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d69a:	4b2c      	ldr	r3, [pc, #176]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d69c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800d6a4:	4b29      	ldr	r3, [pc, #164]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d6a6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d104      	bne.n	800d6b8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d6ae:	f002 f89f 	bl	800f7f0 <CheckRetransUnconfirmedUplink>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	71fb      	strb	r3, [r7, #7]
 800d6b6:	e020      	b.n	800d6fa <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d6b8:	4b24      	ldr	r3, [pc, #144]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d6ba:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d11b      	bne.n	800d6fa <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800d6c2:	4b22      	ldr	r3, [pc, #136]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d6c4:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d014      	beq.n	800d6f6 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d6cc:	f002 f8bc 	bl	800f848 <CheckRetransConfirmedUplink>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d6d4:	4b1e      	ldr	r3, [pc, #120]	; (800d750 <LoRaMacHandleMcpsRequest+0xd4>)
 800d6d6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10d      	bne.n	800d6fa <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	f083 0301 	eor.w	r3, r3, #1
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800d6ea:	f002 f929 	bl	800f940 <AckTimeoutRetriesProcess>
 800d6ee:	e004      	b.n	800d6fa <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800d6f0:	f002 f964 	bl	800f9bc <AckTimeoutRetriesFinalize>
 800d6f4:	e001      	b.n	800d6fa <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00d      	beq.n	800d71c <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800d700:	4814      	ldr	r0, [pc, #80]	; (800d754 <LoRaMacHandleMcpsRequest+0xd8>)
 800d702:	f00d fb49 	bl	801ad98 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d706:	4b11      	ldr	r3, [pc, #68]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d708:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d70c:	f023 0320 	bic.w	r3, r3, #32
 800d710:	4a0e      	ldr	r2, [pc, #56]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d712:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800d716:	f002 f8b9 	bl	800f88c <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800d71a:	e013      	b.n	800d744 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800d71c:	79bb      	ldrb	r3, [r7, #6]
 800d71e:	f083 0301 	eor.w	r3, r3, #1
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00d      	beq.n	800d744 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d728:	4a08      	ldr	r2, [pc, #32]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d72a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d72e:	f36f 1345 	bfc	r3, #5, #1
 800d732:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800d736:	4b05      	ldr	r3, [pc, #20]	; (800d74c <LoRaMacHandleMcpsRequest+0xd0>)
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800d73e:	2000      	movs	r0, #0
 800d740:	f000 f97e 	bl	800da40 <OnTxDelayedTimerEvent>
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20000454 	.word	0x20000454
 800d750:	2000095c 	.word	0x2000095c
 800d754:	200007bc 	.word	0x200007bc

0800d758 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d75c:	4b1b      	ldr	r3, [pc, #108]	; (800d7cc <LoRaMacHandleMlmeRequest+0x74>)
 800d75e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d762:	f003 0304 	and.w	r3, r3, #4
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d02c      	beq.n	800d7c6 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d76c:	2001      	movs	r0, #1
 800d76e:	f004 f9a5 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d012      	beq.n	800d79e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800d778:	2001      	movs	r0, #1
 800d77a:	f004 f941 	bl	8011a00 <LoRaMacConfirmQueueGetStatus>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d103      	bne.n	800d78c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800d784:	4b11      	ldr	r3, [pc, #68]	; (800d7cc <LoRaMacHandleMlmeRequest+0x74>)
 800d786:	2200      	movs	r2, #0
 800d788:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d78c:	4b0f      	ldr	r3, [pc, #60]	; (800d7cc <LoRaMacHandleMlmeRequest+0x74>)
 800d78e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d792:	f023 0302 	bic.w	r3, r3, #2
 800d796:	4a0d      	ldr	r2, [pc, #52]	; (800d7cc <LoRaMacHandleMlmeRequest+0x74>)
 800d798:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800d79c:	e013      	b.n	800d7c6 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800d79e:	2005      	movs	r0, #5
 800d7a0:	f004 f98c 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d105      	bne.n	800d7b6 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800d7aa:	2006      	movs	r0, #6
 800d7ac:	f004 f986 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800d7b0:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d007      	beq.n	800d7c6 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d7b6:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <LoRaMacHandleMlmeRequest+0x74>)
 800d7b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7bc:	f023 0302 	bic.w	r3, r3, #2
 800d7c0:	4a02      	ldr	r2, [pc, #8]	; (800d7cc <LoRaMacHandleMlmeRequest+0x74>)
 800d7c2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800d7c6:	bf00      	nop
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20000454 	.word	0x20000454

0800d7d0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800d7d4:	200c      	movs	r0, #12
 800d7d6:	f004 f971 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d019      	beq.n	800d814 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800d7e0:	4b0e      	ldr	r3, [pc, #56]	; (800d81c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d7e2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d111      	bne.n	800d814 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d7f0:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d7f2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d7f6:	f003 0304 	and.w	r3, r3, #4
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d800:	4b06      	ldr	r3, [pc, #24]	; (800d81c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d802:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d806:	f023 0302 	bic.w	r3, r3, #2
 800d80a:	4a04      	ldr	r2, [pc, #16]	; (800d81c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d80c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800d810:	2301      	movs	r3, #1
 800d812:	e000      	b.n	800d816 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20000454 	.word	0x20000454

0800d820 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800d824:	4b0d      	ldr	r3, [pc, #52]	; (800d85c <LoRaMacCheckForRxAbort+0x3c>)
 800d826:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00f      	beq.n	800d852 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800d832:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <LoRaMacCheckForRxAbort+0x3c>)
 800d834:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d83c:	4a07      	ldr	r2, [pc, #28]	; (800d85c <LoRaMacCheckForRxAbort+0x3c>)
 800d83e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d842:	4b06      	ldr	r3, [pc, #24]	; (800d85c <LoRaMacCheckForRxAbort+0x3c>)
 800d844:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d848:	f023 0302 	bic.w	r3, r3, #2
 800d84c:	4a03      	ldr	r2, [pc, #12]	; (800d85c <LoRaMacCheckForRxAbort+0x3c>)
 800d84e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800d852:	bf00      	nop
 800d854:	46bd      	mov	sp, r7
 800d856:	bc80      	pop	{r7}
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	20000454 	.word	0x20000454

0800d860 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d86c:	2300      	movs	r3, #0
 800d86e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800d870:	4b50      	ldr	r3, [pc, #320]	; (800d9b4 <LoRaMacHandleNvm+0x154>)
 800d872:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d876:	2b00      	cmp	r3, #0
 800d878:	f040 8098 	bne.w	800d9ac <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2124      	movs	r1, #36	; 0x24
 800d880:	4618      	mov	r0, r3
 800d882:	f009 faa7 	bl	8016dd4 <Crc32>
 800d886:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d006      	beq.n	800d8a0 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800d898:	89fb      	ldrh	r3, [r7, #14]
 800d89a:	f043 0301 	orr.w	r3, r3, #1
 800d89e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3328      	adds	r3, #40	; 0x28
 800d8a4:	2114      	movs	r1, #20
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f009 fa94 	bl	8016dd4 <Crc32>
 800d8ac:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d006      	beq.n	800d8c6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800d8be:	89fb      	ldrh	r3, [r7, #14]
 800d8c0:	f043 0302 	orr.w	r3, r3, #2
 800d8c4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3340      	adds	r3, #64	; 0x40
 800d8ca:	21d4      	movs	r1, #212	; 0xd4
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f009 fa81 	bl	8016dd4 <Crc32>
 800d8d2:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d007      	beq.n	800d8f0 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800d8e8:	89fb      	ldrh	r3, [r7, #14]
 800d8ea:	f043 0304 	orr.w	r3, r3, #4
 800d8ee:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800d8f6:	21bc      	movs	r1, #188	; 0xbc
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f009 fa6b 	bl	8016dd4 <Crc32>
 800d8fe:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d007      	beq.n	800d91c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800d914:	89fb      	ldrh	r3, [r7, #14]
 800d916:	f043 0308 	orr.w	r3, r3, #8
 800d91a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d922:	21a0      	movs	r1, #160	; 0xa0
 800d924:	4618      	mov	r0, r3
 800d926:	f009 fa55 	bl	8016dd4 <Crc32>
 800d92a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	429a      	cmp	r2, r3
 800d936:	d007      	beq.n	800d948 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800d940:	89fb      	ldrh	r3, [r7, #14]
 800d942:	f043 0310 	orr.w	r3, r3, #16
 800d946:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800d94e:	f44f 715e 	mov.w	r1, #888	; 0x378
 800d952:	4618      	mov	r0, r3
 800d954:	f009 fa3e 	bl	8016dd4 <Crc32>
 800d958:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	429a      	cmp	r2, r3
 800d964:	d007      	beq.n	800d976 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800d96e:	89fb      	ldrh	r3, [r7, #14]
 800d970:	f043 0320 	orr.w	r3, r3, #32
 800d974:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800d97c:	2114      	movs	r1, #20
 800d97e:	4618      	mov	r0, r3
 800d980:	f009 fa28 	bl	8016dd4 <Crc32>
 800d984:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d007      	beq.n	800d9a2 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800d99a:	89fb      	ldrh	r3, [r7, #14]
 800d99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a0:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800d9a2:	89fb      	ldrh	r3, [r7, #14]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f001 ffad 	bl	800f904 <CallNvmDataChangeCallback>
 800d9aa:	e000      	b.n	800d9ae <LoRaMacHandleNvm+0x14e>
        return;
 800d9ac:	bf00      	nop
}
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20000454 	.word	0x20000454

0800d9b8 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800d9c2:	f7ff fd1b 	bl	800d3fc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800d9c6:	f003 fc36 	bl	8011236 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800d9ca:	4b1b      	ldr	r3, [pc, #108]	; (800da38 <LoRaMacProcess+0x80>)
 800d9cc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d9d0:	f003 0320 	and.w	r3, r3, #32
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d021      	beq.n	800da1e <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800d9da:	2000      	movs	r0, #0
 800d9dc:	f7ff fd6c 	bl	800d4b8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800d9e0:	f7ff ff1e 	bl	800d820 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800d9e4:	f002 f81e 	bl	800fa24 <IsRequestPending>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d006      	beq.n	800d9fc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800d9ee:	f7ff feef 	bl	800d7d0 <LoRaMacCheckForBeaconAcquisition>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	79fb      	ldrb	r3, [r7, #7]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d103      	bne.n	800da0a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800da02:	f7ff fea9 	bl	800d758 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800da06:	f7ff fe39 	bl	800d67c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800da0a:	f7ff fd65 	bl	800d4d8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800da0e:	f7ff fdc5 	bl	800d59c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800da12:	480a      	ldr	r0, [pc, #40]	; (800da3c <LoRaMacProcess+0x84>)
 800da14:	f7ff ff24 	bl	800d860 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800da18:	2001      	movs	r0, #1
 800da1a:	f7ff fd4d 	bl	800d4b8 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800da1e:	f7ff fdd7 	bl	800d5d0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800da22:	4b05      	ldr	r3, [pc, #20]	; (800da38 <LoRaMacProcess+0x80>)
 800da24:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d101      	bne.n	800da30 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800da2c:	f001 fb7c 	bl	800f128 <OpenContinuousRxCWindow>
    }
}
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000454 	.word	0x20000454
 800da3c:	2000095c 	.word	0x2000095c

0800da40 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800da48:	4817      	ldr	r0, [pc, #92]	; (800daa8 <OnTxDelayedTimerEvent+0x68>)
 800da4a:	f00d f9a5 	bl	801ad98 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800da4e:	4b17      	ldr	r3, [pc, #92]	; (800daac <OnTxDelayedTimerEvent+0x6c>)
 800da50:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da54:	f023 0320 	bic.w	r3, r3, #32
 800da58:	4a14      	ldr	r2, [pc, #80]	; (800daac <OnTxDelayedTimerEvent+0x6c>)
 800da5a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800da5e:	2001      	movs	r0, #1
 800da60:	f001 f8fc 	bl	800ec5c <ScheduleTx>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d018      	beq.n	800da9c <OnTxDelayedTimerEvent+0x5c>
 800da6a:	2b0b      	cmp	r3, #11
 800da6c:	d016      	beq.n	800da9c <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800da6e:	4b10      	ldr	r3, [pc, #64]	; (800dab0 <OnTxDelayedTimerEvent+0x70>)
 800da70:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800da74:	b2da      	uxtb	r2, r3
 800da76:	4b0d      	ldr	r3, [pc, #52]	; (800daac <OnTxDelayedTimerEvent+0x6c>)
 800da78:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800da7c:	4b0b      	ldr	r3, [pc, #44]	; (800daac <OnTxDelayedTimerEvent+0x6c>)
 800da7e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800da82:	4b0a      	ldr	r3, [pc, #40]	; (800daac <OnTxDelayedTimerEvent+0x6c>)
 800da84:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800da88:	4b08      	ldr	r3, [pc, #32]	; (800daac <OnTxDelayedTimerEvent+0x6c>)
 800da8a:	2209      	movs	r2, #9
 800da8c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800da90:	2009      	movs	r0, #9
 800da92:	f003 ffdf 	bl	8011a54 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800da96:	f001 fef9 	bl	800f88c <StopRetransmission>
            break;
 800da9a:	e000      	b.n	800da9e <OnTxDelayedTimerEvent+0x5e>
            break;
 800da9c:	bf00      	nop
        }
    }
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	200007bc 	.word	0x200007bc
 800daac:	20000454 	.word	0x20000454
 800dab0:	2000095c 	.word	0x2000095c

0800dab4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800dabc:	4b14      	ldr	r3, [pc, #80]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800dabe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800dac2:	4b13      	ldr	r3, [pc, #76]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800dac4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800dac8:	4b12      	ldr	r3, [pc, #72]	; (800db14 <OnRxWindow1TimerEvent+0x60>)
 800daca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800dace:	b25a      	sxtb	r2, r3
 800dad0:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800dad2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dad6:	4b0f      	ldr	r3, [pc, #60]	; (800db14 <OnRxWindow1TimerEvent+0x60>)
 800dad8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dadc:	4b0c      	ldr	r3, [pc, #48]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800dade:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800dae2:	4b0c      	ldr	r3, [pc, #48]	; (800db14 <OnRxWindow1TimerEvent+0x60>)
 800dae4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800dae8:	4b09      	ldr	r3, [pc, #36]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800daea:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800daee:	4b08      	ldr	r3, [pc, #32]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800daf6:	4b06      	ldr	r3, [pc, #24]	; (800db10 <OnRxWindow1TimerEvent+0x5c>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800dafe:	4906      	ldr	r1, [pc, #24]	; (800db18 <OnRxWindow1TimerEvent+0x64>)
 800db00:	4806      	ldr	r0, [pc, #24]	; (800db1c <OnRxWindow1TimerEvent+0x68>)
 800db02:	f001 fae3 	bl	800f0cc <RxWindowSetup>
}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20000454 	.word	0x20000454
 800db14:	2000095c 	.word	0x2000095c
 800db18:	2000080c 	.word	0x2000080c
 800db1c:	200007d4 	.word	0x200007d4

0800db20 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800db28:	4b16      	ldr	r3, [pc, #88]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db2a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d023      	beq.n	800db7a <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800db32:	4b14      	ldr	r3, [pc, #80]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db34:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800db38:	4b12      	ldr	r3, [pc, #72]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db3a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800db3e:	4b12      	ldr	r3, [pc, #72]	; (800db88 <OnRxWindow2TimerEvent+0x68>)
 800db40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db42:	4a10      	ldr	r2, [pc, #64]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db44:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800db48:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <OnRxWindow2TimerEvent+0x68>)
 800db4a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800db4e:	4b0d      	ldr	r3, [pc, #52]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db50:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800db54:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <OnRxWindow2TimerEvent+0x68>)
 800db56:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800db5a:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db5c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800db60:	4b08      	ldr	r3, [pc, #32]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db62:	2200      	movs	r2, #0
 800db64:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800db68:	4b06      	ldr	r3, [pc, #24]	; (800db84 <OnRxWindow2TimerEvent+0x64>)
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800db70:	4906      	ldr	r1, [pc, #24]	; (800db8c <OnRxWindow2TimerEvent+0x6c>)
 800db72:	4807      	ldr	r0, [pc, #28]	; (800db90 <OnRxWindow2TimerEvent+0x70>)
 800db74:	f001 faaa 	bl	800f0cc <RxWindowSetup>
 800db78:	e000      	b.n	800db7c <OnRxWindow2TimerEvent+0x5c>
        return;
 800db7a:	bf00      	nop
}
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	20000454 	.word	0x20000454
 800db88:	2000095c 	.word	0x2000095c
 800db8c:	20000820 	.word	0x20000820
 800db90:	200007ec 	.word	0x200007ec

0800db94 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800db9c:	4815      	ldr	r0, [pc, #84]	; (800dbf4 <OnAckTimeoutTimerEvent+0x60>)
 800db9e:	f00d f8fb 	bl	801ad98 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800dba2:	4b15      	ldr	r3, [pc, #84]	; (800dbf8 <OnAckTimeoutTimerEvent+0x64>)
 800dba4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800dbac:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <OnAckTimeoutTimerEvent+0x64>)
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dbb4:	4b11      	ldr	r3, [pc, #68]	; (800dbfc <OnAckTimeoutTimerEvent+0x68>)
 800dbb6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d106      	bne.n	800dbcc <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800dbbe:	4a0e      	ldr	r2, [pc, #56]	; (800dbf8 <OnAckTimeoutTimerEvent+0x64>)
 800dbc0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dbc4:	f043 0320 	orr.w	r3, r3, #32
 800dbc8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <OnAckTimeoutTimerEvent+0x64>)
 800dbce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00a      	beq.n	800dbec <OnAckTimeoutTimerEvent+0x58>
 800dbd6:	4b08      	ldr	r3, [pc, #32]	; (800dbf8 <OnAckTimeoutTimerEvent+0x64>)
 800dbd8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d004      	beq.n	800dbec <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dbe2:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <OnAckTimeoutTimerEvent+0x64>)
 800dbe4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	4798      	blx	r3
    }
}
 800dbec:	bf00      	nop
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	2000084c 	.word	0x2000084c
 800dbf8:	20000454 	.word	0x20000454
 800dbfc:	2000095c 	.word	0x2000095c

0800dc00 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60ba      	str	r2, [r7, #8]
 800dc08:	607b      	str	r3, [r7, #4]
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	73fb      	strb	r3, [r7, #15]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <GetFCntDown+0x24>
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d002      	beq.n	800dc24 <GetFCntDown+0x24>
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dc24:	230a      	movs	r3, #10
 800dc26:	e029      	b.n	800dc7c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d016      	beq.n	800dc5c <GetFCntDown+0x5c>
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d118      	bne.n	800dc64 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800dc32:	79bb      	ldrb	r3, [r7, #6]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d10d      	bne.n	800dc54 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <GetFCntDown+0x44>
 800dc3e:	7bbb      	ldrb	r3, [r7, #14]
 800dc40:	2b03      	cmp	r3, #3
 800dc42:	d103      	bne.n	800dc4c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	2202      	movs	r2, #2
 800dc48:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800dc4a:	e00d      	b.n	800dc68 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	701a      	strb	r2, [r3, #0]
            break;
 800dc52:	e009      	b.n	800dc68 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	2203      	movs	r2, #3
 800dc58:	701a      	strb	r2, [r3, #0]
            break;
 800dc5a:	e005      	b.n	800dc68 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	2204      	movs	r2, #4
 800dc60:	701a      	strb	r2, [r3, #0]
            break;
 800dc62:	e001      	b.n	800dc68 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800dc64:	2305      	movs	r3, #5
 800dc66:	e009      	b.n	800dc7c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	7818      	ldrb	r0, [r3, #0]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	89db      	ldrh	r3, [r3, #14]
 800dc70:	461a      	mov	r2, r3
 800dc72:	8b39      	ldrh	r1, [r7, #24]
 800dc74:	6a3b      	ldr	r3, [r7, #32]
 800dc76:	f004 faf1 	bl	801225c <LoRaMacCryptoGetFCntDown>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800dc84:	b5b0      	push	{r4, r5, r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800dc92:	4b61      	ldr	r3, [pc, #388]	; (800de18 <SwitchClass+0x194>)
 800dc94:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	f000 80a5 	beq.w	800dde8 <SwitchClass+0x164>
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	f300 80b4 	bgt.w	800de0c <SwitchClass+0x188>
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d003      	beq.n	800dcb0 <SwitchClass+0x2c>
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	f000 808f 	beq.w	800ddcc <SwitchClass+0x148>
 800dcae:	e0ad      	b.n	800de0c <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800dcb0:	79fb      	ldrb	r3, [r7, #7]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d107      	bne.n	800dcc6 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800dcb6:	4b58      	ldr	r3, [pc, #352]	; (800de18 <SwitchClass+0x194>)
 800dcb8:	4a57      	ldr	r2, [pc, #348]	; (800de18 <SwitchClass+0x194>)
 800dcba:	336c      	adds	r3, #108	; 0x6c
 800dcbc:	3264      	adds	r2, #100	; 0x64
 800dcbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dcc2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d10c      	bne.n	800dce6 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800dccc:	79fb      	ldrb	r3, [r7, #7]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f003 fa53 	bl	801117a <LoRaMacClassBSwitchClass>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d103      	bne.n	800dce6 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800dcde:	4a4e      	ldr	r2, [pc, #312]	; (800de18 <SwitchClass+0x194>)
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	f040 808a 	bne.w	800de02 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800dcee:	4a4a      	ldr	r2, [pc, #296]	; (800de18 <SwitchClass+0x194>)
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800dcf6:	4a49      	ldr	r2, [pc, #292]	; (800de1c <SwitchClass+0x198>)
 800dcf8:	4b48      	ldr	r3, [pc, #288]	; (800de1c <SwitchClass+0x198>)
 800dcfa:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800dcfe:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800dd02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd06:	682b      	ldr	r3, [r5, #0]
 800dd08:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dd0a:	4b44      	ldr	r3, [pc, #272]	; (800de1c <SwitchClass+0x198>)
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd12:	2300      	movs	r3, #0
 800dd14:	73bb      	strb	r3, [r7, #14]
 800dd16:	e049      	b.n	800ddac <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800dd18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd1c:	4a3e      	ldr	r2, [pc, #248]	; (800de18 <SwitchClass+0x194>)
 800dd1e:	212c      	movs	r1, #44	; 0x2c
 800dd20:	fb01 f303 	mul.w	r3, r1, r3
 800dd24:	4413      	add	r3, r2
 800dd26:	33d2      	adds	r3, #210	; 0xd2
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d038      	beq.n	800dda0 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800dd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd32:	4a39      	ldr	r2, [pc, #228]	; (800de18 <SwitchClass+0x194>)
 800dd34:	212c      	movs	r1, #44	; 0x2c
 800dd36:	fb01 f303 	mul.w	r3, r1, r3
 800dd3a:	4413      	add	r3, r2
 800dd3c:	33e8      	adds	r3, #232	; 0xe8
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a35      	ldr	r2, [pc, #212]	; (800de18 <SwitchClass+0x194>)
 800dd42:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800dd44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd48:	4a33      	ldr	r2, [pc, #204]	; (800de18 <SwitchClass+0x194>)
 800dd4a:	212c      	movs	r1, #44	; 0x2c
 800dd4c:	fb01 f303 	mul.w	r3, r1, r3
 800dd50:	4413      	add	r3, r2
 800dd52:	33ec      	adds	r3, #236	; 0xec
 800dd54:	f993 3000 	ldrsb.w	r3, [r3]
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	4b2f      	ldr	r3, [pc, #188]	; (800de18 <SwitchClass+0x194>)
 800dd5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800dd60:	4b2e      	ldr	r3, [pc, #184]	; (800de1c <SwitchClass+0x198>)
 800dd62:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800dd66:	4b2d      	ldr	r3, [pc, #180]	; (800de1c <SwitchClass+0x198>)
 800dd68:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800dd6c:	4b2a      	ldr	r3, [pc, #168]	; (800de18 <SwitchClass+0x194>)
 800dd6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd70:	4a2a      	ldr	r2, [pc, #168]	; (800de1c <SwitchClass+0x198>)
 800dd72:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dd76:	4b28      	ldr	r3, [pc, #160]	; (800de18 <SwitchClass+0x194>)
 800dd78:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dd7c:	4b27      	ldr	r3, [pc, #156]	; (800de1c <SwitchClass+0x198>)
 800dd7e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800dd82:	4b25      	ldr	r3, [pc, #148]	; (800de18 <SwitchClass+0x194>)
 800dd84:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800dd88:	4b24      	ldr	r3, [pc, #144]	; (800de1c <SwitchClass+0x198>)
 800dd8a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dd8e:	4b23      	ldr	r3, [pc, #140]	; (800de1c <SwitchClass+0x198>)
 800dd90:	2203      	movs	r2, #3
 800dd92:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800dd96:	4b21      	ldr	r3, [pc, #132]	; (800de1c <SwitchClass+0x198>)
 800dd98:	2201      	movs	r2, #1
 800dd9a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800dd9e:	e009      	b.n	800ddb4 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dda0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	3301      	adds	r3, #1
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	73bb      	strb	r3, [r7, #14]
 800ddac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	ddb1      	ble.n	800dd18 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ddb4:	4b19      	ldr	r3, [pc, #100]	; (800de1c <SwitchClass+0x198>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ddbc:	4b18      	ldr	r3, [pc, #96]	; (800de20 <SwitchClass+0x19c>)
 800ddbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ddc2:	f001 f9b1 	bl	800f128 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ddca:	e01a      	b.n	800de02 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ddcc:	79fb      	ldrb	r3, [r7, #7]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f003 f9d3 	bl	801117a <LoRaMacClassBSwitchClass>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ddd8:	7bfb      	ldrb	r3, [r7, #15]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d113      	bne.n	800de06 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ddde:	4a0e      	ldr	r2, [pc, #56]	; (800de18 <SwitchClass+0x194>)
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800dde6:	e00e      	b.n	800de06 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800dde8:	79fb      	ldrb	r3, [r7, #7]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10d      	bne.n	800de0a <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ddee:	4a0a      	ldr	r2, [pc, #40]	; (800de18 <SwitchClass+0x194>)
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ddf6:	4b0a      	ldr	r3, [pc, #40]	; (800de20 <SwitchClass+0x19c>)
 800ddf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfa:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800de00:	e003      	b.n	800de0a <SwitchClass+0x186>
            break;
 800de02:	bf00      	nop
 800de04:	e002      	b.n	800de0c <SwitchClass+0x188>
            break;
 800de06:	bf00      	nop
 800de08:	e000      	b.n	800de0c <SwitchClass+0x188>
            break;
 800de0a:	bf00      	nop
        }
    }

    return status;
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bdb0      	pop	{r4, r5, r7, pc}
 800de16:	bf00      	nop
 800de18:	2000095c 	.word	0x2000095c
 800de1c:	20000454 	.word	0x20000454
 800de20:	0801c4cc 	.word	0x0801c4cc

0800de24 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	4603      	mov	r3, r0
 800de2c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800de2e:	4b10      	ldr	r3, [pc, #64]	; (800de70 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800de30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800de34:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800de36:	79fb      	ldrb	r3, [r7, #7]
 800de38:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de3a:	230d      	movs	r3, #13
 800de3c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de3e:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800de40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de48:	230e      	movs	r3, #14
 800de4a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de4c:	4b08      	ldr	r3, [pc, #32]	; (800de70 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800de4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de52:	f107 0210 	add.w	r2, r7, #16
 800de56:	4611      	mov	r1, r2
 800de58:	4618      	mov	r0, r3
 800de5a:	f005 f886 	bl	8012f6a <RegionGetPhyParam>
 800de5e:	4603      	mov	r3, r0
 800de60:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	b2db      	uxtb	r3, r3
}
 800de66:	4618      	mov	r0, r3
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	2000095c 	.word	0x2000095c

0800de74 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	4603      	mov	r3, r0
 800de7c:	71fb      	strb	r3, [r7, #7]
 800de7e:	460b      	mov	r3, r1
 800de80:	71bb      	strb	r3, [r7, #6]
 800de82:	4613      	mov	r3, r2
 800de84:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800de86:	2300      	movs	r3, #0
 800de88:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800de8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff ffc6 	bl	800de24 <GetMaxAppPayloadWithoutFOptsLength>
 800de98:	4603      	mov	r3, r0
 800de9a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	797b      	ldrb	r3, [r7, #5]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	4413      	add	r3, r2
 800dea6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800dea8:	89ba      	ldrh	r2, [r7, #12]
 800deaa:	89fb      	ldrh	r3, [r7, #14]
 800deac:	429a      	cmp	r2, r3
 800deae:	d804      	bhi.n	800deba <ValidatePayloadLength+0x46>
 800deb0:	89bb      	ldrh	r3, [r7, #12]
 800deb2:	2bff      	cmp	r3, #255	; 0xff
 800deb4:	d801      	bhi.n	800deba <ValidatePayloadLength+0x46>
    {
        return true;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e000      	b.n	800debc <ValidatePayloadLength+0x48>
    }
    return false;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800dec8:	4a05      	ldr	r2, [pc, #20]	; (800dee0 <SetMlmeScheduleUplinkIndication+0x1c>)
 800deca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dece:	f043 0310 	orr.w	r3, r3, #16
 800ded2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ded6:	bf00      	nop
 800ded8:	46bd      	mov	sp, r7
 800deda:	bc80      	pop	{r7}
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	20000454 	.word	0x20000454

0800dee4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800dee4:	b590      	push	{r4, r7, lr}
 800dee6:	b0a5      	sub	sp, #148	; 0x94
 800dee8:	af02      	add	r7, sp, #8
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	4608      	mov	r0, r1
 800deee:	4611      	mov	r1, r2
 800def0:	461a      	mov	r2, r3
 800def2:	4603      	mov	r3, r0
 800def4:	70fb      	strb	r3, [r7, #3]
 800def6:	460b      	mov	r3, r1
 800def8:	70bb      	strb	r3, [r7, #2]
 800defa:	4613      	mov	r3, r2
 800defc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800df04:	2300      	movs	r3, #0
 800df06:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800df0a:	2300      	movs	r3, #0
 800df0c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800df10:	f000 bc73 	b.w	800e7fa <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800df14:	78fb      	ldrb	r3, [r7, #3]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	4413      	add	r3, r2
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	4618      	mov	r0, r3
 800df1e:	f003 fbf5 	bl	801170c <LoRaMacCommandsGetCmdSize>
 800df22:	4603      	mov	r3, r0
 800df24:	461a      	mov	r2, r3
 800df26:	78fb      	ldrb	r3, [r7, #3]
 800df28:	441a      	add	r2, r3
 800df2a:	78bb      	ldrb	r3, [r7, #2]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	f300 846a 	bgt.w	800e806 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800df32:	78fb      	ldrb	r3, [r7, #3]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	70fa      	strb	r2, [r7, #3]
 800df38:	461a      	mov	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4413      	add	r3, r2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	3b02      	subs	r3, #2
 800df42:	2b11      	cmp	r3, #17
 800df44:	f200 8461 	bhi.w	800e80a <ProcessMacCommands+0x926>
 800df48:	a201      	add	r2, pc, #4	; (adr r2, 800df50 <ProcessMacCommands+0x6c>)
 800df4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4e:	bf00      	nop
 800df50:	0800df99 	.word	0x0800df99
 800df54:	0800dfdb 	.word	0x0800dfdb
 800df58:	0800e0f7 	.word	0x0800e0f7
 800df5c:	0800e135 	.word	0x0800e135
 800df60:	0800e225 	.word	0x0800e225
 800df64:	0800e281 	.word	0x0800e281
 800df68:	0800e33d 	.word	0x0800e33d
 800df6c:	0800e397 	.word	0x0800e397
 800df70:	0800e47b 	.word	0x0800e47b
 800df74:	0800e80b 	.word	0x0800e80b
 800df78:	0800e80b 	.word	0x0800e80b
 800df7c:	0800e525 	.word	0x0800e525
 800df80:	0800e80b 	.word	0x0800e80b
 800df84:	0800e80b 	.word	0x0800e80b
 800df88:	0800e63b 	.word	0x0800e63b
 800df8c:	0800e66f 	.word	0x0800e66f
 800df90:	0800e6ff 	.word	0x0800e6ff
 800df94:	0800e775 	.word	0x0800e775
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800df98:	2004      	movs	r0, #4
 800df9a:	f003 fd8f 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 842a 	beq.w	800e7fa <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f003 fcfb 	bl	80119a4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	70fa      	strb	r2, [r7, #3]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	4413      	add	r3, r2
 800dfba:	781a      	ldrb	r2, [r3, #0]
 800dfbc:	4bad      	ldr	r3, [pc, #692]	; (800e274 <ProcessMacCommands+0x390>)
 800dfbe:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800dfc2:	78fb      	ldrb	r3, [r7, #3]
 800dfc4:	1c5a      	adds	r2, r3, #1
 800dfc6:	70fa      	strb	r2, [r7, #3]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	4413      	add	r3, r2
 800dfce:	781a      	ldrb	r2, [r3, #0]
 800dfd0:	4ba8      	ldr	r3, [pc, #672]	; (800e274 <ProcessMacCommands+0x390>)
 800dfd2:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800dfd6:	f000 bc10 	b.w	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800dff2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800dff6:	f083 0301 	eor.w	r3, r3, #1
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d078      	beq.n	800e0f2 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800e000:	2301      	movs	r3, #1
 800e002:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e006:	78fb      	ldrb	r3, [r7, #3]
 800e008:	3b01      	subs	r3, #1
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	4413      	add	r3, r2
 800e00e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e010:	78ba      	ldrb	r2, [r7, #2]
 800e012:	78fb      	ldrb	r3, [r7, #3]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	b2db      	uxtb	r3, r3
 800e018:	3301      	adds	r3, #1
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e020:	4b95      	ldr	r3, [pc, #596]	; (800e278 <ProcessMacCommands+0x394>)
 800e022:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800e026:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e02a:	4b93      	ldr	r3, [pc, #588]	; (800e278 <ProcessMacCommands+0x394>)
 800e02c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e030:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e034:	4b90      	ldr	r3, [pc, #576]	; (800e278 <ProcessMacCommands+0x394>)
 800e036:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e03a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e03e:	4b8e      	ldr	r3, [pc, #568]	; (800e278 <ProcessMacCommands+0x394>)
 800e040:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e044:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e048:	4b8b      	ldr	r3, [pc, #556]	; (800e278 <ProcessMacCommands+0x394>)
 800e04a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e04e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e052:	4b89      	ldr	r3, [pc, #548]	; (800e278 <ProcessMacCommands+0x394>)
 800e054:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e058:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e05a:	4b87      	ldr	r3, [pc, #540]	; (800e278 <ProcessMacCommands+0x394>)
 800e05c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e060:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800e064:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800e068:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e06c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	4623      	mov	r3, r4
 800e07a:	f005 f87e 	bl	801317a <RegionLinkAdrReq>
 800e07e:	4603      	mov	r3, r0
 800e080:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e084:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	2b07      	cmp	r3, #7
 800e08e:	d10e      	bne.n	800e0ae <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e090:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800e094:	4b78      	ldr	r3, [pc, #480]	; (800e278 <ProcessMacCommands+0x394>)
 800e096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e09a:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800e09e:	4b76      	ldr	r3, [pc, #472]	; (800e278 <ProcessMacCommands+0x394>)
 800e0a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e0a4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800e0a8:	4b73      	ldr	r3, [pc, #460]	; (800e278 <ProcessMacCommands+0x394>)
 800e0aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e0b4:	e00b      	b.n	800e0ce <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e0b6:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	4619      	mov	r1, r3
 800e0be:	2003      	movs	r0, #3
 800e0c0:	f003 f9d4 	bl	801146c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e0c4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e0ce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e0d2:	4a6a      	ldr	r2, [pc, #424]	; (800e27c <ProcessMacCommands+0x398>)
 800e0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d8:	089b      	lsrs	r3, r3, #2
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d3e8      	bcc.n	800e0b6 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e0e4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e0e8:	78fb      	ldrb	r3, [r7, #3]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800e0f2:	bf00      	nop
 800e0f4:	e381      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e0f6:	78fb      	ldrb	r3, [r7, #3]
 800e0f8:	1c5a      	adds	r2, r3, #1
 800e0fa:	70fa      	strb	r2, [r7, #3]
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4413      	add	r3, r2
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	f003 030f 	and.w	r3, r3, #15
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	4b5b      	ldr	r3, [pc, #364]	; (800e278 <ProcessMacCommands+0x394>)
 800e10c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e110:	4b59      	ldr	r3, [pc, #356]	; (800e278 <ProcessMacCommands+0x394>)
 800e112:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800e116:	461a      	mov	r2, r3
 800e118:	2301      	movs	r3, #1
 800e11a:	4093      	lsls	r3, r2
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	4b56      	ldr	r3, [pc, #344]	; (800e278 <ProcessMacCommands+0x394>)
 800e120:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e124:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e128:	2200      	movs	r2, #0
 800e12a:	4619      	mov	r1, r3
 800e12c:	2004      	movs	r0, #4
 800e12e:	f003 f99d 	bl	801146c <LoRaMacCommandsAddCmd>
                break;
 800e132:	e362      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e134:	2307      	movs	r3, #7
 800e136:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e13a:	78fb      	ldrb	r3, [r7, #3]
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	4413      	add	r3, r2
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	091b      	lsrs	r3, r3, #4
 800e144:	b2db      	uxtb	r3, r3
 800e146:	b25b      	sxtb	r3, r3
 800e148:	f003 0307 	and.w	r3, r3, #7
 800e14c:	b25b      	sxtb	r3, r3
 800e14e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e152:	78fb      	ldrb	r3, [r7, #3]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	4413      	add	r3, r2
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	b25b      	sxtb	r3, r3
 800e15c:	f003 030f 	and.w	r3, r3, #15
 800e160:	b25b      	sxtb	r3, r3
 800e162:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800e166:	78fb      	ldrb	r3, [r7, #3]
 800e168:	3301      	adds	r3, #1
 800e16a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e16c:	78fb      	ldrb	r3, [r7, #3]
 800e16e:	1c5a      	adds	r2, r3, #1
 800e170:	70fa      	strb	r2, [r7, #3]
 800e172:	461a      	mov	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4413      	add	r3, r2
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e17c:	78fb      	ldrb	r3, [r7, #3]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	70fa      	strb	r2, [r7, #3]
 800e182:	461a      	mov	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4413      	add	r3, r2
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	021a      	lsls	r2, r3, #8
 800e18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e18e:	4313      	orrs	r3, r2
 800e190:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e192:	78fb      	ldrb	r3, [r7, #3]
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	70fa      	strb	r2, [r7, #3]
 800e198:	461a      	mov	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4413      	add	r3, r2
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	041a      	lsls	r2, r3, #16
 800e1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800e1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1aa:	2264      	movs	r2, #100	; 0x64
 800e1ac:	fb02 f303 	mul.w	r3, r2, r3
 800e1b0:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e1b2:	4b31      	ldr	r3, [pc, #196]	; (800e278 <ProcessMacCommands+0x394>)
 800e1b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e1bc:	4611      	mov	r1, r2
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f005 f802 	bl	80131c8 <RegionRxParamSetupReq>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e1ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e1ce:	f003 0307 	and.w	r3, r3, #7
 800e1d2:	2b07      	cmp	r3, #7
 800e1d4:	d117      	bne.n	800e206 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e1d6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	4b26      	ldr	r3, [pc, #152]	; (800e278 <ProcessMacCommands+0x394>)
 800e1de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e1e2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	4b23      	ldr	r3, [pc, #140]	; (800e278 <ProcessMacCommands+0x394>)
 800e1ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f0:	4a21      	ldr	r2, [pc, #132]	; (800e278 <ProcessMacCommands+0x394>)
 800e1f2:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f6:	4a20      	ldr	r2, [pc, #128]	; (800e278 <ProcessMacCommands+0x394>)
 800e1f8:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e1fa:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	4b1d      	ldr	r3, [pc, #116]	; (800e278 <ProcessMacCommands+0x394>)
 800e202:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800e206:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e20a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e20e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e212:	2201      	movs	r2, #1
 800e214:	4619      	mov	r1, r3
 800e216:	2005      	movs	r0, #5
 800e218:	f003 f928 	bl	801146c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800e21c:	f7ff fe52 	bl	800dec4 <SetMlmeScheduleUplinkIndication>
                break;
 800e220:	bf00      	nop
 800e222:	e2ea      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e224:	23ff      	movs	r3, #255	; 0xff
 800e226:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e22a:	4b12      	ldr	r3, [pc, #72]	; (800e274 <ProcessMacCommands+0x390>)
 800e22c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00d      	beq.n	800e250 <ProcessMacCommands+0x36c>
 800e234:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <ProcessMacCommands+0x390>)
 800e236:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d007      	beq.n	800e250 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e240:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <ProcessMacCommands+0x390>)
 800e242:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4798      	blx	r3
 800e24a:	4603      	mov	r3, r0
 800e24c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800e250:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800e254:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e258:	787b      	ldrb	r3, [r7, #1]
 800e25a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e264:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e268:	2202      	movs	r2, #2
 800e26a:	4619      	mov	r1, r3
 800e26c:	2006      	movs	r0, #6
 800e26e:	f003 f8fd 	bl	801146c <LoRaMacCommandsAddCmd>
                break;
 800e272:	e2c2      	b.n	800e7fa <ProcessMacCommands+0x916>
 800e274:	20000454 	.word	0x20000454
 800e278:	2000095c 	.word	0x2000095c
 800e27c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800e280:	2303      	movs	r3, #3
 800e282:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800e286:	78fb      	ldrb	r3, [r7, #3]
 800e288:	1c5a      	adds	r2, r3, #1
 800e28a:	70fa      	strb	r2, [r7, #3]
 800e28c:	461a      	mov	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4413      	add	r3, r2
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	b25b      	sxtb	r3, r3
 800e296:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800e29a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e29e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e2a0:	78fb      	ldrb	r3, [r7, #3]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	70fa      	strb	r2, [r7, #3]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e2b0:	78fb      	ldrb	r3, [r7, #3]
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	70fa      	strb	r2, [r7, #3]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	021a      	lsls	r2, r3, #8
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e2c6:	78fb      	ldrb	r3, [r7, #3]
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	70fa      	strb	r2, [r7, #3]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	041a      	lsls	r2, r3, #16
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	2264      	movs	r2, #100	; 0x64
 800e2e0:	fb02 f303 	mul.w	r3, r2, r3
 800e2e4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	1c5a      	adds	r2, r3, #1
 800e2ee:	70fa      	strb	r2, [r7, #3]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	b25b      	sxtb	r3, r3
 800e2fa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800e2fe:	4b87      	ldr	r3, [pc, #540]	; (800e51c <ProcessMacCommands+0x638>)
 800e300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e304:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f004 ff77 	bl	80131fe <RegionNewChannelReq>
 800e310:	4603      	mov	r3, r0
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e318:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e31c:	b25b      	sxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	db0a      	blt.n	800e338 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800e322:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e326:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800e32a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e32e:	2201      	movs	r2, #1
 800e330:	4619      	mov	r1, r3
 800e332:	2007      	movs	r0, #7
 800e334:	f003 f89a 	bl	801146c <LoRaMacCommandsAddCmd>
                }
                break;
 800e338:	bf00      	nop
 800e33a:	e25e      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800e33c:	78fb      	ldrb	r3, [r7, #3]
 800e33e:	1c5a      	adds	r2, r3, #1
 800e340:	70fa      	strb	r2, [r7, #3]
 800e342:	461a      	mov	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4413      	add	r3, r2
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	f003 030f 	and.w	r3, r3, #15
 800e34e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800e352:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e356:	2b00      	cmp	r3, #0
 800e358:	d104      	bne.n	800e364 <ProcessMacCommands+0x480>
                {
                    delay++;
 800e35a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e35e:	3301      	adds	r3, #1
 800e360:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800e364:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e36c:	fb02 f303 	mul.w	r3, r2, r3
 800e370:	461a      	mov	r2, r3
 800e372:	4b6a      	ldr	r3, [pc, #424]	; (800e51c <ProcessMacCommands+0x638>)
 800e374:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e376:	4b69      	ldr	r3, [pc, #420]	; (800e51c <ProcessMacCommands+0x638>)
 800e378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e37a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e37e:	4a67      	ldr	r2, [pc, #412]	; (800e51c <ProcessMacCommands+0x638>)
 800e380:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800e382:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e386:	2200      	movs	r2, #0
 800e388:	4619      	mov	r1, r3
 800e38a:	2008      	movs	r0, #8
 800e38c:	f003 f86e 	bl	801146c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800e390:	f7ff fd98 	bl	800dec4 <SetMlmeScheduleUplinkIndication>
                break;
 800e394:	e231      	b.n	800e7fa <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800e396:	78fb      	ldrb	r3, [r7, #3]
 800e398:	1c5a      	adds	r2, r3, #1
 800e39a:	70fa      	strb	r2, [r7, #3]
 800e39c:	461a      	mov	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800e3b4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e3b8:	f003 0320 	and.w	r3, r3, #32
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800e3c6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e3ca:	f003 0310 	and.w	r3, r3, #16
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d002      	beq.n	800e3d8 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800e3d8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e3dc:	f003 030f 	and.w	r3, r3, #15
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800e3e6:	4b4d      	ldr	r3, [pc, #308]	; (800e51c <ProcessMacCommands+0x638>)
 800e3e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f004 ff1e 	bl	8013234 <RegionTxParamSetupReq>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fe:	d03a      	beq.n	800e476 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800e400:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e404:	4b45      	ldr	r3, [pc, #276]	; (800e51c <ProcessMacCommands+0x638>)
 800e406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800e40a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e40e:	4b43      	ldr	r3, [pc, #268]	; (800e51c <ProcessMacCommands+0x638>)
 800e410:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800e414:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e418:	461a      	mov	r2, r3
 800e41a:	4b41      	ldr	r3, [pc, #260]	; (800e520 <ProcessMacCommands+0x63c>)
 800e41c:	5c9b      	ldrb	r3, [r3, r2]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f2 f9d4 	bl	80007cc <__aeabi_ui2f>
 800e424:	4603      	mov	r3, r0
 800e426:	4a3d      	ldr	r2, [pc, #244]	; (800e51c <ProcessMacCommands+0x638>)
 800e428:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800e42a:	2302      	movs	r3, #2
 800e42c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e430:	4b3a      	ldr	r3, [pc, #232]	; (800e51c <ProcessMacCommands+0x638>)
 800e432:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e436:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e43a:	4b38      	ldr	r3, [pc, #224]	; (800e51c <ProcessMacCommands+0x638>)
 800e43c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e440:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f004 fd8f 	bl	8012f6a <RegionGetPhyParam>
 800e44c:	4603      	mov	r3, r0
 800e44e:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	b25a      	sxtb	r2, r3
 800e454:	4b31      	ldr	r3, [pc, #196]	; (800e51c <ProcessMacCommands+0x638>)
 800e456:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e45a:	4293      	cmp	r3, r2
 800e45c:	bfb8      	it	lt
 800e45e:	4613      	movlt	r3, r2
 800e460:	b25a      	sxtb	r2, r3
 800e462:	4b2e      	ldr	r3, [pc, #184]	; (800e51c <ProcessMacCommands+0x638>)
 800e464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800e468:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e46c:	2200      	movs	r2, #0
 800e46e:	4619      	mov	r1, r3
 800e470:	2009      	movs	r0, #9
 800e472:	f002 fffb 	bl	801146c <LoRaMacCommandsAddCmd>
                }
                break;
 800e476:	bf00      	nop
 800e478:	e1bf      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800e47a:	2303      	movs	r3, #3
 800e47c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800e480:	78fb      	ldrb	r3, [r7, #3]
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	70fa      	strb	r2, [r7, #3]
 800e486:	461a      	mov	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4413      	add	r3, r2
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800e492:	78fb      	ldrb	r3, [r7, #3]
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	70fa      	strb	r2, [r7, #3]
 800e498:	461a      	mov	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4413      	add	r3, r2
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e4a2:	78fb      	ldrb	r3, [r7, #3]
 800e4a4:	1c5a      	adds	r2, r3, #1
 800e4a6:	70fa      	strb	r2, [r7, #3]
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	021a      	lsls	r2, r3, #8
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e4b8:	78fb      	ldrb	r3, [r7, #3]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	70fa      	strb	r2, [r7, #3]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	041a      	lsls	r2, r3, #16
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	2264      	movs	r2, #100	; 0x64
 800e4d2:	fb02 f303 	mul.w	r3, r2, r3
 800e4d6:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800e4d8:	4b10      	ldr	r3, [pc, #64]	; (800e51c <ProcessMacCommands+0x638>)
 800e4da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e4de:	f107 0220 	add.w	r2, r7, #32
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f004 fec0 	bl	801326a <RegionDlChannelReq>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e4f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	db0c      	blt.n	800e516 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800e4fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e500:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800e504:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e508:	2201      	movs	r2, #1
 800e50a:	4619      	mov	r1, r3
 800e50c:	200a      	movs	r0, #10
 800e50e:	f002 ffad 	bl	801146c <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800e512:	f7ff fcd7 	bl	800dec4 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800e516:	bf00      	nop
 800e518:	e16f      	b.n	800e7fa <ProcessMacCommands+0x916>
 800e51a:	bf00      	nop
 800e51c:	2000095c 	.word	0x2000095c
 800e520:	0801c400 	.word	0x0801c400
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800e524:	200a      	movs	r0, #10
 800e526:	f003 fac9 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f000 8164 	beq.w	800e7fa <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800e532:	210a      	movs	r1, #10
 800e534:	2000      	movs	r0, #0
 800e536:	f003 fa35 	bl	80119a4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800e53a:	f107 0318 	add.w	r3, r7, #24
 800e53e:	2200      	movs	r2, #0
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800e544:	f107 0310 	add.w	r3, r7, #16
 800e548:	2200      	movs	r2, #0
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800e54e:	f107 0308 	add.w	r3, r7, #8
 800e552:	2200      	movs	r2, #0
 800e554:	601a      	str	r2, [r3, #0]
 800e556:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800e558:	78fb      	ldrb	r3, [r7, #3]
 800e55a:	1c5a      	adds	r2, r3, #1
 800e55c:	70fa      	strb	r2, [r7, #3]
 800e55e:	461a      	mov	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4413      	add	r3, r2
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800e568:	78fb      	ldrb	r3, [r7, #3]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	70fa      	strb	r2, [r7, #3]
 800e56e:	461a      	mov	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4413      	add	r3, r2
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	021a      	lsls	r2, r3, #8
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	4313      	orrs	r3, r2
 800e57c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800e57e:	78fb      	ldrb	r3, [r7, #3]
 800e580:	1c5a      	adds	r2, r3, #1
 800e582:	70fa      	strb	r2, [r7, #3]
 800e584:	461a      	mov	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4413      	add	r3, r2
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	041a      	lsls	r2, r3, #16
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	4313      	orrs	r3, r2
 800e592:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800e594:	78fb      	ldrb	r3, [r7, #3]
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	70fa      	strb	r2, [r7, #3]
 800e59a:	461a      	mov	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4413      	add	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	061a      	lsls	r2, r3, #24
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800e5aa:	78fb      	ldrb	r3, [r7, #3]
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	70fa      	strb	r2, [r7, #3]
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	b21b      	sxth	r3, r3
 800e5ba:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800e5bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e5c6:	fb03 f302 	mul.w	r3, r3, r2
 800e5ca:	121b      	asrs	r3, r3, #8
 800e5cc:	b21b      	sxth	r3, r3
 800e5ce:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800e5d0:	f107 0310 	add.w	r3, r7, #16
 800e5d4:	f107 0218 	add.w	r2, r7, #24
 800e5d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5dc:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800e5e0:	693a      	ldr	r2, [r7, #16]
 800e5e2:	4b8c      	ldr	r3, [pc, #560]	; (800e814 <ProcessMacCommands+0x930>)
 800e5e4:	4413      	add	r3, r2
 800e5e6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800e5e8:	f107 0308 	add.w	r3, r7, #8
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f00b fe7f 	bl	801a2f0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800e5f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e5f6:	4b88      	ldr	r3, [pc, #544]	; (800e818 <ProcessMacCommands+0x934>)
 800e5f8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800e5fc:	9200      	str	r2, [sp, #0]
 800e5fe:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800e602:	f107 0210 	add.w	r2, r7, #16
 800e606:	ca06      	ldmia	r2, {r1, r2}
 800e608:	f00b fe0b 	bl	801a222 <SysTimeSub>
 800e60c:	f107 0010 	add.w	r0, r7, #16
 800e610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e616:	f107 0208 	add.w	r2, r7, #8
 800e61a:	ca06      	ldmia	r2, {r1, r2}
 800e61c:	f00b fdc8 	bl	801a1b0 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800e620:	f107 0310 	add.w	r3, r7, #16
 800e624:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e628:	f00b fe34 	bl	801a294 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800e62c:	f002 fde3 	bl	80111f6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800e630:	4b79      	ldr	r3, [pc, #484]	; (800e818 <ProcessMacCommands+0x934>)
 800e632:	2201      	movs	r2, #1
 800e634:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800e638:	e0df      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800e63a:	200d      	movs	r0, #13
 800e63c:	f003 fa3e 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 80d9 	beq.w	800e7fa <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800e648:	210d      	movs	r1, #13
 800e64a:	2000      	movs	r0, #0
 800e64c:	f003 f9aa 	bl	80119a4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800e650:	4b71      	ldr	r3, [pc, #452]	; (800e818 <ProcessMacCommands+0x934>)
 800e652:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e656:	2b04      	cmp	r3, #4
 800e658:	f000 80cf 	beq.w	800e7fa <ProcessMacCommands+0x916>
 800e65c:	4b6e      	ldr	r3, [pc, #440]	; (800e818 <ProcessMacCommands+0x934>)
 800e65e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e662:	2b05      	cmp	r3, #5
 800e664:	f000 80c9 	beq.w	800e7fa <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800e668:	f002 fda6 	bl	80111b8 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800e66c:	e0c5      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800e66e:	2303      	movs	r3, #3
 800e670:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800e674:	2300      	movs	r3, #0
 800e676:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800e678:	78fb      	ldrb	r3, [r7, #3]
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	70fa      	strb	r2, [r7, #3]
 800e67e:	461a      	mov	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4413      	add	r3, r2
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	70fa      	strb	r2, [r7, #3]
 800e68e:	461a      	mov	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4413      	add	r3, r2
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	021b      	lsls	r3, r3, #8
 800e698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e69a:	4313      	orrs	r3, r2
 800e69c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e69e:	78fb      	ldrb	r3, [r7, #3]
 800e6a0:	1c5a      	adds	r2, r3, #1
 800e6a2:	70fa      	strb	r2, [r7, #3]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	041b      	lsls	r3, r3, #16
 800e6ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800e6b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6b6:	2264      	movs	r2, #100	; 0x64
 800e6b8:	fb02 f303 	mul.w	r3, r2, r3
 800e6bc:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800e6be:	78fb      	ldrb	r3, [r7, #3]
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	70fa      	strb	r2, [r7, #3]
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800e6d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e6d8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f002 fd72 	bl	80111c4 <LoRaMacClassBPingSlotChannelReq>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800e6e6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e6ea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800e6ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	2011      	movs	r0, #17
 800e6f8:	f002 feb8 	bl	801146c <LoRaMacCommandsAddCmd>
                break;
 800e6fc:	e07d      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800e6fe:	200e      	movs	r0, #14
 800e700:	f003 f9dc 	bl	8011abc <LoRaMacConfirmQueueIsCmdActive>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d077      	beq.n	800e7fa <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800e70a:	210e      	movs	r1, #14
 800e70c:	2000      	movs	r0, #0
 800e70e:	f003 f949 	bl	80119a4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800e712:	2300      	movs	r3, #0
 800e714:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800e71e:	78fb      	ldrb	r3, [r7, #3]
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	70fa      	strb	r2, [r7, #3]
 800e724:	461a      	mov	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4413      	add	r3, r2
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800e730:	78fb      	ldrb	r3, [r7, #3]
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	70fa      	strb	r2, [r7, #3]
 800e736:	461a      	mov	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4413      	add	r3, r2
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	021b      	lsls	r3, r3, #8
 800e740:	b21a      	sxth	r2, r3
 800e742:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e746:	4313      	orrs	r3, r2
 800e748:	b21b      	sxth	r3, r3
 800e74a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800e74e:	78fb      	ldrb	r3, [r7, #3]
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	70fa      	strb	r2, [r7, #3]
 800e754:	461a      	mov	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4413      	add	r3, r2
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800e760:	4b2e      	ldr	r3, [pc, #184]	; (800e81c <ProcessMacCommands+0x938>)
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800e768:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e76c:	4618      	mov	r0, r3
 800e76e:	f002 fd35 	bl	80111dc <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800e772:	e042      	b.n	800e7fa <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800e77a:	78fb      	ldrb	r3, [r7, #3]
 800e77c:	1c5a      	adds	r2, r3, #1
 800e77e:	70fa      	strb	r2, [r7, #3]
 800e780:	461a      	mov	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4413      	add	r3, r2
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e78c:	78fb      	ldrb	r3, [r7, #3]
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	70fa      	strb	r2, [r7, #3]
 800e792:	461a      	mov	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4413      	add	r3, r2
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	021b      	lsls	r3, r3, #8
 800e79c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e7a6:	78fb      	ldrb	r3, [r7, #3]
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	70fa      	strb	r2, [r7, #3]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	041b      	lsls	r3, r3, #16
 800e7b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800e7c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7c4:	2264      	movs	r2, #100	; 0x64
 800e7c6:	fb02 f303 	mul.w	r3, r2, r3
 800e7ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800e7ce:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e7d2:	f002 fd16 	bl	8011202 <LoRaMacClassBBeaconFreqReq>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d003      	beq.n	800e7e4 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800e7e2:	e002      	b.n	800e7ea <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800e7ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	2013      	movs	r0, #19
 800e7f4:	f002 fe3a 	bl	801146c <LoRaMacCommandsAddCmd>
                }
                break;
 800e7f8:	bf00      	nop
    while( macIndex < commandsSize )
 800e7fa:	78fa      	ldrb	r2, [r7, #3]
 800e7fc:	78bb      	ldrb	r3, [r7, #2]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	f4ff ab88 	bcc.w	800df14 <ProcessMacCommands+0x30>
 800e804:	e002      	b.n	800e80c <ProcessMacCommands+0x928>
            return;
 800e806:	bf00      	nop
 800e808:	e000      	b.n	800e80c <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800e80a:	bf00      	nop
        }
    }
}
 800e80c:	378c      	adds	r7, #140	; 0x8c
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd90      	pop	{r4, r7, pc}
 800e812:	bf00      	nop
 800e814:	12d53d80 	.word	0x12d53d80
 800e818:	20000454 	.word	0x20000454
 800e81c:	20001a34 	.word	0x20001a34

0800e820 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b08e      	sub	sp, #56	; 0x38
 800e824:	af02      	add	r7, sp, #8
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	607a      	str	r2, [r7, #4]
 800e82a:	461a      	mov	r2, r3
 800e82c:	460b      	mov	r3, r1
 800e82e:	72fb      	strb	r3, [r7, #11]
 800e830:	4613      	mov	r3, r2
 800e832:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e834:	2303      	movs	r3, #3
 800e836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e83a:	4b65      	ldr	r3, [pc, #404]	; (800e9d0 <Send+0x1b0>)
 800e83c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e840:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800e844:	4b62      	ldr	r3, [pc, #392]	; (800e9d0 <Send+0x1b0>)
 800e846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e84a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e84e:	4b60      	ldr	r3, [pc, #384]	; (800e9d0 <Send+0x1b0>)
 800e850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e852:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e854:	4b5e      	ldr	r3, [pc, #376]	; (800e9d0 <Send+0x1b0>)
 800e856:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d101      	bne.n	800e862 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e85e:	2307      	movs	r3, #7
 800e860:	e0b1      	b.n	800e9c6 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e862:	4b5b      	ldr	r3, [pc, #364]	; (800e9d0 <Send+0x1b0>)
 800e864:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e86c:	4b58      	ldr	r3, [pc, #352]	; (800e9d0 <Send+0x1b0>)
 800e86e:	2200      	movs	r2, #0
 800e870:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800e878:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e87c:	f36f 0303 	bfc	r3, #0, #4
 800e880:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e884:	4b52      	ldr	r3, [pc, #328]	; (800e9d0 <Send+0x1b0>)
 800e886:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800e88a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e88e:	f362 13c7 	bfi	r3, r2, #7, #1
 800e892:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e896:	4b4e      	ldr	r3, [pc, #312]	; (800e9d0 <Send+0x1b0>)
 800e898:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d106      	bne.n	800e8ae <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800e8a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8a4:	f043 0310 	orr.w	r3, r3, #16
 800e8a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800e8ac:	e005      	b.n	800e8ba <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800e8ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8b2:	f36f 1304 	bfc	r3, #4, #1
 800e8b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e8ba:	4b45      	ldr	r3, [pc, #276]	; (800e9d0 <Send+0x1b0>)
 800e8bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d005      	beq.n	800e8d0 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800e8c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8c8:	f043 0320 	orr.w	r3, r3, #32
 800e8cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800e8d0:	4b3f      	ldr	r3, [pc, #252]	; (800e9d0 <Send+0x1b0>)
 800e8d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e8d6:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e8dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	bf14      	ite	ne
 800e8ea:	2301      	movne	r3, #1
 800e8ec:	2300      	moveq	r3, #0
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e8f2:	4b37      	ldr	r3, [pc, #220]	; (800e9d0 <Send+0x1b0>)
 800e8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800e8f8:	4b36      	ldr	r3, [pc, #216]	; (800e9d4 <Send+0x1b4>)
 800e8fa:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800e8fe:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800e900:	4b34      	ldr	r3, [pc, #208]	; (800e9d4 <Send+0x1b4>)
 800e902:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800e906:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e908:	4b31      	ldr	r3, [pc, #196]	; (800e9d0 <Send+0x1b0>)
 800e90a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e90e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e912:	4b2f      	ldr	r3, [pc, #188]	; (800e9d0 <Send+0x1b0>)
 800e914:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e918:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e91c:	4b2c      	ldr	r3, [pc, #176]	; (800e9d0 <Send+0x1b0>)
 800e91e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800e926:	4b2a      	ldr	r3, [pc, #168]	; (800e9d0 <Send+0x1b0>)
 800e928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e934:	f107 0014 	add.w	r0, r7, #20
 800e938:	4a27      	ldr	r2, [pc, #156]	; (800e9d8 <Send+0x1b8>)
 800e93a:	4928      	ldr	r1, [pc, #160]	; (800e9dc <Send+0x1bc>)
 800e93c:	f002 fb7c 	bl	8011038 <LoRaMacAdrCalcNext>
 800e940:	4603      	mov	r3, r0
 800e942:	461a      	mov	r2, r3
 800e944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e948:	f362 1386 	bfi	r3, r2, #6, #1
 800e94c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800e950:	7afa      	ldrb	r2, [r7, #11]
 800e952:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e956:	893b      	ldrh	r3, [r7, #8]
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f000 fc21 	bl	800f1a4 <PrepareFrame>
 800e962:	4603      	mov	r3, r0
 800e964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d003      	beq.n	800e978 <Send+0x158>
 800e970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e974:	2b0a      	cmp	r3, #10
 800e976:	d107      	bne.n	800e988 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800e978:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 f96d 	bl	800ec5c <ScheduleTx>
 800e982:	4603      	mov	r3, r0
 800e984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800e988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00a      	beq.n	800e9a6 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e990:	4a0f      	ldr	r2, [pc, #60]	; (800e9d0 <Send+0x1b0>)
 800e992:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e996:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e99a:	4a0d      	ldr	r2, [pc, #52]	; (800e9d0 <Send+0x1b0>)
 800e99c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e9a0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800e9a4:	e00d      	b.n	800e9c2 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800e9a6:	4b0a      	ldr	r3, [pc, #40]	; (800e9d0 <Send+0x1b0>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	4a07      	ldr	r2, [pc, #28]	; (800e9d0 <Send+0x1b0>)
 800e9b2:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e9b4:	f002 fdd2 	bl	801155c <LoRaMacCommandsRemoveNoneStickyCmds>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e9be:	2313      	movs	r3, #19
 800e9c0:	e001      	b.n	800e9c6 <Send+0x1a6>
        }
    }
    return status;
 800e9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3730      	adds	r7, #48	; 0x30
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	2000095c 	.word	0x2000095c
 800e9d4:	20000454 	.word	0x20000454
 800e9d8:	20000994 	.word	0x20000994
 800e9dc:	20000995 	.word	0x20000995

0800e9e0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800e9f6:	79fb      	ldrb	r3, [r7, #7]
 800e9f8:	2bff      	cmp	r3, #255	; 0xff
 800e9fa:	d129      	bne.n	800ea50 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	f7ff f941 	bl	800dc84 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ea02:	4b1a      	ldr	r3, [pc, #104]	; (800ea6c <SendReJoinReq+0x8c>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ea0a:	4b18      	ldr	r3, [pc, #96]	; (800ea6c <SendReJoinReq+0x8c>)
 800ea0c:	4a18      	ldr	r2, [pc, #96]	; (800ea70 <SendReJoinReq+0x90>)
 800ea0e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ea12:	4b16      	ldr	r3, [pc, #88]	; (800ea6c <SendReJoinReq+0x8c>)
 800ea14:	22ff      	movs	r2, #255	; 0xff
 800ea16:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ea1a:	7b3b      	ldrb	r3, [r7, #12]
 800ea1c:	f36f 1347 	bfc	r3, #5, #3
 800ea20:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ea22:	7b3a      	ldrb	r2, [r7, #12]
 800ea24:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <SendReJoinReq+0x8c>)
 800ea26:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ea2a:	f7fc fc85 	bl	800b338 <SecureElementGetJoinEui>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2208      	movs	r2, #8
 800ea32:	4619      	mov	r1, r3
 800ea34:	480f      	ldr	r0, [pc, #60]	; (800ea74 <SendReJoinReq+0x94>)
 800ea36:	f008 f978 	bl	8016d2a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ea3a:	f7fc fc5b 	bl	800b2f4 <SecureElementGetDevEui>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2208      	movs	r2, #8
 800ea42:	4619      	mov	r1, r3
 800ea44:	480c      	ldr	r0, [pc, #48]	; (800ea78 <SendReJoinReq+0x98>)
 800ea46:	f008 f970 	bl	8016d2a <memcpy1>

            allowDelayedTx = false;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]

            break;
 800ea4e:	e002      	b.n	800ea56 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ea50:	2302      	movs	r3, #2
 800ea52:	73bb      	strb	r3, [r7, #14]
            break;
 800ea54:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800ea56:	7bfb      	ldrb	r3, [r7, #15]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 f8ff 	bl	800ec5c <ScheduleTx>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	73bb      	strb	r3, [r7, #14]
    return status;
 800ea62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	20000454 	.word	0x20000454
 800ea70:	20000456 	.word	0x20000456
 800ea74:	20000562 	.word	0x20000562
 800ea78:	2000056a 	.word	0x2000056a

0800ea7c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ea80:	f002 fb49 	bl	8011116 <LoRaMacClassBIsBeaconExpected>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ea8a:	230e      	movs	r3, #14
 800ea8c:	e013      	b.n	800eab6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ea8e:	4b0b      	ldr	r3, [pc, #44]	; (800eabc <CheckForClassBCollision+0x40>)
 800ea90:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d10d      	bne.n	800eab4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ea98:	f002 fb44 	bl	8011124 <LoRaMacClassBIsPingExpected>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d001      	beq.n	800eaa6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800eaa2:	230f      	movs	r3, #15
 800eaa4:	e007      	b.n	800eab6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eaa6:	f002 fb44 	bl	8011132 <LoRaMacClassBIsMulticastExpected>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800eab0:	230f      	movs	r3, #15
 800eab2:	e000      	b.n	800eab6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	2000095c 	.word	0x2000095c

0800eac0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800eac0:	b590      	push	{r4, r7, lr}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eac6:	4b2d      	ldr	r3, [pc, #180]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eac8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800eacc:	4b2b      	ldr	r3, [pc, #172]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eace:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ead2:	4b2a      	ldr	r3, [pc, #168]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800ead4:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800ead8:	4b28      	ldr	r3, [pc, #160]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eada:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800eade:	4b27      	ldr	r3, [pc, #156]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eae0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	f004 fc3c 	bl	8013362 <RegionApplyDrOffset>
 800eaea:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eaec:	b259      	sxtb	r1, r3
 800eaee:	4b23      	ldr	r3, [pc, #140]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eaf0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800eaf4:	4b21      	ldr	r3, [pc, #132]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eaf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf8:	4821      	ldr	r0, [pc, #132]	; (800eb80 <ComputeRxWindowParameters+0xc0>)
 800eafa:	9000      	str	r0, [sp, #0]
 800eafc:	4620      	mov	r0, r4
 800eafe:	f004 fad9 	bl	80130b4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eb02:	4b1e      	ldr	r3, [pc, #120]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb04:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800eb08:	4b1c      	ldr	r3, [pc, #112]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb0a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eb0e:	b259      	sxtb	r1, r3
 800eb10:	4b1a      	ldr	r3, [pc, #104]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb12:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800eb16:	4b19      	ldr	r3, [pc, #100]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb1a:	4c1a      	ldr	r4, [pc, #104]	; (800eb84 <ComputeRxWindowParameters+0xc4>)
 800eb1c:	9400      	str	r4, [sp, #0]
 800eb1e:	f004 fac9 	bl	80130b4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800eb22:	4b16      	ldr	r3, [pc, #88]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb26:	4a18      	ldr	r2, [pc, #96]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb28:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800eb2c:	4413      	add	r3, r2
 800eb2e:	4a16      	ldr	r2, [pc, #88]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb30:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800eb34:	4b11      	ldr	r3, [pc, #68]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb38:	4a13      	ldr	r2, [pc, #76]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb3a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800eb3e:	4413      	add	r3, r2
 800eb40:	4a11      	ldr	r2, [pc, #68]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb42:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800eb46:	4b0d      	ldr	r3, [pc, #52]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb48:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d111      	bne.n	800eb74 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800eb50:	4b0a      	ldr	r3, [pc, #40]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb54:	4a0c      	ldr	r2, [pc, #48]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb56:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800eb5a:	4413      	add	r3, r2
 800eb5c:	4a0a      	ldr	r2, [pc, #40]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb5e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800eb62:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <ComputeRxWindowParameters+0xbc>)
 800eb64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb66:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb68:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800eb6c:	4413      	add	r3, r2
 800eb6e:	4a06      	ldr	r2, [pc, #24]	; (800eb88 <ComputeRxWindowParameters+0xc8>)
 800eb70:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800eb74:	bf00      	nop
 800eb76:	3704      	adds	r7, #4
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd90      	pop	{r4, r7, pc}
 800eb7c:	2000095c 	.word	0x2000095c
 800eb80:	2000080c 	.word	0x2000080c
 800eb84:	20000820 	.word	0x20000820
 800eb88:	20000454 	.word	0x20000454

0800eb8c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800eb96:	4b13      	ldr	r3, [pc, #76]	; (800ebe4 <VerifyTxFrame+0x58>)
 800eb98:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d01b      	beq.n	800ebd8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800eba0:	1d3b      	adds	r3, r7, #4
 800eba2:	4618      	mov	r0, r3
 800eba4:	f002 fd20 	bl	80115e8 <LoRaMacCommandsGetSizeSerializedCmds>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d001      	beq.n	800ebb2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ebae:	2313      	movs	r3, #19
 800ebb0:	e013      	b.n	800ebda <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ebb2:	4b0d      	ldr	r3, [pc, #52]	; (800ebe8 <VerifyTxFrame+0x5c>)
 800ebb4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ebb8:	4a0a      	ldr	r2, [pc, #40]	; (800ebe4 <VerifyTxFrame+0x58>)
 800ebba:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	b2d2      	uxtb	r2, r2
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7ff f956 	bl	800de74 <ValidatePayloadLength>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	f083 0301 	eor.w	r3, r3, #1
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d001      	beq.n	800ebd8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	e000      	b.n	800ebda <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	2000095c 	.word	0x2000095c
 800ebe8:	20000454 	.word	0x20000454

0800ebec <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ebf2:	4b18      	ldr	r3, [pc, #96]	; (800ec54 <SerializeTxFrame+0x68>)
 800ebf4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <SerializeTxFrame+0x16>
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d011      	beq.n	800ec24 <SerializeTxFrame+0x38>
 800ec00:	e021      	b.n	800ec46 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ec02:	4815      	ldr	r0, [pc, #84]	; (800ec58 <SerializeTxFrame+0x6c>)
 800ec04:	f004 f823 	bl	8012c4e <LoRaMacSerializerJoinRequest>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ec0c:	79fb      	ldrb	r3, [r7, #7]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec12:	2311      	movs	r3, #17
 800ec14:	e01a      	b.n	800ec4c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ec16:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <SerializeTxFrame+0x68>)
 800ec18:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	; (800ec54 <SerializeTxFrame+0x68>)
 800ec20:	801a      	strh	r2, [r3, #0]
            break;
 800ec22:	e012      	b.n	800ec4a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ec24:	480c      	ldr	r0, [pc, #48]	; (800ec58 <SerializeTxFrame+0x6c>)
 800ec26:	f004 f894 	bl	8012d52 <LoRaMacSerializerData>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ec2e:	79fb      	ldrb	r3, [r7, #7]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec34:	2311      	movs	r3, #17
 800ec36:	e009      	b.n	800ec4c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ec38:	4b06      	ldr	r3, [pc, #24]	; (800ec54 <SerializeTxFrame+0x68>)
 800ec3a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	4b04      	ldr	r3, [pc, #16]	; (800ec54 <SerializeTxFrame+0x68>)
 800ec42:	801a      	strh	r2, [r3, #0]
            break;
 800ec44:	e001      	b.n	800ec4a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec46:	2303      	movs	r3, #3
 800ec48:	e000      	b.n	800ec4c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	20000454 	.word	0x20000454
 800ec58:	2000055c 	.word	0x2000055c

0800ec5c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b090      	sub	sp, #64	; 0x40
 800ec60:	af02      	add	r7, sp, #8
 800ec62:	4603      	mov	r3, r0
 800ec64:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec66:	2303      	movs	r3, #3
 800ec68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800ec6c:	f7ff ff06 	bl	800ea7c <CheckForClassBCollision>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ec76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d002      	beq.n	800ec84 <ScheduleTx+0x28>
    {
        return status;
 800ec7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec82:	e08f      	b.n	800eda4 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800ec84:	f000 f8fa 	bl	800ee7c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800ec88:	f7ff ffb0 	bl	800ebec <SerializeTxFrame>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ec92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d002      	beq.n	800eca0 <ScheduleTx+0x44>
    {
        return status;
 800ec9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec9e:	e081      	b.n	800eda4 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800eca0:	4b42      	ldr	r3, [pc, #264]	; (800edac <ScheduleTx+0x150>)
 800eca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800eca6:	4b41      	ldr	r3, [pc, #260]	; (800edac <ScheduleTx+0x150>)
 800eca8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ecac:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ecae:	4b3f      	ldr	r3, [pc, #252]	; (800edac <ScheduleTx+0x150>)
 800ecb0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800ecb4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ecb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f00b fb50 	bl	801a360 <SysTimeGetMcuTime>
 800ecc0:	4638      	mov	r0, r7
 800ecc2:	4b3a      	ldr	r3, [pc, #232]	; (800edac <ScheduleTx+0x150>)
 800ecc4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800ecc8:	9200      	str	r2, [sp, #0]
 800ecca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ecce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ecd2:	ca06      	ldmia	r2, {r1, r2}
 800ecd4:	f00b faa5 	bl	801a222 <SysTimeSub>
 800ecd8:	f107 0320 	add.w	r3, r7, #32
 800ecdc:	463a      	mov	r2, r7
 800ecde:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ece2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800ece6:	4b31      	ldr	r3, [pc, #196]	; (800edac <ScheduleTx+0x150>)
 800ece8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecea:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800ecec:	2300      	movs	r3, #0
 800ecee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800ecf6:	4b2e      	ldr	r3, [pc, #184]	; (800edb0 <ScheduleTx+0x154>)
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ecfc:	4b2b      	ldr	r3, [pc, #172]	; (800edac <ScheduleTx+0x150>)
 800ecfe:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d104      	bne.n	800ed10 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800ed06:	2301      	movs	r3, #1
 800ed08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ed10:	4b26      	ldr	r3, [pc, #152]	; (800edac <ScheduleTx+0x150>)
 800ed12:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed16:	f107 0114 	add.w	r1, r7, #20
 800ed1a:	4b26      	ldr	r3, [pc, #152]	; (800edb4 <ScheduleTx+0x158>)
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	4b26      	ldr	r3, [pc, #152]	; (800edb8 <ScheduleTx+0x15c>)
 800ed20:	4a26      	ldr	r2, [pc, #152]	; (800edbc <ScheduleTx+0x160>)
 800ed22:	f004 fae3 	bl	80132ec <RegionNextChannel>
 800ed26:	4603      	mov	r3, r0
 800ed28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800ed2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d022      	beq.n	800ed7a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800ed34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed38:	2b0b      	cmp	r3, #11
 800ed3a:	d11b      	bne.n	800ed74 <ScheduleTx+0x118>
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d018      	beq.n	800ed74 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ed42:	4b1b      	ldr	r3, [pc, #108]	; (800edb0 <ScheduleTx+0x154>)
 800ed44:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d011      	beq.n	800ed70 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ed4c:	4b18      	ldr	r3, [pc, #96]	; (800edb0 <ScheduleTx+0x154>)
 800ed4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed52:	f043 0320 	orr.w	r3, r3, #32
 800ed56:	4a16      	ldr	r2, [pc, #88]	; (800edb0 <ScheduleTx+0x154>)
 800ed58:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ed5c:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <ScheduleTx+0x154>)
 800ed5e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ed62:	4619      	mov	r1, r3
 800ed64:	4816      	ldr	r0, [pc, #88]	; (800edc0 <ScheduleTx+0x164>)
 800ed66:	f00c f887 	bl	801ae78 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800ed6a:	4815      	ldr	r0, [pc, #84]	; (800edc0 <ScheduleTx+0x164>)
 800ed6c:	f00b ffa6 	bl	801acbc <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800ed70:	2300      	movs	r3, #0
 800ed72:	e017      	b.n	800eda4 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800ed74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed78:	e014      	b.n	800eda4 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800ed7a:	f7ff fea1 	bl	800eac0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800ed7e:	f7ff ff05 	bl	800eb8c <VerifyTxFrame>
 800ed82:	4603      	mov	r3, r0
 800ed84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ed88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <ScheduleTx+0x13a>
    {
        return status;
 800ed90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed94:	e006      	b.n	800eda4 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800ed96:	4b06      	ldr	r3, [pc, #24]	; (800edb0 <ScheduleTx+0x154>)
 800ed98:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f000 fb1d 	bl	800f3dc <SendFrameOnChannel>
 800eda2:	4603      	mov	r3, r0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3738      	adds	r7, #56	; 0x38
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	2000095c 	.word	0x2000095c
 800edb0:	20000454 	.word	0x20000454
 800edb4:	2000098c 	.word	0x2000098c
 800edb8:	200008d8 	.word	0x200008d8
 800edbc:	20000869 	.word	0x20000869
 800edc0:	200007bc 	.word	0x200007bc

0800edc4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	4603      	mov	r3, r0
 800edcc:	460a      	mov	r2, r1
 800edce:	71fb      	strb	r3, [r7, #7]
 800edd0:	4613      	mov	r3, r2
 800edd2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800edd4:	2313      	movs	r3, #19
 800edd6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800eddc:	4b25      	ldr	r3, [pc, #148]	; (800ee74 <SecureFrame+0xb0>)
 800edde:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d002      	beq.n	800edec <SecureFrame+0x28>
 800ede6:	2b04      	cmp	r3, #4
 800ede8:	d011      	beq.n	800ee0e <SecureFrame+0x4a>
 800edea:	e03b      	b.n	800ee64 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800edec:	4822      	ldr	r0, [pc, #136]	; (800ee78 <SecureFrame+0xb4>)
 800edee:	f003 faf7 	bl	80123e0 <LoRaMacCryptoPrepareJoinRequest>
 800edf2:	4603      	mov	r3, r0
 800edf4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d001      	beq.n	800ee00 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800edfc:	2311      	movs	r3, #17
 800edfe:	e034      	b.n	800ee6a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ee00:	4b1c      	ldr	r3, [pc, #112]	; (800ee74 <SecureFrame+0xb0>)
 800ee02:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	4b1a      	ldr	r3, [pc, #104]	; (800ee74 <SecureFrame+0xb0>)
 800ee0a:	801a      	strh	r2, [r3, #0]
            break;
 800ee0c:	e02c      	b.n	800ee68 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ee0e:	f107 0308 	add.w	r3, r7, #8
 800ee12:	4618      	mov	r0, r3
 800ee14:	f003 fa0a 	bl	801222c <LoRaMacCryptoGetFCntUp>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ee1e:	2312      	movs	r3, #18
 800ee20:	e023      	b.n	800ee6a <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ee22:	4b14      	ldr	r3, [pc, #80]	; (800ee74 <SecureFrame+0xb0>)
 800ee24:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d104      	bne.n	800ee36 <SecureFrame+0x72>
 800ee2c:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <SecureFrame+0xb0>)
 800ee2e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d902      	bls.n	800ee3c <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ee3c:	68b8      	ldr	r0, [r7, #8]
 800ee3e:	79ba      	ldrb	r2, [r7, #6]
 800ee40:	79f9      	ldrb	r1, [r7, #7]
 800ee42:	4b0d      	ldr	r3, [pc, #52]	; (800ee78 <SecureFrame+0xb4>)
 800ee44:	f003 fbe4 	bl	8012610 <LoRaMacCryptoSecureMessage>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ee4c:	7bfb      	ldrb	r3, [r7, #15]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d001      	beq.n	800ee56 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee52:	2311      	movs	r3, #17
 800ee54:	e009      	b.n	800ee6a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ee56:	4b07      	ldr	r3, [pc, #28]	; (800ee74 <SecureFrame+0xb0>)
 800ee58:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	4b05      	ldr	r3, [pc, #20]	; (800ee74 <SecureFrame+0xb0>)
 800ee60:	801a      	strh	r2, [r3, #0]
            break;
 800ee62:	e001      	b.n	800ee68 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee64:	2303      	movs	r3, #3
 800ee66:	e000      	b.n	800ee6a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20000454 	.word	0x20000454
 800ee78:	2000055c 	.word	0x2000055c

0800ee7c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ee80:	4b09      	ldr	r3, [pc, #36]	; (800eea8 <CalculateBackOff+0x2c>)
 800ee82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10a      	bne.n	800ee9e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ee88:	4b07      	ldr	r3, [pc, #28]	; (800eea8 <CalculateBackOff+0x2c>)
 800ee8a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	4a06      	ldr	r2, [pc, #24]	; (800eeac <CalculateBackOff+0x30>)
 800ee92:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800ee96:	fb02 f303 	mul.w	r3, r2, r3
 800ee9a:	4a03      	ldr	r2, [pc, #12]	; (800eea8 <CalculateBackOff+0x2c>)
 800ee9c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800ee9e:	bf00      	nop
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bc80      	pop	{r7}
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	2000095c 	.word	0x2000095c
 800eeac:	20000454 	.word	0x20000454

0800eeb0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	7139      	strb	r1, [r7, #4]
 800eeba:	71fb      	strb	r3, [r7, #7]
 800eebc:	4613      	mov	r3, r2
 800eebe:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800eec0:	79fb      	ldrb	r3, [r7, #7]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <RemoveMacCommands+0x1c>
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d10d      	bne.n	800eee8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800eecc:	79bb      	ldrb	r3, [r7, #6]
 800eece:	2b01      	cmp	r3, #1
 800eed0:	d108      	bne.n	800eee4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800eed2:	793b      	ldrb	r3, [r7, #4]
 800eed4:	f003 0320 	and.w	r3, r3, #32
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d004      	beq.n	800eee8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800eede:	f002 fb61 	bl	80115a4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800eee2:	e001      	b.n	800eee8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800eee4:	f002 fb5e 	bl	80115a4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800eef0:	b5b0      	push	{r4, r5, r7, lr}
 800eef2:	b08e      	sub	sp, #56	; 0x38
 800eef4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800eef6:	4b68      	ldr	r3, [pc, #416]	; (800f098 <ResetMacParameters+0x1a8>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800eefe:	4b66      	ldr	r3, [pc, #408]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800ef04:	4b65      	ldr	r3, [pc, #404]	; (800f09c <ResetMacParameters+0x1ac>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800ef0c:	4b63      	ldr	r3, [pc, #396]	; (800f09c <ResetMacParameters+0x1ac>)
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ef14:	4b61      	ldr	r3, [pc, #388]	; (800f09c <ResetMacParameters+0x1ac>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800ef1c:	4b5f      	ldr	r3, [pc, #380]	; (800f09c <ResetMacParameters+0x1ac>)
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800ef24:	4b5c      	ldr	r3, [pc, #368]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800ef2c:	4b5a      	ldr	r3, [pc, #360]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ef34:	4b58      	ldr	r3, [pc, #352]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef36:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800ef3a:	4b57      	ldr	r3, [pc, #348]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ef40:	4b55      	ldr	r3, [pc, #340]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef42:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800ef46:	4b54      	ldr	r3, [pc, #336]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800ef4c:	4b52      	ldr	r3, [pc, #328]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef4e:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800ef52:	4b51      	ldr	r3, [pc, #324]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ef58:	4b4f      	ldr	r3, [pc, #316]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef5a:	4a4f      	ldr	r2, [pc, #316]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef5c:	3364      	adds	r3, #100	; 0x64
 800ef5e:	32a4      	adds	r2, #164	; 0xa4
 800ef60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef64:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ef68:	4b4b      	ldr	r3, [pc, #300]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef6a:	4a4b      	ldr	r2, [pc, #300]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef6c:	336c      	adds	r3, #108	; 0x6c
 800ef6e:	32ac      	adds	r2, #172	; 0xac
 800ef70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef74:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800ef78:	4b47      	ldr	r3, [pc, #284]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef7a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800ef7e:	4b46      	ldr	r3, [pc, #280]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ef84:	4b44      	ldr	r3, [pc, #272]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef86:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800ef8a:	4b43      	ldr	r3, [pc, #268]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef8c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ef90:	4b41      	ldr	r3, [pc, #260]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ef96:	4a40      	ldr	r2, [pc, #256]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef98:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ef9a:	4b3f      	ldr	r3, [pc, #252]	; (800f098 <ResetMacParameters+0x1a8>)
 800ef9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efa0:	4a3d      	ldr	r2, [pc, #244]	; (800f098 <ResetMacParameters+0x1a8>)
 800efa2:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800efa4:	4b3d      	ldr	r3, [pc, #244]	; (800f09c <ResetMacParameters+0x1ac>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800efac:	4b3a      	ldr	r3, [pc, #232]	; (800f098 <ResetMacParameters+0x1a8>)
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800efb4:	2301      	movs	r3, #1
 800efb6:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800efb8:	4b39      	ldr	r3, [pc, #228]	; (800f0a0 <ResetMacParameters+0x1b0>)
 800efba:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800efbc:	4b39      	ldr	r3, [pc, #228]	; (800f0a4 <ResetMacParameters+0x1b4>)
 800efbe:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800efc0:	4b35      	ldr	r3, [pc, #212]	; (800f098 <ResetMacParameters+0x1a8>)
 800efc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efc6:	1d3a      	adds	r2, r7, #4
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f004 f806 	bl	8012fdc <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800efd0:	4b32      	ldr	r3, [pc, #200]	; (800f09c <ResetMacParameters+0x1ac>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800efd8:	4b30      	ldr	r3, [pc, #192]	; (800f09c <ResetMacParameters+0x1ac>)
 800efda:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800efde:	4b2f      	ldr	r3, [pc, #188]	; (800f09c <ResetMacParameters+0x1ac>)
 800efe0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800efe4:	4b2c      	ldr	r3, [pc, #176]	; (800f098 <ResetMacParameters+0x1a8>)
 800efe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efe8:	4a2c      	ldr	r2, [pc, #176]	; (800f09c <ResetMacParameters+0x1ac>)
 800efea:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800efee:	4b2a      	ldr	r3, [pc, #168]	; (800f098 <ResetMacParameters+0x1a8>)
 800eff0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eff4:	4b29      	ldr	r3, [pc, #164]	; (800f09c <ResetMacParameters+0x1ac>)
 800eff6:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800effa:	4b27      	ldr	r3, [pc, #156]	; (800f098 <ResetMacParameters+0x1a8>)
 800effc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f000:	4b26      	ldr	r3, [pc, #152]	; (800f09c <ResetMacParameters+0x1ac>)
 800f002:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f006:	4b25      	ldr	r3, [pc, #148]	; (800f09c <ResetMacParameters+0x1ac>)
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f00e:	4b23      	ldr	r3, [pc, #140]	; (800f09c <ResetMacParameters+0x1ac>)
 800f010:	2201      	movs	r2, #1
 800f012:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f016:	4a21      	ldr	r2, [pc, #132]	; (800f09c <ResetMacParameters+0x1ac>)
 800f018:	4b20      	ldr	r3, [pc, #128]	; (800f09c <ResetMacParameters+0x1ac>)
 800f01a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800f01e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800f022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f026:	682b      	ldr	r3, [r5, #0]
 800f028:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f02a:	4b1c      	ldr	r3, [pc, #112]	; (800f09c <ResetMacParameters+0x1ac>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f032:	4b1a      	ldr	r3, [pc, #104]	; (800f09c <ResetMacParameters+0x1ac>)
 800f034:	2202      	movs	r2, #2
 800f036:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f03a:	2300      	movs	r3, #0
 800f03c:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800f03e:	2300      	movs	r3, #0
 800f040:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800f042:	4b16      	ldr	r3, [pc, #88]	; (800f09c <ResetMacParameters+0x1ac>)
 800f044:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d009      	beq.n	800f060 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f04c:	4b13      	ldr	r3, [pc, #76]	; (800f09c <ResetMacParameters+0x1ac>)
 800f04e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f056:	4b11      	ldr	r3, [pc, #68]	; (800f09c <ResetMacParameters+0x1ac>)
 800f058:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f060:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <ResetMacParameters+0x1b8>)
 800f062:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f064:	4b11      	ldr	r3, [pc, #68]	; (800f0ac <ResetMacParameters+0x1bc>)
 800f066:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f068:	4b11      	ldr	r3, [pc, #68]	; (800f0b0 <ResetMacParameters+0x1c0>)
 800f06a:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f06c:	4b11      	ldr	r3, [pc, #68]	; (800f0b4 <ResetMacParameters+0x1c4>)
 800f06e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f070:	4b11      	ldr	r3, [pc, #68]	; (800f0b8 <ResetMacParameters+0x1c8>)
 800f072:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f074:	4b11      	ldr	r3, [pc, #68]	; (800f0bc <ResetMacParameters+0x1cc>)
 800f076:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f078:	4b11      	ldr	r3, [pc, #68]	; (800f0c0 <ResetMacParameters+0x1d0>)
 800f07a:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f07c:	4b11      	ldr	r3, [pc, #68]	; (800f0c4 <ResetMacParameters+0x1d4>)
 800f07e:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f080:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f084:	f107 0310 	add.w	r3, r7, #16
 800f088:	4a0f      	ldr	r2, [pc, #60]	; (800f0c8 <ResetMacParameters+0x1d8>)
 800f08a:	4618      	mov	r0, r3
 800f08c:	f001 ffec 	bl	8011068 <LoRaMacClassBInit>
}
 800f090:	bf00      	nop
 800f092:	3738      	adds	r7, #56	; 0x38
 800f094:	46bd      	mov	sp, r7
 800f096:	bdb0      	pop	{r4, r5, r7, pc}
 800f098:	2000095c 	.word	0x2000095c
 800f09c:	20000454 	.word	0x20000454
 800f0a0:	20000b34 	.word	0x20000b34
 800f0a4:	20000bd8 	.word	0x20000bd8
 800f0a8:	200008b4 	.word	0x200008b4
 800f0ac:	20000870 	.word	0x20000870
 800f0b0:	200008a0 	.word	0x200008a0
 800f0b4:	200008d5 	.word	0x200008d5
 800f0b8:	20000a28 	.word	0x20000a28
 800f0bc:	2000099c 	.word	0x2000099c
 800f0c0:	200009a0 	.word	0x200009a0
 800f0c4:	20000a2c 	.word	0x20000a2c
 800f0c8:	20000f54 	.word	0x20000f54

0800f0cc <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f00b fe5e 	bl	801ad98 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f0dc:	4b0e      	ldr	r3, [pc, #56]	; (800f118 <RxWindowSetup+0x4c>)
 800f0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f0e2:	4b0e      	ldr	r3, [pc, #56]	; (800f11c <RxWindowSetup+0x50>)
 800f0e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0e8:	4a0d      	ldr	r2, [pc, #52]	; (800f120 <RxWindowSetup+0x54>)
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f004 f805 	bl	80130fc <RegionRxConfig>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00a      	beq.n	800f10e <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f0f8:	4b07      	ldr	r3, [pc, #28]	; (800f118 <RxWindowSetup+0x4c>)
 800f0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fc:	4a07      	ldr	r2, [pc, #28]	; (800f11c <RxWindowSetup+0x50>)
 800f0fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f100:	4610      	mov	r0, r2
 800f102:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	7cda      	ldrb	r2, [r3, #19]
 800f108:	4b06      	ldr	r3, [pc, #24]	; (800f124 <RxWindowSetup+0x58>)
 800f10a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800f10e:	bf00      	nop
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	0801c4cc 	.word	0x0801c4cc
 800f11c:	2000095c 	.word	0x2000095c
 800f120:	20000874 	.word	0x20000874
 800f124:	20000454 	.word	0x20000454

0800f128 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f128:	b590      	push	{r4, r7, lr}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f12e:	4b18      	ldr	r3, [pc, #96]	; (800f190 <OpenContinuousRxCWindow+0x68>)
 800f130:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f134:	4b16      	ldr	r3, [pc, #88]	; (800f190 <OpenContinuousRxCWindow+0x68>)
 800f136:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f13a:	b259      	sxtb	r1, r3
 800f13c:	4b14      	ldr	r3, [pc, #80]	; (800f190 <OpenContinuousRxCWindow+0x68>)
 800f13e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f142:	4b13      	ldr	r3, [pc, #76]	; (800f190 <OpenContinuousRxCWindow+0x68>)
 800f144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f146:	4c13      	ldr	r4, [pc, #76]	; (800f194 <OpenContinuousRxCWindow+0x6c>)
 800f148:	9400      	str	r4, [sp, #0]
 800f14a:	f003 ffb3 	bl	80130b4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f14e:	4b12      	ldr	r3, [pc, #72]	; (800f198 <OpenContinuousRxCWindow+0x70>)
 800f150:	2202      	movs	r2, #2
 800f152:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f156:	4b10      	ldr	r3, [pc, #64]	; (800f198 <OpenContinuousRxCWindow+0x70>)
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f15e:	4b0c      	ldr	r3, [pc, #48]	; (800f190 <OpenContinuousRxCWindow+0x68>)
 800f160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f164:	4a0d      	ldr	r2, [pc, #52]	; (800f19c <OpenContinuousRxCWindow+0x74>)
 800f166:	490b      	ldr	r1, [pc, #44]	; (800f194 <OpenContinuousRxCWindow+0x6c>)
 800f168:	4618      	mov	r0, r3
 800f16a:	f003 ffc7 	bl	80130fc <RegionRxConfig>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d009      	beq.n	800f188 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800f174:	4b0a      	ldr	r3, [pc, #40]	; (800f1a0 <OpenContinuousRxCWindow+0x78>)
 800f176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f178:	2000      	movs	r0, #0
 800f17a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f17c:	4b06      	ldr	r3, [pc, #24]	; (800f198 <OpenContinuousRxCWindow+0x70>)
 800f17e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800f182:	4b05      	ldr	r3, [pc, #20]	; (800f198 <OpenContinuousRxCWindow+0x70>)
 800f184:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800f188:	bf00      	nop
 800f18a:	3704      	adds	r7, #4
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd90      	pop	{r4, r7, pc}
 800f190:	2000095c 	.word	0x2000095c
 800f194:	20000834 	.word	0x20000834
 800f198:	20000454 	.word	0x20000454
 800f19c:	20000874 	.word	0x20000874
 800f1a0:	0801c4cc 	.word	0x0801c4cc

0800f1a4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	603b      	str	r3, [r7, #0]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f1b4:	4b82      	ldr	r3, [pc, #520]	; (800f3c0 <PrepareFrame+0x21c>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f1ba:	4b81      	ldr	r3, [pc, #516]	; (800f3c0 <PrepareFrame+0x21c>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d101      	bne.n	800f1d8 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f1d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1da:	461a      	mov	r2, r3
 800f1dc:	6839      	ldr	r1, [r7, #0]
 800f1de:	4879      	ldr	r0, [pc, #484]	; (800f3c4 <PrepareFrame+0x220>)
 800f1e0:	f007 fda3 	bl	8016d2a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f1e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	4b75      	ldr	r3, [pc, #468]	; (800f3c0 <PrepareFrame+0x21c>)
 800f1ea:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	781a      	ldrb	r2, [r3, #0]
 800f1f2:	4b73      	ldr	r3, [pc, #460]	; (800f3c0 <PrepareFrame+0x21c>)
 800f1f4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b07      	cmp	r3, #7
 800f202:	f000 80b9 	beq.w	800f378 <PrepareFrame+0x1d4>
 800f206:	2b07      	cmp	r3, #7
 800f208:	f300 80d0 	bgt.w	800f3ac <PrepareFrame+0x208>
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d006      	beq.n	800f21e <PrepareFrame+0x7a>
 800f210:	2b04      	cmp	r3, #4
 800f212:	f040 80cb 	bne.w	800f3ac <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f216:	4b6a      	ldr	r3, [pc, #424]	; (800f3c0 <PrepareFrame+0x21c>)
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f21e:	4b68      	ldr	r3, [pc, #416]	; (800f3c0 <PrepareFrame+0x21c>)
 800f220:	2204      	movs	r2, #4
 800f222:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f226:	4b66      	ldr	r3, [pc, #408]	; (800f3c0 <PrepareFrame+0x21c>)
 800f228:	4a67      	ldr	r2, [pc, #412]	; (800f3c8 <PrepareFrame+0x224>)
 800f22a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f22e:	4b64      	ldr	r3, [pc, #400]	; (800f3c0 <PrepareFrame+0x21c>)
 800f230:	22ff      	movs	r2, #255	; 0xff
 800f232:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	781a      	ldrb	r2, [r3, #0]
 800f23a:	4b61      	ldr	r3, [pc, #388]	; (800f3c0 <PrepareFrame+0x21c>)
 800f23c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f240:	4a5f      	ldr	r2, [pc, #380]	; (800f3c0 <PrepareFrame+0x21c>)
 800f242:	79fb      	ldrb	r3, [r7, #7]
 800f244:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800f248:	4b60      	ldr	r3, [pc, #384]	; (800f3cc <PrepareFrame+0x228>)
 800f24a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f24e:	4a5c      	ldr	r2, [pc, #368]	; (800f3c0 <PrepareFrame+0x21c>)
 800f250:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	781a      	ldrb	r2, [r3, #0]
 800f258:	4b59      	ldr	r3, [pc, #356]	; (800f3c0 <PrepareFrame+0x21c>)
 800f25a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800f25e:	4b58      	ldr	r3, [pc, #352]	; (800f3c0 <PrepareFrame+0x21c>)
 800f260:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800f264:	4b56      	ldr	r3, [pc, #344]	; (800f3c0 <PrepareFrame+0x21c>)
 800f266:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800f26a:	4b55      	ldr	r3, [pc, #340]	; (800f3c0 <PrepareFrame+0x21c>)
 800f26c:	4a55      	ldr	r2, [pc, #340]	; (800f3c4 <PrepareFrame+0x220>)
 800f26e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f272:	f107 0318 	add.w	r3, r7, #24
 800f276:	4618      	mov	r0, r3
 800f278:	f002 ffd8 	bl	801222c <LoRaMacCryptoGetFCntUp>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d001      	beq.n	800f286 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f282:	2312      	movs	r3, #18
 800f284:	e098      	b.n	800f3b8 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	b29a      	uxth	r2, r3
 800f28a:	4b4d      	ldr	r3, [pc, #308]	; (800f3c0 <PrepareFrame+0x21c>)
 800f28c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800f290:	4b4b      	ldr	r3, [pc, #300]	; (800f3c0 <PrepareFrame+0x21c>)
 800f292:	2200      	movs	r2, #0
 800f294:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800f298:	4b49      	ldr	r3, [pc, #292]	; (800f3c0 <PrepareFrame+0x21c>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	4a47      	ldr	r2, [pc, #284]	; (800f3c0 <PrepareFrame+0x21c>)
 800f2a4:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f2a8:	f107 0314 	add.w	r3, r7, #20
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f002 f99b 	bl	80115e8 <LoRaMacCommandsGetSizeSerializedCmds>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2b8:	2313      	movs	r3, #19
 800f2ba:	e07d      	b.n	800f3b8 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d076      	beq.n	800f3b0 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800f2c2:	4b42      	ldr	r3, [pc, #264]	; (800f3cc <PrepareFrame+0x228>)
 800f2c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe fdab 	bl	800de24 <GetMaxAppPayloadWithoutFOptsLength>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f2d2:	4b3b      	ldr	r3, [pc, #236]	; (800f3c0 <PrepareFrame+0x21c>)
 800f2d4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01d      	beq.n	800f318 <PrepareFrame+0x174>
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	2b0f      	cmp	r3, #15
 800f2e0:	d81a      	bhi.n	800f318 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800f2e2:	f107 0314 	add.w	r3, r7, #20
 800f2e6:	4a3a      	ldr	r2, [pc, #232]	; (800f3d0 <PrepareFrame+0x22c>)
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	200f      	movs	r0, #15
 800f2ec:	f002 f992 	bl	8011614 <LoRaMacCommandsSerializeCmds>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2f6:	2313      	movs	r3, #19
 800f2f8:	e05e      	b.n	800f3b8 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	f003 030f 	and.w	r3, r3, #15
 800f300:	b2d9      	uxtb	r1, r3
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	7813      	ldrb	r3, [r2, #0]
 800f306:	f361 0303 	bfi	r3, r1, #0, #4
 800f30a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	781a      	ldrb	r2, [r3, #0]
 800f310:	4b2b      	ldr	r3, [pc, #172]	; (800f3c0 <PrepareFrame+0x21c>)
 800f312:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800f316:	e04b      	b.n	800f3b0 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f318:	4b29      	ldr	r3, [pc, #164]	; (800f3c0 <PrepareFrame+0x21c>)
 800f31a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d010      	beq.n	800f344 <PrepareFrame+0x1a0>
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2b0f      	cmp	r3, #15
 800f326:	d90d      	bls.n	800f344 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f328:	7ffb      	ldrb	r3, [r7, #31]
 800f32a:	f107 0114 	add.w	r1, r7, #20
 800f32e:	4a29      	ldr	r2, [pc, #164]	; (800f3d4 <PrepareFrame+0x230>)
 800f330:	4618      	mov	r0, r3
 800f332:	f002 f96f 	bl	8011614 <LoRaMacCommandsSerializeCmds>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f33c:	2313      	movs	r3, #19
 800f33e:	e03b      	b.n	800f3b8 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800f340:	230a      	movs	r3, #10
 800f342:	e039      	b.n	800f3b8 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f344:	7ffb      	ldrb	r3, [r7, #31]
 800f346:	f107 0114 	add.w	r1, r7, #20
 800f34a:	4a22      	ldr	r2, [pc, #136]	; (800f3d4 <PrepareFrame+0x230>)
 800f34c:	4618      	mov	r0, r3
 800f34e:	f002 f961 	bl	8011614 <LoRaMacCommandsSerializeCmds>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d001      	beq.n	800f35c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f358:	2313      	movs	r3, #19
 800f35a:	e02d      	b.n	800f3b8 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800f35c:	4b18      	ldr	r3, [pc, #96]	; (800f3c0 <PrepareFrame+0x21c>)
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800f364:	4b16      	ldr	r3, [pc, #88]	; (800f3c0 <PrepareFrame+0x21c>)
 800f366:	4a1b      	ldr	r2, [pc, #108]	; (800f3d4 <PrepareFrame+0x230>)
 800f368:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	4b13      	ldr	r3, [pc, #76]	; (800f3c0 <PrepareFrame+0x21c>)
 800f372:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800f376:	e01b      	b.n	800f3b0 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d01a      	beq.n	800f3b4 <PrepareFrame+0x210>
 800f37e:	4b10      	ldr	r3, [pc, #64]	; (800f3c0 <PrepareFrame+0x21c>)
 800f380:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f384:	2b00      	cmp	r3, #0
 800f386:	d015      	beq.n	800f3b4 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800f388:	4813      	ldr	r0, [pc, #76]	; (800f3d8 <PrepareFrame+0x234>)
 800f38a:	4b0d      	ldr	r3, [pc, #52]	; (800f3c0 <PrepareFrame+0x21c>)
 800f38c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f390:	b29b      	uxth	r3, r3
 800f392:	461a      	mov	r2, r3
 800f394:	6839      	ldr	r1, [r7, #0]
 800f396:	f007 fcc8 	bl	8016d2a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800f39a:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <PrepareFrame+0x21c>)
 800f39c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <PrepareFrame+0x21c>)
 800f3a8:	801a      	strh	r2, [r3, #0]
            }
            break;
 800f3aa:	e003      	b.n	800f3b4 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	e003      	b.n	800f3b8 <PrepareFrame+0x214>
            break;
 800f3b0:	bf00      	nop
 800f3b2:	e000      	b.n	800f3b6 <PrepareFrame+0x212>
            break;
 800f3b4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800f3b6:	2300      	movs	r3, #0
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3720      	adds	r7, #32
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20000454 	.word	0x20000454
 800f3c4:	2000058c 	.word	0x2000058c
 800f3c8:	20000456 	.word	0x20000456
 800f3cc:	2000095c 	.word	0x2000095c
 800f3d0:	2000056c 	.word	0x2000056c
 800f3d4:	200008dc 	.word	0x200008dc
 800f3d8:	20000457 	.word	0x20000457

0800f3dc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08a      	sub	sp, #40	; 0x28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f3f4:	4b47      	ldr	r3, [pc, #284]	; (800f514 <SendFrameOnChannel+0x138>)
 800f3f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f3fa:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f3fc:	4b45      	ldr	r3, [pc, #276]	; (800f514 <SendFrameOnChannel+0x138>)
 800f3fe:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f402:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f404:	4b43      	ldr	r3, [pc, #268]	; (800f514 <SendFrameOnChannel+0x138>)
 800f406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f408:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f40a:	4b42      	ldr	r3, [pc, #264]	; (800f514 <SendFrameOnChannel+0x138>)
 800f40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f40e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800f410:	4b41      	ldr	r3, [pc, #260]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800f416:	4b3f      	ldr	r3, [pc, #252]	; (800f514 <SendFrameOnChannel+0x138>)
 800f418:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f41c:	f107 020f 	add.w	r2, r7, #15
 800f420:	f107 0110 	add.w	r1, r7, #16
 800f424:	4b3d      	ldr	r3, [pc, #244]	; (800f51c <SendFrameOnChannel+0x140>)
 800f426:	f003 fe87 	bl	8013138 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f42a:	4b3b      	ldr	r3, [pc, #236]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f432:	4b38      	ldr	r3, [pc, #224]	; (800f514 <SendFrameOnChannel+0x138>)
 800f434:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	4b37      	ldr	r3, [pc, #220]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f43c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800f440:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800f444:	4b34      	ldr	r3, [pc, #208]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f446:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800f44a:	79fb      	ldrb	r3, [r7, #7]
 800f44c:	4a32      	ldr	r2, [pc, #200]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f44e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f452:	4b31      	ldr	r3, [pc, #196]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f454:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f458:	4a2f      	ldr	r2, [pc, #188]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f45a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f45e:	4b2e      	ldr	r3, [pc, #184]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f460:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f464:	4a2c      	ldr	r2, [pc, #176]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f466:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800f46a:	f001 fe69 	bl	8011140 <LoRaMacClassBIsBeaconModeActive>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d00b      	beq.n	800f48c <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f474:	4b28      	ldr	r3, [pc, #160]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f476:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f47a:	4618      	mov	r0, r3
 800f47c:	f001 fecb 	bl	8011216 <LoRaMacClassBIsUplinkCollision>
 800f480:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f488:	2310      	movs	r3, #16
 800f48a:	e03e      	b.n	800f50a <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f48c:	4b21      	ldr	r3, [pc, #132]	; (800f514 <SendFrameOnChannel+0x138>)
 800f48e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f492:	2b01      	cmp	r3, #1
 800f494:	d101      	bne.n	800f49a <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800f496:	f001 fec8 	bl	801122a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800f49a:	f001 fe62 	bl	8011162 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800f49e:	4b1d      	ldr	r3, [pc, #116]	; (800f514 <SendFrameOnChannel+0x138>)
 800f4a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	4a1c      	ldr	r2, [pc, #112]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4a8:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7ff fc88 	bl	800edc4 <SecureFrame>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800f4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d002      	beq.n	800f4c8 <SendFrameOnChannel+0xec>
    {
        return status;
 800f4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4c6:	e020      	b.n	800f50a <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f4c8:	4b13      	ldr	r3, [pc, #76]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f4ce:	f043 0302 	orr.w	r3, r3, #2
 800f4d2:	4a11      	ldr	r2, [pc, #68]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4d4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800f4d8:	4b0f      	ldr	r3, [pc, #60]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4da:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f4de:	f083 0301 	eor.w	r3, r3, #1
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d007      	beq.n	800f4f8 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800f4e8:	4b0b      	ldr	r3, [pc, #44]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4ea:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	4b09      	ldr	r3, [pc, #36]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f4f8:	4b09      	ldr	r3, [pc, #36]	; (800f520 <SendFrameOnChannel+0x144>)
 800f4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fc:	4a06      	ldr	r2, [pc, #24]	; (800f518 <SendFrameOnChannel+0x13c>)
 800f4fe:	8812      	ldrh	r2, [r2, #0]
 800f500:	b2d2      	uxtb	r2, r2
 800f502:	4611      	mov	r1, r2
 800f504:	4807      	ldr	r0, [pc, #28]	; (800f524 <SendFrameOnChannel+0x148>)
 800f506:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3728      	adds	r7, #40	; 0x28
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	2000095c 	.word	0x2000095c
 800f518:	20000454 	.word	0x20000454
 800f51c:	2000086c 	.word	0x2000086c
 800f520:	0801c4cc 	.word	0x0801c4cc
 800f524:	20000456 	.word	0x20000456

0800f528 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b086      	sub	sp, #24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	4603      	mov	r3, r0
 800f530:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800f532:	4b15      	ldr	r3, [pc, #84]	; (800f588 <SetTxContinuousWave+0x60>)
 800f534:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f538:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f53a:	4b14      	ldr	r3, [pc, #80]	; (800f58c <SetTxContinuousWave+0x64>)
 800f53c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f540:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f542:	4b12      	ldr	r3, [pc, #72]	; (800f58c <SetTxContinuousWave+0x64>)
 800f544:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f548:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f54a:	4b10      	ldr	r3, [pc, #64]	; (800f58c <SetTxContinuousWave+0x64>)
 800f54c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f54e:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f550:	4b0e      	ldr	r3, [pc, #56]	; (800f58c <SetTxContinuousWave+0x64>)
 800f552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f554:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800f556:	88fb      	ldrh	r3, [r7, #6]
 800f558:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800f55a:	4b0c      	ldr	r3, [pc, #48]	; (800f58c <SetTxContinuousWave+0x64>)
 800f55c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f560:	f107 0208 	add.w	r2, r7, #8
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f003 fee3 	bl	8013332 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f56c:	4b06      	ldr	r3, [pc, #24]	; (800f588 <SetTxContinuousWave+0x60>)
 800f56e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f572:	f043 0302 	orr.w	r3, r3, #2
 800f576:	4a04      	ldr	r2, [pc, #16]	; (800f588 <SetTxContinuousWave+0x60>)
 800f578:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	20000454 	.word	0x20000454
 800f58c:	2000095c 	.word	0x2000095c

0800f590 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	6039      	str	r1, [r7, #0]
 800f59a:	80fb      	strh	r3, [r7, #6]
 800f59c:	4613      	mov	r3, r2
 800f59e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800f5a0:	4b09      	ldr	r3, [pc, #36]	; (800f5c8 <SetTxContinuousWave1+0x38>)
 800f5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5a4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800f5a8:	88fa      	ldrh	r2, [r7, #6]
 800f5aa:	6838      	ldr	r0, [r7, #0]
 800f5ac:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f5ae:	4b07      	ldr	r3, [pc, #28]	; (800f5cc <SetTxContinuousWave1+0x3c>)
 800f5b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5b4:	f043 0302 	orr.w	r3, r3, #2
 800f5b8:	4a04      	ldr	r2, [pc, #16]	; (800f5cc <SetTxContinuousWave1+0x3c>)
 800f5ba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	0801c4cc 	.word	0x0801c4cc
 800f5cc:	20000454 	.word	0x20000454

0800f5d0 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	af00      	add	r7, sp, #0
    return &Nvm;
 800f5d4:	4b02      	ldr	r3, [pc, #8]	; (800f5e0 <GetNvmData+0x10>)
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bc80      	pop	{r7}
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	2000095c 	.word	0x2000095c

0800f5e4 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	e09a      	b.n	800f730 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800f5fa:	4b4f      	ldr	r3, [pc, #316]	; (800f738 <RestoreNvmData+0x154>)
 800f5fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f600:	2b01      	cmp	r3, #1
 800f602:	d001      	beq.n	800f608 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800f604:	2301      	movs	r3, #1
 800f606:	e093      	b.n	800f730 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2124      	movs	r1, #36	; 0x24
 800f60c:	4618      	mov	r0, r3
 800f60e:	f007 fbe1 	bl	8016dd4 <Crc32>
 800f612:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d105      	bne.n	800f62a <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2228      	movs	r2, #40	; 0x28
 800f622:	4619      	mov	r1, r3
 800f624:	4845      	ldr	r0, [pc, #276]	; (800f73c <RestoreNvmData+0x158>)
 800f626:	f007 fb80 	bl	8016d2a <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	3328      	adds	r3, #40	; 0x28
 800f62e:	2114      	movs	r1, #20
 800f630:	4618      	mov	r0, r3
 800f632:	f007 fbcf 	bl	8016dd4 <Crc32>
 800f636:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d106      	bne.n	800f650 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	3328      	adds	r3, #40	; 0x28
 800f646:	2218      	movs	r2, #24
 800f648:	4619      	mov	r1, r3
 800f64a:	483d      	ldr	r0, [pc, #244]	; (800f740 <RestoreNvmData+0x15c>)
 800f64c:	f007 fb6d 	bl	8016d2a <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3340      	adds	r3, #64	; 0x40
 800f654:	21d4      	movs	r1, #212	; 0xd4
 800f656:	4618      	mov	r0, r3
 800f658:	f007 fbbc 	bl	8016dd4 <Crc32>
 800f65c:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	429a      	cmp	r2, r3
 800f668:	d11f      	bne.n	800f6aa <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3340      	adds	r3, #64	; 0x40
 800f66e:	22d8      	movs	r2, #216	; 0xd8
 800f670:	4619      	mov	r1, r3
 800f672:	4834      	ldr	r0, [pc, #208]	; (800f744 <RestoreNvmData+0x160>)
 800f674:	f007 fb59 	bl	8016d2a <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f678:	4b2f      	ldr	r3, [pc, #188]	; (800f738 <RestoreNvmData+0x154>)
 800f67a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f67e:	4b2e      	ldr	r3, [pc, #184]	; (800f738 <RestoreNvmData+0x154>)
 800f680:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f684:	4b2d      	ldr	r3, [pc, #180]	; (800f73c <RestoreNvmData+0x158>)
 800f686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f688:	4a2b      	ldr	r2, [pc, #172]	; (800f738 <RestoreNvmData+0x154>)
 800f68a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f68e:	4b2b      	ldr	r3, [pc, #172]	; (800f73c <RestoreNvmData+0x158>)
 800f690:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f694:	4b28      	ldr	r3, [pc, #160]	; (800f738 <RestoreNvmData+0x154>)
 800f696:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f69a:	4b27      	ldr	r3, [pc, #156]	; (800f738 <RestoreNvmData+0x154>)
 800f69c:	2201      	movs	r2, #1
 800f69e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f6a2:	4b25      	ldr	r3, [pc, #148]	; (800f738 <RestoreNvmData+0x154>)
 800f6a4:	2202      	movs	r2, #2
 800f6a6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800f6b0:	21bc      	movs	r1, #188	; 0xbc
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f007 fb8e 	bl	8016dd4 <Crc32>
 800f6b8:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d107      	bne.n	800f6d6 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800f6cc:	22c0      	movs	r2, #192	; 0xc0
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	481d      	ldr	r0, [pc, #116]	; (800f748 <RestoreNvmData+0x164>)
 800f6d2:	f007 fb2a 	bl	8016d2a <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800f6dc:	21a0      	movs	r1, #160	; 0xa0
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f007 fb78 	bl	8016dd4 <Crc32>
 800f6e4:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d107      	bne.n	800f702 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800f6f8:	22a4      	movs	r2, #164	; 0xa4
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	4813      	ldr	r0, [pc, #76]	; (800f74c <RestoreNvmData+0x168>)
 800f6fe:	f007 fb14 	bl	8016d2a <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800f708:	2114      	movs	r1, #20
 800f70a:	4618      	mov	r0, r3
 800f70c:	f007 fb62 	bl	8016dd4 <Crc32>
 800f710:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d107      	bne.n	800f72e <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800f724:	2218      	movs	r2, #24
 800f726:	4619      	mov	r1, r3
 800f728:	4809      	ldr	r0, [pc, #36]	; (800f750 <RestoreNvmData+0x16c>)
 800f72a:	f007 fafe 	bl	8016d2a <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	20000454 	.word	0x20000454
 800f73c:	2000095c 	.word	0x2000095c
 800f740:	20000984 	.word	0x20000984
 800f744:	2000099c 	.word	0x2000099c
 800f748:	20000a74 	.word	0x20000a74
 800f74c:	20000b34 	.word	0x20000b34
 800f750:	20000f54 	.word	0x20000f54

0800f754 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d002      	beq.n	800f76a <DetermineFrameType+0x16>
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f76a:	2303      	movs	r3, #3
 800f76c:	e03b      	b.n	800f7e6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	7b1b      	ldrb	r3, [r3, #12]
 800f772:	f003 030f 	and.w	r3, r3, #15
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d008      	beq.n	800f78e <DetermineFrameType+0x3a>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d003      	beq.n	800f78e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2200      	movs	r2, #0
 800f78a:	701a      	strb	r2, [r3, #0]
 800f78c:	e02a      	b.n	800f7e4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f794:	2b00      	cmp	r3, #0
 800f796:	d103      	bne.n	800f7a0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2201      	movs	r2, #1
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	e021      	b.n	800f7e4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	7b1b      	ldrb	r3, [r3, #12]
 800f7a4:	f003 030f 	and.w	r3, r3, #15
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d108      	bne.n	800f7c0 <DetermineFrameType+0x6c>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d103      	bne.n	800f7c0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	2202      	movs	r2, #2
 800f7bc:	701a      	strb	r2, [r3, #0]
 800f7be:	e011      	b.n	800f7e4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7b1b      	ldrb	r3, [r3, #12]
 800f7c4:	f003 030f 	and.w	r3, r3, #15
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d108      	bne.n	800f7e0 <DetermineFrameType+0x8c>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d003      	beq.n	800f7e0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2203      	movs	r2, #3
 800f7dc:	701a      	strb	r2, [r3, #0]
 800f7de:	e001      	b.n	800f7e4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800f7e0:	2317      	movs	r3, #23
 800f7e2:	e000      	b.n	800f7e6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bc80      	pop	{r7}
 800f7ee:	4770      	bx	lr

0800f7f0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800f7f4:	4b12      	ldr	r3, [pc, #72]	; (800f840 <CheckRetransUnconfirmedUplink+0x50>)
 800f7f6:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800f7fa:	4b12      	ldr	r3, [pc, #72]	; (800f844 <CheckRetransUnconfirmedUplink+0x54>)
 800f7fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800f800:	429a      	cmp	r2, r3
 800f802:	d301      	bcc.n	800f808 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800f804:	2301      	movs	r3, #1
 800f806:	e016      	b.n	800f836 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f808:	4b0d      	ldr	r3, [pc, #52]	; (800f840 <CheckRetransUnconfirmedUplink+0x50>)
 800f80a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f80e:	f003 0302 	and.w	r3, r3, #2
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00d      	beq.n	800f834 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f818:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <CheckRetransUnconfirmedUplink+0x54>)
 800f81a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d101      	bne.n	800f826 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800f822:	2301      	movs	r3, #1
 800f824:	e007      	b.n	800f836 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f826:	4b06      	ldr	r3, [pc, #24]	; (800f840 <CheckRetransUnconfirmedUplink+0x50>)
 800f828:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d101      	bne.n	800f834 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800f830:	2301      	movs	r3, #1
 800f832:	e000      	b.n	800f836 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	46bd      	mov	sp, r7
 800f83a:	bc80      	pop	{r7}
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	20000454 	.word	0x20000454
 800f844:	2000095c 	.word	0x2000095c

0800f848 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800f84c:	4b0e      	ldr	r3, [pc, #56]	; (800f888 <CheckRetransConfirmedUplink+0x40>)
 800f84e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800f852:	4b0d      	ldr	r3, [pc, #52]	; (800f888 <CheckRetransConfirmedUplink+0x40>)
 800f854:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800f858:	429a      	cmp	r2, r3
 800f85a:	d301      	bcc.n	800f860 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e00f      	b.n	800f880 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f860:	4b09      	ldr	r3, [pc, #36]	; (800f888 <CheckRetransConfirmedUplink+0x40>)
 800f862:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f866:	f003 0302 	and.w	r3, r3, #2
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d006      	beq.n	800f87e <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f870:	4b05      	ldr	r3, [pc, #20]	; (800f888 <CheckRetransConfirmedUplink+0x40>)
 800f872:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e000      	b.n	800f880 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	4618      	mov	r0, r3
 800f882:	46bd      	mov	sp, r7
 800f884:	bc80      	pop	{r7}
 800f886:	4770      	bx	lr
 800f888:	20000454 	.word	0x20000454

0800f88c <StopRetransmission>:

static bool StopRetransmission( void )
{
 800f88c:	b480      	push	{r7}
 800f88e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800f890:	4b1a      	ldr	r3, [pc, #104]	; (800f8fc <StopRetransmission+0x70>)
 800f892:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f896:	f003 0302 	and.w	r3, r3, #2
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d009      	beq.n	800f8b4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f8a0:	4b16      	ldr	r3, [pc, #88]	; (800f8fc <StopRetransmission+0x70>)
 800f8a2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00e      	beq.n	800f8c8 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800f8aa:	4b14      	ldr	r3, [pc, #80]	; (800f8fc <StopRetransmission+0x70>)
 800f8ac:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d009      	beq.n	800f8c8 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f8b4:	4b12      	ldr	r3, [pc, #72]	; (800f900 <StopRetransmission+0x74>)
 800f8b6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d004      	beq.n	800f8c8 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 800f8be:	4b10      	ldr	r3, [pc, #64]	; (800f900 <StopRetransmission+0x74>)
 800f8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	4a0e      	ldr	r2, [pc, #56]	; (800f900 <StopRetransmission+0x74>)
 800f8c6:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800f8c8:	4b0c      	ldr	r3, [pc, #48]	; (800f8fc <StopRetransmission+0x70>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 800f8d0:	4b0a      	ldr	r3, [pc, #40]	; (800f8fc <StopRetransmission+0x70>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 800f8d8:	4b08      	ldr	r3, [pc, #32]	; (800f8fc <StopRetransmission+0x70>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f8e0:	4b06      	ldr	r3, [pc, #24]	; (800f8fc <StopRetransmission+0x70>)
 800f8e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8e6:	f023 0302 	bic.w	r3, r3, #2
 800f8ea:	4a04      	ldr	r2, [pc, #16]	; (800f8fc <StopRetransmission+0x70>)
 800f8ec:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 800f8f0:	2301      	movs	r3, #1
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bc80      	pop	{r7}
 800f8f8:	4770      	bx	lr
 800f8fa:	bf00      	nop
 800f8fc:	20000454 	.word	0x20000454
 800f900:	2000095c 	.word	0x2000095c

0800f904 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	4603      	mov	r3, r0
 800f90c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800f90e:	4b0b      	ldr	r3, [pc, #44]	; (800f93c <CallNvmDataChangeCallback+0x38>)
 800f910:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00c      	beq.n	800f932 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800f918:	4b08      	ldr	r3, [pc, #32]	; (800f93c <CallNvmDataChangeCallback+0x38>)
 800f91a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f91e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800f920:	2b00      	cmp	r3, #0
 800f922:	d006      	beq.n	800f932 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800f924:	4b05      	ldr	r3, [pc, #20]	; (800f93c <CallNvmDataChangeCallback+0x38>)
 800f926:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	88fa      	ldrh	r2, [r7, #6]
 800f92e:	4610      	mov	r0, r2
 800f930:	4798      	blx	r3
    }
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	20000454 	.word	0x20000454

0800f940 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800f946:	4b1b      	ldr	r3, [pc, #108]	; (800f9b4 <AckTimeoutRetriesProcess+0x74>)
 800f948:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800f94c:	4b19      	ldr	r3, [pc, #100]	; (800f9b4 <AckTimeoutRetriesProcess+0x74>)
 800f94e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800f952:	429a      	cmp	r2, r3
 800f954:	d229      	bcs.n	800f9aa <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800f956:	4b17      	ldr	r3, [pc, #92]	; (800f9b4 <AckTimeoutRetriesProcess+0x74>)
 800f958:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f95c:	3301      	adds	r3, #1
 800f95e:	b2da      	uxtb	r2, r3
 800f960:	4b14      	ldr	r3, [pc, #80]	; (800f9b4 <AckTimeoutRetriesProcess+0x74>)
 800f962:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800f966:	4b13      	ldr	r3, [pc, #76]	; (800f9b4 <AckTimeoutRetriesProcess+0x74>)
 800f968:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	b2db      	uxtb	r3, r3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d019      	beq.n	800f9aa <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f976:	2322      	movs	r3, #34	; 0x22
 800f978:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f97a:	4b0f      	ldr	r3, [pc, #60]	; (800f9b8 <AckTimeoutRetriesProcess+0x78>)
 800f97c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f980:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <AckTimeoutRetriesProcess+0x78>)
 800f984:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f988:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f98a:	4b0b      	ldr	r3, [pc, #44]	; (800f9b8 <AckTimeoutRetriesProcess+0x78>)
 800f98c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f990:	f107 0208 	add.w	r2, r7, #8
 800f994:	4611      	mov	r1, r2
 800f996:	4618      	mov	r0, r3
 800f998:	f003 fae7 	bl	8012f6a <RegionGetPhyParam>
 800f99c:	4603      	mov	r3, r0
 800f99e:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	b25a      	sxtb	r2, r3
 800f9a4:	4b04      	ldr	r3, [pc, #16]	; (800f9b8 <AckTimeoutRetriesProcess+0x78>)
 800f9a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20000454 	.word	0x20000454
 800f9b8:	2000095c 	.word	0x2000095c

0800f9bc <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800f9c2:	4b14      	ldr	r3, [pc, #80]	; (800fa14 <AckTimeoutRetriesFinalize+0x58>)
 800f9c4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f9c8:	f083 0301 	eor.w	r3, r3, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d015      	beq.n	800f9fe <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800f9d6:	4b10      	ldr	r3, [pc, #64]	; (800fa18 <AckTimeoutRetriesFinalize+0x5c>)
 800f9d8:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800f9da:	4b10      	ldr	r3, [pc, #64]	; (800fa1c <AckTimeoutRetriesFinalize+0x60>)
 800f9dc:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f9de:	4b10      	ldr	r3, [pc, #64]	; (800fa20 <AckTimeoutRetriesFinalize+0x64>)
 800f9e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9e4:	1d3a      	adds	r2, r7, #4
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f003 faf7 	bl	8012fdc <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800f9ee:	4b09      	ldr	r3, [pc, #36]	; (800fa14 <AckTimeoutRetriesFinalize+0x58>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800f9f6:	4b07      	ldr	r3, [pc, #28]	; (800fa14 <AckTimeoutRetriesFinalize+0x58>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f9fe:	4b05      	ldr	r3, [pc, #20]	; (800fa14 <AckTimeoutRetriesFinalize+0x58>)
 800fa00:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fa04:	4b03      	ldr	r3, [pc, #12]	; (800fa14 <AckTimeoutRetriesFinalize+0x58>)
 800fa06:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800fa0a:	bf00      	nop
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	20000454 	.word	0x20000454
 800fa18:	20000b34 	.word	0x20000b34
 800fa1c:	20000bd8 	.word	0x20000bd8
 800fa20:	2000095c 	.word	0x2000095c

0800fa24 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800fa24:	b480      	push	{r7}
 800fa26:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fa28:	4b0b      	ldr	r3, [pc, #44]	; (800fa58 <IsRequestPending+0x34>)
 800fa2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fa2e:	f003 0304 	and.w	r3, r3, #4
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d107      	bne.n	800fa48 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800fa38:	4b07      	ldr	r3, [pc, #28]	; (800fa58 <IsRequestPending+0x34>)
 800fa3a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d001      	beq.n	800fa4c <IsRequestPending+0x28>
    {
        return 1;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e000      	b.n	800fa4e <IsRequestPending+0x2a>
    }
    return 0;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bc80      	pop	{r7}
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop
 800fa58:	20000454 	.word	0x20000454

0800fa5c <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800fa5c:	b590      	push	{r4, r7, lr}
 800fa5e:	b08f      	sub	sp, #60	; 0x3c
 800fa60:	af02      	add	r7, sp, #8
 800fa62:	6178      	str	r0, [r7, #20]
 800fa64:	6139      	str	r1, [r7, #16]
 800fa66:	4613      	mov	r3, r2
 800fa68:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d002      	beq.n	800fa76 <LoRaMacInitialization+0x1a>
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fa76:	2303      	movs	r3, #3
 800fa78:	e275      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00b      	beq.n	800fa9a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d007      	beq.n	800fa9a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d003      	beq.n	800fa9a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d101      	bne.n	800fa9e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fa9a:	2303      	movs	r3, #3
 800fa9c:	e263      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f003 fa4d 	bl	8012f40 <RegionIsActive>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f083 0301 	eor.w	r3, r3, #1
 800faac:	b2db      	uxtb	r3, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800fab2:	2309      	movs	r3, #9
 800fab4:	e257      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800fab6:	6978      	ldr	r0, [r7, #20]
 800fab8:	f001 fef6 	bl	80118a8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800fabc:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 800fac0:	2100      	movs	r1, #0
 800fac2:	48c7      	ldr	r0, [pc, #796]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fac4:	f007 f96c 	bl	8016da0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800fac8:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800facc:	2100      	movs	r1, #0
 800face:	48c5      	ldr	r0, [pc, #788]	; (800fde4 <LoRaMacInitialization+0x388>)
 800fad0:	f007 f966 	bl	8016da0 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fad4:	4bc3      	ldr	r3, [pc, #780]	; (800fde4 <LoRaMacInitialization+0x388>)
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800fadc:	4bc1      	ldr	r3, [pc, #772]	; (800fde4 <LoRaMacInitialization+0x388>)
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800fae4:	4abe      	ldr	r2, [pc, #760]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800faec:	4bbc      	ldr	r3, [pc, #752]	; (800fde0 <LoRaMacInitialization+0x384>)
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800faf4:	4bba      	ldr	r3, [pc, #744]	; (800fde0 <LoRaMacInitialization+0x384>)
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800fafc:	4bb8      	ldr	r3, [pc, #736]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fafe:	4aba      	ldr	r2, [pc, #744]	; (800fde8 <LoRaMacInitialization+0x38c>)
 800fb00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800fb04:	230f      	movs	r3, #15
 800fb06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb0a:	4bb5      	ldr	r3, [pc, #724]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f003 fa27 	bl	8012f6a <RegionGetPhyParam>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	bf14      	ite	ne
 800fb26:	2301      	movne	r3, #1
 800fb28:	2300      	moveq	r3, #0
 800fb2a:	b2da      	uxtb	r2, r3
 800fb2c:	4bac      	ldr	r3, [pc, #688]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb2e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800fb32:	230a      	movs	r3, #10
 800fb34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb38:	4ba9      	ldr	r3, [pc, #676]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb42:	4611      	mov	r1, r2
 800fb44:	4618      	mov	r0, r3
 800fb46:	f003 fa10 	bl	8012f6a <RegionGetPhyParam>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800fb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb50:	b25a      	sxtb	r2, r3
 800fb52:	4ba3      	ldr	r3, [pc, #652]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb54:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800fb58:	2306      	movs	r3, #6
 800fb5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb5e:	4ba0      	ldr	r3, [pc, #640]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f003 f9fd 	bl	8012f6a <RegionGetPhyParam>
 800fb70:	4603      	mov	r3, r0
 800fb72:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	b25a      	sxtb	r2, r3
 800fb78:	4b99      	ldr	r3, [pc, #612]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb7a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800fb7e:	2310      	movs	r3, #16
 800fb80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb84:	4b96      	ldr	r3, [pc, #600]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb8e:	4611      	mov	r1, r2
 800fb90:	4618      	mov	r0, r3
 800fb92:	f003 f9ea 	bl	8012f6a <RegionGetPhyParam>
 800fb96:	4603      	mov	r3, r0
 800fb98:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800fb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9c:	4a90      	ldr	r2, [pc, #576]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fb9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800fba2:	2311      	movs	r3, #17
 800fba4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fba8:	4b8d      	ldr	r3, [pc, #564]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fbaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f003 f9d8 	bl	8012f6a <RegionGetPhyParam>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	4a87      	ldr	r2, [pc, #540]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fbc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800fbc6:	2312      	movs	r3, #18
 800fbc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fbcc:	4b84      	ldr	r3, [pc, #528]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fbce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f003 f9c6 	bl	8012f6a <RegionGetPhyParam>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800fbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe4:	4a7e      	ldr	r2, [pc, #504]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fbe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800fbea:	2313      	movs	r3, #19
 800fbec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fbf0:	4b7b      	ldr	r3, [pc, #492]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fbf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f003 f9b4 	bl	8012f6a <RegionGetPhyParam>
 800fc02:	4603      	mov	r3, r0
 800fc04:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	4a75      	ldr	r2, [pc, #468]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800fc0e:	2314      	movs	r3, #20
 800fc10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc14:	4b72      	ldr	r3, [pc, #456]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc1e:	4611      	mov	r1, r2
 800fc20:	4618      	mov	r0, r3
 800fc22:	f003 f9a2 	bl	8012f6a <RegionGetPhyParam>
 800fc26:	4603      	mov	r3, r0
 800fc28:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	4a6c      	ldr	r2, [pc, #432]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800fc32:	2317      	movs	r3, #23
 800fc34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc38:	4b69      	ldr	r3, [pc, #420]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f003 f990 	bl	8012f6a <RegionGetPhyParam>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	4b63      	ldr	r3, [pc, #396]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800fc58:	2318      	movs	r3, #24
 800fc5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc5e:	4b60      	ldr	r3, [pc, #384]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f003 f97d 	bl	8012f6a <RegionGetPhyParam>
 800fc70:	4603      	mov	r3, r0
 800fc72:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	4a5a      	ldr	r2, [pc, #360]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc78:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800fc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7e:	4a58      	ldr	r2, [pc, #352]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc80:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800fc84:	2319      	movs	r3, #25
 800fc86:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc8a:	4b55      	ldr	r3, [pc, #340]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fc8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc94:	4611      	mov	r1, r2
 800fc96:	4618      	mov	r0, r3
 800fc98:	f003 f967 	bl	8012f6a <RegionGetPhyParam>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	b2da      	uxtb	r2, r3
 800fca4:	4b4e      	ldr	r3, [pc, #312]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fca6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	4b4c      	ldr	r3, [pc, #304]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fcb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800fcb4:	231e      	movs	r3, #30
 800fcb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fcba:	4b49      	ldr	r3, [pc, #292]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fcbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f003 f94f 	bl	8012f6a <RegionGetPhyParam>
 800fccc:	4603      	mov	r3, r0
 800fcce:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd2:	b2da      	uxtb	r2, r3
 800fcd4:	4b42      	ldr	r3, [pc, #264]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fcd6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800fcda:	231f      	movs	r3, #31
 800fcdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fce0:	4b3f      	ldr	r3, [pc, #252]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f003 f93c 	bl	8012f6a <RegionGetPhyParam>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	4b39      	ldr	r3, [pc, #228]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fcfc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800fd00:	2320      	movs	r3, #32
 800fd02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd06:	4b36      	ldr	r3, [pc, #216]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd10:	4611      	mov	r1, r2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f003 f929 	bl	8012f6a <RegionGetPhyParam>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	4a30      	ldr	r2, [pc, #192]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd20:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800fd24:	2321      	movs	r3, #33	; 0x21
 800fd26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd2a:	4b2d      	ldr	r3, [pc, #180]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd34:	4611      	mov	r1, r2
 800fd36:	4618      	mov	r0, r3
 800fd38:	f003 f917 	bl	8012f6a <RegionGetPhyParam>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	4a27      	ldr	r2, [pc, #156]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd44:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800fd48:	230b      	movs	r3, #11
 800fd4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd4e:	4b24      	ldr	r3, [pc, #144]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd58:	4611      	mov	r1, r2
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f003 f905 	bl	8012f6a <RegionGetPhyParam>
 800fd60:	4603      	mov	r3, r0
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	4b1e      	ldr	r3, [pc, #120]	; (800fde4 <LoRaMacInitialization+0x388>)
 800fd6a:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800fd6e:	230c      	movs	r3, #12
 800fd70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd74:	4b1a      	ldr	r3, [pc, #104]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f003 f8f2 	bl	8012f6a <RegionGetPhyParam>
 800fd86:	4603      	mov	r3, r0
 800fd88:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	4b15      	ldr	r3, [pc, #84]	; (800fde4 <LoRaMacInitialization+0x388>)
 800fd90:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800fd94:	4b12      	ldr	r3, [pc, #72]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800fd9c:	4b10      	ldr	r3, [pc, #64]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fd9e:	220a      	movs	r2, #10
 800fda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800fda4:	4b0e      	ldr	r3, [pc, #56]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fda6:	2206      	movs	r2, #6
 800fda8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800fdac:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdb2:	4a0b      	ldr	r2, [pc, #44]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdb4:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800fdb6:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdb8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800fdbc:	4b08      	ldr	r3, [pc, #32]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800fdc2:	4b07      	ldr	r3, [pc, #28]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdca:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800fdcc:	4b04      	ldr	r3, [pc, #16]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdd2:	4a03      	ldr	r2, [pc, #12]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdd4:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800fdd6:	4b02      	ldr	r3, [pc, #8]	; (800fde0 <LoRaMacInitialization+0x384>)
 800fdd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fddc:	e006      	b.n	800fdec <LoRaMacInitialization+0x390>
 800fdde:	bf00      	nop
 800fde0:	2000095c 	.word	0x2000095c
 800fde4:	20000454 	.word	0x20000454
 800fde8:	01000300 	.word	0x01000300
 800fdec:	4a60      	ldr	r2, [pc, #384]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fdee:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800fdf0:	4b5f      	ldr	r3, [pc, #380]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fdf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fdf6:	4a5e      	ldr	r2, [pc, #376]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fdf8:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800fdfa:	4b5d      	ldr	r3, [pc, #372]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fdfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fe00:	4a5b      	ldr	r2, [pc, #364]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe02:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800fe04:	4b5a      	ldr	r3, [pc, #360]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe06:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800fe0a:	4b59      	ldr	r3, [pc, #356]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fe16:	4b57      	ldr	r3, [pc, #348]	; (800ff74 <LoRaMacInitialization+0x518>)
 800fe18:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fe1a:	4b57      	ldr	r3, [pc, #348]	; (800ff78 <LoRaMacInitialization+0x51c>)
 800fe1c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fe1e:	4b54      	ldr	r3, [pc, #336]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe24:	f107 0218 	add.w	r2, r7, #24
 800fe28:	4611      	mov	r1, r2
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f003 f8d6 	bl	8012fdc <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800fe30:	4a52      	ldr	r2, [pc, #328]	; (800ff7c <LoRaMacInitialization+0x520>)
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 800fe38:	f7ff f85a 	bl	800eef0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800fe3c:	4b4c      	ldr	r3, [pc, #304]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800fe44:	4a4d      	ldr	r2, [pc, #308]	; (800ff7c <LoRaMacInitialization+0x520>)
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800fe4c:	4b4b      	ldr	r3, [pc, #300]	; (800ff7c <LoRaMacInitialization+0x520>)
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800fe54:	4b49      	ldr	r3, [pc, #292]	; (800ff7c <LoRaMacInitialization+0x520>)
 800fe56:	2201      	movs	r2, #1
 800fe58:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800fe5c:	4b44      	ldr	r3, [pc, #272]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe5e:	2200      	movs	r2, #0
 800fe60:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fe62:	4b43      	ldr	r3, [pc, #268]	; (800ff70 <LoRaMacInitialization+0x514>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800fe68:	2300      	movs	r3, #0
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	4b44      	ldr	r3, [pc, #272]	; (800ff80 <LoRaMacInitialization+0x524>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f04f 31ff 	mov.w	r1, #4294967295
 800fe74:	4843      	ldr	r0, [pc, #268]	; (800ff84 <LoRaMacInitialization+0x528>)
 800fe76:	f00a feeb 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	4b42      	ldr	r3, [pc, #264]	; (800ff88 <LoRaMacInitialization+0x52c>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	f04f 31ff 	mov.w	r1, #4294967295
 800fe86:	4841      	ldr	r0, [pc, #260]	; (800ff8c <LoRaMacInitialization+0x530>)
 800fe88:	f00a fee2 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	4b3f      	ldr	r3, [pc, #252]	; (800ff90 <LoRaMacInitialization+0x534>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	f04f 31ff 	mov.w	r1, #4294967295
 800fe98:	483e      	ldr	r0, [pc, #248]	; (800ff94 <LoRaMacInitialization+0x538>)
 800fe9a:	f00a fed9 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	4b3d      	ldr	r3, [pc, #244]	; (800ff98 <LoRaMacInitialization+0x53c>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f04f 31ff 	mov.w	r1, #4294967295
 800feaa:	483c      	ldr	r0, [pc, #240]	; (800ff9c <LoRaMacInitialization+0x540>)
 800feac:	f00a fed0 	bl	801ac50 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800feb0:	4c2f      	ldr	r4, [pc, #188]	; (800ff70 <LoRaMacInitialization+0x514>)
 800feb2:	463b      	mov	r3, r7
 800feb4:	4618      	mov	r0, r3
 800feb6:	f00a fa53 	bl	801a360 <SysTimeGetMcuTime>
 800feba:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800febe:	463a      	mov	r2, r7
 800fec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fec4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800fec8:	4b2c      	ldr	r3, [pc, #176]	; (800ff7c <LoRaMacInitialization+0x520>)
 800feca:	4a35      	ldr	r2, [pc, #212]	; (800ffa0 <LoRaMacInitialization+0x544>)
 800fecc:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800fed0:	4b2a      	ldr	r3, [pc, #168]	; (800ff7c <LoRaMacInitialization+0x520>)
 800fed2:	4a34      	ldr	r2, [pc, #208]	; (800ffa4 <LoRaMacInitialization+0x548>)
 800fed4:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800fed8:	4b28      	ldr	r3, [pc, #160]	; (800ff7c <LoRaMacInitialization+0x520>)
 800feda:	4a33      	ldr	r2, [pc, #204]	; (800ffa8 <LoRaMacInitialization+0x54c>)
 800fedc:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800fee0:	4b26      	ldr	r3, [pc, #152]	; (800ff7c <LoRaMacInitialization+0x520>)
 800fee2:	4a32      	ldr	r2, [pc, #200]	; (800ffac <LoRaMacInitialization+0x550>)
 800fee4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800fee8:	4b24      	ldr	r3, [pc, #144]	; (800ff7c <LoRaMacInitialization+0x520>)
 800feea:	4a31      	ldr	r2, [pc, #196]	; (800ffb0 <LoRaMacInitialization+0x554>)
 800feec:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800fef0:	4b30      	ldr	r3, [pc, #192]	; (800ffb4 <LoRaMacInitialization+0x558>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4830      	ldr	r0, [pc, #192]	; (800ffb8 <LoRaMacInitialization+0x55c>)
 800fef6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	4619      	mov	r1, r3
 800fefe:	482f      	ldr	r0, [pc, #188]	; (800ffbc <LoRaMacInitialization+0x560>)
 800ff00:	f7fa ff42 	bl	800ad88 <SecureElementInit>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d001      	beq.n	800ff0e <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff0a:	2311      	movs	r3, #17
 800ff0c:	e02b      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ff0e:	4818      	ldr	r0, [pc, #96]	; (800ff70 <LoRaMacInitialization+0x514>)
 800ff10:	f002 f950 	bl	80121b4 <LoRaMacCryptoInit>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff1a:	2311      	movs	r3, #17
 800ff1c:	e023      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800ff1e:	f001 fa95 	bl	801144c <LoRaMacCommandsInit>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff28:	2313      	movs	r3, #19
 800ff2a:	e01c      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ff2c:	4824      	ldr	r0, [pc, #144]	; (800ffc0 <LoRaMacInitialization+0x564>)
 800ff2e:	f002 f9ff 	bl	8012330 <LoRaMacCryptoSetMulticastReference>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff38:	2311      	movs	r3, #17
 800ff3a:	e014      	b.n	800ff66 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800ff3c:	4b1d      	ldr	r3, [pc, #116]	; (800ffb4 <LoRaMacInitialization+0x558>)
 800ff3e:	695b      	ldr	r3, [r3, #20]
 800ff40:	4798      	blx	r3
 800ff42:	4603      	mov	r3, r0
 800ff44:	4618      	mov	r0, r3
 800ff46:	f006 fecb 	bl	8016ce0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ff4a:	4b1a      	ldr	r3, [pc, #104]	; (800ffb4 <LoRaMacInitialization+0x558>)
 800ff4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff4e:	4a08      	ldr	r2, [pc, #32]	; (800ff70 <LoRaMacInitialization+0x514>)
 800ff50:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 800ff54:	4610      	mov	r0, r2
 800ff56:	4798      	blx	r3
    Radio.Sleep( );
 800ff58:	4b16      	ldr	r3, [pc, #88]	; (800ffb4 <LoRaMacInitialization+0x558>)
 800ff5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff5c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ff5e:	2001      	movs	r0, #1
 800ff60:	f7fd faaa 	bl	800d4b8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3734      	adds	r7, #52	; 0x34
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd90      	pop	{r4, r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	2000095c 	.word	0x2000095c
 800ff74:	20000b34 	.word	0x20000b34
 800ff78:	20000bd8 	.word	0x20000bd8
 800ff7c:	20000454 	.word	0x20000454
 800ff80:	0800da41 	.word	0x0800da41
 800ff84:	200007bc 	.word	0x200007bc
 800ff88:	0800dab5 	.word	0x0800dab5
 800ff8c:	200007d4 	.word	0x200007d4
 800ff90:	0800db21 	.word	0x0800db21
 800ff94:	200007ec 	.word	0x200007ec
 800ff98:	0800db95 	.word	0x0800db95
 800ff9c:	2000084c 	.word	0x2000084c
 800ffa0:	0800c645 	.word	0x0800c645
 800ffa4:	0800c6bd 	.word	0x0800c6bd
 800ffa8:	0800c795 	.word	0x0800c795
 800ffac:	0800c749 	.word	0x0800c749
 800ffb0:	0800c7d1 	.word	0x0800c7d1
 800ffb4:	0801c4cc 	.word	0x0801c4cc
 800ffb8:	200007a0 	.word	0x200007a0
 800ffbc:	20000a74 	.word	0x20000a74
 800ffc0:	20000a2c 	.word	0x20000a2c

0800ffc4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800ffc8:	4b04      	ldr	r3, [pc, #16]	; (800ffdc <LoRaMacStart+0x18>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 800ffd0:	2300      	movs	r3, #0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bc80      	pop	{r7}
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	20000454 	.word	0x20000454

0800ffe0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08a      	sub	sp, #40	; 0x28
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	6039      	str	r1, [r7, #0]
 800ffea:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ffec:	4b3e      	ldr	r3, [pc, #248]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 800ffee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fff2:	4b3d      	ldr	r3, [pc, #244]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 800fff4:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 800fff8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fffa:	4b3b      	ldr	r3, [pc, #236]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 800fffc:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010000:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010002:	2300      	movs	r3, #0
 8010004:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d101      	bne.n	8010010 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801000c:	2303      	movs	r3, #3
 801000e:	e066      	b.n	80100de <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010010:	4b35      	ldr	r3, [pc, #212]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 8010012:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010016:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010018:	2300      	movs	r3, #0
 801001a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801001c:	4b32      	ldr	r3, [pc, #200]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 801001e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010022:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010024:	4b30      	ldr	r3, [pc, #192]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 8010026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010028:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801002a:	4b30      	ldr	r3, [pc, #192]	; (80100ec <LoRaMacQueryTxPossible+0x10c>)
 801002c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010030:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010032:	4b2e      	ldr	r3, [pc, #184]	; (80100ec <LoRaMacQueryTxPossible+0x10c>)
 8010034:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010038:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801003a:	4b2b      	ldr	r3, [pc, #172]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 801003c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010040:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010044:	4b28      	ldr	r3, [pc, #160]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 8010046:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801004a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801004e:	4b26      	ldr	r3, [pc, #152]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 8010050:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010058:	4b23      	ldr	r3, [pc, #140]	; (80100e8 <LoRaMacQueryTxPossible+0x108>)
 801005a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801005e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010062:	f107 0310 	add.w	r3, r7, #16
 8010066:	f107 020e 	add.w	r2, r7, #14
 801006a:	f107 010f 	add.w	r1, r7, #15
 801006e:	f107 0014 	add.w	r0, r7, #20
 8010072:	f000 ffe1 	bl	8011038 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd fed2 	bl	800de24 <GetMaxAppPayloadWithoutFOptsLength>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010088:	f107 0308 	add.w	r3, r7, #8
 801008c:	4618      	mov	r0, r3
 801008e:	f001 faab 	bl	80115e8 <LoRaMacCommandsGetSizeSerializedCmds>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010098:	2313      	movs	r3, #19
 801009a:	e020      	b.n	80100de <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	2b0f      	cmp	r3, #15
 80100a0:	d819      	bhi.n	80100d6 <LoRaMacQueryTxPossible+0xf6>
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	785b      	ldrb	r3, [r3, #1]
 80100a6:	461a      	mov	r2, r3
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d313      	bcc.n	80100d6 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	785a      	ldrb	r2, [r3, #1]
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	785b      	ldrb	r3, [r3, #1]
 80100c2:	4619      	mov	r1, r3
 80100c4:	79fa      	ldrb	r2, [r7, #7]
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	4413      	add	r3, r2
 80100ca:	4299      	cmp	r1, r3
 80100cc:	d301      	bcc.n	80100d2 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	e005      	b.n	80100de <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80100d2:	2308      	movs	r3, #8
 80100d4:	e003      	b.n	80100de <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2200      	movs	r2, #0
 80100da:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80100dc:	2308      	movs	r3, #8
    }
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3728      	adds	r7, #40	; 0x28
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	2000095c 	.word	0x2000095c
 80100ec:	20000454 	.word	0x20000454

080100f0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80100f0:	b590      	push	{r4, r7, lr}
 80100f2:	b087      	sub	sp, #28
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80100f8:	2300      	movs	r3, #0
 80100fa:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010102:	2303      	movs	r3, #3
 8010104:	e14b      	b.n	801039e <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	2b28      	cmp	r3, #40	; 0x28
 801010c:	f200 8140 	bhi.w	8010390 <LoRaMacMibGetRequestConfirm+0x2a0>
 8010110:	a201      	add	r2, pc, #4	; (adr r2, 8010118 <LoRaMacMibGetRequestConfirm+0x28>)
 8010112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010116:	bf00      	nop
 8010118:	080101bd 	.word	0x080101bd
 801011c:	080101c9 	.word	0x080101c9
 8010120:	080101d5 	.word	0x080101d5
 8010124:	080101e1 	.word	0x080101e1
 8010128:	080101ed 	.word	0x080101ed
 801012c:	080101f9 	.word	0x080101f9
 8010130:	08010205 	.word	0x08010205
 8010134:	08010391 	.word	0x08010391
 8010138:	08010391 	.word	0x08010391
 801013c:	08010391 	.word	0x08010391
 8010140:	08010391 	.word	0x08010391
 8010144:	08010391 	.word	0x08010391
 8010148:	08010391 	.word	0x08010391
 801014c:	08010391 	.word	0x08010391
 8010150:	08010391 	.word	0x08010391
 8010154:	08010211 	.word	0x08010211
 8010158:	0801021d 	.word	0x0801021d
 801015c:	08010229 	.word	0x08010229
 8010160:	0801024b 	.word	0x0801024b
 8010164:	0801025d 	.word	0x0801025d
 8010168:	0801026f 	.word	0x0801026f
 801016c:	08010281 	.word	0x08010281
 8010170:	080102b5 	.word	0x080102b5
 8010174:	08010293 	.word	0x08010293
 8010178:	080102d7 	.word	0x080102d7
 801017c:	080102e3 	.word	0x080102e3
 8010180:	080102ed 	.word	0x080102ed
 8010184:	080102f7 	.word	0x080102f7
 8010188:	08010301 	.word	0x08010301
 801018c:	0801030b 	.word	0x0801030b
 8010190:	08010315 	.word	0x08010315
 8010194:	08010321 	.word	0x08010321
 8010198:	08010339 	.word	0x08010339
 801019c:	0801032d 	.word	0x0801032d
 80101a0:	08010345 	.word	0x08010345
 80101a4:	0801034f 	.word	0x0801034f
 80101a8:	0801035b 	.word	0x0801035b
 80101ac:	08010371 	.word	0x08010371
 80101b0:	08010365 	.word	0x08010365
 80101b4:	08010391 	.word	0x08010391
 80101b8:	0801037d 	.word	0x0801037d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80101bc:	4b7a      	ldr	r3, [pc, #488]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80101be:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	711a      	strb	r2, [r3, #4]
            break;
 80101c6:	e0e9      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80101c8:	4b77      	ldr	r3, [pc, #476]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80101ca:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	711a      	strb	r2, [r3, #4]
            break;
 80101d2:	e0e3      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80101d4:	f7fb f88e 	bl	800b2f4 <SecureElementGetDevEui>
 80101d8:	4602      	mov	r2, r0
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	605a      	str	r2, [r3, #4]
            break;
 80101de:	e0dd      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80101e0:	f7fb f8aa 	bl	800b338 <SecureElementGetJoinEui>
 80101e4:	4602      	mov	r2, r0
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	605a      	str	r2, [r3, #4]
            break;
 80101ea:	e0d7      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80101ec:	4b6e      	ldr	r3, [pc, #440]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80101ee:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	711a      	strb	r2, [r3, #4]
            break;
 80101f6:	e0d1      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80101f8:	4b6b      	ldr	r3, [pc, #428]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80101fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	605a      	str	r2, [r3, #4]
            break;
 8010202:	e0cb      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8010204:	4b68      	ldr	r3, [pc, #416]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010206:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	605a      	str	r2, [r3, #4]
            break;
 801020e:	e0c5      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010210:	4b65      	ldr	r3, [pc, #404]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010212:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	711a      	strb	r2, [r3, #4]
            break;
 801021a:	e0bf      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801021c:	4b62      	ldr	r3, [pc, #392]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801021e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	711a      	strb	r2, [r3, #4]
            break;
 8010226:	e0b9      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8010228:	231d      	movs	r3, #29
 801022a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801022c:	4b5e      	ldr	r3, [pc, #376]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801022e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010232:	f107 0210 	add.w	r2, r7, #16
 8010236:	4611      	mov	r1, r2
 8010238:	4618      	mov	r0, r3
 801023a:	f002 fe96 	bl	8012f6a <RegionGetPhyParam>
 801023e:	4603      	mov	r3, r0
 8010240:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	605a      	str	r2, [r3, #4]
            break;
 8010248:	e0a8      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a56      	ldr	r2, [pc, #344]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801024e:	3304      	adds	r3, #4
 8010250:	3264      	adds	r2, #100	; 0x64
 8010252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010256:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801025a:	e09f      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a52      	ldr	r2, [pc, #328]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010260:	3304      	adds	r3, #4
 8010262:	32a4      	adds	r2, #164	; 0xa4
 8010264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010268:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801026c:	e096      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a4d      	ldr	r2, [pc, #308]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010272:	3304      	adds	r3, #4
 8010274:	326c      	adds	r2, #108	; 0x6c
 8010276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801027a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801027e:	e08d      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a49      	ldr	r2, [pc, #292]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010284:	3304      	adds	r3, #4
 8010286:	32ac      	adds	r2, #172	; 0xac
 8010288:	e892 0003 	ldmia.w	r2, {r0, r1}
 801028c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010290:	e084      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010292:	231b      	movs	r3, #27
 8010294:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010296:	4b44      	ldr	r3, [pc, #272]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801029c:	f107 0210 	add.w	r2, r7, #16
 80102a0:	4611      	mov	r1, r2
 80102a2:	4618      	mov	r0, r3
 80102a4:	f002 fe61 	bl	8012f6a <RegionGetPhyParam>
 80102a8:	4603      	mov	r3, r0
 80102aa:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	605a      	str	r2, [r3, #4]
            break;
 80102b2:	e073      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80102b4:	231a      	movs	r3, #26
 80102b6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102b8:	4b3b      	ldr	r3, [pc, #236]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102be:	f107 0210 	add.w	r2, r7, #16
 80102c2:	4611      	mov	r1, r2
 80102c4:	4618      	mov	r0, r3
 80102c6:	f002 fe50 	bl	8012f6a <RegionGetPhyParam>
 80102ca:	4603      	mov	r3, r0
 80102cc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	605a      	str	r2, [r3, #4]
            break;
 80102d4:	e062      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80102d6:	4b34      	ldr	r3, [pc, #208]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102d8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	711a      	strb	r2, [r3, #4]
            break;
 80102e0:	e05c      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80102e2:	4b31      	ldr	r3, [pc, #196]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	605a      	str	r2, [r3, #4]
            break;
 80102ea:	e057      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80102ec:	4b2e      	ldr	r3, [pc, #184]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	605a      	str	r2, [r3, #4]
            break;
 80102f4:	e052      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80102f6:	4b2c      	ldr	r3, [pc, #176]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	605a      	str	r2, [r3, #4]
            break;
 80102fe:	e04d      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010300:	4b29      	ldr	r3, [pc, #164]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010302:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	605a      	str	r2, [r3, #4]
            break;
 8010308:	e048      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801030a:	4b27      	ldr	r3, [pc, #156]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801030c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	605a      	str	r2, [r3, #4]
            break;
 8010312:	e043      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010314:	4b24      	ldr	r3, [pc, #144]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010316:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	711a      	strb	r2, [r3, #4]
            break;
 801031e:	e03d      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010320:	4b21      	ldr	r3, [pc, #132]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010322:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	711a      	strb	r2, [r3, #4]
            break;
 801032a:	e037      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801032c:	4b1e      	ldr	r3, [pc, #120]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801032e:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	711a      	strb	r2, [r3, #4]
            break;
 8010336:	e031      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010338:	4b1b      	ldr	r3, [pc, #108]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801033a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	711a      	strb	r2, [r3, #4]
            break;
 8010342:	e02b      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010344:	4b18      	ldr	r3, [pc, #96]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	605a      	str	r2, [r3, #4]
            break;
 801034c:	e026      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801034e:	4b16      	ldr	r3, [pc, #88]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010350:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	711a      	strb	r2, [r3, #4]
            break;
 8010358:	e020      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801035a:	4b13      	ldr	r3, [pc, #76]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801035c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	605a      	str	r2, [r3, #4]
            break;
 8010362:	e01b      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8010364:	f7ff f934 	bl	800f5d0 <GetNvmData>
 8010368:	4602      	mov	r2, r0
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	605a      	str	r2, [r3, #4]
            break;
 801036e:	e015      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010370:	4b0d      	ldr	r3, [pc, #52]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010372:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	605a      	str	r2, [r3, #4]
            break;
 801037a:	e00f      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a0a      	ldr	r2, [pc, #40]	; (80103a8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010380:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8010384:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010386:	687c      	ldr	r4, [r7, #4]
 8010388:	f003 f81a 	bl	80133c0 <RegionGetVersion>
 801038c:	60a0      	str	r0, [r4, #8]
            break;
 801038e:	e005      	b.n	801039c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 fefd 	bl	8011190 <LoRaMacClassBMibGetRequestConfirm>
 8010396:	4603      	mov	r3, r0
 8010398:	75fb      	strb	r3, [r7, #23]
            break;
 801039a:	bf00      	nop
        }
    }
    return status;
 801039c:	7dfb      	ldrb	r3, [r7, #23]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	371c      	adds	r7, #28
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd90      	pop	{r4, r7, pc}
 80103a6:	bf00      	nop
 80103a8:	2000095c 	.word	0x2000095c

080103ac <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b086      	sub	sp, #24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d101      	bne.n	80103c2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80103be:	2303      	movs	r3, #3
 80103c0:	e32b      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80103c2:	4bbe      	ldr	r3, [pc, #760]	; (80106bc <LoRaMacMibSetRequestConfirm+0x310>)
 80103c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103c8:	f003 0302 	and.w	r3, r3, #2
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80103d0:	2301      	movs	r3, #1
 80103d2:	e322      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b27      	cmp	r3, #39	; 0x27
 80103da:	f200 82fc 	bhi.w	80109d6 <LoRaMacMibSetRequestConfirm+0x62a>
 80103de:	a201      	add	r2, pc, #4	; (adr r2, 80103e4 <LoRaMacMibSetRequestConfirm+0x38>)
 80103e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e4:	08010485 	.word	0x08010485
 80103e8:	08010495 	.word	0x08010495
 80103ec:	080104af 	.word	0x080104af
 80103f0:	080104c7 	.word	0x080104c7
 80103f4:	080104df 	.word	0x080104df
 80103f8:	080104eb 	.word	0x080104eb
 80103fc:	080104f7 	.word	0x080104f7
 8010400:	08010503 	.word	0x08010503
 8010404:	08010529 	.word	0x08010529
 8010408:	0801054f 	.word	0x0801054f
 801040c:	08010575 	.word	0x08010575
 8010410:	0801059b 	.word	0x0801059b
 8010414:	080105c1 	.word	0x080105c1
 8010418:	080105e7 	.word	0x080105e7
 801041c:	0801060d 	.word	0x0801060d
 8010420:	08010633 	.word	0x08010633
 8010424:	08010653 	.word	0x08010653
 8010428:	080109d7 	.word	0x080109d7
 801042c:	0801065f 	.word	0x0801065f
 8010430:	080106db 	.word	0x080106db
 8010434:	0801071b 	.word	0x0801071b
 8010438:	0801077d 	.word	0x0801077d
 801043c:	080107ed 	.word	0x080107ed
 8010440:	080107bd 	.word	0x080107bd
 8010444:	0801081d 	.word	0x0801081d
 8010448:	0801083f 	.word	0x0801083f
 801044c:	08010849 	.word	0x08010849
 8010450:	08010853 	.word	0x08010853
 8010454:	0801085d 	.word	0x0801085d
 8010458:	08010867 	.word	0x08010867
 801045c:	08010871 	.word	0x08010871
 8010460:	080108a3 	.word	0x080108a3
 8010464:	0801090f 	.word	0x0801090f
 8010468:	080108dd 	.word	0x080108dd
 801046c:	08010941 	.word	0x08010941
 8010470:	08010957 	.word	0x08010957
 8010474:	0801096f 	.word	0x0801096f
 8010478:	08010979 	.word	0x08010979
 801047c:	08010985 	.word	0x08010985
 8010480:	080109ad 	.word	0x080109ad
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	791b      	ldrb	r3, [r3, #4]
 8010488:	4618      	mov	r0, r3
 801048a:	f7fd fbfb 	bl	800dc84 <SwitchClass>
 801048e:	4603      	mov	r3, r0
 8010490:	75fb      	strb	r3, [r7, #23]
            break;
 8010492:	e2c1      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	791b      	ldrb	r3, [r3, #4]
 8010498:	2b02      	cmp	r3, #2
 801049a:	d005      	beq.n	80104a8 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	791a      	ldrb	r2, [r3, #4]
 80104a0:	4b87      	ldr	r3, [pc, #540]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 80104a2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80104a6:	e2b7      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104a8:	2303      	movs	r3, #3
 80104aa:	75fb      	strb	r3, [r7, #23]
            break;
 80104ac:	e2b4      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fa ff06 	bl	800b2c4 <SecureElementSetDevEui>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f000 8291 	beq.w	80109e2 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104c0:	2303      	movs	r3, #3
 80104c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80104c4:	e28d      	b.n	80109e2 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fa ff1c 	bl	800b308 <SecureElementSetJoinEui>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 8287 	beq.w	80109e6 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104d8:	2303      	movs	r3, #3
 80104da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80104dc:	e283      	b.n	80109e6 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	791a      	ldrb	r2, [r3, #4]
 80104e2:	4b77      	ldr	r3, [pc, #476]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 80104e4:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 80104e8:	e296      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	4a74      	ldr	r2, [pc, #464]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 80104f0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 80104f4:	e290      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	4a71      	ldr	r2, [pc, #452]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 80104fc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8010500:	e28a      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00b      	beq.n	8010522 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	4619      	mov	r1, r3
 8010510:	2000      	movs	r0, #0
 8010512:	f001 ff35 	bl	8012380 <LoRaMacCryptoSetKey>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	f000 8266 	beq.w	80109ea <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801051e:	2311      	movs	r3, #17
 8010520:	e27b      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010522:	2303      	movs	r3, #3
 8010524:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010526:	e260      	b.n	80109ea <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00b      	beq.n	8010548 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	4619      	mov	r1, r3
 8010536:	2001      	movs	r0, #1
 8010538:	f001 ff22 	bl	8012380 <LoRaMacCryptoSetKey>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	f000 8255 	beq.w	80109ee <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010544:	2311      	movs	r3, #17
 8010546:	e268      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010548:	2303      	movs	r3, #3
 801054a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801054c:	e24f      	b.n	80109ee <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00b      	beq.n	801056e <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	4619      	mov	r1, r3
 801055c:	2002      	movs	r0, #2
 801055e:	f001 ff0f 	bl	8012380 <LoRaMacCryptoSetKey>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	f000 8244 	beq.w	80109f2 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801056a:	2311      	movs	r3, #17
 801056c:	e255      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801056e:	2303      	movs	r3, #3
 8010570:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010572:	e23e      	b.n	80109f2 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00b      	beq.n	8010594 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	4619      	mov	r1, r3
 8010582:	2003      	movs	r0, #3
 8010584:	f001 fefc 	bl	8012380 <LoRaMacCryptoSetKey>
 8010588:	4603      	mov	r3, r0
 801058a:	2b00      	cmp	r3, #0
 801058c:	f000 8233 	beq.w	80109f6 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010590:	2311      	movs	r3, #17
 8010592:	e242      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010594:	2303      	movs	r3, #3
 8010596:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010598:	e22d      	b.n	80109f6 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00b      	beq.n	80105ba <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	4619      	mov	r1, r3
 80105a8:	207f      	movs	r0, #127	; 0x7f
 80105aa:	f001 fee9 	bl	8012380 <LoRaMacCryptoSetKey>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f000 8222 	beq.w	80109fa <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80105b6:	2311      	movs	r3, #17
 80105b8:	e22f      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105ba:	2303      	movs	r3, #3
 80105bc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80105be:	e21c      	b.n	80109fa <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00b      	beq.n	80105e0 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	4619      	mov	r1, r3
 80105ce:	2080      	movs	r0, #128	; 0x80
 80105d0:	f001 fed6 	bl	8012380 <LoRaMacCryptoSetKey>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f000 8211 	beq.w	80109fe <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80105dc:	2311      	movs	r3, #17
 80105de:	e21c      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105e0:	2303      	movs	r3, #3
 80105e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80105e4:	e20b      	b.n	80109fe <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00b      	beq.n	8010606 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	4619      	mov	r1, r3
 80105f4:	2081      	movs	r0, #129	; 0x81
 80105f6:	f001 fec3 	bl	8012380 <LoRaMacCryptoSetKey>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 8200 	beq.w	8010a02 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010602:	2311      	movs	r3, #17
 8010604:	e209      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010606:	2303      	movs	r3, #3
 8010608:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801060a:	e1fa      	b.n	8010a02 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00b      	beq.n	801062c <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	4619      	mov	r1, r3
 801061a:	2082      	movs	r0, #130	; 0x82
 801061c:	f001 feb0 	bl	8012380 <LoRaMacCryptoSetKey>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 81ef 	beq.w	8010a06 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010628:	2311      	movs	r3, #17
 801062a:	e1f6      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801062c:	2303      	movs	r3, #3
 801062e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010630:	e1e9      	b.n	8010a06 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	791a      	ldrb	r2, [r3, #4]
 8010636:	4b22      	ldr	r3, [pc, #136]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 8010638:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801063c:	4b21      	ldr	r3, [pc, #132]	; (80106c4 <LoRaMacMibSetRequestConfirm+0x318>)
 801063e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010640:	4a1f      	ldr	r2, [pc, #124]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 8010642:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010646:	4610      	mov	r0, r2
 8010648:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801064a:	4b1e      	ldr	r3, [pc, #120]	; (80106c4 <LoRaMacMibSetRequestConfirm+0x318>)
 801064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8010650:	e1e2      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	791a      	ldrb	r2, [r3, #4]
 8010656:	4b1a      	ldr	r3, [pc, #104]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 8010658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801065c:	e1dc      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	7a1b      	ldrb	r3, [r3, #8]
 8010662:	b25b      	sxtb	r3, r3
 8010664:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010666:	4b16      	ldr	r3, [pc, #88]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 8010668:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801066c:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801066e:	4b14      	ldr	r3, [pc, #80]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 8010670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010674:	f107 0108 	add.w	r1, r7, #8
 8010678:	2207      	movs	r2, #7
 801067a:	4618      	mov	r0, r3
 801067c:	f002 fcc6 	bl	801300c <RegionVerify>
 8010680:	4603      	mov	r3, r0
 8010682:	f083 0301 	eor.w	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801068c:	2303      	movs	r3, #3
 801068e:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8010690:	e1c2      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010698:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <LoRaMacMibSetRequestConfirm+0x314>)
 801069a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801069e:	f107 0108 	add.w	r1, r7, #8
 80106a2:	2200      	movs	r2, #0
 80106a4:	4618      	mov	r0, r3
 80106a6:	f002 fcb1 	bl	801300c <RegionVerify>
 80106aa:	4603      	mov	r3, r0
 80106ac:	f083 0301 	eor.w	r3, r3, #1
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d008      	beq.n	80106c8 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106b6:	2303      	movs	r3, #3
 80106b8:	75fb      	strb	r3, [r7, #23]
            break;
 80106ba:	e1ad      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
 80106bc:	20000454 	.word	0x20000454
 80106c0:	2000095c 	.word	0x2000095c
 80106c4:	0801c4cc 	.word	0x0801c4cc
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80106c8:	4bb6      	ldr	r3, [pc, #728]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	3364      	adds	r3, #100	; 0x64
 80106ce:	3204      	adds	r2, #4
 80106d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106d4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80106d8:	e19e      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	7a1b      	ldrb	r3, [r3, #8]
 80106de:	b25b      	sxtb	r3, r3
 80106e0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80106e2:	4bb0      	ldr	r3, [pc, #704]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80106e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80106e8:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80106ea:	4bae      	ldr	r3, [pc, #696]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80106ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106f0:	f107 0108 	add.w	r1, r7, #8
 80106f4:	2207      	movs	r2, #7
 80106f6:	4618      	mov	r0, r3
 80106f8:	f002 fc88 	bl	801300c <RegionVerify>
 80106fc:	4603      	mov	r3, r0
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d008      	beq.n	8010714 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010702:	4ba8      	ldr	r3, [pc, #672]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	33a4      	adds	r3, #164	; 0xa4
 8010708:	3204      	adds	r2, #4
 801070a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801070e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010712:	e181      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010714:	2303      	movs	r3, #3
 8010716:	75fb      	strb	r3, [r7, #23]
            break;
 8010718:	e17e      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	7a1b      	ldrb	r3, [r3, #8]
 801071e:	b25b      	sxtb	r3, r3
 8010720:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010722:	4ba0      	ldr	r3, [pc, #640]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010724:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010728:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801072a:	4b9e      	ldr	r3, [pc, #632]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801072c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010730:	f107 0108 	add.w	r1, r7, #8
 8010734:	2207      	movs	r2, #7
 8010736:	4618      	mov	r0, r3
 8010738:	f002 fc68 	bl	801300c <RegionVerify>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d019      	beq.n	8010776 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010742:	4b98      	ldr	r3, [pc, #608]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	336c      	adds	r3, #108	; 0x6c
 8010748:	3204      	adds	r2, #4
 801074a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801074e:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010752:	4b94      	ldr	r3, [pc, #592]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010754:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010758:	2b02      	cmp	r3, #2
 801075a:	f040 8156 	bne.w	8010a0a <LoRaMacMibSetRequestConfirm+0x65e>
 801075e:	4b91      	ldr	r3, [pc, #580]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010760:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 8150 	beq.w	8010a0a <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801076a:	4b8f      	ldr	r3, [pc, #572]	; (80109a8 <LoRaMacMibSetRequestConfirm+0x5fc>)
 801076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801076e:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8010770:	f7fe fcda 	bl	800f128 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010774:	e149      	b.n	8010a0a <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010776:	2303      	movs	r3, #3
 8010778:	75fb      	strb	r3, [r7, #23]
            break;
 801077a:	e146      	b.n	8010a0a <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	7a1b      	ldrb	r3, [r3, #8]
 8010780:	b25b      	sxtb	r3, r3
 8010782:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010784:	4b87      	ldr	r3, [pc, #540]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010786:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801078a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801078c:	4b85      	ldr	r3, [pc, #532]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801078e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010792:	f107 0108 	add.w	r1, r7, #8
 8010796:	2207      	movs	r2, #7
 8010798:	4618      	mov	r0, r3
 801079a:	f002 fc37 	bl	801300c <RegionVerify>
 801079e:	4603      	mov	r3, r0
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d008      	beq.n	80107b6 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80107a4:	4b7f      	ldr	r3, [pc, #508]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	33ac      	adds	r3, #172	; 0xac
 80107aa:	3204      	adds	r2, #4
 80107ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107b0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80107b4:	e130      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107b6:	2303      	movs	r3, #3
 80107b8:	75fb      	strb	r3, [r7, #23]
            break;
 80107ba:	e12d      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80107c2:	2301      	movs	r3, #1
 80107c4:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80107c6:	4b77      	ldr	r3, [pc, #476]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107cc:	f107 020c 	add.w	r2, r7, #12
 80107d0:	4611      	mov	r1, r2
 80107d2:	4618      	mov	r0, r3
 80107d4:	f002 fc53 	bl	801307e <RegionChanMaskSet>
 80107d8:	4603      	mov	r3, r0
 80107da:	f083 0301 	eor.w	r3, r3, #1
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f000 8114 	beq.w	8010a0e <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107e6:	2303      	movs	r3, #3
 80107e8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80107ea:	e110      	b.n	8010a0e <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80107f6:	4b6b      	ldr	r3, [pc, #428]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107fc:	f107 020c 	add.w	r2, r7, #12
 8010800:	4611      	mov	r1, r2
 8010802:	4618      	mov	r0, r3
 8010804:	f002 fc3b 	bl	801307e <RegionChanMaskSet>
 8010808:	4603      	mov	r3, r0
 801080a:	f083 0301 	eor.w	r3, r3, #1
 801080e:	b2db      	uxtb	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	f000 80fe 	beq.w	8010a12 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010816:	2303      	movs	r3, #3
 8010818:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801081a:	e0fa      	b.n	8010a12 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	791b      	ldrb	r3, [r3, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d009      	beq.n	8010838 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010828:	2b0f      	cmp	r3, #15
 801082a:	d805      	bhi.n	8010838 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	791a      	ldrb	r2, [r3, #4]
 8010830:	4b5c      	ldr	r3, [pc, #368]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010832:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010836:	e0ef      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010838:	2303      	movs	r3, #3
 801083a:	75fb      	strb	r3, [r7, #23]
            break;
 801083c:	e0ec      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	4a58      	ldr	r2, [pc, #352]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010844:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8010846:	e0e7      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	4a55      	ldr	r2, [pc, #340]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801084e:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8010850:	e0e2      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	4a53      	ldr	r2, [pc, #332]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010858:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801085a:	e0dd      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	4a50      	ldr	r2, [pc, #320]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010862:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8010864:	e0d8      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	4a4e      	ldr	r2, [pc, #312]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801086c:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801086e:	e0d3      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010876:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8010878:	4b4a      	ldr	r3, [pc, #296]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801087a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801087e:	f107 0108 	add.w	r1, r7, #8
 8010882:	2206      	movs	r2, #6
 8010884:	4618      	mov	r0, r3
 8010886:	f002 fbc1 	bl	801300c <RegionVerify>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d005      	beq.n	801089c <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8010890:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010894:	4b43      	ldr	r3, [pc, #268]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010896:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801089a:	e0bd      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801089c:	2303      	movs	r3, #3
 801089e:	75fb      	strb	r3, [r7, #23]
            break;
 80108a0:	e0ba      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80108a8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80108aa:	4b3e      	ldr	r3, [pc, #248]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80108b0:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80108b2:	4b3c      	ldr	r3, [pc, #240]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108b8:	f107 0108 	add.w	r1, r7, #8
 80108bc:	2205      	movs	r2, #5
 80108be:	4618      	mov	r0, r3
 80108c0:	f002 fba4 	bl	801300c <RegionVerify>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d005      	beq.n	80108d6 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80108ca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80108ce:	4b35      	ldr	r3, [pc, #212]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80108d4:	e0a0      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80108d6:	2303      	movs	r3, #3
 80108d8:	75fb      	strb	r3, [r7, #23]
            break;
 80108da:	e09d      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80108e2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80108e4:	4b2f      	ldr	r3, [pc, #188]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108ea:	f107 0108 	add.w	r1, r7, #8
 80108ee:	220a      	movs	r2, #10
 80108f0:	4618      	mov	r0, r3
 80108f2:	f002 fb8b 	bl	801300c <RegionVerify>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d005      	beq.n	8010908 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80108fc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010900:	4b28      	ldr	r3, [pc, #160]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010902:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010906:	e087      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010908:	2303      	movs	r3, #3
 801090a:	75fb      	strb	r3, [r7, #23]
            break;
 801090c:	e084      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010914:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8010916:	4b23      	ldr	r3, [pc, #140]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801091c:	f107 0108 	add.w	r1, r7, #8
 8010920:	2209      	movs	r2, #9
 8010922:	4618      	mov	r0, r3
 8010924:	f002 fb72 	bl	801300c <RegionVerify>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d005      	beq.n	801093a <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801092e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010932:	4b1c      	ldr	r3, [pc, #112]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010938:	e06e      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801093a:	2303      	movs	r3, #3
 801093c:	75fb      	strb	r3, [r7, #23]
            break;
 801093e:	e06b      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	4a17      	ldr	r2, [pc, #92]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010946:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 801094a:	4b16      	ldr	r3, [pc, #88]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801094c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010950:	4a14      	ldr	r2, [pc, #80]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010952:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8010954:	e060      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	791a      	ldrb	r2, [r3, #4]
 801095a:	4b12      	ldr	r3, [pc, #72]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801095c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8010960:	4b10      	ldr	r3, [pc, #64]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010962:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010966:	4b0f      	ldr	r3, [pc, #60]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 801096c:	e054      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	4a0c      	ldr	r2, [pc, #48]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010974:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8010976:	e04f      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	4a09      	ldr	r2, [pc, #36]	; (80109a4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801097e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8010982:	e049      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d007      	beq.n	801099c <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	f7fe fe27 	bl	800f5e4 <RestoreNvmData>
 8010996:	4603      	mov	r3, r0
 8010998:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801099a:	e03d      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801099c:	2303      	movs	r3, #3
 801099e:	75fb      	strb	r3, [r7, #23]
            break;
 80109a0:	e03a      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
 80109a2:	bf00      	nop
 80109a4:	2000095c 	.word	0x2000095c
 80109a8:	0801c4cc 	.word	0x0801c4cc
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	799b      	ldrb	r3, [r3, #6]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d80d      	bhi.n	80109d0 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80109b4:	4a1b      	ldr	r2, [pc, #108]	; (8010a24 <LoRaMacMibSetRequestConfirm+0x678>)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6858      	ldr	r0, [r3, #4]
 80109c2:	f001 fc23 	bl	801220c <LoRaMacCryptoSetLrWanVersion>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d024      	beq.n	8010a16 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80109cc:	2311      	movs	r3, #17
 80109ce:	e024      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109d0:	2303      	movs	r3, #3
 80109d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80109d4:	e01f      	b.n	8010a16 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fbe4 	bl	80111a4 <LoRaMacMibClassBSetRequestConfirm>
 80109dc:	4603      	mov	r3, r0
 80109de:	75fb      	strb	r3, [r7, #23]
            break;
 80109e0:	e01a      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109e2:	bf00      	nop
 80109e4:	e018      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109e6:	bf00      	nop
 80109e8:	e016      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109ea:	bf00      	nop
 80109ec:	e014      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109ee:	bf00      	nop
 80109f0:	e012      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109f2:	bf00      	nop
 80109f4:	e010      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109f6:	bf00      	nop
 80109f8:	e00e      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109fa:	bf00      	nop
 80109fc:	e00c      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80109fe:	bf00      	nop
 8010a00:	e00a      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a02:	bf00      	nop
 8010a04:	e008      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a06:	bf00      	nop
 8010a08:	e006      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a0a:	bf00      	nop
 8010a0c:	e004      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a0e:	bf00      	nop
 8010a10:	e002      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a12:	bf00      	nop
 8010a14:	e000      	b.n	8010a18 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a16:	bf00      	nop
        }
    }
    return status;
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3718      	adds	r7, #24
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	2000095c 	.word	0x2000095c

08010a28 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010a30:	2302      	movs	r3, #2
 8010a32:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010a34:	2300      	movs	r3, #0
 8010a36:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d101      	bne.n	8010a42 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e127      	b.n	8010c92 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8010a42:	f7fc fd23 	bl	800d48c <LoRaMacIsBusy>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d001      	beq.n	8010a50 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e120      	b.n	8010c92 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8010a50:	f001 f8a6 	bl	8011ba0 <LoRaMacConfirmQueueIsFull>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e119      	b.n	8010c92 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010a5e:	f001 f893 	bl	8011b88 <LoRaMacConfirmQueueGetCnt>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d104      	bne.n	8010a72 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8010a68:	2214      	movs	r2, #20
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	488b      	ldr	r0, [pc, #556]	; (8010c9c <LoRaMacMlmeRequest+0x274>)
 8010a6e:	f006 f997 	bl	8016da0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010a72:	4b8b      	ldr	r3, [pc, #556]	; (8010ca0 <LoRaMacMlmeRequest+0x278>)
 8010a74:	2201      	movs	r2, #1
 8010a76:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010a7a:	4a89      	ldr	r2, [pc, #548]	; (8010ca0 <LoRaMacMlmeRequest+0x278>)
 8010a7c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a80:	f043 0304 	orr.w	r3, r3, #4
 8010a84:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8010a92:	2300      	movs	r3, #0
 8010a94:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	2b0d      	cmp	r3, #13
 8010a9e:	f200 80ce 	bhi.w	8010c3e <LoRaMacMlmeRequest+0x216>
 8010aa2:	a201      	add	r2, pc, #4	; (adr r2, 8010aa8 <LoRaMacMlmeRequest+0x80>)
 8010aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa8:	08010ae1 	.word	0x08010ae1
 8010aac:	08010c3f 	.word	0x08010c3f
 8010ab0:	08010c3f 	.word	0x08010c3f
 8010ab4:	08010b4b 	.word	0x08010b4b
 8010ab8:	08010b69 	.word	0x08010b69
 8010abc:	08010b79 	.word	0x08010b79
 8010ac0:	08010c3f 	.word	0x08010c3f
 8010ac4:	08010c3f 	.word	0x08010c3f
 8010ac8:	08010c3f 	.word	0x08010c3f
 8010acc:	08010b95 	.word	0x08010b95
 8010ad0:	08010c3f 	.word	0x08010c3f
 8010ad4:	08010c13 	.word	0x08010c13
 8010ad8:	08010bb3 	.word	0x08010bb3
 8010adc:	08010bf5 	.word	0x08010bf5
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8010ae0:	4b6f      	ldr	r3, [pc, #444]	; (8010ca0 <LoRaMacMlmeRequest+0x278>)
 8010ae2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010ae6:	f003 0320 	and.w	r3, r3, #32
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d001      	beq.n	8010af2 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8010aee:	2301      	movs	r3, #1
 8010af0:	e0cf      	b.n	8010c92 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8010af2:	f7fe f9fd 	bl	800eef0 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8010af6:	4b6b      	ldr	r3, [pc, #428]	; (8010ca4 <LoRaMacMlmeRequest+0x27c>)
 8010af8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	791b      	ldrb	r3, [r3, #4]
 8010b00:	b25b      	sxtb	r3, r3
 8010b02:	2200      	movs	r2, #0
 8010b04:	4619      	mov	r1, r3
 8010b06:	f002 fbcb 	bl	80132a0 <RegionAlternateDr>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	4b65      	ldr	r3, [pc, #404]	; (8010ca4 <LoRaMacMlmeRequest+0x27c>)
 8010b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8010b14:	2307      	movs	r3, #7
 8010b16:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8010b18:	20ff      	movs	r0, #255	; 0xff
 8010b1a:	f7fd ff61 	bl	800e9e0 <SendReJoinReq>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8010b22:	7dfb      	ldrb	r3, [r7, #23]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f000 808c 	beq.w	8010c42 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8010b2a:	4b5e      	ldr	r3, [pc, #376]	; (8010ca4 <LoRaMacMlmeRequest+0x27c>)
 8010b2c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	791b      	ldrb	r3, [r3, #4]
 8010b34:	b25b      	sxtb	r3, r3
 8010b36:	2201      	movs	r2, #1
 8010b38:	4619      	mov	r1, r3
 8010b3a:	f002 fbb1 	bl	80132a0 <RegionAlternateDr>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	461a      	mov	r2, r3
 8010b42:	4b58      	ldr	r3, [pc, #352]	; (8010ca4 <LoRaMacMlmeRequest+0x27c>)
 8010b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8010b48:	e07b      	b.n	8010c42 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010b4e:	f107 030c 	add.w	r3, r7, #12
 8010b52:	2200      	movs	r2, #0
 8010b54:	4619      	mov	r1, r3
 8010b56:	2002      	movs	r0, #2
 8010b58:	f000 fc88 	bl	801146c <LoRaMacCommandsAddCmd>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d071      	beq.n	8010c46 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b62:	2313      	movs	r3, #19
 8010b64:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010b66:	e06e      	b.n	8010c46 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	889b      	ldrh	r3, [r3, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe fcdb 	bl	800f528 <SetTxContinuousWave>
 8010b72:	4603      	mov	r3, r0
 8010b74:	75fb      	strb	r3, [r7, #23]
            break;
 8010b76:	e06d      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	8898      	ldrh	r0, [r3, #4]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6899      	ldr	r1, [r3, #8]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	461a      	mov	r2, r3
 8010b8a:	f7fe fd01 	bl	800f590 <SetTxContinuousWave1>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	75fb      	strb	r3, [r7, #23]
            break;
 8010b92:	e05f      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010b94:	2300      	movs	r3, #0
 8010b96:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010b98:	f107 030c 	add.w	r3, r7, #12
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	200d      	movs	r0, #13
 8010ba2:	f000 fc63 	bl	801146c <LoRaMacCommandsAddCmd>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d04e      	beq.n	8010c4a <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010bac:	2313      	movs	r3, #19
 8010bae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010bb0:	e04b      	b.n	8010c4a <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010bb2:	4b3c      	ldr	r3, [pc, #240]	; (8010ca4 <LoRaMacMlmeRequest+0x27c>)
 8010bb4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d148      	bne.n	8010c4e <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	791b      	ldrb	r3, [r3, #4]
 8010bc0:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	791b      	ldrb	r3, [r3, #4]
 8010bc6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 fabe 	bl	801114e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8010bd2:	7dbb      	ldrb	r3, [r7, #22]
 8010bd4:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8010bda:	f107 030c 	add.w	r3, r7, #12
 8010bde:	2201      	movs	r2, #1
 8010be0:	4619      	mov	r1, r3
 8010be2:	2010      	movs	r0, #16
 8010be4:	f000 fc42 	bl	801146c <LoRaMacCommandsAddCmd>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d02f      	beq.n	8010c4e <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010bee:	2313      	movs	r3, #19
 8010bf0:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8010bf2:	e02c      	b.n	8010c4e <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	4619      	mov	r1, r3
 8010c00:	2012      	movs	r0, #18
 8010c02:	f000 fc33 	bl	801146c <LoRaMacCommandsAddCmd>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d022      	beq.n	8010c52 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c0c:	2313      	movs	r3, #19
 8010c0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010c10:	e01f      	b.n	8010c52 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8010c12:	2301      	movs	r3, #1
 8010c14:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8010c16:	f000 fa50 	bl	80110ba <LoRaMacClassBIsAcquisitionInProgress>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	f083 0301 	eor.w	r3, r3, #1
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d008      	beq.n	8010c38 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8010c26:	2000      	movs	r0, #0
 8010c28:	f000 fa29 	bl	801107e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f000 fa4b 	bl	80110c8 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8010c36:	e00d      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	75fb      	strb	r3, [r7, #23]
            break;
 8010c3c:	e00a      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8010c3e:	bf00      	nop
 8010c40:	e008      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c42:	bf00      	nop
 8010c44:	e006      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c46:	bf00      	nop
 8010c48:	e004      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c4a:	bf00      	nop
 8010c4c:	e002      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c4e:	bf00      	nop
 8010c50:	e000      	b.n	8010c54 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c52:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010c54:	4b12      	ldr	r3, [pc, #72]	; (8010ca0 <LoRaMacMlmeRequest+0x278>)
 8010c56:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d010      	beq.n	8010c86 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010c64:	f000 ff90 	bl	8011b88 <LoRaMacConfirmQueueGetCnt>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d110      	bne.n	8010c90 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8010c6e:	4b0c      	ldr	r3, [pc, #48]	; (8010ca0 <LoRaMacMlmeRequest+0x278>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010c76:	4a0a      	ldr	r2, [pc, #40]	; (8010ca0 <LoRaMacMlmeRequest+0x278>)
 8010c78:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010c7c:	f36f 0382 	bfc	r3, #2, #1
 8010c80:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8010c84:	e004      	b.n	8010c90 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8010c86:	f107 0310 	add.w	r3, r7, #16
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f000 fe2e 	bl	80118ec <LoRaMacConfirmQueueAdd>
    }
    return status;
 8010c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3718      	adds	r7, #24
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	200008a0 	.word	0x200008a0
 8010ca0:	20000454 	.word	0x20000454
 8010ca4:	2000095c 	.word	0x2000095c

08010ca8 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b08c      	sub	sp, #48	; 0x30
 8010cac:	af02      	add	r7, sp, #8
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010cb4:	2302      	movs	r3, #2
 8010cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d101      	bne.n	8010cd6 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010cd2:	2303      	movs	r3, #3
 8010cd4:	e0d4      	b.n	8010e80 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8010cd6:	f7fc fbd9 	bl	800d48c <LoRaMacIsBusy>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d001      	beq.n	8010ce4 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	e0cd      	b.n	8010e80 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8010ce8:	2214      	movs	r2, #20
 8010cea:	2100      	movs	r1, #0
 8010cec:	4866      	ldr	r0, [pc, #408]	; (8010e88 <LoRaMacMcpsRequest+0x1e0>)
 8010cee:	f006 f857 	bl	8016da0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010cf2:	4b66      	ldr	r3, [pc, #408]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010cfa:	4b64      	ldr	r3, [pc, #400]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2b03      	cmp	r3, #3
 8010d08:	d03d      	beq.n	8010d86 <LoRaMacMcpsRequest+0xde>
 8010d0a:	2b03      	cmp	r3, #3
 8010d0c:	dc4f      	bgt.n	8010dae <LoRaMacMcpsRequest+0x106>
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d002      	beq.n	8010d18 <LoRaMacMcpsRequest+0x70>
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d019      	beq.n	8010d4a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8010d16:	e04a      	b.n	8010dae <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8010d1c:	4b5b      	ldr	r3, [pc, #364]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8010d24:	7b3b      	ldrb	r3, [r7, #12]
 8010d26:	2202      	movs	r2, #2
 8010d28:	f362 1347 	bfi	r3, r2, #5, #3
 8010d2c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	791b      	ldrb	r3, [r3, #4]
 8010d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	899b      	ldrh	r3, [r3, #12]
 8010d40:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	7b9b      	ldrb	r3, [r3, #14]
 8010d46:	777b      	strb	r3, [r7, #29]
            break;
 8010d48:	e032      	b.n	8010db0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7bdb      	ldrb	r3, [r3, #15]
 8010d52:	2b08      	cmp	r3, #8
 8010d54:	bf28      	it	cs
 8010d56:	2308      	movcs	r3, #8
 8010d58:	b2da      	uxtb	r2, r3
 8010d5a:	4b4c      	ldr	r3, [pc, #304]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010d5c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8010d60:	7b3b      	ldrb	r3, [r7, #12]
 8010d62:	2204      	movs	r2, #4
 8010d64:	f362 1347 	bfi	r3, r2, #5, #3
 8010d68:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	791b      	ldrb	r3, [r3, #4]
 8010d6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	899b      	ldrh	r3, [r3, #12]
 8010d7c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	7b9b      	ldrb	r3, [r3, #14]
 8010d82:	777b      	strb	r3, [r7, #29]
            break;
 8010d84:	e014      	b.n	8010db0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8010d86:	2301      	movs	r3, #1
 8010d88:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8010d8a:	4b40      	ldr	r3, [pc, #256]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8010d92:	7b3b      	ldrb	r3, [r7, #12]
 8010d94:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8010d98:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	891b      	ldrh	r3, [r3, #8]
 8010da4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	7a9b      	ldrb	r3, [r3, #10]
 8010daa:	777b      	strb	r3, [r7, #29]
            break;
 8010dac:	e000      	b.n	8010db0 <LoRaMacMcpsRequest+0x108>
            break;
 8010dae:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010db0:	2302      	movs	r3, #2
 8010db2:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010db4:	4b36      	ldr	r3, [pc, #216]	; (8010e90 <LoRaMacMcpsRequest+0x1e8>)
 8010db6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010dba:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dbc:	4b34      	ldr	r3, [pc, #208]	; (8010e90 <LoRaMacMcpsRequest+0x1e8>)
 8010dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dc2:	f107 0214 	add.w	r2, r7, #20
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f002 f8ce 	bl	8012f6a <RegionGetPhyParam>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	b25b      	sxtb	r3, r3
 8010dd6:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	bfb8      	it	lt
 8010dde:	4613      	movlt	r3, r2
 8010de0:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8010de2:	7f3b      	ldrb	r3, [r7, #28]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d044      	beq.n	8010e72 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8010de8:	4b29      	ldr	r3, [pc, #164]	; (8010e90 <LoRaMacMcpsRequest+0x1e8>)
 8010dea:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010dee:	f083 0301 	eor.w	r3, r3, #1
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d019      	beq.n	8010e2c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8010df8:	7f7b      	ldrb	r3, [r7, #29]
 8010dfa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010dfc:	4b24      	ldr	r3, [pc, #144]	; (8010e90 <LoRaMacMcpsRequest+0x1e8>)
 8010dfe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e02:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010e04:	4b22      	ldr	r3, [pc, #136]	; (8010e90 <LoRaMacMcpsRequest+0x1e8>)
 8010e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e0a:	f107 0108 	add.w	r1, r7, #8
 8010e0e:	2205      	movs	r2, #5
 8010e10:	4618      	mov	r0, r3
 8010e12:	f002 f8fb 	bl	801300c <RegionVerify>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d005      	beq.n	8010e28 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010e1c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010e20:	4b1b      	ldr	r3, [pc, #108]	; (8010e90 <LoRaMacMcpsRequest+0x1e8>)
 8010e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8010e26:	e001      	b.n	8010e2c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e28:	2303      	movs	r3, #3
 8010e2a:	e029      	b.n	8010e80 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010e2c:	8bfa      	ldrh	r2, [r7, #30]
 8010e2e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8010e32:	f107 000c 	add.w	r0, r7, #12
 8010e36:	78fb      	ldrb	r3, [r7, #3]
 8010e38:	9300      	str	r3, [sp, #0]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	6a3a      	ldr	r2, [r7, #32]
 8010e3e:	f7fd fcef 	bl	800e820 <Send>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8010e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10c      	bne.n	8010e6a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	781a      	ldrb	r2, [r3, #0]
 8010e54:	4b0d      	ldr	r3, [pc, #52]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010e56:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8010e5a:	4a0c      	ldr	r2, [pc, #48]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010e5c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010e60:	f043 0301 	orr.w	r3, r3, #1
 8010e64:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8010e68:	e003      	b.n	8010e72 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8010e6a:	4b08      	ldr	r3, [pc, #32]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010e72:	4b06      	ldr	r3, [pc, #24]	; (8010e8c <LoRaMacMcpsRequest+0x1e4>)
 8010e74:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	611a      	str	r2, [r3, #16]

    return status;
 8010e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3728      	adds	r7, #40	; 0x28
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	2000088c 	.word	0x2000088c
 8010e8c:	20000454 	.word	0x20000454
 8010e90:	2000095c 	.word	0x2000095c

08010e94 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8010ea2:	4b0a      	ldr	r3, [pc, #40]	; (8010ecc <LoRaMacTestSetDutyCycleOn+0x38>)
 8010ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ea8:	f107 010c 	add.w	r1, r7, #12
 8010eac:	220f      	movs	r2, #15
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f002 f8ac 	bl	801300c <RegionVerify>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d003      	beq.n	8010ec2 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8010eba:	4a04      	ldr	r2, [pc, #16]	; (8010ecc <LoRaMacTestSetDutyCycleOn+0x38>)
 8010ebc:	79fb      	ldrb	r3, [r7, #7]
 8010ebe:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8010ec2:	bf00      	nop
 8010ec4:	3710      	adds	r7, #16
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	2000095c 	.word	0x2000095c

08010ed0 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b08c      	sub	sp, #48	; 0x30
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	7c1b      	ldrb	r3, [r3, #16]
 8010ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	7c5b      	ldrb	r3, [r3, #17]
 8010ef0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	689a      	ldr	r2, [r3, #8]
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	795b      	ldrb	r3, [r3, #5]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 808b 	beq.w	801101c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8010f06:	2302      	movs	r3, #2
 8010f08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	7c9b      	ldrb	r3, [r3, #18]
 8010f10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	7cdb      	ldrb	r3, [r3, #19]
 8010f18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f002 f823 	bl	8012f6a <RegionGetPhyParam>
 8010f24:	4603      	mov	r3, r0
 8010f26:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8010f28:	6a3b      	ldr	r3, [r7, #32]
 8010f2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8010f2e:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8010f32:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8010f36:	4293      	cmp	r3, r2
 8010f38:	bfb8      	it	lt
 8010f3a:	4613      	movlt	r3, r2
 8010f3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8010f40:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8010f44:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d106      	bne.n	8010f5a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8010f52:	2300      	movs	r3, #0
 8010f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f58:	e060      	b.n	801101c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	68fa      	ldr	r2, [r7, #12]
 8010f60:	8992      	ldrh	r2, [r2, #12]
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d303      	bcc.n	8010f6e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8010f66:	2301      	movs	r3, #1
 8010f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f6c:	e002      	b.n	8010f74 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	68fa      	ldr	r2, [r7, #12]
 8010f7a:	8992      	ldrh	r2, [r2, #12]
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	89d2      	ldrh	r2, [r2, #14]
 8010f82:	440a      	add	r2, r1
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d349      	bcc.n	801101c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8010f88:	2308      	movs	r3, #8
 8010f8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	7cdb      	ldrb	r3, [r3, #19]
 8010f92:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010f96:	4611      	mov	r1, r2
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f001 ffe6 	bl	8012f6a <RegionGetPhyParam>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	89d2      	ldrh	r2, [r2, #14]
 8010fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fb4:	fb02 f201 	mul.w	r2, r2, r1
 8010fb8:	1a9b      	subs	r3, r3, r2
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d12e      	bne.n	801101c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010fbe:	2322      	movs	r3, #34	; 0x22
 8010fc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8010fc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	7c9b      	ldrb	r3, [r3, #18]
 8010fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	7cdb      	ldrb	r3, [r3, #19]
 8010fd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010fdc:	4611      	mov	r1, r2
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f001 ffc3 	bl	8012f6a <RegionGetPhyParam>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8010fee:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8010ff2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d110      	bne.n	801101c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	791b      	ldrb	r3, [r3, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d009      	beq.n	801101c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011008:	2302      	movs	r3, #2
 801100a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	7cdb      	ldrb	r3, [r3, #19]
 8011010:	f107 0214 	add.w	r2, r7, #20
 8011014:	4611      	mov	r1, r2
 8011016:	4618      	mov	r0, r3
 8011018:	f001 ffe0 	bl	8012fdc <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011022:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801102a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801102c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011030:	4618      	mov	r0, r3
 8011032:	3730      	adds	r7, #48	; 0x30
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	789b      	ldrb	r3, [r3, #2]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d107      	bne.n	801105e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	68b9      	ldr	r1, [r7, #8]
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7ff ff3b 	bl	8010ed0 <CalcNextV10X>
 801105a:	4603      	mov	r3, r0
 801105c:	e000      	b.n	8011060 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801105e:	2300      	movs	r3, #0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011074:	bf00      	nop
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	bc80      	pop	{r7}
 801107c:	4770      	bx	lr

0801107e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801107e:	b480      	push	{r7}
 8011080:	b083      	sub	sp, #12
 8011082:	af00      	add	r7, sp, #0
 8011084:	4603      	mov	r3, r0
 8011086:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011088:	bf00      	nop
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	bc80      	pop	{r7}
 8011090:	4770      	bx	lr

08011092 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011092:	b480      	push	{r7}
 8011094:	b083      	sub	sp, #12
 8011096:	af00      	add	r7, sp, #0
 8011098:	4603      	mov	r3, r0
 801109a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bc80      	pop	{r7}
 80110a4:	4770      	bx	lr

080110a6 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80110a6:	b480      	push	{r7}
 80110a8:	b083      	sub	sp, #12
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	4603      	mov	r3, r0
 80110ae:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bc80      	pop	{r7}
 80110b8:	4770      	bx	lr

080110ba <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80110ba:	b480      	push	{r7}
 80110bc:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80110be:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bc80      	pop	{r7}
 80110c6:	4770      	bx	lr

080110c8 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110d0:	bf00      	nop
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bc80      	pop	{r7}
 80110d8:	4770      	bx	lr

080110da <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80110da:	b480      	push	{r7}
 80110dc:	b083      	sub	sp, #12
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110e2:	bf00      	nop
 80110e4:	370c      	adds	r7, #12
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bc80      	pop	{r7}
 80110ea:	4770      	bx	lr

080110ec <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110f4:	bf00      	nop
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bc80      	pop	{r7}
 80110fc:	4770      	bx	lr

080110fe <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80110fe:	b480      	push	{r7}
 8011100:	b083      	sub	sp, #12
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	460b      	mov	r3, r1
 8011108:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801110a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801110c:	4618      	mov	r0, r3
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	bc80      	pop	{r7}
 8011114:	4770      	bx	lr

08011116 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011116:	b480      	push	{r7}
 8011118:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801111a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801111c:	4618      	mov	r0, r3
 801111e:	46bd      	mov	sp, r7
 8011120:	bc80      	pop	{r7}
 8011122:	4770      	bx	lr

08011124 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011124:	b480      	push	{r7}
 8011126:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011128:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801112a:	4618      	mov	r0, r3
 801112c:	46bd      	mov	sp, r7
 801112e:	bc80      	pop	{r7}
 8011130:	4770      	bx	lr

08011132 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011132:	b480      	push	{r7}
 8011134:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011136:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011138:	4618      	mov	r0, r3
 801113a:	46bd      	mov	sp, r7
 801113c:	bc80      	pop	{r7}
 801113e:	4770      	bx	lr

08011140 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011140:	b480      	push	{r7}
 8011142:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011144:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011146:	4618      	mov	r0, r3
 8011148:	46bd      	mov	sp, r7
 801114a:	bc80      	pop	{r7}
 801114c:	4770      	bx	lr

0801114e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801114e:	b480      	push	{r7}
 8011150:	b083      	sub	sp, #12
 8011152:	af00      	add	r7, sp, #0
 8011154:	4603      	mov	r3, r0
 8011156:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	bc80      	pop	{r7}
 8011160:	4770      	bx	lr

08011162 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011162:	b480      	push	{r7}
 8011164:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011166:	bf00      	nop
 8011168:	46bd      	mov	sp, r7
 801116a:	bc80      	pop	{r7}
 801116c:	4770      	bx	lr

0801116e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801116e:	b480      	push	{r7}
 8011170:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011172:	bf00      	nop
 8011174:	46bd      	mov	sp, r7
 8011176:	bc80      	pop	{r7}
 8011178:	4770      	bx	lr

0801117a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801117a:	b480      	push	{r7}
 801117c:	b083      	sub	sp, #12
 801117e:	af00      	add	r7, sp, #0
 8011180:	4603      	mov	r3, r0
 8011182:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011184:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011186:	4618      	mov	r0, r3
 8011188:	370c      	adds	r7, #12
 801118a:	46bd      	mov	sp, r7
 801118c:	bc80      	pop	{r7}
 801118e:	4770      	bx	lr

08011190 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011198:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801119a:	4618      	mov	r0, r3
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	bc80      	pop	{r7}
 80111a2:	4770      	bx	lr

080111a4 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80111ac:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bc80      	pop	{r7}
 80111b6:	4770      	bx	lr

080111b8 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80111b8:	b480      	push	{r7}
 80111ba:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111bc:	bf00      	nop
 80111be:	46bd      	mov	sp, r7
 80111c0:	bc80      	pop	{r7}
 80111c2:	4770      	bx	lr

080111c4 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	4603      	mov	r3, r0
 80111cc:	6039      	str	r1, [r7, #0]
 80111ce:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80111d0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	370c      	adds	r7, #12
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bc80      	pop	{r7}
 80111da:	4770      	bx	lr

080111dc <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	4603      	mov	r3, r0
 80111e4:	603a      	str	r2, [r7, #0]
 80111e6:	80fb      	strh	r3, [r7, #6]
 80111e8:	460b      	mov	r3, r1
 80111ea:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111ec:	bf00      	nop
 80111ee:	370c      	adds	r7, #12
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bc80      	pop	{r7}
 80111f4:	4770      	bx	lr

080111f6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80111f6:	b480      	push	{r7}
 80111f8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111fa:	bf00      	nop
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bc80      	pop	{r7}
 8011200:	4770      	bx	lr

08011202 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011202:	b480      	push	{r7}
 8011204:	b083      	sub	sp, #12
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801120a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801120c:	4618      	mov	r0, r3
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	bc80      	pop	{r7}
 8011214:	4770      	bx	lr

08011216 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8011216:	b480      	push	{r7}
 8011218:	b083      	sub	sp, #12
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801121e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011220:	4618      	mov	r0, r3
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	bc80      	pop	{r7}
 8011228:	4770      	bx	lr

0801122a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801122a:	b480      	push	{r7}
 801122c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801122e:	bf00      	nop
 8011230:	46bd      	mov	sp, r7
 8011232:	bc80      	pop	{r7}
 8011234:	4770      	bx	lr

08011236 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8011236:	b480      	push	{r7}
 8011238:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801123a:	bf00      	nop
 801123c:	46bd      	mov	sp, r7
 801123e:	bc80      	pop	{r7}
 8011240:	4770      	bx	lr

08011242 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011242:	b480      	push	{r7}
 8011244:	b085      	sub	sp, #20
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801124e:	2300      	movs	r3, #0
 8011250:	81fb      	strh	r3, [r7, #14]
 8011252:	e00a      	b.n	801126a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011254:	89fb      	ldrh	r3, [r7, #14]
 8011256:	68ba      	ldr	r2, [r7, #8]
 8011258:	4413      	add	r3, r2
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <IsSlotFree+0x22>
        {
            return false;
 8011260:	2300      	movs	r3, #0
 8011262:	e006      	b.n	8011272 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011264:	89fb      	ldrh	r3, [r7, #14]
 8011266:	3301      	adds	r3, #1
 8011268:	81fb      	strh	r3, [r7, #14]
 801126a:	89fb      	ldrh	r3, [r7, #14]
 801126c:	2b0f      	cmp	r3, #15
 801126e:	d9f1      	bls.n	8011254 <IsSlotFree+0x12>
        }
    }
    return true;
 8011270:	2301      	movs	r3, #1
}
 8011272:	4618      	mov	r0, r3
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	bc80      	pop	{r7}
 801127a:	4770      	bx	lr

0801127c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011282:	2300      	movs	r3, #0
 8011284:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011286:	e007      	b.n	8011298 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011288:	79fb      	ldrb	r3, [r7, #7]
 801128a:	3301      	adds	r3, #1
 801128c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	2b0f      	cmp	r3, #15
 8011292:	d101      	bne.n	8011298 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011294:	2300      	movs	r3, #0
 8011296:	e012      	b.n	80112be <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011298:	79fb      	ldrb	r3, [r7, #7]
 801129a:	011b      	lsls	r3, r3, #4
 801129c:	3308      	adds	r3, #8
 801129e:	4a0a      	ldr	r2, [pc, #40]	; (80112c8 <MallocNewMacCommandSlot+0x4c>)
 80112a0:	4413      	add	r3, r2
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7ff ffcd 	bl	8011242 <IsSlotFree>
 80112a8:	4603      	mov	r3, r0
 80112aa:	f083 0301 	eor.w	r3, r3, #1
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d1e9      	bne.n	8011288 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80112b4:	79fb      	ldrb	r3, [r7, #7]
 80112b6:	011b      	lsls	r3, r3, #4
 80112b8:	3308      	adds	r3, #8
 80112ba:	4a03      	ldr	r2, [pc, #12]	; (80112c8 <MallocNewMacCommandSlot+0x4c>)
 80112bc:	4413      	add	r3, r2
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20000f70 	.word	0x20000f70

080112cc <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d101      	bne.n	80112de <FreeMacCommandSlot+0x12>
    {
        return false;
 80112da:	2300      	movs	r3, #0
 80112dc:	e005      	b.n	80112ea <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80112de:	2210      	movs	r2, #16
 80112e0:	2100      	movs	r1, #0
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f005 fd5c 	bl	8016da0 <memset1>

    return true;
 80112e8:	2301      	movs	r3, #1
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80112f2:	b480      	push	{r7}
 80112f4:	b083      	sub	sp, #12
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d101      	bne.n	8011304 <LinkedListInit+0x12>
    {
        return false;
 8011300:	2300      	movs	r3, #0
 8011302:	e006      	b.n	8011312 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2200      	movs	r2, #0
 801130e:	605a      	str	r2, [r3, #4]

    return true;
 8011310:	2301      	movs	r3, #1
}
 8011312:	4618      	mov	r0, r3
 8011314:	370c      	adds	r7, #12
 8011316:	46bd      	mov	sp, r7
 8011318:	bc80      	pop	{r7}
 801131a:	4770      	bx	lr

0801131c <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d002      	beq.n	8011332 <LinkedListAdd+0x16>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d101      	bne.n	8011336 <LinkedListAdd+0x1a>
    {
        return false;
 8011332:	2300      	movs	r3, #0
 8011334:	e015      	b.n	8011362 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d102      	bne.n	8011344 <LinkedListAdd+0x28>
    {
        list->First = element;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d003      	beq.n	8011354 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	2200      	movs	r2, #0
 8011358:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	605a      	str	r2, [r3, #4]

    return true;
 8011360:	2301      	movs	r3, #1
}
 8011362:	4618      	mov	r0, r3
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	bc80      	pop	{r7}
 801136a:	4770      	bx	lr

0801136c <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801136c:	b480      	push	{r7}
 801136e:	b085      	sub	sp, #20
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <LinkedListGetPrevious+0x16>
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8011382:	2300      	movs	r3, #0
 8011384:	e016      	b.n	80113b4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	429a      	cmp	r2, r3
 8011392:	d00c      	beq.n	80113ae <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011394:	e002      	b.n	801139c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d007      	beq.n	80113b2 <LinkedListGetPrevious+0x46>
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	683a      	ldr	r2, [r7, #0]
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d1f4      	bne.n	8011396 <LinkedListGetPrevious+0x2a>
 80113ac:	e001      	b.n	80113b2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80113ae:	2300      	movs	r3, #0
 80113b0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80113b2:	68fb      	ldr	r3, [r7, #12]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bc80      	pop	{r7}
 80113bc:	4770      	bx	lr

080113be <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	b084      	sub	sp, #16
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
 80113c6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <LinkedListRemove+0x16>
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <LinkedListRemove+0x1a>
    {
        return false;
 80113d4:	2300      	movs	r3, #0
 80113d6:	e020      	b.n	801141a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80113d8:	6839      	ldr	r1, [r7, #0]
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7ff ffc6 	bl	801136c <LinkedListGetPrevious>
 80113e0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d103      	bne.n	80113f4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d102      	bne.n	8011404 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d003      	beq.n	8011412 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2200      	movs	r2, #0
 8011416:	601a      	str	r2, [r3, #0]

    return true;
 8011418:	2301      	movs	r3, #1
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8011422:	b480      	push	{r7}
 8011424:	b083      	sub	sp, #12
 8011426:	af00      	add	r7, sp, #0
 8011428:	4603      	mov	r3, r0
 801142a:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	2b05      	cmp	r3, #5
 8011430:	d004      	beq.n	801143c <IsSticky+0x1a>
 8011432:	2b05      	cmp	r3, #5
 8011434:	db04      	blt.n	8011440 <IsSticky+0x1e>
 8011436:	3b08      	subs	r3, #8
 8011438:	2b02      	cmp	r3, #2
 801143a:	d801      	bhi.n	8011440 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 801143c:	2301      	movs	r3, #1
 801143e:	e000      	b.n	8011442 <IsSticky+0x20>
        default:
            return false;
 8011440:	2300      	movs	r3, #0
    }
}
 8011442:	4618      	mov	r0, r3
 8011444:	370c      	adds	r7, #12
 8011446:	46bd      	mov	sp, r7
 8011448:	bc80      	pop	{r7}
 801144a:	4770      	bx	lr

0801144c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011450:	22fc      	movs	r2, #252	; 0xfc
 8011452:	2100      	movs	r1, #0
 8011454:	4804      	ldr	r0, [pc, #16]	; (8011468 <LoRaMacCommandsInit+0x1c>)
 8011456:	f005 fca3 	bl	8016da0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801145a:	4803      	ldr	r0, [pc, #12]	; (8011468 <LoRaMacCommandsInit+0x1c>)
 801145c:	f7ff ff49 	bl	80112f2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011460:	2300      	movs	r3, #0
}
 8011462:	4618      	mov	r0, r3
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	20000f70 	.word	0x20000f70

0801146c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b086      	sub	sp, #24
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
 8011478:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d101      	bne.n	8011484 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011480:	2301      	movs	r3, #1
 8011482:	e033      	b.n	80114ec <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8011484:	f7ff fefa 	bl	801127c <MallocNewMacCommandSlot>
 8011488:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d101      	bne.n	8011494 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011490:	2302      	movs	r3, #2
 8011492:	e02b      	b.n	80114ec <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011494:	6979      	ldr	r1, [r7, #20]
 8011496:	4817      	ldr	r0, [pc, #92]	; (80114f4 <LoRaMacCommandsAddCmd+0x88>)
 8011498:	f7ff ff40 	bl	801131c <LinkedListAdd>
 801149c:	4603      	mov	r3, r0
 801149e:	f083 0301 	eor.w	r3, r3, #1
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d001      	beq.n	80114ac <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80114a8:	2305      	movs	r3, #5
 80114aa:	e01f      	b.n	80114ec <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	7bfa      	ldrb	r2, [r7, #15]
 80114b0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	3305      	adds	r3, #5
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	b292      	uxth	r2, r2
 80114c0:	68b9      	ldr	r1, [r7, #8]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f005 fc31 	bl	8016d2a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80114c8:	7bfb      	ldrb	r3, [r7, #15]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7ff ffa9 	bl	8011422 <IsSticky>
 80114d0:	4603      	mov	r3, r0
 80114d2:	461a      	mov	r2, r3
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80114d8:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <LoRaMacCommandsAddCmd+0x88>)
 80114da:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4413      	add	r3, r2
 80114e2:	3301      	adds	r3, #1
 80114e4:	4a03      	ldr	r2, [pc, #12]	; (80114f4 <LoRaMacCommandsAddCmd+0x88>)
 80114e6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80114ea:	2300      	movs	r3, #0
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	20000f70 	.word	0x20000f70

080114f8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d101      	bne.n	801150a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011506:	2301      	movs	r3, #1
 8011508:	e021      	b.n	801154e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801150a:	6879      	ldr	r1, [r7, #4]
 801150c:	4812      	ldr	r0, [pc, #72]	; (8011558 <LoRaMacCommandsRemoveCmd+0x60>)
 801150e:	f7ff ff56 	bl	80113be <LinkedListRemove>
 8011512:	4603      	mov	r3, r0
 8011514:	f083 0301 	eor.w	r3, r3, #1
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d001      	beq.n	8011522 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801151e:	2303      	movs	r3, #3
 8011520:	e015      	b.n	801154e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011522:	4b0d      	ldr	r3, [pc, #52]	; (8011558 <LoRaMacCommandsRemoveCmd+0x60>)
 8011524:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	3b01      	subs	r3, #1
 8011530:	4a09      	ldr	r2, [pc, #36]	; (8011558 <LoRaMacCommandsRemoveCmd+0x60>)
 8011532:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7ff fec8 	bl	80112cc <FreeMacCommandSlot>
 801153c:	4603      	mov	r3, r0
 801153e:	f083 0301 	eor.w	r3, r3, #1
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	d001      	beq.n	801154c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011548:	2305      	movs	r3, #5
 801154a:	e000      	b.n	801154e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	20000f70 	.word	0x20000f70

0801155c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011562:	4b0f      	ldr	r3, [pc, #60]	; (80115a0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011568:	e012      	b.n	8011590 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	7b1b      	ldrb	r3, [r3, #12]
 801156e:	f083 0301 	eor.w	r3, r3, #1
 8011572:	b2db      	uxtb	r3, r3
 8011574:	2b00      	cmp	r3, #0
 8011576:	d008      	beq.n	801158a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7ff ffba 	bl	80114f8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	607b      	str	r3, [r7, #4]
 8011588:	e002      	b.n	8011590 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d1e9      	bne.n	801156a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011596:	2300      	movs	r3, #0
}
 8011598:	4618      	mov	r0, r3
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	20000f70 	.word	0x20000f70

080115a4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80115aa:	4b0e      	ldr	r3, [pc, #56]	; (80115e4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80115b0:	e00f      	b.n	80115d2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	791b      	ldrb	r3, [r3, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff ff30 	bl	8011422 <IsSticky>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7ff ff95 	bl	80114f8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1ec      	bne.n	80115b2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80115d8:	2300      	movs	r3, #0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	20000f70 	.word	0x20000f70

080115e8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d101      	bne.n	80115fa <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80115f6:	2301      	movs	r3, #1
 80115f8:	e005      	b.n	8011606 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80115fa:	4b05      	ldr	r3, [pc, #20]	; (8011610 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80115fc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	370c      	adds	r7, #12
 801160a:	46bd      	mov	sp, r7
 801160c:	bc80      	pop	{r7}
 801160e:	4770      	bx	lr
 8011610:	20000f70 	.word	0x20000f70

08011614 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b088      	sub	sp, #32
 8011618:	af00      	add	r7, sp, #0
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011620:	4b25      	ldr	r3, [pc, #148]	; (80116b8 <LoRaMacCommandsSerializeCmds+0xa4>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <LoRaMacCommandsSerializeCmds+0x22>
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d126      	bne.n	8011684 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011636:	2301      	movs	r3, #1
 8011638:	e039      	b.n	80116ae <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801163a:	7efb      	ldrb	r3, [r7, #27]
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	1ad2      	subs	r2, r2, r3
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	3301      	adds	r3, #1
 8011646:	429a      	cmp	r2, r3
 8011648:	d320      	bcc.n	801168c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801164a:	7efb      	ldrb	r3, [r7, #27]
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	76fa      	strb	r2, [r7, #27]
 8011650:	461a      	mov	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4413      	add	r3, r2
 8011656:	69fa      	ldr	r2, [r7, #28]
 8011658:	7912      	ldrb	r2, [r2, #4]
 801165a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801165c:	7efb      	ldrb	r3, [r7, #27]
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	18d0      	adds	r0, r2, r3
 8011662:	69fb      	ldr	r3, [r7, #28]
 8011664:	1d59      	adds	r1, r3, #5
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	b29b      	uxth	r3, r3
 801166c:	461a      	mov	r2, r3
 801166e:	f005 fb5c 	bl	8016d2a <memcpy1>
            itr += curElement->PayloadSize;
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	b2da      	uxtb	r2, r3
 8011678:	7efb      	ldrb	r3, [r7, #27]
 801167a:	4413      	add	r3, r2
 801167c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1d7      	bne.n	801163a <LoRaMacCommandsSerializeCmds+0x26>
 801168a:	e009      	b.n	80116a0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801168c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801168e:	e007      	b.n	80116a0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8011696:	69f8      	ldr	r0, [r7, #28]
 8011698:	f7ff ff2e 	bl	80114f8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1f4      	bne.n	8011690 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80116a6:	68b8      	ldr	r0, [r7, #8]
 80116a8:	f7ff ff9e 	bl	80115e8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80116ac:	2300      	movs	r3, #0
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3720      	adds	r7, #32
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20000f70 	.word	0x20000f70

080116bc <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80116bc:	b480      	push	{r7}
 80116be:	b085      	sub	sp, #20
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d101      	bne.n	80116ce <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80116ca:	2301      	movs	r3, #1
 80116cc:	e016      	b.n	80116fc <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80116ce:	4b0e      	ldr	r3, [pc, #56]	; (8011708 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80116da:	e00b      	b.n	80116f4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	7b1b      	ldrb	r3, [r3, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d004      	beq.n	80116ee <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2201      	movs	r2, #1
 80116e8:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80116ea:	2300      	movs	r3, #0
 80116ec:	e006      	b.n	80116fc <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1f0      	bne.n	80116dc <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80116fa:	2300      	movs	r3, #0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3714      	adds	r7, #20
 8011700:	46bd      	mov	sp, r7
 8011702:	bc80      	pop	{r7}
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	20000f70 	.word	0x20000f70

0801170c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	3b02      	subs	r3, #2
 801171e:	2b11      	cmp	r3, #17
 8011720:	d850      	bhi.n	80117c4 <LoRaMacCommandsGetCmdSize+0xb8>
 8011722:	a201      	add	r2, pc, #4	; (adr r2, 8011728 <LoRaMacCommandsGetCmdSize+0x1c>)
 8011724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011728:	08011771 	.word	0x08011771
 801172c:	08011777 	.word	0x08011777
 8011730:	0801177d 	.word	0x0801177d
 8011734:	08011783 	.word	0x08011783
 8011738:	08011789 	.word	0x08011789
 801173c:	0801178f 	.word	0x0801178f
 8011740:	08011795 	.word	0x08011795
 8011744:	0801179b 	.word	0x0801179b
 8011748:	080117a1 	.word	0x080117a1
 801174c:	080117c5 	.word	0x080117c5
 8011750:	080117c5 	.word	0x080117c5
 8011754:	080117a7 	.word	0x080117a7
 8011758:	080117c5 	.word	0x080117c5
 801175c:	080117c5 	.word	0x080117c5
 8011760:	080117ad 	.word	0x080117ad
 8011764:	080117b3 	.word	0x080117b3
 8011768:	080117b9 	.word	0x080117b9
 801176c:	080117bf 	.word	0x080117bf
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8011770:	2303      	movs	r3, #3
 8011772:	73fb      	strb	r3, [r7, #15]
            break;
 8011774:	e027      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8011776:	2305      	movs	r3, #5
 8011778:	73fb      	strb	r3, [r7, #15]
            break;
 801177a:	e024      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801177c:	2302      	movs	r3, #2
 801177e:	73fb      	strb	r3, [r7, #15]
            break;
 8011780:	e021      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8011782:	2305      	movs	r3, #5
 8011784:	73fb      	strb	r3, [r7, #15]
            break;
 8011786:	e01e      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8011788:	2301      	movs	r3, #1
 801178a:	73fb      	strb	r3, [r7, #15]
            break;
 801178c:	e01b      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801178e:	2306      	movs	r3, #6
 8011790:	73fb      	strb	r3, [r7, #15]
            break;
 8011792:	e018      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8011794:	2302      	movs	r3, #2
 8011796:	73fb      	strb	r3, [r7, #15]
            break;
 8011798:	e015      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801179a:	2302      	movs	r3, #2
 801179c:	73fb      	strb	r3, [r7, #15]
            break;
 801179e:	e012      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80117a0:	2305      	movs	r3, #5
 80117a2:	73fb      	strb	r3, [r7, #15]
            break;
 80117a4:	e00f      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80117a6:	2306      	movs	r3, #6
 80117a8:	73fb      	strb	r3, [r7, #15]
            break;
 80117aa:	e00c      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80117ac:	2301      	movs	r3, #1
 80117ae:	73fb      	strb	r3, [r7, #15]
            break;
 80117b0:	e009      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80117b2:	2305      	movs	r3, #5
 80117b4:	73fb      	strb	r3, [r7, #15]
            break;
 80117b6:	e006      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80117b8:	2304      	movs	r3, #4
 80117ba:	73fb      	strb	r3, [r7, #15]
            break;
 80117bc:	e003      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80117be:	2304      	movs	r3, #4
 80117c0:	73fb      	strb	r3, [r7, #15]
            break;
 80117c2:	e000      	b.n	80117c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80117c4:	bf00      	nop
        }
    }
    return cidSize;
 80117c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3714      	adds	r7, #20
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bc80      	pop	{r7}
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop

080117d4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a07      	ldr	r2, [pc, #28]	; (80117fc <IncreaseBufferPointer+0x28>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d102      	bne.n	80117ea <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80117e4:	4b06      	ldr	r3, [pc, #24]	; (8011800 <IncreaseBufferPointer+0x2c>)
 80117e6:	607b      	str	r3, [r7, #4]
 80117e8:	e002      	b.n	80117f0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	3304      	adds	r3, #4
 80117ee:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80117f0:	687b      	ldr	r3, [r7, #4]
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	370c      	adds	r7, #12
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bc80      	pop	{r7}
 80117fa:	4770      	bx	lr
 80117fc:	20001088 	.word	0x20001088
 8011800:	20001078 	.word	0x20001078

08011804 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8011804:	b480      	push	{r7}
 8011806:	b083      	sub	sp, #12
 8011808:	af00      	add	r7, sp, #0
 801180a:	4603      	mov	r3, r0
 801180c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801180e:	79fb      	ldrb	r3, [r7, #7]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d101      	bne.n	8011818 <IsListEmpty+0x14>
    {
        return true;
 8011814:	2301      	movs	r3, #1
 8011816:	e000      	b.n	801181a <IsListEmpty+0x16>
    }
    return false;
 8011818:	2300      	movs	r3, #0
}
 801181a:	4618      	mov	r0, r3
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	bc80      	pop	{r7}
 8011822:	4770      	bx	lr

08011824 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	4603      	mov	r3, r0
 801182c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801182e:	79fb      	ldrb	r3, [r7, #7]
 8011830:	2b04      	cmp	r3, #4
 8011832:	d901      	bls.n	8011838 <IsListFull+0x14>
    {
        return true;
 8011834:	2301      	movs	r3, #1
 8011836:	e000      	b.n	801183a <IsListFull+0x16>
    }
    return false;
 8011838:	2300      	movs	r3, #0
}
 801183a:	4618      	mov	r0, r3
 801183c:	370c      	adds	r7, #12
 801183e:	46bd      	mov	sp, r7
 8011840:	bc80      	pop	{r7}
 8011842:	4770      	bx	lr

08011844 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b086      	sub	sp, #24
 8011848:	af00      	add	r7, sp, #0
 801184a:	4603      	mov	r3, r0
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]
 8011850:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011856:	4b13      	ldr	r3, [pc, #76]	; (80118a4 <GetElement+0x60>)
 8011858:	f893 3020 	ldrb.w	r3, [r3, #32]
 801185c:	4618      	mov	r0, r3
 801185e:	f7ff ffd1 	bl	8011804 <IsListEmpty>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <GetElement+0x28>
    {
        return NULL;
 8011868:	2300      	movs	r3, #0
 801186a:	e017      	b.n	801189c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801186c:	2300      	movs	r3, #0
 801186e:	74fb      	strb	r3, [r7, #19]
 8011870:	e00d      	b.n	801188e <GetElement+0x4a>
    {
        if( element->Request == request )
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	7bfa      	ldrb	r2, [r7, #15]
 8011878:	429a      	cmp	r2, r3
 801187a:	d101      	bne.n	8011880 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	e00d      	b.n	801189c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8011880:	6978      	ldr	r0, [r7, #20]
 8011882:	f7ff ffa7 	bl	80117d4 <IncreaseBufferPointer>
 8011886:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011888:	7cfb      	ldrb	r3, [r7, #19]
 801188a:	3301      	adds	r3, #1
 801188c:	74fb      	strb	r3, [r7, #19]
 801188e:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <GetElement+0x60>)
 8011890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011894:	7cfa      	ldrb	r2, [r7, #19]
 8011896:	429a      	cmp	r2, r3
 8011898:	d3eb      	bcc.n	8011872 <GetElement+0x2e>
    }

    return NULL;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3718      	adds	r7, #24
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	2000106c 	.word	0x2000106c

080118a8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80118b0:	4a0c      	ldr	r2, [pc, #48]	; (80118e4 <LoRaMacConfirmQueueInit+0x3c>)
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80118b6:	4b0b      	ldr	r3, [pc, #44]	; (80118e4 <LoRaMacConfirmQueueInit+0x3c>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80118be:	4b09      	ldr	r3, [pc, #36]	; (80118e4 <LoRaMacConfirmQueueInit+0x3c>)
 80118c0:	4a09      	ldr	r2, [pc, #36]	; (80118e8 <LoRaMacConfirmQueueInit+0x40>)
 80118c2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80118c4:	4b07      	ldr	r3, [pc, #28]	; (80118e4 <LoRaMacConfirmQueueInit+0x3c>)
 80118c6:	4a08      	ldr	r2, [pc, #32]	; (80118e8 <LoRaMacConfirmQueueInit+0x40>)
 80118c8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80118ca:	2214      	movs	r2, #20
 80118cc:	21ff      	movs	r1, #255	; 0xff
 80118ce:	4806      	ldr	r0, [pc, #24]	; (80118e8 <LoRaMacConfirmQueueInit+0x40>)
 80118d0:	f005 fa66 	bl	8016da0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118d4:	4b03      	ldr	r3, [pc, #12]	; (80118e4 <LoRaMacConfirmQueueInit+0x3c>)
 80118d6:	2201      	movs	r2, #1
 80118d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80118dc:	bf00      	nop
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	2000106c 	.word	0x2000106c
 80118e8:	20001078 	.word	0x20001078

080118ec <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80118f4:	4b19      	ldr	r3, [pc, #100]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 80118f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff ff92 	bl	8011824 <IsListFull>
 8011900:	4603      	mov	r3, r0
 8011902:	2b00      	cmp	r3, #0
 8011904:	d001      	beq.n	801190a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8011906:	2300      	movs	r3, #0
 8011908:	e023      	b.n	8011952 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801190a:	4b14      	ldr	r3, [pc, #80]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	7812      	ldrb	r2, [r2, #0]
 8011912:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8011914:	4b11      	ldr	r3, [pc, #68]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 8011916:	689b      	ldr	r3, [r3, #8]
 8011918:	687a      	ldr	r2, [r7, #4]
 801191a:	7852      	ldrb	r2, [r2, #1]
 801191c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801191e:	4b0f      	ldr	r3, [pc, #60]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	78d2      	ldrb	r2, [r2, #3]
 8011926:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8011928:	4b0c      	ldr	r3, [pc, #48]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 801192a:	689b      	ldr	r3, [r3, #8]
 801192c:	2200      	movs	r2, #0
 801192e:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8011930:	4b0a      	ldr	r3, [pc, #40]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 8011932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011936:	3301      	adds	r3, #1
 8011938:	b2da      	uxtb	r2, r3
 801193a:	4b08      	ldr	r3, [pc, #32]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 801193c:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8011940:	4b06      	ldr	r3, [pc, #24]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	4618      	mov	r0, r3
 8011946:	f7ff ff45 	bl	80117d4 <IncreaseBufferPointer>
 801194a:	4603      	mov	r3, r0
 801194c:	4a03      	ldr	r2, [pc, #12]	; (801195c <LoRaMacConfirmQueueAdd+0x70>)
 801194e:	6093      	str	r3, [r2, #8]

    return true;
 8011950:	2301      	movs	r3, #1
}
 8011952:	4618      	mov	r0, r3
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	2000106c 	.word	0x2000106c

08011960 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011964:	4b0e      	ldr	r3, [pc, #56]	; (80119a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011966:	f893 3020 	ldrb.w	r3, [r3, #32]
 801196a:	4618      	mov	r0, r3
 801196c:	f7ff ff4a 	bl	8011804 <IsListEmpty>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d001      	beq.n	801197a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8011976:	2300      	movs	r3, #0
 8011978:	e010      	b.n	801199c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801197a:	4b09      	ldr	r3, [pc, #36]	; (80119a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801197c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011980:	3b01      	subs	r3, #1
 8011982:	b2da      	uxtb	r2, r3
 8011984:	4b06      	ldr	r3, [pc, #24]	; (80119a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011986:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801198a:	4b05      	ldr	r3, [pc, #20]	; (80119a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	4618      	mov	r0, r3
 8011990:	f7ff ff20 	bl	80117d4 <IncreaseBufferPointer>
 8011994:	4603      	mov	r3, r0
 8011996:	4a02      	ldr	r2, [pc, #8]	; (80119a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8011998:	6053      	str	r3, [r2, #4]

    return true;
 801199a:	2301      	movs	r3, #1
}
 801199c:	4618      	mov	r0, r3
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	2000106c 	.word	0x2000106c

080119a4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	4603      	mov	r3, r0
 80119ac:	460a      	mov	r2, r1
 80119ae:	71fb      	strb	r3, [r7, #7]
 80119b0:	4613      	mov	r3, r2
 80119b2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80119b4:	2300      	movs	r3, #0
 80119b6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80119b8:	4b10      	ldr	r3, [pc, #64]	; (80119fc <LoRaMacConfirmQueueSetStatus+0x58>)
 80119ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff ff20 	bl	8011804 <IsListEmpty>
 80119c4:	4603      	mov	r3, r0
 80119c6:	f083 0301 	eor.w	r3, r3, #1
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d011      	beq.n	80119f4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80119d0:	4b0a      	ldr	r3, [pc, #40]	; (80119fc <LoRaMacConfirmQueueSetStatus+0x58>)
 80119d2:	6859      	ldr	r1, [r3, #4]
 80119d4:	4b09      	ldr	r3, [pc, #36]	; (80119fc <LoRaMacConfirmQueueSetStatus+0x58>)
 80119d6:	689a      	ldr	r2, [r3, #8]
 80119d8:	79bb      	ldrb	r3, [r7, #6]
 80119da:	4618      	mov	r0, r3
 80119dc:	f7ff ff32 	bl	8011844 <GetElement>
 80119e0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d005      	beq.n	80119f4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	79fa      	ldrb	r2, [r7, #7]
 80119ec:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2201      	movs	r2, #1
 80119f2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80119f4:	bf00      	nop
 80119f6:	3710      	adds	r7, #16
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	2000106c 	.word	0x2000106c

08011a00 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	4603      	mov	r3, r0
 8011a08:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a0e:	4b10      	ldr	r3, [pc, #64]	; (8011a50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7ff fef5 	bl	8011804 <IsListEmpty>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	f083 0301 	eor.w	r3, r3, #1
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00e      	beq.n	8011a44 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011a26:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011a28:	6859      	ldr	r1, [r3, #4]
 8011a2a:	4b09      	ldr	r3, [pc, #36]	; (8011a50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011a2c:	689a      	ldr	r2, [r3, #8]
 8011a2e:	79fb      	ldrb	r3, [r7, #7]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff ff07 	bl	8011844 <GetElement>
 8011a36:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d002      	beq.n	8011a44 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	785b      	ldrb	r3, [r3, #1]
 8011a42:	e000      	b.n	8011a46 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a44:	2301      	movs	r3, #1
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	2000106c 	.word	0x2000106c

08011a54 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8011a5e:	4b16      	ldr	r3, [pc, #88]	; (8011ab8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8011a64:	4a14      	ldr	r2, [pc, #80]	; (8011ab8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011a66:	79fb      	ldrb	r3, [r7, #7]
 8011a68:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a6c:	4b12      	ldr	r3, [pc, #72]	; (8011ab8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7ff fec6 	bl	8011804 <IsListEmpty>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	f083 0301 	eor.w	r3, r3, #1
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d015      	beq.n	8011ab0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	79fa      	ldrb	r2, [r7, #7]
 8011a88:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	78db      	ldrb	r3, [r3, #3]
 8011a8e:	f083 0301 	eor.w	r3, r3, #1
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f7ff fe98 	bl	80117d4 <IncreaseBufferPointer>
 8011aa4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8011aa6:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d1e9      	bne.n	8011a84 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8011ab0:	bf00      	nop
 8011ab2:	3710      	adds	r7, #16
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	2000106c 	.word	0x2000106c

08011abc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011ac6:	4b09      	ldr	r3, [pc, #36]	; (8011aec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011ac8:	6859      	ldr	r1, [r3, #4]
 8011aca:	4b08      	ldr	r3, [pc, #32]	; (8011aec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011acc:	689a      	ldr	r2, [r3, #8]
 8011ace:	79fb      	ldrb	r3, [r7, #7]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff feb7 	bl	8011844 <GetElement>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d001      	beq.n	8011ae0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8011adc:	2301      	movs	r3, #1
 8011ade:	e000      	b.n	8011ae2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8011ae0:	2300      	movs	r3, #0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	2000106c 	.word	0x2000106c

08011af0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011af8:	4b22      	ldr	r3, [pc, #136]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011afe:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8011b00:	2300      	movs	r3, #0
 8011b02:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8011b04:	2300      	movs	r3, #0
 8011b06:	73fb      	strb	r3, [r7, #15]
 8011b08:	e032      	b.n	8011b70 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8011b0a:	4b1e      	ldr	r3, [pc, #120]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	781a      	ldrb	r2, [r3, #0]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8011b14:	4b1b      	ldr	r3, [pc, #108]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	785a      	ldrb	r2, [r3, #1]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8011b1e:	4b19      	ldr	r3, [pc, #100]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	789b      	ldrb	r3, [r3, #2]
 8011b24:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8011b26:	7b7b      	ldrb	r3, [r7, #13]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d005      	beq.n	8011b38 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8011b2c:	4b15      	ldr	r3, [pc, #84]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	4798      	blx	r3
 8011b36:	e00b      	b.n	8011b50 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8011b38:	4b12      	ldr	r3, [pc, #72]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8011b40:	4b10      	ldr	r3, [pc, #64]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	785b      	ldrb	r3, [r3, #1]
 8011b46:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8011b48:	4b0e      	ldr	r3, [pc, #56]	; (8011b84 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	78db      	ldrb	r3, [r3, #3]
 8011b4e:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8011b50:	f7ff ff06 	bl	8011960 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8011b54:	7b7b      	ldrb	r3, [r7, #13]
 8011b56:	f083 0301 	eor.w	r3, r3, #1
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d004      	beq.n	8011b6a <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8011b60:	f107 0308 	add.w	r3, r7, #8
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fec1 	bl	80118ec <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	73fb      	strb	r3, [r7, #15]
 8011b70:	7bfa      	ldrb	r2, [r7, #15]
 8011b72:	7bbb      	ldrb	r3, [r7, #14]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d3c8      	bcc.n	8011b0a <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8011b78:	bf00      	nop
 8011b7a:	bf00      	nop
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	2000106c 	.word	0x2000106c

08011b88 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8011b88:	b480      	push	{r7}
 8011b8a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011b8c:	4b03      	ldr	r3, [pc, #12]	; (8011b9c <LoRaMacConfirmQueueGetCnt+0x14>)
 8011b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bc80      	pop	{r7}
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop
 8011b9c:	2000106c 	.word	0x2000106c

08011ba0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011ba4:	4b06      	ldr	r3, [pc, #24]	; (8011bc0 <LoRaMacConfirmQueueIsFull+0x20>)
 8011ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7ff fe3a 	bl	8011824 <IsListFull>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	e000      	b.n	8011bbc <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8011bba:	2300      	movs	r3, #0
    }
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	2000106c 	.word	0x2000106c

08011bc4 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b08e      	sub	sp, #56	; 0x38
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	607b      	str	r3, [r7, #4]
 8011bce:	460b      	mov	r3, r1
 8011bd0:	817b      	strh	r3, [r7, #10]
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d101      	bne.n	8011be0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011bdc:	230a      	movs	r3, #10
 8011bde:	e087      	b.n	8011cf0 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8011be0:	2300      	movs	r3, #0
 8011be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8011be6:	2301      	movs	r3, #1
 8011be8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8011bea:	2300      	movs	r3, #0
 8011bec:	623b      	str	r3, [r7, #32]
 8011bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]
 8011bf6:	605a      	str	r2, [r3, #4]
 8011bf8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	613b      	str	r3, [r7, #16]
 8011bfe:	f107 0314 	add.w	r3, r7, #20
 8011c02:	2200      	movs	r2, #0
 8011c04:	601a      	str	r2, [r3, #0]
 8011c06:	605a      	str	r2, [r3, #4]
 8011c08:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8011c0e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8011c12:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	0a1b      	lsrs	r3, r3, #8
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	0c1b      	lsrs	r3, r3, #16
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	0e1b      	lsrs	r3, r3, #24
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8011c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c3a:	0a1b      	lsrs	r3, r3, #8
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c42:	0c1b      	lsrs	r3, r3, #16
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c4a:	0e1b      	lsrs	r3, r3, #24
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8011c50:	e049      	b.n	8011ce6 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8011c52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8011c58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011c5e:	f107 0320 	add.w	r3, r7, #32
 8011c62:	7a7a      	ldrb	r2, [r7, #9]
 8011c64:	f107 0010 	add.w	r0, r7, #16
 8011c68:	2110      	movs	r1, #16
 8011c6a:	f7f9 f9fa 	bl	800b062 <SecureElementAesEncrypt>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011c74:	230f      	movs	r3, #15
 8011c76:	e03b      	b.n	8011cf0 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011c7e:	e01f      	b.n	8011cc0 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011c80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011c88:	4413      	add	r3, r2
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	4413      	add	r3, r2
 8011c90:	7819      	ldrb	r1, [r3, #0]
 8011c92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011c96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011c9a:	4413      	add	r3, r2
 8011c9c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8011ca0:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8011ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011ca8:	4403      	add	r3, r0
 8011caa:	4618      	mov	r0, r3
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	4403      	add	r3, r0
 8011cb0:	404a      	eors	r2, r1
 8011cb2:	b2d2      	uxtb	r2, r2
 8011cb4:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011cba:	3301      	adds	r3, #1
 8011cbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011cc4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011cc8:	2a10      	cmp	r2, #16
 8011cca:	bfa8      	it	ge
 8011ccc:	2210      	movge	r2, #16
 8011cce:	b212      	sxth	r2, r2
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	dbd5      	blt.n	8011c80 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8011cd4:	897b      	ldrh	r3, [r7, #10]
 8011cd6:	3b10      	subs	r3, #16
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8011cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ce0:	3310      	adds	r3, #16
 8011ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8011ce6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	dcb1      	bgt.n	8011c52 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011cee:	2300      	movs	r3, #0
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3738      	adds	r7, #56	; 0x38
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8011cf8:	b490      	push	{r4, r7}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4608      	mov	r0, r1
 8011d02:	4611      	mov	r1, r2
 8011d04:	461a      	mov	r2, r3
 8011d06:	4623      	mov	r3, r4
 8011d08:	80fb      	strh	r3, [r7, #6]
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	717b      	strb	r3, [r7, #5]
 8011d0e:	460b      	mov	r3, r1
 8011d10:	713b      	strb	r3, [r7, #4]
 8011d12:	4613      	mov	r3, r2
 8011d14:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d1c:	230a      	movs	r3, #10
 8011d1e:	e04e      	b.n	8011dbe <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	2249      	movs	r2, #73	; 0x49
 8011d24:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	3302      	adds	r3, #2
 8011d32:	2200      	movs	r2, #0
 8011d34:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	3303      	adds	r3, #3
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8011d3e:	69bb      	ldr	r3, [r7, #24]
 8011d40:	3304      	adds	r3, #4
 8011d42:	2200      	movs	r2, #0
 8011d44:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	3305      	adds	r3, #5
 8011d4a:	78fa      	ldrb	r2, [r7, #3]
 8011d4c:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	3306      	adds	r3, #6
 8011d52:	693a      	ldr	r2, [r7, #16]
 8011d54:	b2d2      	uxtb	r2, r2
 8011d56:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	0a1a      	lsrs	r2, r3, #8
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	3307      	adds	r3, #7
 8011d60:	b2d2      	uxtb	r2, r2
 8011d62:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	0c1a      	lsrs	r2, r3, #16
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	3308      	adds	r3, #8
 8011d6c:	b2d2      	uxtb	r2, r2
 8011d6e:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	0e1a      	lsrs	r2, r3, #24
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	3309      	adds	r3, #9
 8011d78:	b2d2      	uxtb	r2, r2
 8011d7a:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	330a      	adds	r3, #10
 8011d80:	697a      	ldr	r2, [r7, #20]
 8011d82:	b2d2      	uxtb	r2, r2
 8011d84:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	0a1a      	lsrs	r2, r3, #8
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	330b      	adds	r3, #11
 8011d8e:	b2d2      	uxtb	r2, r2
 8011d90:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	0c1a      	lsrs	r2, r3, #16
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	330c      	adds	r3, #12
 8011d9a:	b2d2      	uxtb	r2, r2
 8011d9c:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	0e1a      	lsrs	r2, r3, #24
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	330d      	adds	r3, #13
 8011da6:	b2d2      	uxtb	r2, r2
 8011da8:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	330e      	adds	r3, #14
 8011dae:	2200      	movs	r2, #0
 8011db0:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	330f      	adds	r3, #15
 8011db6:	88fa      	ldrh	r2, [r7, #6]
 8011db8:	b2d2      	uxtb	r2, r2
 8011dba:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bc90      	pop	{r4, r7}
 8011dc6:	4770      	bx	lr

08011dc8 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8011dc8:	b590      	push	{r4, r7, lr}
 8011dca:	b08b      	sub	sp, #44	; 0x2c
 8011dcc:	af04      	add	r7, sp, #16
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	4608      	mov	r0, r1
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	807b      	strh	r3, [r7, #2]
 8011dda:	460b      	mov	r3, r1
 8011ddc:	707b      	strb	r3, [r7, #1]
 8011dde:	4613      	mov	r3, r2
 8011de0:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d002      	beq.n	8011dee <ComputeCmacB0+0x26>
 8011de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d101      	bne.n	8011df2 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011dee:	230a      	movs	r3, #10
 8011df0:	e024      	b.n	8011e3c <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011df2:	887b      	ldrh	r3, [r7, #2]
 8011df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011df8:	d901      	bls.n	8011dfe <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011dfa:	230e      	movs	r3, #14
 8011dfc:	e01e      	b.n	8011e3c <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011dfe:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8011e02:	783a      	ldrb	r2, [r7, #0]
 8011e04:	7879      	ldrb	r1, [r7, #1]
 8011e06:	8878      	ldrh	r0, [r7, #2]
 8011e08:	f107 0308 	add.w	r3, r7, #8
 8011e0c:	9302      	str	r3, [sp, #8]
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	9301      	str	r3, [sp, #4]
 8011e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	4623      	mov	r3, r4
 8011e18:	f7ff ff6e 	bl	8011cf8 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011e1c:	7879      	ldrb	r1, [r7, #1]
 8011e1e:	887a      	ldrh	r2, [r7, #2]
 8011e20:	f107 0008 	add.w	r0, r7, #8
 8011e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	460b      	mov	r3, r1
 8011e2a:	6879      	ldr	r1, [r7, #4]
 8011e2c:	f7f9 f8cc 	bl	800afc8 <SecureElementComputeAesCmac>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d001      	beq.n	8011e3a <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e36:	230f      	movs	r3, #15
 8011e38:	e000      	b.n	8011e3c <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011e3a:	2300      	movs	r3, #0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	371c      	adds	r7, #28
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd90      	pop	{r4, r7, pc}

08011e44 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8011e44:	b590      	push	{r4, r7, lr}
 8011e46:	b0cd      	sub	sp, #308	; 0x134
 8011e48:	af04      	add	r7, sp, #16
 8011e4a:	1d3c      	adds	r4, r7, #4
 8011e4c:	6020      	str	r0, [r4, #0]
 8011e4e:	460c      	mov	r4, r1
 8011e50:	4610      	mov	r0, r2
 8011e52:	4619      	mov	r1, r3
 8011e54:	1cbb      	adds	r3, r7, #2
 8011e56:	4622      	mov	r2, r4
 8011e58:	801a      	strh	r2, [r3, #0]
 8011e5a:	1c7b      	adds	r3, r7, #1
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	701a      	strb	r2, [r3, #0]
 8011e60:	463b      	mov	r3, r7
 8011e62:	460a      	mov	r2, r1
 8011e64:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8011e66:	1d3b      	adds	r3, r7, #4
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d101      	bne.n	8011e72 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011e6e:	230a      	movs	r3, #10
 8011e70:	e04b      	b.n	8011f0a <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011e72:	1cbb      	adds	r3, r7, #2
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e7a:	d901      	bls.n	8011e80 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011e7c:	230e      	movs	r3, #14
 8011e7e:	e044      	b.n	8011f0a <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011e80:	f107 030c 	add.w	r3, r7, #12
 8011e84:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011e88:	2100      	movs	r1, #0
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f004 ff88 	bl	8016da0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011e90:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8011e94:	463b      	mov	r3, r7
 8011e96:	781a      	ldrb	r2, [r3, #0]
 8011e98:	1c7b      	adds	r3, r7, #1
 8011e9a:	7819      	ldrb	r1, [r3, #0]
 8011e9c:	1cbb      	adds	r3, r7, #2
 8011e9e:	8818      	ldrh	r0, [r3, #0]
 8011ea0:	f107 030c 	add.w	r3, r7, #12
 8011ea4:	9302      	str	r3, [sp, #8]
 8011ea6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011eaa:	9301      	str	r3, [sp, #4]
 8011eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011eb0:	9300      	str	r3, [sp, #0]
 8011eb2:	4623      	mov	r3, r4
 8011eb4:	f7ff ff20 	bl	8011cf8 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011eb8:	f107 030c 	add.w	r3, r7, #12
 8011ebc:	3310      	adds	r3, #16
 8011ebe:	1cba      	adds	r2, r7, #2
 8011ec0:	8812      	ldrh	r2, [r2, #0]
 8011ec2:	1d39      	adds	r1, r7, #4
 8011ec4:	6809      	ldr	r1, [r1, #0]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f004 ff2f 	bl	8016d2a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8011ecc:	2306      	movs	r3, #6
 8011ece:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011ed2:	1cbb      	adds	r3, r7, #2
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	3310      	adds	r3, #16
 8011ed8:	b299      	uxth	r1, r3
 8011eda:	1c7b      	adds	r3, r7, #1
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	f107 000c 	add.w	r0, r7, #12
 8011ee2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011ee6:	f7f9 f88d 	bl	800b004 <SecureElementVerifyAesCmac>
 8011eea:	4603      	mov	r3, r0
 8011eec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d101      	bne.n	8011efc <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e006      	b.n	8011f0a <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8011efc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d101      	bne.n	8011f08 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8011f04:	2301      	movs	r3, #1
 8011f06:	e000      	b.n	8011f0a <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011f08:	230f      	movs	r3, #15
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd90      	pop	{r4, r7, pc}

08011f14 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	6039      	str	r1, [r7, #0]
 8011f1e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011f20:	2300      	movs	r3, #0
 8011f22:	73fb      	strb	r3, [r7, #15]
 8011f24:	e011      	b.n	8011f4a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8011f26:	7bfb      	ldrb	r3, [r7, #15]
 8011f28:	4a0c      	ldr	r2, [pc, #48]	; (8011f5c <GetKeyAddrItem+0x48>)
 8011f2a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8011f2e:	79fa      	ldrb	r2, [r7, #7]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d107      	bne.n	8011f44 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8011f34:	7bfb      	ldrb	r3, [r7, #15]
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	4a08      	ldr	r2, [pc, #32]	; (8011f5c <GetKeyAddrItem+0x48>)
 8011f3a:	441a      	add	r2, r3
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011f40:	2300      	movs	r3, #0
 8011f42:	e006      	b.n	8011f52 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
 8011f46:	3301      	adds	r3, #1
 8011f48:	73fb      	strb	r3, [r7, #15]
 8011f4a:	7bfb      	ldrb	r3, [r7, #15]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	d9ea      	bls.n	8011f26 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011f50:	230c      	movs	r3, #12
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3714      	adds	r7, #20
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bc80      	pop	{r7}
 8011f5a:	4770      	bx	lr
 8011f5c:	20000114 	.word	0x20000114

08011f60 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60b9      	str	r1, [r7, #8]
 8011f68:	607a      	str	r2, [r7, #4]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	73fb      	strb	r3, [r7, #15]
 8011f70:	4613      	mov	r3, r2
 8011f72:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8011f74:	2300      	movs	r3, #0
 8011f76:	613b      	str	r3, [r7, #16]
 8011f78:	f107 0314 	add.w	r3, r7, #20
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	601a      	str	r2, [r3, #0]
 8011f80:	605a      	str	r2, [r3, #4]
 8011f82:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
 8011f86:	2b02      	cmp	r3, #2
 8011f88:	d002      	beq.n	8011f90 <DeriveSessionKey10x+0x30>
 8011f8a:	2b03      	cmp	r3, #3
 8011f8c:	d003      	beq.n	8011f96 <DeriveSessionKey10x+0x36>
 8011f8e:	e005      	b.n	8011f9c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8011f90:	2301      	movs	r3, #1
 8011f92:	743b      	strb	r3, [r7, #16]
            break;
 8011f94:	e004      	b.n	8011fa0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8011f96:	2302      	movs	r3, #2
 8011f98:	743b      	strb	r3, [r7, #16]
            break;
 8011f9a:	e001      	b.n	8011fa0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011f9c:	230b      	movs	r3, #11
 8011f9e:	e02a      	b.n	8011ff6 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	0a1b      	lsrs	r3, r3, #8
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	0c1b      	lsrs	r3, r3, #16
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	0a1b      	lsrs	r3, r3, #8
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	0c1b      	lsrs	r3, r3, #16
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8011fcc:	89bb      	ldrh	r3, [r7, #12]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8011fd2:	89bb      	ldrh	r3, [r7, #12]
 8011fd4:	0a1b      	lsrs	r3, r3, #8
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011fdc:	7bfa      	ldrb	r2, [r7, #15]
 8011fde:	f107 0310 	add.w	r3, r7, #16
 8011fe2:	2101      	movs	r1, #1
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7f9 f89a 	bl	800b11e <SecureElementDeriveAndStoreKey>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011ff0:	230f      	movs	r3, #15
 8011ff2:	e000      	b.n	8011ff6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3720      	adds	r7, #32
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
	...

08012000 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	4603      	mov	r3, r0
 8012008:	6039      	str	r1, [r7, #0]
 801200a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d101      	bne.n	8012016 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012012:	230a      	movs	r3, #10
 8012014:	e03b      	b.n	801208e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012016:	79fb      	ldrb	r3, [r7, #7]
 8012018:	3b01      	subs	r3, #1
 801201a:	2b03      	cmp	r3, #3
 801201c:	d834      	bhi.n	8012088 <GetLastFcntDown+0x88>
 801201e:	a201      	add	r2, pc, #4	; (adr r2, 8012024 <GetLastFcntDown+0x24>)
 8012020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012024:	08012035 	.word	0x08012035
 8012028:	0801204d 	.word	0x0801204d
 801202c:	08012065 	.word	0x08012065
 8012030:	0801207d 	.word	0x0801207d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012034:	4b18      	ldr	r3, [pc, #96]	; (8012098 <GetLastFcntDown+0x98>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	691a      	ldr	r2, [r3, #16]
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801203e:	4b16      	ldr	r3, [pc, #88]	; (8012098 <GetLastFcntDown+0x98>)
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	4b15      	ldr	r3, [pc, #84]	; (8012098 <GetLastFcntDown+0x98>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6912      	ldr	r2, [r2, #16]
 8012048:	621a      	str	r2, [r3, #32]
            break;
 801204a:	e01f      	b.n	801208c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801204c:	4b12      	ldr	r3, [pc, #72]	; (8012098 <GetLastFcntDown+0x98>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	695a      	ldr	r2, [r3, #20]
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012056:	4b10      	ldr	r3, [pc, #64]	; (8012098 <GetLastFcntDown+0x98>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	4b0f      	ldr	r3, [pc, #60]	; (8012098 <GetLastFcntDown+0x98>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	6952      	ldr	r2, [r2, #20]
 8012060:	621a      	str	r2, [r3, #32]
            break;
 8012062:	e013      	b.n	801208c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012064:	4b0c      	ldr	r3, [pc, #48]	; (8012098 <GetLastFcntDown+0x98>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	699a      	ldr	r2, [r3, #24]
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801206e:	4b0a      	ldr	r3, [pc, #40]	; (8012098 <GetLastFcntDown+0x98>)
 8012070:	681a      	ldr	r2, [r3, #0]
 8012072:	4b09      	ldr	r3, [pc, #36]	; (8012098 <GetLastFcntDown+0x98>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	6992      	ldr	r2, [r2, #24]
 8012078:	621a      	str	r2, [r3, #32]
            break;
 801207a:	e007      	b.n	801208c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801207c:	4b06      	ldr	r3, [pc, #24]	; (8012098 <GetLastFcntDown+0x98>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	69da      	ldr	r2, [r3, #28]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	601a      	str	r2, [r3, #0]
            break;
 8012086:	e001      	b.n	801208c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012088:	2305      	movs	r3, #5
 801208a:	e000      	b.n	801208e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801208c:	2300      	movs	r3, #0
}
 801208e:	4618      	mov	r0, r3
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	bc80      	pop	{r7}
 8012096:	4770      	bx	lr
 8012098:	20001090 	.word	0x20001090

0801209c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	4603      	mov	r3, r0
 80120a4:	6039      	str	r1, [r7, #0]
 80120a6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80120ac:	f107 020c 	add.w	r2, r7, #12
 80120b0:	79fb      	ldrb	r3, [r7, #7]
 80120b2:	4611      	mov	r1, r2
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7ff ffa3 	bl	8012000 <GetLastFcntDown>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <CheckFCntDown+0x28>
    {
        return false;
 80120c0:	2300      	movs	r3, #0
 80120c2:	e00a      	b.n	80120da <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	683a      	ldr	r2, [r7, #0]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d803      	bhi.n	80120d4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80120cc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80120ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d2:	d101      	bne.n	80120d8 <CheckFCntDown+0x3c>
    {
        return true;
 80120d4:	2301      	movs	r3, #1
 80120d6:	e000      	b.n	80120da <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80120d8:	2300      	movs	r3, #0
    }
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
	...

080120e4 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	4603      	mov	r3, r0
 80120ec:	6039      	str	r1, [r7, #0]
 80120ee:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80120f0:	79fb      	ldrb	r3, [r7, #7]
 80120f2:	3b01      	subs	r3, #1
 80120f4:	2b03      	cmp	r3, #3
 80120f6:	d81f      	bhi.n	8012138 <UpdateFCntDown+0x54>
 80120f8:	a201      	add	r2, pc, #4	; (adr r2, 8012100 <UpdateFCntDown+0x1c>)
 80120fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fe:	bf00      	nop
 8012100:	08012111 	.word	0x08012111
 8012104:	0801211b 	.word	0x0801211b
 8012108:	08012125 	.word	0x08012125
 801210c:	0801212f 	.word	0x0801212f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012110:	4b0c      	ldr	r3, [pc, #48]	; (8012144 <UpdateFCntDown+0x60>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	683a      	ldr	r2, [r7, #0]
 8012116:	611a      	str	r2, [r3, #16]
            break;
 8012118:	e00f      	b.n	801213a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801211a:	4b0a      	ldr	r3, [pc, #40]	; (8012144 <UpdateFCntDown+0x60>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	683a      	ldr	r2, [r7, #0]
 8012120:	615a      	str	r2, [r3, #20]
            break;
 8012122:	e00a      	b.n	801213a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012124:	4b07      	ldr	r3, [pc, #28]	; (8012144 <UpdateFCntDown+0x60>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	683a      	ldr	r2, [r7, #0]
 801212a:	619a      	str	r2, [r3, #24]
            break;
 801212c:	e005      	b.n	801213a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801212e:	4b05      	ldr	r3, [pc, #20]	; (8012144 <UpdateFCntDown+0x60>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	61da      	str	r2, [r3, #28]
            break;
 8012136:	e000      	b.n	801213a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012138:	bf00      	nop
    }
}
 801213a:	bf00      	nop
 801213c:	370c      	adds	r7, #12
 801213e:	46bd      	mov	sp, r7
 8012140:	bc80      	pop	{r7}
 8012142:	4770      	bx	lr
 8012144:	20001090 	.word	0x20001090

08012148 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801214e:	4b18      	ldr	r3, [pc, #96]	; (80121b0 <ResetFCnts+0x68>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	2200      	movs	r2, #0
 8012154:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012156:	4b16      	ldr	r3, [pc, #88]	; (80121b0 <ResetFCnts+0x68>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f04f 32ff 	mov.w	r2, #4294967295
 801215e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012160:	4b13      	ldr	r3, [pc, #76]	; (80121b0 <ResetFCnts+0x68>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	f04f 32ff 	mov.w	r2, #4294967295
 8012168:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801216a:	4b11      	ldr	r3, [pc, #68]	; (80121b0 <ResetFCnts+0x68>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f04f 32ff 	mov.w	r2, #4294967295
 8012172:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012174:	4b0e      	ldr	r3, [pc, #56]	; (80121b0 <ResetFCnts+0x68>)
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	4b0d      	ldr	r3, [pc, #52]	; (80121b0 <ResetFCnts+0x68>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	6992      	ldr	r2, [r2, #24]
 801217e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012180:	2300      	movs	r3, #0
 8012182:	607b      	str	r3, [r7, #4]
 8012184:	e00b      	b.n	801219e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8012186:	4b0a      	ldr	r3, [pc, #40]	; (80121b0 <ResetFCnts+0x68>)
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	3306      	adds	r3, #6
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	4413      	add	r3, r2
 8012192:	f04f 32ff 	mov.w	r2, #4294967295
 8012196:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	3301      	adds	r3, #1
 801219c:	607b      	str	r3, [r7, #4]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	ddf0      	ble.n	8012186 <ResetFCnts+0x3e>
    }
}
 80121a4:	bf00      	nop
 80121a6:	bf00      	nop
 80121a8:	370c      	adds	r7, #12
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bc80      	pop	{r7}
 80121ae:	4770      	bx	lr
 80121b0:	20001090 	.word	0x20001090

080121b4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d101      	bne.n	80121c6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80121c2:	2309      	movs	r3, #9
 80121c4:	e01c      	b.n	8012200 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80121c6:	4a10      	ldr	r2, [pc, #64]	; (8012208 <LoRaMacCryptoInit+0x54>)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80121cc:	4b0e      	ldr	r3, [pc, #56]	; (8012208 <LoRaMacCryptoInit+0x54>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2228      	movs	r2, #40	; 0x28
 80121d2:	2100      	movs	r1, #0
 80121d4:	4618      	mov	r0, r3
 80121d6:	f004 fde3 	bl	8016da0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80121da:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <LoRaMacCryptoInit+0x54>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2201      	movs	r2, #1
 80121e0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80121e2:	4b09      	ldr	r3, [pc, #36]	; (8012208 <LoRaMacCryptoInit+0x54>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	2201      	movs	r2, #1
 80121e8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80121ea:	4b07      	ldr	r3, [pc, #28]	; (8012208 <LoRaMacCryptoInit+0x54>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	2201      	movs	r2, #1
 80121f0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80121f2:	4b05      	ldr	r3, [pc, #20]	; (8012208 <LoRaMacCryptoInit+0x54>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	2200      	movs	r2, #0
 80121f8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80121fa:	f7ff ffa5 	bl	8012148 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80121fe:	2300      	movs	r3, #0
}
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	20001090 	.word	0x20001090

0801220c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012214:	4b04      	ldr	r3, [pc, #16]	; (8012228 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801221c:	2300      	movs	r3, #0
}
 801221e:	4618      	mov	r0, r3
 8012220:	370c      	adds	r7, #12
 8012222:	46bd      	mov	sp, r7
 8012224:	bc80      	pop	{r7}
 8012226:	4770      	bx	lr
 8012228:	20001090 	.word	0x20001090

0801222c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801223a:	230a      	movs	r3, #10
 801223c:	e006      	b.n	801224c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801223e:	4b06      	ldr	r3, [pc, #24]	; (8012258 <LoRaMacCryptoGetFCntUp+0x2c>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	1c5a      	adds	r2, r3, #1
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801224a:	2300      	movs	r3, #0
}
 801224c:	4618      	mov	r0, r3
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	bc80      	pop	{r7}
 8012254:	4770      	bx	lr
 8012256:	bf00      	nop
 8012258:	20001090 	.word	0x20001090

0801225c <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801225c:	b5b0      	push	{r4, r5, r7, lr}
 801225e:	b088      	sub	sp, #32
 8012260:	af00      	add	r7, sp, #0
 8012262:	60ba      	str	r2, [r7, #8]
 8012264:	607b      	str	r3, [r7, #4]
 8012266:	4603      	mov	r3, r0
 8012268:	73fb      	strb	r3, [r7, #15]
 801226a:	460b      	mov	r3, r1
 801226c:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 801226e:	2300      	movs	r3, #0
 8012270:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012276:	2313      	movs	r3, #19
 8012278:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d101      	bne.n	8012284 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012280:	230a      	movs	r3, #10
 8012282:	e04f      	b.n	8012324 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012284:	f107 0214 	add.w	r2, r7, #20
 8012288:	7bfb      	ldrb	r3, [r7, #15]
 801228a:	4611      	mov	r1, r2
 801228c:	4618      	mov	r0, r3
 801228e:	f7ff feb7 	bl	8012000 <GetLastFcntDown>
 8012292:	4603      	mov	r3, r0
 8012294:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012296:	7efb      	ldrb	r3, [r7, #27]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d001      	beq.n	80122a0 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 801229c:	7efb      	ldrb	r3, [r7, #27]
 801229e:	e041      	b.n	8012324 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a6:	d103      	bne.n	80122b0 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	68ba      	ldr	r2, [r7, #8]
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	e01e      	b.n	80122ee <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	68ba      	ldr	r2, [r7, #8]
 80122b6:	1ad3      	subs	r3, r2, r3
 80122b8:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dd05      	ble.n	80122cc <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80122c0:	697a      	ldr	r2, [r7, #20]
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	441a      	add	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	601a      	str	r2, [r3, #0]
 80122ca:	e010      	b.n	80122ee <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d104      	bne.n	80122dc <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80122d2:	697a      	ldr	r2, [r7, #20]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80122d8:	2307      	movs	r3, #7
 80122da:	e023      	b.n	8012324 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	0c1b      	lsrs	r3, r3, #16
 80122e0:	041b      	lsls	r3, r3, #16
 80122e2:	68ba      	ldr	r2, [r7, #8]
 80122e4:	4413      	add	r3, r2
 80122e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80122ee:	4b0f      	ldr	r3, [pc, #60]	; (801232c <LoRaMacCryptoGetFCntDown+0xd0>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	789b      	ldrb	r3, [r3, #2]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d114      	bne.n	8012322 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4618      	mov	r0, r3
 80122fe:	f04f 0100 	mov.w	r1, #0
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	461a      	mov	r2, r3
 8012306:	f04f 0300 	mov.w	r3, #0
 801230a:	1a84      	subs	r4, r0, r2
 801230c:	eb61 0503 	sbc.w	r5, r1, r3
 8012310:	89ba      	ldrh	r2, [r7, #12]
 8012312:	f04f 0300 	mov.w	r3, #0
 8012316:	4294      	cmp	r4, r2
 8012318:	eb75 0303 	sbcs.w	r3, r5, r3
 801231c:	db01      	blt.n	8012322 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801231e:	2308      	movs	r3, #8
 8012320:	e000      	b.n	8012324 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012322:	2300      	movs	r3, #0
}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bdb0      	pop	{r4, r5, r7, pc}
 801232c:	20001090 	.word	0x20001090

08012330 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012330:	b480      	push	{r7}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d101      	bne.n	8012342 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801233e:	230a      	movs	r3, #10
 8012340:	e017      	b.n	8012372 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012342:	2300      	movs	r3, #0
 8012344:	60fb      	str	r3, [r7, #12]
 8012346:	e010      	b.n	801236a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8012348:	4b0c      	ldr	r3, [pc, #48]	; (801237c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801234a:	6819      	ldr	r1, [r3, #0]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	222c      	movs	r2, #44	; 0x2c
 8012350:	fb02 f303 	mul.w	r3, r2, r3
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	4413      	add	r3, r2
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	3206      	adds	r2, #6
 801235c:	0092      	lsls	r2, r2, #2
 801235e:	440a      	add	r2, r1
 8012360:	3204      	adds	r2, #4
 8012362:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3301      	adds	r3, #1
 8012368:	60fb      	str	r3, [r7, #12]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2b00      	cmp	r3, #0
 801236e:	ddeb      	ble.n	8012348 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012370:	2300      	movs	r3, #0
}
 8012372:	4618      	mov	r0, r3
 8012374:	3714      	adds	r7, #20
 8012376:	46bd      	mov	sp, r7
 8012378:	bc80      	pop	{r7}
 801237a:	4770      	bx	lr
 801237c:	20001090 	.word	0x20001090

08012380 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	6039      	str	r1, [r7, #0]
 801238a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801238c:	79fb      	ldrb	r3, [r7, #7]
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	4618      	mov	r0, r3
 8012392:	f7f8 fdbb 	bl	800af0c <SecureElementSetKey>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801239c:	230f      	movs	r3, #15
 801239e:	e018      	b.n	80123d2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80123a0:	79fb      	ldrb	r3, [r7, #7]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d114      	bne.n	80123d0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80123a6:	4b0d      	ldr	r3, [pc, #52]	; (80123dc <LoRaMacCryptoSetKey+0x5c>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	789b      	ldrb	r3, [r3, #2]
 80123ac:	79fa      	ldrb	r2, [r7, #7]
 80123ae:	4611      	mov	r1, r2
 80123b0:	4618      	mov	r0, r3
 80123b2:	f000 fa3f 	bl	8012834 <LoRaMacCryptoDeriveMcRootKey>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d001      	beq.n	80123c0 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80123bc:	230f      	movs	r3, #15
 80123be:	e008      	b.n	80123d2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80123c0:	2004      	movs	r0, #4
 80123c2:	f000 fa62 	bl	801288a <LoRaMacCryptoDeriveMcKEKey>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80123cc:	230f      	movs	r3, #15
 80123ce:	e000      	b.n	80123d2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	20001090 	.word	0x20001090

080123e0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af02      	add	r7, sp, #8
 80123e6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d101      	bne.n	80123f2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80123ee:	230a      	movs	r3, #10
 80123f0:	e033      	b.n	801245a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80123f2:	2301      	movs	r3, #1
 80123f4:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80123f6:	2300      	movs	r3, #0
 80123f8:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80123fa:	f107 0308 	add.w	r3, r7, #8
 80123fe:	4618      	mov	r0, r3
 8012400:	f7f8 ff4a 	bl	800b298 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012404:	68ba      	ldr	r2, [r7, #8]
 8012406:	4b17      	ldr	r3, [pc, #92]	; (8012464 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	b292      	uxth	r2, r2
 801240c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801240e:	4b15      	ldr	r3, [pc, #84]	; (8012464 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	889a      	ldrh	r2, [r3, #4]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 fc18 	bl	8012c4e <LoRaMacSerializerJoinRequest>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012424:	2311      	movs	r3, #17
 8012426:	e018      	b.n	801245a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6819      	ldr	r1, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3318      	adds	r3, #24
 8012430:	7bfa      	ldrb	r2, [r7, #15]
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	4613      	mov	r3, r2
 8012436:	2213      	movs	r2, #19
 8012438:	2000      	movs	r0, #0
 801243a:	f7f8 fdc5 	bl	800afc8 <SecureElementComputeAesCmac>
 801243e:	4603      	mov	r3, r0
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012444:	230f      	movs	r3, #15
 8012446:	e008      	b.n	801245a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 fc00 	bl	8012c4e <LoRaMacSerializerJoinRequest>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d001      	beq.n	8012458 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012454:	2311      	movs	r3, #17
 8012456:	e000      	b.n	801245a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	20001090 	.word	0x20001090

08012468 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8012468:	b590      	push	{r4, r7, lr}
 801246a:	b097      	sub	sp, #92	; 0x5c
 801246c:	af04      	add	r7, sp, #16
 801246e:	4603      	mov	r3, r0
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
 8012474:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d002      	beq.n	8012482 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012482:	230a      	movs	r3, #10
 8012484:	e0bd      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012486:	2313      	movs	r3, #19
 8012488:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801248c:	2300      	movs	r3, #0
 801248e:	61bb      	str	r3, [r7, #24]
 8012490:	f107 031c 	add.w	r3, r7, #28
 8012494:	221d      	movs	r2, #29
 8012496:	2100      	movs	r1, #0
 8012498:	4618      	mov	r0, r3
 801249a:	f009 f925 	bl	801b6e8 <memset>
    uint8_t versionMinor         = 0;
 801249e:	2300      	movs	r3, #0
 80124a0:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80124a2:	4b5a      	ldr	r3, [pc, #360]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	889b      	ldrh	r3, [r3, #4]
 80124a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681c      	ldr	r4, [r3, #0]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	791b      	ldrb	r3, [r3, #4]
 80124b4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80124b8:	7bf8      	ldrb	r0, [r7, #15]
 80124ba:	f107 0217 	add.w	r2, r7, #23
 80124be:	9202      	str	r2, [sp, #8]
 80124c0:	f107 0218 	add.w	r2, r7, #24
 80124c4:	9201      	str	r2, [sp, #4]
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	4623      	mov	r3, r4
 80124ca:	460a      	mov	r2, r1
 80124cc:	68b9      	ldr	r1, [r7, #8]
 80124ce:	f7f8 fe66 	bl	800b19e <SecureElementProcessJoinAccept>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d001      	beq.n	80124dc <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80124d8:	230f      	movs	r3, #15
 80124da:	e092      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6818      	ldr	r0, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	791b      	ldrb	r3, [r3, #4]
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	f107 0318 	add.w	r3, r7, #24
 80124ea:	4619      	mov	r1, r3
 80124ec:	f004 fc1d 	bl	8016d2a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f000 f9ed 	bl	80128d0 <LoRaMacParserJoinAccept>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80124fc:	2310      	movs	r3, #16
 80124fe:	e080      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	799b      	ldrb	r3, [r3, #6]
 8012504:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	79db      	ldrb	r3, [r3, #7]
 801250a:	021b      	lsls	r3, r3, #8
 801250c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801250e:	4313      	orrs	r3, r2
 8012510:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	7a1b      	ldrb	r3, [r3, #8]
 8012516:	041b      	lsls	r3, r3, #16
 8012518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801251a:	4313      	orrs	r3, r2
 801251c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801251e:	4b3b      	ldr	r3, [pc, #236]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	689b      	ldr	r3, [r3, #8]
 8012524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012526:	429a      	cmp	r2, r3
 8012528:	d010      	beq.n	801254c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801252a:	4b38      	ldr	r3, [pc, #224]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012530:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8012532:	7dfb      	ldrb	r3, [r7, #23]
 8012534:	2100      	movs	r1, #0
 8012536:	4618      	mov	r0, r3
 8012538:	f000 f97c 	bl	8012834 <LoRaMacCryptoDeriveMcRootKey>
 801253c:	4603      	mov	r3, r0
 801253e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012542:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012546:	2b00      	cmp	r3, #0
 8012548:	d005      	beq.n	8012556 <LoRaMacCryptoHandleJoinAccept+0xee>
 801254a:	e001      	b.n	8012550 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801254c:	2303      	movs	r3, #3
 801254e:	e058      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8012550:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012554:	e055      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8012556:	2004      	movs	r0, #4
 8012558:	f000 f997 	bl	801288a <LoRaMacCryptoDeriveMcKEKey>
 801255c:	4603      	mov	r3, r0
 801255e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012562:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012566:	2b00      	cmp	r3, #0
 8012568:	d002      	beq.n	8012570 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801256a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801256e:	e048      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	7a5b      	ldrb	r3, [r3, #9]
 8012574:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	7a9b      	ldrb	r3, [r3, #10]
 801257a:	021b      	lsls	r3, r3, #8
 801257c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801257e:	4313      	orrs	r3, r2
 8012580:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	7adb      	ldrb	r3, [r3, #11]
 8012586:	041b      	lsls	r3, r3, #16
 8012588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801258a:	4313      	orrs	r3, r2
 801258c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801258e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012596:	2003      	movs	r0, #3
 8012598:	f7ff fce2 	bl	8011f60 <DeriveSessionKey10x>
 801259c:	4603      	mov	r3, r0
 801259e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80125a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d002      	beq.n	80125b0 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80125aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125ae:	e028      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80125b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80125b8:	2002      	movs	r0, #2
 80125ba:	f7ff fcd1 	bl	8011f60 <DeriveSessionKey10x>
 80125be:	4603      	mov	r3, r0
 80125c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80125c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80125cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125d0:	e017      	b.n	8012602 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80125d2:	4b0e      	ldr	r3, [pc, #56]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	7dfa      	ldrb	r2, [r7, #23]
 80125d8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80125da:	4b0c      	ldr	r3, [pc, #48]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2200      	movs	r2, #0
 80125e0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80125e2:	4b0a      	ldr	r3, [pc, #40]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f04f 32ff 	mov.w	r2, #4294967295
 80125ea:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80125ec:	4b07      	ldr	r3, [pc, #28]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	f04f 32ff 	mov.w	r2, #4294967295
 80125f4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80125f6:	4b05      	ldr	r3, [pc, #20]	; (801260c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f04f 32ff 	mov.w	r2, #4294967295
 80125fe:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	374c      	adds	r7, #76	; 0x4c
 8012606:	46bd      	mov	sp, r7
 8012608:	bd90      	pop	{r4, r7, pc}
 801260a:	bf00      	nop
 801260c:	20001090 	.word	0x20001090

08012610 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8012610:	b590      	push	{r4, r7, lr}
 8012612:	b08b      	sub	sp, #44	; 0x2c
 8012614:	af04      	add	r7, sp, #16
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	607b      	str	r3, [r7, #4]
 801261a:	460b      	mov	r3, r1
 801261c:	72fb      	strb	r3, [r7, #11]
 801261e:	4613      	mov	r3, r2
 8012620:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012622:	2313      	movs	r3, #19
 8012624:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012626:	2303      	movs	r3, #3
 8012628:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d101      	bne.n	8012634 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012630:	230a      	movs	r3, #10
 8012632:	e05f      	b.n	80126f4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8012634:	4b31      	ldr	r3, [pc, #196]	; (80126fc <LoRaMacCryptoSecureMessage+0xec>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	68fa      	ldr	r2, [r7, #12]
 801263c:	429a      	cmp	r2, r3
 801263e:	d201      	bcs.n	8012644 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012640:	2306      	movs	r3, #6
 8012642:	e057      	b.n	80126f4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f893 3020 	ldrb.w	r3, [r3, #32]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d101      	bne.n	8012652 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801264e:	2302      	movs	r3, #2
 8012650:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8012652:	4b2a      	ldr	r3, [pc, #168]	; (80126fc <LoRaMacCryptoSecureMessage+0xec>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	429a      	cmp	r2, r3
 801265c:	d916      	bls.n	801268c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012668:	b219      	sxth	r1, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	689c      	ldr	r4, [r3, #8]
 801266e:	7dfa      	ldrb	r2, [r7, #23]
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	9301      	str	r3, [sp, #4]
 8012674:	2300      	movs	r3, #0
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	4623      	mov	r3, r4
 801267a:	f7ff faa3 	bl	8011bc4 <PayloadEncrypt>
 801267e:	4603      	mov	r3, r0
 8012680:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012682:	7dbb      	ldrb	r3, [r7, #22]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d001      	beq.n	801268c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8012688:	7dbb      	ldrb	r3, [r7, #22]
 801268a:	e033      	b.n	80126f4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 fb60 	bl	8012d52 <LoRaMacSerializerData>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d001      	beq.n	801269c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012698:	2311      	movs	r3, #17
 801269a:	e02b      	b.n	80126f4 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801269c:	2302      	movs	r3, #2
 801269e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6818      	ldr	r0, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	791b      	ldrb	r3, [r3, #4]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	3b04      	subs	r3, #4
 80126ac:	b299      	uxth	r1, r3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	322c      	adds	r2, #44	; 0x2c
 80126b6:	7dfc      	ldrb	r4, [r7, #23]
 80126b8:	9203      	str	r2, [sp, #12]
 80126ba:	68fa      	ldr	r2, [r7, #12]
 80126bc:	9202      	str	r2, [sp, #8]
 80126be:	9301      	str	r3, [sp, #4]
 80126c0:	2300      	movs	r3, #0
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	2300      	movs	r3, #0
 80126c6:	4622      	mov	r2, r4
 80126c8:	f7ff fb7e 	bl	8011dc8 <ComputeCmacB0>
 80126cc:	4603      	mov	r3, r0
 80126ce:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80126d0:	7dbb      	ldrb	r3, [r7, #22]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d001      	beq.n	80126da <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80126d6:	7dbb      	ldrb	r3, [r7, #22]
 80126d8:	e00c      	b.n	80126f4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 fb39 	bl	8012d52 <LoRaMacSerializerData>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80126e6:	2311      	movs	r3, #17
 80126e8:	e004      	b.n	80126f4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80126ea:	4b04      	ldr	r3, [pc, #16]	; (80126fc <LoRaMacCryptoSecureMessage+0xec>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	371c      	adds	r7, #28
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd90      	pop	{r4, r7, pc}
 80126fc:	20001090 	.word	0x20001090

08012700 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b08b      	sub	sp, #44	; 0x2c
 8012704:	af04      	add	r7, sp, #16
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	607b      	str	r3, [r7, #4]
 801270a:	4603      	mov	r3, r0
 801270c:	73fb      	strb	r3, [r7, #15]
 801270e:	4613      	mov	r3, r2
 8012710:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8012712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012714:	2b00      	cmp	r3, #0
 8012716:	d101      	bne.n	801271c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012718:	230a      	movs	r3, #10
 801271a:	e084      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801271c:	7bbb      	ldrb	r3, [r7, #14]
 801271e:	6879      	ldr	r1, [r7, #4]
 8012720:	4618      	mov	r0, r3
 8012722:	f7ff fcbb 	bl	801209c <CheckFCntDown>
 8012726:	4603      	mov	r3, r0
 8012728:	f083 0301 	eor.w	r3, r3, #1
 801272c:	b2db      	uxtb	r3, r3
 801272e:	2b00      	cmp	r3, #0
 8012730:	d001      	beq.n	8012736 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012732:	2306      	movs	r3, #6
 8012734:	e077      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012736:	2313      	movs	r3, #19
 8012738:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801273a:	2303      	movs	r3, #3
 801273c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801273e:	2302      	movs	r3, #2
 8012740:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012744:	f000 f98f 	bl	8012a66 <LoRaMacParserData>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d001      	beq.n	8012752 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801274e:	2310      	movs	r3, #16
 8012750:	e069      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012752:	f107 0210 	add.w	r2, r7, #16
 8012756:	7bfb      	ldrb	r3, [r7, #15]
 8012758:	4611      	mov	r1, r2
 801275a:	4618      	mov	r0, r3
 801275c:	f7ff fbda 	bl	8011f14 <GetKeyAddrItem>
 8012760:	4603      	mov	r3, r0
 8012762:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012764:	7d7b      	ldrb	r3, [r7, #21]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801276a:	7d7b      	ldrb	r3, [r7, #21]
 801276c:	e05b      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	785b      	ldrb	r3, [r3, #1]
 8012772:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	789b      	ldrb	r3, [r3, #2]
 8012778:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	429a      	cmp	r2, r3
 8012782:	d001      	beq.n	8012788 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012784:	2302      	movs	r3, #2
 8012786:	e04e      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278a:	7b1b      	ldrb	r3, [r3, #12]
 801278c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012790:	b2db      	uxtb	r3, r3
 8012792:	2b00      	cmp	r3, #0
 8012794:	bf14      	ite	ne
 8012796:	2301      	movne	r3, #1
 8012798:	2300      	moveq	r3, #0
 801279a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801279c:	4b24      	ldr	r3, [pc, #144]	; (8012830 <LoRaMacCryptoUnsecureMessage+0x130>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	789b      	ldrb	r3, [r3, #2]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d101      	bne.n	80127aa <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80127a6:	2300      	movs	r3, #0
 80127a8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	6818      	ldr	r0, [r3, #0]
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	791b      	ldrb	r3, [r3, #4]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	3b04      	subs	r3, #4
 80127b6:	b299      	uxth	r1, r3
 80127b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127bc:	7dbc      	ldrb	r4, [r7, #22]
 80127be:	7d3a      	ldrb	r2, [r7, #20]
 80127c0:	9303      	str	r3, [sp, #12]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	9302      	str	r3, [sp, #8]
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	9301      	str	r3, [sp, #4]
 80127ca:	2301      	movs	r3, #1
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	4623      	mov	r3, r4
 80127d0:	f7ff fb38 	bl	8011e44 <VerifyCmacB0>
 80127d4:	4603      	mov	r3, r0
 80127d6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80127d8:	7d7b      	ldrb	r3, [r7, #21]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d001      	beq.n	80127e2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80127de:	7d7b      	ldrb	r3, [r7, #21]
 80127e0:	e021      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80127e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d101      	bne.n	80127f0 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80127ec:	2302      	movs	r3, #2
 80127ee:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80127f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80127f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127fa:	b219      	sxth	r1, r3
 80127fc:	7dfa      	ldrb	r2, [r7, #23]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	9301      	str	r3, [sp, #4]
 8012802:	2301      	movs	r3, #1
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	f7ff f9dc 	bl	8011bc4 <PayloadEncrypt>
 801280c:	4603      	mov	r3, r0
 801280e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012810:	7d7b      	ldrb	r3, [r7, #21]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8012816:	7d7b      	ldrb	r3, [r7, #21]
 8012818:	e005      	b.n	8012826 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801281a:	7bbb      	ldrb	r3, [r7, #14]
 801281c:	6879      	ldr	r1, [r7, #4]
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff fc60 	bl	80120e4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012824:	2300      	movs	r3, #0
}
 8012826:	4618      	mov	r0, r3
 8012828:	371c      	adds	r7, #28
 801282a:	46bd      	mov	sp, r7
 801282c:	bd90      	pop	{r4, r7, pc}
 801282e:	bf00      	nop
 8012830:	20001090 	.word	0x20001090

08012834 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	4603      	mov	r3, r0
 801283c:	460a      	mov	r2, r1
 801283e:	71fb      	strb	r3, [r7, #7]
 8012840:	4613      	mov	r3, r2
 8012842:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8012844:	79bb      	ldrb	r3, [r7, #6]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d001      	beq.n	801284e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801284a:	230b      	movs	r3, #11
 801284c:	e019      	b.n	8012882 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801284e:	2300      	movs	r3, #0
 8012850:	60bb      	str	r3, [r7, #8]
 8012852:	f107 030c 	add.w	r3, r7, #12
 8012856:	2200      	movs	r2, #0
 8012858:	601a      	str	r2, [r3, #0]
 801285a:	605a      	str	r2, [r3, #4]
 801285c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801285e:	79fb      	ldrb	r3, [r7, #7]
 8012860:	2b01      	cmp	r3, #1
 8012862:	d101      	bne.n	8012868 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8012864:	2320      	movs	r3, #32
 8012866:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8012868:	79b9      	ldrb	r1, [r7, #6]
 801286a:	f107 0308 	add.w	r3, r7, #8
 801286e:	2204      	movs	r2, #4
 8012870:	4618      	mov	r0, r3
 8012872:	f7f8 fc54 	bl	800b11e <SecureElementDeriveAndStoreKey>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d001      	beq.n	8012880 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801287c:	230f      	movs	r3, #15
 801287e:	e000      	b.n	8012882 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3718      	adds	r7, #24
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b086      	sub	sp, #24
 801288e:	af00      	add	r7, sp, #0
 8012890:	4603      	mov	r3, r0
 8012892:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8012894:	79fb      	ldrb	r3, [r7, #7]
 8012896:	2b04      	cmp	r3, #4
 8012898:	d001      	beq.n	801289e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801289a:	230b      	movs	r3, #11
 801289c:	e014      	b.n	80128c8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801289e:	2300      	movs	r3, #0
 80128a0:	60bb      	str	r3, [r7, #8]
 80128a2:	f107 030c 	add.w	r3, r7, #12
 80128a6:	2200      	movs	r2, #0
 80128a8:	601a      	str	r2, [r3, #0]
 80128aa:	605a      	str	r2, [r3, #4]
 80128ac:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80128ae:	79f9      	ldrb	r1, [r7, #7]
 80128b0:	f107 0308 	add.w	r3, r7, #8
 80128b4:	227f      	movs	r2, #127	; 0x7f
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7f8 fc31 	bl	800b11e <SecureElementDeriveAndStoreKey>
 80128bc:	4603      	mov	r3, r0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d001      	beq.n	80128c6 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128c2:	230f      	movs	r3, #15
 80128c4:	e000      	b.n	80128c8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3718      	adds	r7, #24
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d003      	beq.n	80128e6 <LoRaMacParserJoinAccept+0x16>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d101      	bne.n	80128ea <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80128e6:	2302      	movs	r3, #2
 80128e8:	e0b9      	b.n	8012a5e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80128ea:	2300      	movs	r3, #0
 80128ec:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	89fb      	ldrh	r3, [r7, #14]
 80128f4:	1c59      	adds	r1, r3, #1
 80128f6:	81f9      	strh	r1, [r7, #14]
 80128f8:	4413      	add	r3, r2
 80128fa:	781a      	ldrb	r2, [r3, #0]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	1d98      	adds	r0, r3, #6
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	89fb      	ldrh	r3, [r7, #14]
 801290a:	4413      	add	r3, r2
 801290c:	2203      	movs	r2, #3
 801290e:	4619      	mov	r1, r3
 8012910:	f004 fa0b 	bl	8016d2a <memcpy1>
    bufItr = bufItr + 3;
 8012914:	89fb      	ldrh	r3, [r7, #14]
 8012916:	3303      	adds	r3, #3
 8012918:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f103 0009 	add.w	r0, r3, #9
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	89fb      	ldrh	r3, [r7, #14]
 8012926:	4413      	add	r3, r2
 8012928:	2203      	movs	r2, #3
 801292a:	4619      	mov	r1, r3
 801292c:	f004 f9fd 	bl	8016d2a <memcpy1>
    bufItr = bufItr + 3;
 8012930:	89fb      	ldrh	r3, [r7, #14]
 8012932:	3303      	adds	r3, #3
 8012934:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	89fb      	ldrh	r3, [r7, #14]
 801293c:	1c59      	adds	r1, r3, #1
 801293e:	81f9      	strh	r1, [r7, #14]
 8012940:	4413      	add	r3, r2
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	461a      	mov	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	89fb      	ldrh	r3, [r7, #14]
 8012950:	1c59      	adds	r1, r3, #1
 8012952:	81f9      	strh	r1, [r7, #14]
 8012954:	4413      	add	r3, r2
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	021a      	lsls	r2, r3, #8
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	431a      	orrs	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	89fb      	ldrh	r3, [r7, #14]
 801296a:	1c59      	adds	r1, r3, #1
 801296c:	81f9      	strh	r1, [r7, #14]
 801296e:	4413      	add	r3, r2
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	041a      	lsls	r2, r3, #16
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	431a      	orrs	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	89fb      	ldrh	r3, [r7, #14]
 8012984:	1c59      	adds	r1, r3, #1
 8012986:	81f9      	strh	r1, [r7, #14]
 8012988:	4413      	add	r3, r2
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	061a      	lsls	r2, r3, #24
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	431a      	orrs	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	89fb      	ldrh	r3, [r7, #14]
 801299e:	1c59      	adds	r1, r3, #1
 80129a0:	81f9      	strh	r1, [r7, #14]
 80129a2:	4413      	add	r3, r2
 80129a4:	781a      	ldrb	r2, [r3, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	89fb      	ldrh	r3, [r7, #14]
 80129b0:	1c59      	adds	r1, r3, #1
 80129b2:	81f9      	strh	r1, [r7, #14]
 80129b4:	4413      	add	r3, r2
 80129b6:	781a      	ldrb	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	791b      	ldrb	r3, [r3, #4]
 80129c0:	1f1a      	subs	r2, r3, #4
 80129c2:	89fb      	ldrh	r3, [r7, #14]
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	2b10      	cmp	r3, #16
 80129c8:	d10e      	bne.n	80129e8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f103 0012 	add.w	r0, r3, #18
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	89fb      	ldrh	r3, [r7, #14]
 80129d6:	4413      	add	r3, r2
 80129d8:	2210      	movs	r2, #16
 80129da:	4619      	mov	r1, r3
 80129dc:	f004 f9a5 	bl	8016d2a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80129e0:	89fb      	ldrh	r3, [r7, #14]
 80129e2:	3310      	adds	r3, #16
 80129e4:	81fb      	strh	r3, [r7, #14]
 80129e6:	e008      	b.n	80129fa <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	791b      	ldrb	r3, [r3, #4]
 80129ec:	1f1a      	subs	r2, r3, #4
 80129ee:	89fb      	ldrh	r3, [r7, #14]
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	dd01      	ble.n	80129fa <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80129f6:	2301      	movs	r3, #1
 80129f8:	e031      	b.n	8012a5e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681a      	ldr	r2, [r3, #0]
 80129fe:	89fb      	ldrh	r3, [r7, #14]
 8012a00:	1c59      	adds	r1, r3, #1
 8012a02:	81f9      	strh	r1, [r7, #14]
 8012a04:	4413      	add	r3, r2
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	461a      	mov	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	89fb      	ldrh	r3, [r7, #14]
 8012a14:	1c59      	adds	r1, r3, #1
 8012a16:	81f9      	strh	r1, [r7, #14]
 8012a18:	4413      	add	r3, r2
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	021a      	lsls	r2, r3, #8
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a22:	431a      	orrs	r2, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	89fb      	ldrh	r3, [r7, #14]
 8012a2e:	1c59      	adds	r1, r3, #1
 8012a30:	81f9      	strh	r1, [r7, #14]
 8012a32:	4413      	add	r3, r2
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	041a      	lsls	r2, r3, #16
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a3c:	431a      	orrs	r2, r3
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	89fb      	ldrh	r3, [r7, #14]
 8012a48:	1c59      	adds	r1, r3, #1
 8012a4a:	81f9      	strh	r1, [r7, #14]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	061a      	lsls	r2, r3, #24
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a56:	431a      	orrs	r2, r3
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3710      	adds	r7, #16
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b084      	sub	sp, #16
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d003      	beq.n	8012a7c <LoRaMacParserData+0x16>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d101      	bne.n	8012a80 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012a7c:	2302      	movs	r3, #2
 8012a7e:	e0e2      	b.n	8012c46 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8012a80:	2300      	movs	r3, #0
 8012a82:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	89fb      	ldrh	r3, [r7, #14]
 8012a8a:	1c59      	adds	r1, r3, #1
 8012a8c:	81f9      	strh	r1, [r7, #14]
 8012a8e:	4413      	add	r3, r2
 8012a90:	781a      	ldrb	r2, [r3, #0]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	89fb      	ldrh	r3, [r7, #14]
 8012a9c:	1c59      	adds	r1, r3, #1
 8012a9e:	81f9      	strh	r1, [r7, #14]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	89fb      	ldrh	r3, [r7, #14]
 8012ab0:	1c59      	adds	r1, r3, #1
 8012ab2:	81f9      	strh	r1, [r7, #14]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	021a      	lsls	r2, r3, #8
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	689b      	ldr	r3, [r3, #8]
 8012abe:	431a      	orrs	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681a      	ldr	r2, [r3, #0]
 8012ac8:	89fb      	ldrh	r3, [r7, #14]
 8012aca:	1c59      	adds	r1, r3, #1
 8012acc:	81f9      	strh	r1, [r7, #14]
 8012ace:	4413      	add	r3, r2
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	041a      	lsls	r2, r3, #16
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	431a      	orrs	r2, r3
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	89fb      	ldrh	r3, [r7, #14]
 8012ae4:	1c59      	adds	r1, r3, #1
 8012ae6:	81f9      	strh	r1, [r7, #14]
 8012ae8:	4413      	add	r3, r2
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	061a      	lsls	r2, r3, #24
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	689b      	ldr	r3, [r3, #8]
 8012af2:	431a      	orrs	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681a      	ldr	r2, [r3, #0]
 8012afc:	89fb      	ldrh	r3, [r7, #14]
 8012afe:	1c59      	adds	r1, r3, #1
 8012b00:	81f9      	strh	r1, [r7, #14]
 8012b02:	4413      	add	r3, r2
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	89fb      	ldrh	r3, [r7, #14]
 8012b10:	1c59      	adds	r1, r3, #1
 8012b12:	81f9      	strh	r1, [r7, #14]
 8012b14:	4413      	add	r3, r2
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	89fb      	ldrh	r3, [r7, #14]
 8012b24:	1c59      	adds	r1, r3, #1
 8012b26:	81f9      	strh	r1, [r7, #14]
 8012b28:	4413      	add	r3, r2
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	0219      	lsls	r1, r3, #8
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	89db      	ldrh	r3, [r3, #14]
 8012b32:	b21a      	sxth	r2, r3
 8012b34:	b20b      	sxth	r3, r1
 8012b36:	4313      	orrs	r3, r2
 8012b38:	b21b      	sxth	r3, r3
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f103 0010 	add.w	r0, r3, #16
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	89fb      	ldrh	r3, [r7, #14]
 8012b4c:	18d1      	adds	r1, r2, r3
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	7b1b      	ldrb	r3, [r3, #12]
 8012b52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	f004 f8e5 	bl	8016d2a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	7b1b      	ldrb	r3, [r3, #12]
 8012b64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	b29a      	uxth	r2, r3
 8012b6c:	89fb      	ldrh	r3, [r7, #14]
 8012b6e:	4413      	add	r3, r2
 8012b70:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2200      	movs	r2, #0
 8012b76:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	791b      	ldrb	r3, [r3, #4]
 8012b86:	461a      	mov	r2, r3
 8012b88:	89fb      	ldrh	r3, [r7, #14]
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	2b04      	cmp	r3, #4
 8012b8e:	dd28      	ble.n	8012be2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	89fb      	ldrh	r3, [r7, #14]
 8012b96:	1c59      	adds	r1, r3, #1
 8012b98:	81f9      	strh	r1, [r7, #14]
 8012b9a:	4413      	add	r3, r2
 8012b9c:	781a      	ldrb	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	791a      	ldrb	r2, [r3, #4]
 8012ba8:	89fb      	ldrh	r3, [r7, #14]
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	1ad3      	subs	r3, r2, r3
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	3b04      	subs	r3, #4
 8012bb2:	b2da      	uxtb	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681a      	ldr	r2, [r3, #0]
 8012bc2:	89fb      	ldrh	r3, [r7, #14]
 8012bc4:	18d1      	adds	r1, r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	461a      	mov	r2, r3
 8012bd0:	f004 f8ab 	bl	8016d2a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	89fb      	ldrh	r3, [r7, #14]
 8012bde:	4413      	add	r3, r2
 8012be0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	791b      	ldrb	r3, [r3, #4]
 8012bea:	3b04      	subs	r3, #4
 8012bec:	4413      	add	r3, r2
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6819      	ldr	r1, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	791b      	ldrb	r3, [r3, #4]
 8012c02:	3b03      	subs	r3, #3
 8012c04:	440b      	add	r3, r1
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	021b      	lsls	r3, r3, #8
 8012c0a:	431a      	orrs	r2, r3
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6819      	ldr	r1, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	791b      	ldrb	r3, [r3, #4]
 8012c1c:	3b02      	subs	r3, #2
 8012c1e:	440b      	add	r3, r1
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	041b      	lsls	r3, r3, #16
 8012c24:	431a      	orrs	r2, r3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6819      	ldr	r1, [r3, #0]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	791b      	ldrb	r3, [r3, #4]
 8012c36:	3b01      	subs	r3, #1
 8012c38:	440b      	add	r3, r1
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	061b      	lsls	r3, r3, #24
 8012c3e:	431a      	orrs	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3710      	adds	r7, #16
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b084      	sub	sp, #16
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d003      	beq.n	8012c64 <LoRaMacSerializerJoinRequest+0x16>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d101      	bne.n	8012c68 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012c64:	2301      	movs	r3, #1
 8012c66:	e070      	b.n	8012d4a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	791b      	ldrb	r3, [r3, #4]
 8012c70:	2b16      	cmp	r3, #22
 8012c72:	d801      	bhi.n	8012c78 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012c74:	2302      	movs	r3, #2
 8012c76:	e068      	b.n	8012d4a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	89fb      	ldrh	r3, [r7, #14]
 8012c7e:	1c59      	adds	r1, r3, #1
 8012c80:	81f9      	strh	r1, [r7, #14]
 8012c82:	4413      	add	r3, r2
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	7952      	ldrb	r2, [r2, #5]
 8012c88:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681a      	ldr	r2, [r3, #0]
 8012c8e:	89fb      	ldrh	r3, [r7, #14]
 8012c90:	18d0      	adds	r0, r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3306      	adds	r3, #6
 8012c96:	2208      	movs	r2, #8
 8012c98:	4619      	mov	r1, r3
 8012c9a:	f004 f861 	bl	8016d60 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8012c9e:	89fb      	ldrh	r3, [r7, #14]
 8012ca0:	3308      	adds	r3, #8
 8012ca2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	89fb      	ldrh	r3, [r7, #14]
 8012caa:	18d0      	adds	r0, r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	330e      	adds	r3, #14
 8012cb0:	2208      	movs	r2, #8
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	f004 f854 	bl	8016d60 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012cb8:	89fb      	ldrh	r3, [r7, #14]
 8012cba:	3308      	adds	r3, #8
 8012cbc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	8ad9      	ldrh	r1, [r3, #22]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	89fb      	ldrh	r3, [r7, #14]
 8012cc8:	1c58      	adds	r0, r3, #1
 8012cca:	81f8      	strh	r0, [r7, #14]
 8012ccc:	4413      	add	r3, r2
 8012cce:	b2ca      	uxtb	r2, r1
 8012cd0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	8adb      	ldrh	r3, [r3, #22]
 8012cd6:	0a1b      	lsrs	r3, r3, #8
 8012cd8:	b299      	uxth	r1, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	89fb      	ldrh	r3, [r7, #14]
 8012ce0:	1c58      	adds	r0, r3, #1
 8012ce2:	81f8      	strh	r0, [r7, #14]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	b2ca      	uxtb	r2, r1
 8012ce8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6999      	ldr	r1, [r3, #24]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681a      	ldr	r2, [r3, #0]
 8012cf2:	89fb      	ldrh	r3, [r7, #14]
 8012cf4:	1c58      	adds	r0, r3, #1
 8012cf6:	81f8      	strh	r0, [r7, #14]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	b2ca      	uxtb	r2, r1
 8012cfc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	699b      	ldr	r3, [r3, #24]
 8012d02:	0a19      	lsrs	r1, r3, #8
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	89fb      	ldrh	r3, [r7, #14]
 8012d0a:	1c58      	adds	r0, r3, #1
 8012d0c:	81f8      	strh	r0, [r7, #14]
 8012d0e:	4413      	add	r3, r2
 8012d10:	b2ca      	uxtb	r2, r1
 8012d12:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	699b      	ldr	r3, [r3, #24]
 8012d18:	0c19      	lsrs	r1, r3, #16
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	89fb      	ldrh	r3, [r7, #14]
 8012d20:	1c58      	adds	r0, r3, #1
 8012d22:	81f8      	strh	r0, [r7, #14]
 8012d24:	4413      	add	r3, r2
 8012d26:	b2ca      	uxtb	r2, r1
 8012d28:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	699b      	ldr	r3, [r3, #24]
 8012d2e:	0e19      	lsrs	r1, r3, #24
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	89fb      	ldrh	r3, [r7, #14]
 8012d36:	1c58      	adds	r0, r3, #1
 8012d38:	81f8      	strh	r0, [r7, #14]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	b2ca      	uxtb	r2, r1
 8012d3e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012d40:	89fb      	ldrh	r3, [r7, #14]
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012d48:	2300      	movs	r3, #0
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b084      	sub	sp, #16
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d003      	beq.n	8012d68 <LoRaMacSerializerData+0x16>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d101      	bne.n	8012d6c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	e0e5      	b.n	8012f38 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012d70:	2308      	movs	r3, #8
 8012d72:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	7b1b      	ldrb	r3, [r3, #12]
 8012d78:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	89bb      	ldrh	r3, [r7, #12]
 8012d82:	4413      	add	r3, r2
 8012d84:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8012d90:	89bb      	ldrh	r3, [r7, #12]
 8012d92:	3301      	adds	r3, #1
 8012d94:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d9c:	b29a      	uxth	r2, r3
 8012d9e:	89bb      	ldrh	r3, [r7, #12]
 8012da0:	4413      	add	r3, r2
 8012da2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012da4:	89bb      	ldrh	r3, [r7, #12]
 8012da6:	3304      	adds	r3, #4
 8012da8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	791b      	ldrb	r3, [r3, #4]
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	89ba      	ldrh	r2, [r7, #12]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d901      	bls.n	8012dba <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012db6:	2302      	movs	r3, #2
 8012db8:	e0be      	b.n	8012f38 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	89fb      	ldrh	r3, [r7, #14]
 8012dc0:	1c59      	adds	r1, r3, #1
 8012dc2:	81f9      	strh	r1, [r7, #14]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	7952      	ldrb	r2, [r2, #5]
 8012dca:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6899      	ldr	r1, [r3, #8]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	89fb      	ldrh	r3, [r7, #14]
 8012dd6:	1c58      	adds	r0, r3, #1
 8012dd8:	81f8      	strh	r0, [r7, #14]
 8012dda:	4413      	add	r3, r2
 8012ddc:	b2ca      	uxtb	r2, r1
 8012dde:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	0a19      	lsrs	r1, r3, #8
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681a      	ldr	r2, [r3, #0]
 8012dea:	89fb      	ldrh	r3, [r7, #14]
 8012dec:	1c58      	adds	r0, r3, #1
 8012dee:	81f8      	strh	r0, [r7, #14]
 8012df0:	4413      	add	r3, r2
 8012df2:	b2ca      	uxtb	r2, r1
 8012df4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	689b      	ldr	r3, [r3, #8]
 8012dfa:	0c19      	lsrs	r1, r3, #16
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	89fb      	ldrh	r3, [r7, #14]
 8012e02:	1c58      	adds	r0, r3, #1
 8012e04:	81f8      	strh	r0, [r7, #14]
 8012e06:	4413      	add	r3, r2
 8012e08:	b2ca      	uxtb	r2, r1
 8012e0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	0e19      	lsrs	r1, r3, #24
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	89fb      	ldrh	r3, [r7, #14]
 8012e18:	1c58      	adds	r0, r3, #1
 8012e1a:	81f8      	strh	r0, [r7, #14]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	b2ca      	uxtb	r2, r1
 8012e20:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	89fb      	ldrh	r3, [r7, #14]
 8012e28:	1c59      	adds	r1, r3, #1
 8012e2a:	81f9      	strh	r1, [r7, #14]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	7b12      	ldrb	r2, [r2, #12]
 8012e32:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	89d9      	ldrh	r1, [r3, #14]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681a      	ldr	r2, [r3, #0]
 8012e3c:	89fb      	ldrh	r3, [r7, #14]
 8012e3e:	1c58      	adds	r0, r3, #1
 8012e40:	81f8      	strh	r0, [r7, #14]
 8012e42:	4413      	add	r3, r2
 8012e44:	b2ca      	uxtb	r2, r1
 8012e46:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	89db      	ldrh	r3, [r3, #14]
 8012e4c:	0a1b      	lsrs	r3, r3, #8
 8012e4e:	b299      	uxth	r1, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681a      	ldr	r2, [r3, #0]
 8012e54:	89fb      	ldrh	r3, [r7, #14]
 8012e56:	1c58      	adds	r0, r3, #1
 8012e58:	81f8      	strh	r0, [r7, #14]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	b2ca      	uxtb	r2, r1
 8012e5e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681a      	ldr	r2, [r3, #0]
 8012e64:	89fb      	ldrh	r3, [r7, #14]
 8012e66:	18d0      	adds	r0, r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f103 0110 	add.w	r1, r3, #16
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	7b1b      	ldrb	r3, [r3, #12]
 8012e72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	f003 ff55 	bl	8016d2a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	7b1b      	ldrb	r3, [r3, #12]
 8012e84:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	89fb      	ldrh	r3, [r7, #14]
 8012e8e:	4413      	add	r3, r2
 8012e90:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d009      	beq.n	8012eb0 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681a      	ldr	r2, [r3, #0]
 8012ea0:	89fb      	ldrh	r3, [r7, #14]
 8012ea2:	1c59      	adds	r1, r3, #1
 8012ea4:	81f9      	strh	r1, [r7, #14]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8012eae:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	89fb      	ldrh	r3, [r7, #14]
 8012eb6:	18d0      	adds	r0, r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	f003 ff30 	bl	8016d2a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ed0:	b29a      	uxth	r2, r3
 8012ed2:	89fb      	ldrh	r3, [r7, #14]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	89fb      	ldrh	r3, [r7, #14]
 8012ee2:	1c58      	adds	r0, r3, #1
 8012ee4:	81f8      	strh	r0, [r7, #14]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	b2ca      	uxtb	r2, r1
 8012eea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef0:	0a19      	lsrs	r1, r3, #8
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	89fb      	ldrh	r3, [r7, #14]
 8012ef8:	1c58      	adds	r0, r3, #1
 8012efa:	81f8      	strh	r0, [r7, #14]
 8012efc:	4413      	add	r3, r2
 8012efe:	b2ca      	uxtb	r2, r1
 8012f00:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f06:	0c19      	lsrs	r1, r3, #16
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	89fb      	ldrh	r3, [r7, #14]
 8012f0e:	1c58      	adds	r0, r3, #1
 8012f10:	81f8      	strh	r0, [r7, #14]
 8012f12:	4413      	add	r3, r2
 8012f14:	b2ca      	uxtb	r2, r1
 8012f16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f1c:	0e19      	lsrs	r1, r3, #24
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	89fb      	ldrh	r3, [r7, #14]
 8012f24:	1c58      	adds	r0, r3, #1
 8012f26:	81f8      	strh	r0, [r7, #14]
 8012f28:	4413      	add	r3, r2
 8012f2a:	b2ca      	uxtb	r2, r1
 8012f2c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012f2e:	89fb      	ldrh	r3, [r7, #14]
 8012f30:	b2da      	uxtb	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012f40:	b480      	push	{r7}
 8012f42:	b083      	sub	sp, #12
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	4603      	mov	r3, r0
 8012f48:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012f4a:	79fb      	ldrb	r3, [r7, #7]
 8012f4c:	2b05      	cmp	r3, #5
 8012f4e:	d002      	beq.n	8012f56 <RegionIsActive+0x16>
 8012f50:	2b08      	cmp	r3, #8
 8012f52:	d002      	beq.n	8012f5a <RegionIsActive+0x1a>
 8012f54:	e003      	b.n	8012f5e <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8012f56:	2301      	movs	r3, #1
 8012f58:	e002      	b.n	8012f60 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	e000      	b.n	8012f60 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012f5e:	2300      	movs	r3, #0
        }
    }
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	370c      	adds	r7, #12
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bc80      	pop	{r7}
 8012f68:	4770      	bx	lr

08012f6a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b084      	sub	sp, #16
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	4603      	mov	r3, r0
 8012f72:	6039      	str	r1, [r7, #0]
 8012f74:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8012f76:	2300      	movs	r3, #0
 8012f78:	60bb      	str	r3, [r7, #8]
    switch( region )
 8012f7a:	79fb      	ldrb	r3, [r7, #7]
 8012f7c:	2b05      	cmp	r3, #5
 8012f7e:	d002      	beq.n	8012f86 <RegionGetPhyParam+0x1c>
 8012f80:	2b08      	cmp	r3, #8
 8012f82:	d006      	beq.n	8012f92 <RegionGetPhyParam+0x28>
 8012f84:	e00b      	b.n	8012f9e <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8012f86:	6838      	ldr	r0, [r7, #0]
 8012f88:	f001 faea 	bl	8014560 <RegionEU868GetPhyParam>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	60fb      	str	r3, [r7, #12]
 8012f90:	e007      	b.n	8012fa2 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8012f92:	6838      	ldr	r0, [r7, #0]
 8012f94:	f002 fcbc 	bl	8015910 <RegionUS915GetPhyParam>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	60fb      	str	r3, [r7, #12]
 8012f9c:	e001      	b.n	8012fa2 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	60fb      	str	r3, [r7, #12]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b082      	sub	sp, #8
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	6039      	str	r1, [r7, #0]
 8012fb8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	2b05      	cmp	r3, #5
 8012fbe:	d002      	beq.n	8012fc6 <RegionSetBandTxDone+0x18>
 8012fc0:	2b08      	cmp	r3, #8
 8012fc2:	d004      	beq.n	8012fce <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012fc4:	e007      	b.n	8012fd6 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8012fc6:	6838      	ldr	r0, [r7, #0]
 8012fc8:	f001 fc18 	bl	80147fc <RegionEU868SetBandTxDone>
 8012fcc:	e003      	b.n	8012fd6 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8012fce:	6838      	ldr	r0, [r7, #0]
 8012fd0:	f002 fe02 	bl	8015bd8 <RegionUS915SetBandTxDone>
 8012fd4:	bf00      	nop
        }
    }
}
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	6039      	str	r1, [r7, #0]
 8012fe6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012fe8:	79fb      	ldrb	r3, [r7, #7]
 8012fea:	2b05      	cmp	r3, #5
 8012fec:	d002      	beq.n	8012ff4 <RegionInitDefaults+0x18>
 8012fee:	2b08      	cmp	r3, #8
 8012ff0:	d004      	beq.n	8012ffc <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8012ff2:	e007      	b.n	8013004 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 8012ff4:	6838      	ldr	r0, [r7, #0]
 8012ff6:	f001 fc2d 	bl	8014854 <RegionEU868InitDefaults>
 8012ffa:	e003      	b.n	8013004 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8012ffc:	6838      	ldr	r0, [r7, #0]
 8012ffe:	f002 fe17 	bl	8015c30 <RegionUS915InitDefaults>
 8013002:	bf00      	nop
        }
    }
}
 8013004:	bf00      	nop
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}

0801300c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	6039      	str	r1, [r7, #0]
 8013016:	71fb      	strb	r3, [r7, #7]
 8013018:	4613      	mov	r3, r2
 801301a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801301c:	79fb      	ldrb	r3, [r7, #7]
 801301e:	2b05      	cmp	r3, #5
 8013020:	d002      	beq.n	8013028 <RegionVerify+0x1c>
 8013022:	2b08      	cmp	r3, #8
 8013024:	d007      	beq.n	8013036 <RegionVerify+0x2a>
 8013026:	e00d      	b.n	8013044 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013028:	79bb      	ldrb	r3, [r7, #6]
 801302a:	4619      	mov	r1, r3
 801302c:	6838      	ldr	r0, [r7, #0]
 801302e:	f001 fcaf 	bl	8014990 <RegionEU868Verify>
 8013032:	4603      	mov	r3, r0
 8013034:	e007      	b.n	8013046 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8013036:	79bb      	ldrb	r3, [r7, #6]
 8013038:	4619      	mov	r1, r3
 801303a:	6838      	ldr	r0, [r7, #0]
 801303c:	f002 ff26 	bl	8015e8c <RegionUS915Verify>
 8013040:	4603      	mov	r3, r0
 8013042:	e000      	b.n	8013046 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8013044:	2300      	movs	r3, #0
        }
    }
}
 8013046:	4618      	mov	r0, r3
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b082      	sub	sp, #8
 8013052:	af00      	add	r7, sp, #0
 8013054:	4603      	mov	r3, r0
 8013056:	6039      	str	r1, [r7, #0]
 8013058:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801305a:	79fb      	ldrb	r3, [r7, #7]
 801305c:	2b05      	cmp	r3, #5
 801305e:	d002      	beq.n	8013066 <RegionApplyCFList+0x18>
 8013060:	2b08      	cmp	r3, #8
 8013062:	d004      	beq.n	801306e <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013064:	e007      	b.n	8013076 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8013066:	6838      	ldr	r0, [r7, #0]
 8013068:	f001 fd0e 	bl	8014a88 <RegionEU868ApplyCFList>
 801306c:	e003      	b.n	8013076 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 801306e:	6838      	ldr	r0, [r7, #0]
 8013070:	f002 ff74 	bl	8015f5c <RegionUS915ApplyCFList>
 8013074:	bf00      	nop
        }
    }
}
 8013076:	bf00      	nop
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b082      	sub	sp, #8
 8013082:	af00      	add	r7, sp, #0
 8013084:	4603      	mov	r3, r0
 8013086:	6039      	str	r1, [r7, #0]
 8013088:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801308a:	79fb      	ldrb	r3, [r7, #7]
 801308c:	2b05      	cmp	r3, #5
 801308e:	d002      	beq.n	8013096 <RegionChanMaskSet+0x18>
 8013090:	2b08      	cmp	r3, #8
 8013092:	d005      	beq.n	80130a0 <RegionChanMaskSet+0x22>
 8013094:	e009      	b.n	80130aa <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013096:	6838      	ldr	r0, [r7, #0]
 8013098:	f001 fd6a 	bl	8014b70 <RegionEU868ChanMaskSet>
 801309c:	4603      	mov	r3, r0
 801309e:	e005      	b.n	80130ac <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80130a0:	6838      	ldr	r0, [r7, #0]
 80130a2:	f002 ffd1 	bl	8016048 <RegionUS915ChanMaskSet>
 80130a6:	4603      	mov	r3, r0
 80130a8:	e000      	b.n	80130ac <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80130aa:	2300      	movs	r3, #0
        }
    }
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	603b      	str	r3, [r7, #0]
 80130bc:	4603      	mov	r3, r0
 80130be:	71fb      	strb	r3, [r7, #7]
 80130c0:	460b      	mov	r3, r1
 80130c2:	71bb      	strb	r3, [r7, #6]
 80130c4:	4613      	mov	r3, r2
 80130c6:	717b      	strb	r3, [r7, #5]
    switch( region )
 80130c8:	79fb      	ldrb	r3, [r7, #7]
 80130ca:	2b05      	cmp	r3, #5
 80130cc:	d002      	beq.n	80130d4 <RegionComputeRxWindowParameters+0x20>
 80130ce:	2b08      	cmp	r3, #8
 80130d0:	d008      	beq.n	80130e4 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80130d2:	e00f      	b.n	80130f4 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80130d4:	7979      	ldrb	r1, [r7, #5]
 80130d6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	683a      	ldr	r2, [r7, #0]
 80130de:	f001 fd71 	bl	8014bc4 <RegionEU868ComputeRxWindowParameters>
 80130e2:	e007      	b.n	80130f4 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80130e4:	7979      	ldrb	r1, [r7, #5]
 80130e6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	683a      	ldr	r2, [r7, #0]
 80130ee:	f003 f815 	bl	801611c <RegionUS915ComputeRxWindowParameters>
 80130f2:	bf00      	nop
        }
    }
}
 80130f4:	bf00      	nop
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	4603      	mov	r3, r0
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
 8013108:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801310a:	7bfb      	ldrb	r3, [r7, #15]
 801310c:	2b05      	cmp	r3, #5
 801310e:	d002      	beq.n	8013116 <RegionRxConfig+0x1a>
 8013110:	2b08      	cmp	r3, #8
 8013112:	d006      	beq.n	8013122 <RegionRxConfig+0x26>
 8013114:	e00b      	b.n	801312e <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	68b8      	ldr	r0, [r7, #8]
 801311a:	f001 fdad 	bl	8014c78 <RegionEU868RxConfig>
 801311e:	4603      	mov	r3, r0
 8013120:	e006      	b.n	8013130 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8013122:	6879      	ldr	r1, [r7, #4]
 8013124:	68b8      	ldr	r0, [r7, #8]
 8013126:	f003 f843 	bl	80161b0 <RegionUS915RxConfig>
 801312a:	4603      	mov	r3, r0
 801312c:	e000      	b.n	8013130 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801312e:	2300      	movs	r3, #0
        }
    }
}
 8013130:	4618      	mov	r0, r3
 8013132:	3710      	adds	r7, #16
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	60b9      	str	r1, [r7, #8]
 8013140:	607a      	str	r2, [r7, #4]
 8013142:	603b      	str	r3, [r7, #0]
 8013144:	4603      	mov	r3, r0
 8013146:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013148:	7bfb      	ldrb	r3, [r7, #15]
 801314a:	2b05      	cmp	r3, #5
 801314c:	d002      	beq.n	8013154 <RegionTxConfig+0x1c>
 801314e:	2b08      	cmp	r3, #8
 8013150:	d007      	beq.n	8013162 <RegionTxConfig+0x2a>
 8013152:	e00d      	b.n	8013170 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	6879      	ldr	r1, [r7, #4]
 8013158:	68b8      	ldr	r0, [r7, #8]
 801315a:	f001 fe5d 	bl	8014e18 <RegionEU868TxConfig>
 801315e:	4603      	mov	r3, r0
 8013160:	e007      	b.n	8013172 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8013162:	683a      	ldr	r2, [r7, #0]
 8013164:	6879      	ldr	r1, [r7, #4]
 8013166:	68b8      	ldr	r0, [r7, #8]
 8013168:	f003 f8a6 	bl	80162b8 <RegionUS915TxConfig>
 801316c:	4603      	mov	r3, r0
 801316e:	e000      	b.n	8013172 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013170:	2300      	movs	r3, #0
        }
    }
}
 8013172:	4618      	mov	r0, r3
 8013174:	3710      	adds	r7, #16
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}

0801317a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801317a:	b580      	push	{r7, lr}
 801317c:	b086      	sub	sp, #24
 801317e:	af02      	add	r7, sp, #8
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
 8013184:	603b      	str	r3, [r7, #0]
 8013186:	4603      	mov	r3, r0
 8013188:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801318a:	7bfb      	ldrb	r3, [r7, #15]
 801318c:	2b05      	cmp	r3, #5
 801318e:	d002      	beq.n	8013196 <RegionLinkAdrReq+0x1c>
 8013190:	2b08      	cmp	r3, #8
 8013192:	d00a      	beq.n	80131aa <RegionLinkAdrReq+0x30>
 8013194:	e013      	b.n	80131be <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	9300      	str	r3, [sp, #0]
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	683a      	ldr	r2, [r7, #0]
 801319e:	6879      	ldr	r1, [r7, #4]
 80131a0:	68b8      	ldr	r0, [r7, #8]
 80131a2:	f001 ff09 	bl	8014fb8 <RegionEU868LinkAdrReq>
 80131a6:	4603      	mov	r3, r0
 80131a8:	e00a      	b.n	80131c0 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	9300      	str	r3, [sp, #0]
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	683a      	ldr	r2, [r7, #0]
 80131b2:	6879      	ldr	r1, [r7, #4]
 80131b4:	68b8      	ldr	r0, [r7, #8]
 80131b6:	f003 f92b 	bl	8016410 <RegionUS915LinkAdrReq>
 80131ba:	4603      	mov	r3, r0
 80131bc:	e000      	b.n	80131c0 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80131be:	2300      	movs	r3, #0
        }
    }
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3710      	adds	r7, #16
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}

080131c8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b082      	sub	sp, #8
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	4603      	mov	r3, r0
 80131d0:	6039      	str	r1, [r7, #0]
 80131d2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80131d4:	79fb      	ldrb	r3, [r7, #7]
 80131d6:	2b05      	cmp	r3, #5
 80131d8:	d002      	beq.n	80131e0 <RegionRxParamSetupReq+0x18>
 80131da:	2b08      	cmp	r3, #8
 80131dc:	d005      	beq.n	80131ea <RegionRxParamSetupReq+0x22>
 80131de:	e009      	b.n	80131f4 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80131e0:	6838      	ldr	r0, [r7, #0]
 80131e2:	f002 f80b 	bl	80151fc <RegionEU868RxParamSetupReq>
 80131e6:	4603      	mov	r3, r0
 80131e8:	e005      	b.n	80131f6 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80131ea:	6838      	ldr	r0, [r7, #0]
 80131ec:	f003 fb3e 	bl	801686c <RegionUS915RxParamSetupReq>
 80131f0:	4603      	mov	r3, r0
 80131f2:	e000      	b.n	80131f6 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80131f4:	2300      	movs	r3, #0
        }
    }
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3708      	adds	r7, #8
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}

080131fe <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b082      	sub	sp, #8
 8013202:	af00      	add	r7, sp, #0
 8013204:	4603      	mov	r3, r0
 8013206:	6039      	str	r1, [r7, #0]
 8013208:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	2b05      	cmp	r3, #5
 801320e:	d002      	beq.n	8013216 <RegionNewChannelReq+0x18>
 8013210:	2b08      	cmp	r3, #8
 8013212:	d005      	beq.n	8013220 <RegionNewChannelReq+0x22>
 8013214:	e009      	b.n	801322a <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013216:	6838      	ldr	r0, [r7, #0]
 8013218:	f002 f82e 	bl	8015278 <RegionEU868NewChannelReq>
 801321c:	4603      	mov	r3, r0
 801321e:	e005      	b.n	801322c <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8013220:	6838      	ldr	r0, [r7, #0]
 8013222:	f003 fb6f 	bl	8016904 <RegionUS915NewChannelReq>
 8013226:	4603      	mov	r3, r0
 8013228:	e000      	b.n	801322c <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801322a:	2300      	movs	r3, #0
        }
    }
}
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	6039      	str	r1, [r7, #0]
 801323e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	2b05      	cmp	r3, #5
 8013244:	d002      	beq.n	801324c <RegionTxParamSetupReq+0x18>
 8013246:	2b08      	cmp	r3, #8
 8013248:	d005      	beq.n	8013256 <RegionTxParamSetupReq+0x22>
 801324a:	e009      	b.n	8013260 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801324c:	6838      	ldr	r0, [r7, #0]
 801324e:	f002 f871 	bl	8015334 <RegionEU868TxParamSetupReq>
 8013252:	4603      	mov	r3, r0
 8013254:	e005      	b.n	8013262 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8013256:	6838      	ldr	r0, [r7, #0]
 8013258:	f003 fb5f 	bl	801691a <RegionUS915TxParamSetupReq>
 801325c:	4603      	mov	r3, r0
 801325e:	e000      	b.n	8013262 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013260:	2300      	movs	r3, #0
        }
    }
}
 8013262:	4618      	mov	r0, r3
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}

0801326a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801326a:	b580      	push	{r7, lr}
 801326c:	b082      	sub	sp, #8
 801326e:	af00      	add	r7, sp, #0
 8013270:	4603      	mov	r3, r0
 8013272:	6039      	str	r1, [r7, #0]
 8013274:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013276:	79fb      	ldrb	r3, [r7, #7]
 8013278:	2b05      	cmp	r3, #5
 801327a:	d002      	beq.n	8013282 <RegionDlChannelReq+0x18>
 801327c:	2b08      	cmp	r3, #8
 801327e:	d005      	beq.n	801328c <RegionDlChannelReq+0x22>
 8013280:	e009      	b.n	8013296 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013282:	6838      	ldr	r0, [r7, #0]
 8013284:	f002 f862 	bl	801534c <RegionEU868DlChannelReq>
 8013288:	4603      	mov	r3, r0
 801328a:	e005      	b.n	8013298 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801328c:	6838      	ldr	r0, [r7, #0]
 801328e:	f003 fb4f 	bl	8016930 <RegionUS915DlChannelReq>
 8013292:	4603      	mov	r3, r0
 8013294:	e000      	b.n	8013298 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013296:	2300      	movs	r3, #0
        }
    }
}
 8013298:	4618      	mov	r0, r3
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	4603      	mov	r3, r0
 80132a8:	71fb      	strb	r3, [r7, #7]
 80132aa:	460b      	mov	r3, r1
 80132ac:	71bb      	strb	r3, [r7, #6]
 80132ae:	4613      	mov	r3, r2
 80132b0:	717b      	strb	r3, [r7, #5]
    switch( region )
 80132b2:	79fb      	ldrb	r3, [r7, #7]
 80132b4:	2b05      	cmp	r3, #5
 80132b6:	d002      	beq.n	80132be <RegionAlternateDr+0x1e>
 80132b8:	2b08      	cmp	r3, #8
 80132ba:	d009      	beq.n	80132d0 <RegionAlternateDr+0x30>
 80132bc:	e011      	b.n	80132e2 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80132be:	797a      	ldrb	r2, [r7, #5]
 80132c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80132c4:	4611      	mov	r1, r2
 80132c6:	4618      	mov	r0, r3
 80132c8:	f002 f884 	bl	80153d4 <RegionEU868AlternateDr>
 80132cc:	4603      	mov	r3, r0
 80132ce:	e009      	b.n	80132e4 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80132d0:	797a      	ldrb	r2, [r7, #5]
 80132d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80132d6:	4611      	mov	r1, r2
 80132d8:	4618      	mov	r0, r3
 80132da:	f003 fb35 	bl	8016948 <RegionUS915AlternateDr>
 80132de:	4603      	mov	r3, r0
 80132e0:	e000      	b.n	80132e4 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80132e2:	2300      	movs	r3, #0
        }
    }
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3708      	adds	r7, #8
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}

080132ec <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60b9      	str	r1, [r7, #8]
 80132f4:	607a      	str	r2, [r7, #4]
 80132f6:	603b      	str	r3, [r7, #0]
 80132f8:	4603      	mov	r3, r0
 80132fa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80132fc:	7bfb      	ldrb	r3, [r7, #15]
 80132fe:	2b05      	cmp	r3, #5
 8013300:	d002      	beq.n	8013308 <RegionNextChannel+0x1c>
 8013302:	2b08      	cmp	r3, #8
 8013304:	d008      	beq.n	8013318 <RegionNextChannel+0x2c>
 8013306:	e00f      	b.n	8013328 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	683a      	ldr	r2, [r7, #0]
 801330c:	6879      	ldr	r1, [r7, #4]
 801330e:	68b8      	ldr	r0, [r7, #8]
 8013310:	f002 f870 	bl	80153f4 <RegionEU868NextChannel>
 8013314:	4603      	mov	r3, r0
 8013316:	e008      	b.n	801332a <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	683a      	ldr	r2, [r7, #0]
 801331c:	6879      	ldr	r1, [r7, #4]
 801331e:	68b8      	ldr	r0, [r7, #8]
 8013320:	f003 fb4e 	bl	80169c0 <RegionUS915NextChannel>
 8013324:	4603      	mov	r3, r0
 8013326:	e000      	b.n	801332a <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013328:	2309      	movs	r3, #9
        }
    }
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b082      	sub	sp, #8
 8013336:	af00      	add	r7, sp, #0
 8013338:	4603      	mov	r3, r0
 801333a:	6039      	str	r1, [r7, #0]
 801333c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	2b05      	cmp	r3, #5
 8013342:	d002      	beq.n	801334a <RegionSetContinuousWave+0x18>
 8013344:	2b08      	cmp	r3, #8
 8013346:	d004      	beq.n	8013352 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013348:	e007      	b.n	801335a <RegionSetContinuousWave+0x28>
        EU868_SET_CONTINUOUS_WAVE( );
 801334a:	6838      	ldr	r0, [r7, #0]
 801334c:	f002 f9ce 	bl	80156ec <RegionEU868SetContinuousWave>
 8013350:	e003      	b.n	801335a <RegionSetContinuousWave+0x28>
        US915_SET_CONTINUOUS_WAVE( );
 8013352:	6838      	ldr	r0, [r7, #0]
 8013354:	f003 fc2a 	bl	8016bac <RegionUS915SetContinuousWave>
 8013358:	bf00      	nop
        }
    }
}
 801335a:	bf00      	nop
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013362:	b590      	push	{r4, r7, lr}
 8013364:	b083      	sub	sp, #12
 8013366:	af00      	add	r7, sp, #0
 8013368:	4604      	mov	r4, r0
 801336a:	4608      	mov	r0, r1
 801336c:	4611      	mov	r1, r2
 801336e:	461a      	mov	r2, r3
 8013370:	4623      	mov	r3, r4
 8013372:	71fb      	strb	r3, [r7, #7]
 8013374:	4603      	mov	r3, r0
 8013376:	71bb      	strb	r3, [r7, #6]
 8013378:	460b      	mov	r3, r1
 801337a:	717b      	strb	r3, [r7, #5]
 801337c:	4613      	mov	r3, r2
 801337e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	2b05      	cmp	r3, #5
 8013384:	d002      	beq.n	801338c <RegionApplyDrOffset+0x2a>
 8013386:	2b08      	cmp	r3, #8
 8013388:	d00a      	beq.n	80133a0 <RegionApplyDrOffset+0x3e>
 801338a:	e013      	b.n	80133b4 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801338c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013390:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013394:	79bb      	ldrb	r3, [r7, #6]
 8013396:	4618      	mov	r0, r3
 8013398:	f002 f9f6 	bl	8015788 <RegionEU868ApplyDrOffset>
 801339c:	4603      	mov	r3, r0
 801339e:	e00a      	b.n	80133b6 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80133a0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80133a4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80133a8:	79bb      	ldrb	r3, [r7, #6]
 80133aa:	4618      	mov	r0, r3
 80133ac:	f003 fc54 	bl	8016c58 <RegionUS915ApplyDrOffset>
 80133b0:	4603      	mov	r3, r0
 80133b2:	e000      	b.n	80133b6 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80133b4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	370c      	adds	r7, #12
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd90      	pop	{r4, r7, pc}
	...

080133c0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80133c6:	4b04      	ldr	r3, [pc, #16]	; (80133d8 <RegionGetVersion+0x18>)
 80133c8:	607b      	str	r3, [r7, #4]

    return version;
 80133ca:	687b      	ldr	r3, [r7, #4]
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bc80      	pop	{r7}
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	01000300 	.word	0x01000300

080133dc <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80133dc:	b480      	push	{r7}
 80133de:	b087      	sub	sp, #28
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	4603      	mov	r3, r0
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
 80133e8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d002      	beq.n	80133f6 <FindAvailable125kHzChannels+0x1a>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80133f6:	2303      	movs	r3, #3
 80133f8:	e021      	b.n	801343e <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2200      	movs	r2, #0
 80133fe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013400:	2300      	movs	r3, #0
 8013402:	75fb      	strb	r3, [r7, #23]
 8013404:	e017      	b.n	8013436 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8013406:	89fa      	ldrh	r2, [r7, #14]
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	fa42 f303 	asr.w	r3, r2, r3
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00c      	beq.n	8013430 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	461a      	mov	r2, r3
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	4413      	add	r3, r2
 8013420:	7dfa      	ldrb	r2, [r7, #23]
 8013422:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	3301      	adds	r3, #1
 801342a:	b2da      	uxtb	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013430:	7dfb      	ldrb	r3, [r7, #23]
 8013432:	3301      	adds	r3, #1
 8013434:	75fb      	strb	r3, [r7, #23]
 8013436:	7dfb      	ldrb	r3, [r7, #23]
 8013438:	2b07      	cmp	r3, #7
 801343a:	d9e4      	bls.n	8013406 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 801343c:	2300      	movs	r3, #0
}
 801343e:	4618      	mov	r0, r3
 8013440:	371c      	adds	r7, #28
 8013442:	46bd      	mov	sp, r7
 8013444:	bc80      	pop	{r7}
 8013446:	4770      	bx	lr

08013448 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8013448:	b590      	push	{r4, r7, lr}
 801344a:	b089      	sub	sp, #36	; 0x24
 801344c:	af00      	add	r7, sp, #0
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8013454:	2300      	movs	r3, #0
 8013456:	617b      	str	r3, [r7, #20]
 8013458:	2300      	movs	r3, #0
 801345a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 801345c:	2300      	movs	r3, #0
 801345e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d005      	beq.n	8013472 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d002      	beq.n	8013472 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d101      	bne.n	8013476 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013472:	2303      	movs	r3, #3
 8013474:	e056      	b.n	8013524 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801347c:	7f7b      	ldrb	r3, [r7, #29]
 801347e:	085b      	lsrs	r3, r3, #1
 8013480:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8013482:	7f7b      	ldrb	r3, [r7, #29]
 8013484:	f003 0301 	and.w	r3, r3, #1
 8013488:	b2db      	uxtb	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	d107      	bne.n	801349e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801348e:	7f3b      	ldrb	r3, [r7, #28]
 8013490:	005b      	lsls	r3, r3, #1
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	4413      	add	r3, r2
 8013496:	881b      	ldrh	r3, [r3, #0]
 8013498:	b2db      	uxtb	r3, r3
 801349a:	83fb      	strh	r3, [r7, #30]
 801349c:	e006      	b.n	80134ac <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801349e:	7f3b      	ldrb	r3, [r7, #28]
 80134a0:	005b      	lsls	r3, r3, #1
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	4413      	add	r3, r2
 80134a6:	881b      	ldrh	r3, [r3, #0]
 80134a8:	0a1b      	lsrs	r3, r3, #8
 80134aa:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80134ac:	f107 0213 	add.w	r2, r7, #19
 80134b0:	f107 0114 	add.w	r1, r7, #20
 80134b4:	8bfb      	ldrh	r3, [r7, #30]
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7ff ff90 	bl	80133dc <FindAvailable125kHzChannels>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b03      	cmp	r3, #3
 80134c0:	d101      	bne.n	80134c6 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80134c2:	2303      	movs	r3, #3
 80134c4:	e02e      	b.n	8013524 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 80134c6:	7cfb      	ldrb	r3, [r7, #19]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d012      	beq.n	80134f2 <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80134cc:	7f7b      	ldrb	r3, [r7, #29]
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	b2dc      	uxtb	r4, r3
 80134d2:	7cfb      	ldrb	r3, [r7, #19]
 80134d4:	3b01      	subs	r3, #1
 80134d6:	4619      	mov	r1, r3
 80134d8:	2000      	movs	r0, #0
 80134da:	f003 fc0f 	bl	8016cfc <randr>
 80134de:	4603      	mov	r3, r0
 80134e0:	f107 0220 	add.w	r2, r7, #32
 80134e4:	4413      	add	r3, r2
 80134e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80134ea:	4423      	add	r3, r4
 80134ec:	b2da      	uxtb	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80134f2:	7f7b      	ldrb	r3, [r7, #29]
 80134f4:	3301      	adds	r3, #1
 80134f6:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80134f8:	7f7b      	ldrb	r3, [r7, #29]
 80134fa:	2b07      	cmp	r3, #7
 80134fc:	d901      	bls.n	8013502 <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8013502:	7cfb      	ldrb	r3, [r7, #19]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d104      	bne.n	8013512 <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	7f7a      	ldrb	r2, [r7, #29]
 801350e:	429a      	cmp	r2, r3
 8013510:	d1b4      	bne.n	801347c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8013512:	7cfb      	ldrb	r3, [r7, #19]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d004      	beq.n	8013522 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	7f7a      	ldrb	r2, [r7, #29]
 801351c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801351e:	2300      	movs	r3, #0
 8013520:	e000      	b.n	8013524 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8013522:	2303      	movs	r3, #3
}
 8013524:	4618      	mov	r0, r3
 8013526:	3724      	adds	r7, #36	; 0x24
 8013528:	46bd      	mov	sp, r7
 801352a:	bd90      	pop	{r4, r7, pc}

0801352c <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801352c:	b480      	push	{r7}
 801352e:	b085      	sub	sp, #20
 8013530:	af00      	add	r7, sp, #0
 8013532:	4603      	mov	r3, r0
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801353a:	7bfb      	ldrb	r3, [r7, #15]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	fb02 f203 	mul.w	r2, r2, r3
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	4413      	add	r3, r2
}
 8013546:	4618      	mov	r0, r3
 8013548:	3714      	adds	r7, #20
 801354a:	46bd      	mov	sp, r7
 801354c:	bc80      	pop	{r7}
 801354e:	4770      	bx	lr

08013550 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013550:	b480      	push	{r7}
 8013552:	b087      	sub	sp, #28
 8013554:	af00      	add	r7, sp, #0
 8013556:	60f8      	str	r0, [r7, #12]
 8013558:	4608      	mov	r0, r1
 801355a:	4639      	mov	r1, r7
 801355c:	e881 000c 	stmia.w	r1, {r2, r3}
 8013560:	4603      	mov	r3, r0
 8013562:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	881b      	ldrh	r3, [r3, #0]
 8013568:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801356a:	7afb      	ldrb	r3, [r7, #11]
 801356c:	f083 0301 	eor.w	r3, r3, #1
 8013570:	b2db      	uxtb	r3, r3
 8013572:	2b00      	cmp	r3, #0
 8013574:	d01b      	beq.n	80135ae <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013576:	f242 7310 	movw	r3, #10000	; 0x2710
 801357a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8013582:	d202      	bcs.n	801358a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8013584:	2364      	movs	r3, #100	; 0x64
 8013586:	82bb      	strh	r3, [r7, #20]
 8013588:	e00b      	b.n	80135a2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8013590:	4293      	cmp	r3, r2
 8013592:	d803      	bhi.n	801359c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8013594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013598:	82bb      	strh	r3, [r7, #20]
 801359a:	e002      	b.n	80135a2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801359c:	f242 7310 	movw	r3, #10000	; 0x2710
 80135a0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80135a2:	8aba      	ldrh	r2, [r7, #20]
 80135a4:	8afb      	ldrh	r3, [r7, #22]
 80135a6:	4293      	cmp	r3, r2
 80135a8:	bf38      	it	cc
 80135aa:	4613      	movcc	r3, r2
 80135ac:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80135ae:	8afb      	ldrh	r3, [r7, #22]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d101      	bne.n	80135b8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80135b4:	2301      	movs	r3, #1
 80135b6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80135b8:	8afb      	ldrh	r3, [r7, #22]
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	371c      	adds	r7, #28
 80135be:	46bd      	mov	sp, r7
 80135c0:	bc80      	pop	{r7}
 80135c2:	4770      	bx	lr

080135c4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08e      	sub	sp, #56	; 0x38
 80135c8:	af02      	add	r7, sp, #8
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	4608      	mov	r0, r1
 80135ce:	4639      	mov	r1, r7
 80135d0:	e881 000c 	stmia.w	r1, {r2, r3}
 80135d4:	4603      	mov	r3, r0
 80135d6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80135de:	4b4b      	ldr	r3, [pc, #300]	; (801370c <SetMaxTimeCredits+0x148>)
 80135e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80135e2:	463b      	mov	r3, r7
 80135e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80135e8:	f006 feda 	bl	801a3a0 <SysTimeToMs>
 80135ec:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80135ee:	f107 0314 	add.w	r3, r7, #20
 80135f2:	2200      	movs	r2, #0
 80135f4:	601a      	str	r2, [r3, #0]
 80135f6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80135f8:	7af9      	ldrb	r1, [r7, #11]
 80135fa:	463b      	mov	r3, r7
 80135fc:	cb0c      	ldmia	r3, {r2, r3}
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f7ff ffa6 	bl	8013550 <GetDutyCycle>
 8013604:	4603      	mov	r3, r0
 8013606:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8013608:	7afb      	ldrb	r3, [r7, #11]
 801360a:	f083 0301 	eor.w	r3, r3, #1
 801360e:	b2db      	uxtb	r3, r3
 8013610:	2b00      	cmp	r3, #0
 8013612:	d062      	beq.n	80136da <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013614:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013616:	2b64      	cmp	r3, #100	; 0x64
 8013618:	d105      	bne.n	8013626 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801361a:	4b3c      	ldr	r3, [pc, #240]	; (801370c <SetMaxTimeCredits+0x148>)
 801361c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013622:	609a      	str	r2, [r3, #8]
 8013624:	e00b      	b.n	801363e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013626:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801362c:	d105      	bne.n	801363a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801362e:	4b38      	ldr	r3, [pc, #224]	; (8013710 <SetMaxTimeCredits+0x14c>)
 8013630:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013636:	609a      	str	r2, [r3, #8]
 8013638:	e001      	b.n	801363e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801363a:	4b36      	ldr	r3, [pc, #216]	; (8013714 <SetMaxTimeCredits+0x150>)
 801363c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	689a      	ldr	r2, [r3, #8]
 8013642:	f107 031c 	add.w	r3, r7, #28
 8013646:	4611      	mov	r1, r2
 8013648:	4618      	mov	r0, r3
 801364a:	f006 fed1 	bl	801a3f0 <SysTimeFromMs>
 801364e:	f107 0014 	add.w	r0, r7, #20
 8013652:	6a3b      	ldr	r3, [r7, #32]
 8013654:	9300      	str	r3, [sp, #0]
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	463a      	mov	r2, r7
 801365a:	ca06      	ldmia	r2, {r1, r2}
 801365c:	f006 fde1 	bl	801a222 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013660:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013664:	f083 0301 	eor.w	r3, r3, #1
 8013668:	b2db      	uxtb	r3, r3
 801366a:	2b00      	cmp	r3, #0
 801366c:	d006      	beq.n	801367c <SetMaxTimeCredits+0xb8>
 801366e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013672:	f083 0301 	eor.w	r3, r3, #1
 8013676:	b2db      	uxtb	r3, r3
 8013678:	2b00      	cmp	r3, #0
 801367a:	d108      	bne.n	801368e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013682:	429a      	cmp	r2, r3
 8013684:	d103      	bne.n	801368e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8013686:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8013688:	4a23      	ldr	r2, [pc, #140]	; (8013718 <SetMaxTimeCredits+0x154>)
 801368a:	4293      	cmp	r3, r2
 801368c:	d92f      	bls.n	80136ee <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013692:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	4a21      	ldr	r2, [pc, #132]	; (801371c <SetMaxTimeCredits+0x158>)
 8013698:	4293      	cmp	r3, r2
 801369a:	d928      	bls.n	80136ee <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80136a2:	3b30      	subs	r3, #48	; 0x30
 80136a4:	4a1e      	ldr	r2, [pc, #120]	; (8013720 <SetMaxTimeCredits+0x15c>)
 80136a6:	fba2 2303 	umull	r2, r3, r2, r3
 80136aa:	0c1b      	lsrs	r3, r3, #16
 80136ac:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	4a1c      	ldr	r2, [pc, #112]	; (8013724 <SetMaxTimeCredits+0x160>)
 80136b2:	fb02 f303 	mul.w	r3, r2, r3
 80136b6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80136be:	3330      	adds	r3, #48	; 0x30
 80136c0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80136c2:	2300      	movs	r3, #0
 80136c4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80136c6:	f107 0314 	add.w	r3, r7, #20
 80136ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80136ce:	f006 fe67 	bl	801a3a0 <SysTimeToMs>
 80136d2:	4602      	mov	r2, r0
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	609a      	str	r2, [r3, #8]
 80136d8:	e009      	b.n	80136ee <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80136da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80136de:	f083 0301 	eor.w	r3, r3, #1
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d002      	beq.n	80136ee <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ec:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d102      	bne.n	80136fc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136fa:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013700:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8013702:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8013704:	4618      	mov	r0, r3
 8013706:	3730      	adds	r7, #48	; 0x30
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	001b7740 	.word	0x001b7740
 8013710:	0112a880 	.word	0x0112a880
 8013714:	02932e00 	.word	0x02932e00
 8013718:	0001517f 	.word	0x0001517f
 801371c:	0001ec2f 	.word	0x0001ec2f
 8013720:	c22e4507 	.word	0xc22e4507
 8013724:	00015180 	.word	0x00015180

08013728 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af02      	add	r7, sp, #8
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	4608      	mov	r0, r1
 8013732:	4611      	mov	r1, r2
 8013734:	461a      	mov	r2, r3
 8013736:	4603      	mov	r3, r0
 8013738:	70fb      	strb	r3, [r7, #3]
 801373a:	460b      	mov	r3, r1
 801373c:	70bb      	strb	r3, [r7, #2]
 801373e:	4613      	mov	r3, r2
 8013740:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8013742:	78f9      	ldrb	r1, [r7, #3]
 8013744:	787b      	ldrb	r3, [r7, #1]
 8013746:	9301      	str	r3, [sp, #4]
 8013748:	78bb      	ldrb	r3, [r7, #2]
 801374a:	9300      	str	r3, [sp, #0]
 801374c:	f107 0318 	add.w	r3, r7, #24
 8013750:	cb0c      	ldmia	r3, {r2, r3}
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f7ff ff36 	bl	80135c4 <SetMaxTimeCredits>
 8013758:	4603      	mov	r3, r0
 801375a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801375c:	78fb      	ldrb	r3, [r7, #3]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d00a      	beq.n	8013778 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	4618      	mov	r0, r3
 8013768:	f007 fc42 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 801376c:	4602      	mov	r2, r0
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	68db      	ldr	r3, [r3, #12]
 8013772:	441a      	add	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	68da      	ldr	r2, [r3, #12]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	691b      	ldr	r3, [r3, #16]
 8013780:	429a      	cmp	r2, r3
 8013782:	d903      	bls.n	801378c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	691a      	ldr	r2, [r3, #16]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6a3a      	ldr	r2, [r7, #32]
 8013790:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8013792:	89fb      	ldrh	r3, [r7, #14]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801379c:	b480      	push	{r7}
 801379e:	b085      	sub	sp, #20
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	4603      	mov	r3, r0
 80137a4:	460a      	mov	r2, r1
 80137a6:	80fb      	strh	r3, [r7, #6]
 80137a8:	4613      	mov	r3, r2
 80137aa:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80137ac:	2300      	movs	r3, #0
 80137ae:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80137b0:	2300      	movs	r3, #0
 80137b2:	73bb      	strb	r3, [r7, #14]
 80137b4:	e011      	b.n	80137da <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80137b6:	88fa      	ldrh	r2, [r7, #6]
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
 80137ba:	2101      	movs	r1, #1
 80137bc:	fa01 f303 	lsl.w	r3, r1, r3
 80137c0:	401a      	ands	r2, r3
 80137c2:	7bbb      	ldrb	r3, [r7, #14]
 80137c4:	2101      	movs	r1, #1
 80137c6:	fa01 f303 	lsl.w	r3, r1, r3
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d102      	bne.n	80137d4 <CountChannels+0x38>
        {
            nbActiveBits++;
 80137ce:	7bfb      	ldrb	r3, [r7, #15]
 80137d0:	3301      	adds	r3, #1
 80137d2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80137d4:	7bbb      	ldrb	r3, [r7, #14]
 80137d6:	3301      	adds	r3, #1
 80137d8:	73bb      	strb	r3, [r7, #14]
 80137da:	7bba      	ldrb	r2, [r7, #14]
 80137dc:	797b      	ldrb	r3, [r7, #5]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d3e9      	bcc.n	80137b6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80137e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3714      	adds	r7, #20
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bc80      	pop	{r7}
 80137ec:	4770      	bx	lr

080137ee <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80137ee:	b580      	push	{r7, lr}
 80137f0:	b084      	sub	sp, #16
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6039      	str	r1, [r7, #0]
 80137f6:	4611      	mov	r1, r2
 80137f8:	461a      	mov	r2, r3
 80137fa:	4603      	mov	r3, r0
 80137fc:	71fb      	strb	r3, [r7, #7]
 80137fe:	460b      	mov	r3, r1
 8013800:	71bb      	strb	r3, [r7, #6]
 8013802:	4613      	mov	r3, r2
 8013804:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8013806:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801380a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801380e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013812:	4618      	mov	r0, r3
 8013814:	f000 f85d 	bl	80138d2 <RegionCommonValueInRange>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801381e:	2300      	movs	r3, #0
 8013820:	e053      	b.n	80138ca <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013822:	2300      	movs	r3, #0
 8013824:	73fb      	strb	r3, [r7, #15]
 8013826:	2300      	movs	r3, #0
 8013828:	73bb      	strb	r3, [r7, #14]
 801382a:	e049      	b.n	80138c0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801382c:	2300      	movs	r3, #0
 801382e:	737b      	strb	r3, [r7, #13]
 8013830:	e03d      	b.n	80138ae <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8013832:	7bbb      	ldrb	r3, [r7, #14]
 8013834:	005b      	lsls	r3, r3, #1
 8013836:	683a      	ldr	r2, [r7, #0]
 8013838:	4413      	add	r3, r2
 801383a:	881b      	ldrh	r3, [r3, #0]
 801383c:	461a      	mov	r2, r3
 801383e:	7b7b      	ldrb	r3, [r7, #13]
 8013840:	fa42 f303 	asr.w	r3, r2, r3
 8013844:	f003 0301 	and.w	r3, r3, #1
 8013848:	2b00      	cmp	r3, #0
 801384a:	d02d      	beq.n	80138a8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801384c:	7bfa      	ldrb	r2, [r7, #15]
 801384e:	7b7b      	ldrb	r3, [r7, #13]
 8013850:	4413      	add	r3, r2
 8013852:	461a      	mov	r2, r3
 8013854:	4613      	mov	r3, r2
 8013856:	005b      	lsls	r3, r3, #1
 8013858:	4413      	add	r3, r2
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	461a      	mov	r2, r3
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	4413      	add	r3, r2
 8013862:	7a1b      	ldrb	r3, [r3, #8]
 8013864:	f343 0303 	sbfx	r3, r3, #0, #4
 8013868:	b25b      	sxtb	r3, r3
 801386a:	f003 030f 	and.w	r3, r3, #15
 801386e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013870:	7bfa      	ldrb	r2, [r7, #15]
 8013872:	7b7b      	ldrb	r3, [r7, #13]
 8013874:	4413      	add	r3, r2
 8013876:	461a      	mov	r2, r3
 8013878:	4613      	mov	r3, r2
 801387a:	005b      	lsls	r3, r3, #1
 801387c:	4413      	add	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	461a      	mov	r2, r3
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	4413      	add	r3, r2
 8013886:	7a1b      	ldrb	r3, [r3, #8]
 8013888:	f343 1303 	sbfx	r3, r3, #4, #4
 801388c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801388e:	f003 030f 	and.w	r3, r3, #15
 8013892:	b25a      	sxtb	r2, r3
 8013894:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013898:	4618      	mov	r0, r3
 801389a:	f000 f81a 	bl	80138d2 <RegionCommonValueInRange>
 801389e:	4603      	mov	r3, r0
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d101      	bne.n	80138a8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80138a4:	2301      	movs	r3, #1
 80138a6:	e010      	b.n	80138ca <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80138a8:	7b7b      	ldrb	r3, [r7, #13]
 80138aa:	3301      	adds	r3, #1
 80138ac:	737b      	strb	r3, [r7, #13]
 80138ae:	7b7b      	ldrb	r3, [r7, #13]
 80138b0:	2b0f      	cmp	r3, #15
 80138b2:	d9be      	bls.n	8013832 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80138b4:	7bfb      	ldrb	r3, [r7, #15]
 80138b6:	3310      	adds	r3, #16
 80138b8:	73fb      	strb	r3, [r7, #15]
 80138ba:	7bbb      	ldrb	r3, [r7, #14]
 80138bc:	3301      	adds	r3, #1
 80138be:	73bb      	strb	r3, [r7, #14]
 80138c0:	7bfa      	ldrb	r2, [r7, #15]
 80138c2:	79fb      	ldrb	r3, [r7, #7]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d3b1      	bcc.n	801382c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80138c8:	2300      	movs	r3, #0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3710      	adds	r7, #16
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}

080138d2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80138d2:	b480      	push	{r7}
 80138d4:	b083      	sub	sp, #12
 80138d6:	af00      	add	r7, sp, #0
 80138d8:	4603      	mov	r3, r0
 80138da:	71fb      	strb	r3, [r7, #7]
 80138dc:	460b      	mov	r3, r1
 80138de:	71bb      	strb	r3, [r7, #6]
 80138e0:	4613      	mov	r3, r2
 80138e2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80138e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80138e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	db07      	blt.n	8013900 <RegionCommonValueInRange+0x2e>
 80138f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80138f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	dc01      	bgt.n	8013900 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80138fc:	2301      	movs	r3, #1
 80138fe:	e000      	b.n	8013902 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8013900:	2300      	movs	r3, #0
}
 8013902:	4618      	mov	r0, r3
 8013904:	370c      	adds	r7, #12
 8013906:	46bd      	mov	sp, r7
 8013908:	bc80      	pop	{r7}
 801390a:	4770      	bx	lr

0801390c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	460b      	mov	r3, r1
 8013916:	70fb      	strb	r3, [r7, #3]
 8013918:	4613      	mov	r3, r2
 801391a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801391c:	78fb      	ldrb	r3, [r7, #3]
 801391e:	091b      	lsrs	r3, r3, #4
 8013920:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013922:	78bb      	ldrb	r3, [r7, #2]
 8013924:	091b      	lsrs	r3, r3, #4
 8013926:	b2db      	uxtb	r3, r3
 8013928:	7bfa      	ldrb	r2, [r7, #15]
 801392a:	429a      	cmp	r2, r3
 801392c:	d803      	bhi.n	8013936 <RegionCommonChanDisable+0x2a>
 801392e:	78fa      	ldrb	r2, [r7, #3]
 8013930:	78bb      	ldrb	r3, [r7, #2]
 8013932:	429a      	cmp	r2, r3
 8013934:	d301      	bcc.n	801393a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8013936:	2300      	movs	r3, #0
 8013938:	e017      	b.n	801396a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801393a:	7bfb      	ldrb	r3, [r7, #15]
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	4413      	add	r3, r2
 8013942:	881b      	ldrh	r3, [r3, #0]
 8013944:	b21a      	sxth	r2, r3
 8013946:	78fb      	ldrb	r3, [r7, #3]
 8013948:	f003 030f 	and.w	r3, r3, #15
 801394c:	2101      	movs	r1, #1
 801394e:	fa01 f303 	lsl.w	r3, r1, r3
 8013952:	b21b      	sxth	r3, r3
 8013954:	43db      	mvns	r3, r3
 8013956:	b21b      	sxth	r3, r3
 8013958:	4013      	ands	r3, r2
 801395a:	b219      	sxth	r1, r3
 801395c:	7bfb      	ldrb	r3, [r7, #15]
 801395e:	005b      	lsls	r3, r3, #1
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	4413      	add	r3, r2
 8013964:	b28a      	uxth	r2, r1
 8013966:	801a      	strh	r2, [r3, #0]

    return true;
 8013968:	2301      	movs	r3, #1
}
 801396a:	4618      	mov	r0, r3
 801396c:	3714      	adds	r7, #20
 801396e:	46bd      	mov	sp, r7
 8013970:	bc80      	pop	{r7}
 8013972:	4770      	bx	lr

08013974 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	460b      	mov	r3, r1
 801397e:	70fb      	strb	r3, [r7, #3]
 8013980:	4613      	mov	r3, r2
 8013982:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8013984:	2300      	movs	r3, #0
 8013986:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d101      	bne.n	8013992 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801398e:	2300      	movs	r3, #0
 8013990:	e018      	b.n	80139c4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013992:	78fb      	ldrb	r3, [r7, #3]
 8013994:	73bb      	strb	r3, [r7, #14]
 8013996:	e010      	b.n	80139ba <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013998:	7bbb      	ldrb	r3, [r7, #14]
 801399a:	005b      	lsls	r3, r3, #1
 801399c:	687a      	ldr	r2, [r7, #4]
 801399e:	4413      	add	r3, r2
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	2110      	movs	r1, #16
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7ff fef9 	bl	801379c <CountChannels>
 80139aa:	4603      	mov	r3, r0
 80139ac:	461a      	mov	r2, r3
 80139ae:	7bfb      	ldrb	r3, [r7, #15]
 80139b0:	4413      	add	r3, r2
 80139b2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80139b4:	7bbb      	ldrb	r3, [r7, #14]
 80139b6:	3301      	adds	r3, #1
 80139b8:	73bb      	strb	r3, [r7, #14]
 80139ba:	7bba      	ldrb	r2, [r7, #14]
 80139bc:	78bb      	ldrb	r3, [r7, #2]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d3ea      	bcc.n	8013998 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80139c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3710      	adds	r7, #16
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80139cc:	b480      	push	{r7}
 80139ce:	b087      	sub	sp, #28
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	4613      	mov	r3, r2
 80139d8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d016      	beq.n	8013a0e <RegionCommonChanMaskCopy+0x42>
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d013      	beq.n	8013a0e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80139e6:	2300      	movs	r3, #0
 80139e8:	75fb      	strb	r3, [r7, #23]
 80139ea:	e00c      	b.n	8013a06 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80139ec:	7dfb      	ldrb	r3, [r7, #23]
 80139ee:	005b      	lsls	r3, r3, #1
 80139f0:	68ba      	ldr	r2, [r7, #8]
 80139f2:	441a      	add	r2, r3
 80139f4:	7dfb      	ldrb	r3, [r7, #23]
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	68f9      	ldr	r1, [r7, #12]
 80139fa:	440b      	add	r3, r1
 80139fc:	8812      	ldrh	r2, [r2, #0]
 80139fe:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013a00:	7dfb      	ldrb	r3, [r7, #23]
 8013a02:	3301      	adds	r3, #1
 8013a04:	75fb      	strb	r3, [r7, #23]
 8013a06:	7dfa      	ldrb	r2, [r7, #23]
 8013a08:	79fb      	ldrb	r3, [r7, #7]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d3ee      	bcc.n	80139ec <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8013a0e:	bf00      	nop
 8013a10:	371c      	adds	r7, #28
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bc80      	pop	{r7}
 8013a16:	4770      	bx	lr

08013a18 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013a18:	b082      	sub	sp, #8
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b086      	sub	sp, #24
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	60f8      	str	r0, [r7, #12]
 8013a22:	60b9      	str	r1, [r7, #8]
 8013a24:	627b      	str	r3, [r7, #36]	; 0x24
 8013a26:	4613      	mov	r3, r2
 8013a28:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013a2a:	79f9      	ldrb	r1, [r7, #7]
 8013a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a30:	cb0c      	ldmia	r3, {r2, r3}
 8013a32:	68f8      	ldr	r0, [r7, #12]
 8013a34:	f7ff fd8c 	bl	8013550 <GetDutyCycle>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	68da      	ldr	r2, [r3, #12]
 8013a40:	8afb      	ldrh	r3, [r7, #22]
 8013a42:	68b9      	ldr	r1, [r7, #8]
 8013a44:	fb01 f303 	mul.w	r3, r1, r3
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d909      	bls.n	8013a60 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	68da      	ldr	r2, [r3, #12]
 8013a50:	8afb      	ldrh	r3, [r7, #22]
 8013a52:	68b9      	ldr	r1, [r7, #8]
 8013a54:	fb01 f303 	mul.w	r3, r1, r3
 8013a58:	1ad2      	subs	r2, r2, r3
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8013a5e:	e002      	b.n	8013a66 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2200      	movs	r2, #0
 8013a64:	60da      	str	r2, [r3, #12]
}
 8013a66:	bf00      	nop
 8013a68:	3718      	adds	r7, #24
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a70:	b002      	add	sp, #8
 8013a72:	4770      	bx	lr

08013a74 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8013a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a76:	b08f      	sub	sp, #60	; 0x3c
 8013a78:	af04      	add	r7, sp, #16
 8013a7a:	6039      	str	r1, [r7, #0]
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	461a      	mov	r2, r3
 8013a80:	4603      	mov	r3, r0
 8013a82:	71fb      	strb	r3, [r7, #7]
 8013a84:	460b      	mov	r3, r1
 8013a86:	71bb      	strb	r3, [r7, #6]
 8013a88:	4613      	mov	r3, r2
 8013a8a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8013a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a90:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8013a92:	f007 fa9b 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 8013a96:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013aac:	e0ba      	b.n	8013c24 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8013aae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	005b      	lsls	r3, r3, #1
 8013ab6:	4413      	add	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	461a      	mov	r2, r3
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	189c      	adds	r4, r3, r2
 8013ac0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8013ac4:	797a      	ldrb	r2, [r7, #5]
 8013ac6:	79fd      	ldrb	r5, [r7, #7]
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	9302      	str	r3, [sp, #8]
 8013acc:	46ec      	mov	ip, sp
 8013ace:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013ad6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013ada:	4633      	mov	r3, r6
 8013adc:	4629      	mov	r1, r5
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f7ff fe22 	bl	8013728 <UpdateTimeCredits>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8013ae8:	8afa      	ldrh	r2, [r7, #22]
 8013aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aec:	fb02 f303 	mul.w	r3, r2, r3
 8013af0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013af2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013af6:	4613      	mov	r3, r2
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	4413      	add	r3, r2
 8013afc:	00db      	lsls	r3, r3, #3
 8013afe:	461a      	mov	r2, r3
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	4413      	add	r3, r2
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	69ba      	ldr	r2, [r7, #24]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d308      	bcc.n	8013b1e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013b0c:	797b      	ldrb	r3, [r7, #5]
 8013b0e:	f083 0301 	eor.w	r3, r3, #1
 8013b12:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d013      	beq.n	8013b40 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013b18:	79fb      	ldrb	r3, [r7, #7]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d010      	beq.n	8013b40 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8013b1e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013b22:	4613      	mov	r3, r2
 8013b24:	005b      	lsls	r3, r3, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	4413      	add	r3, r2
 8013b30:	2201      	movs	r2, #1
 8013b32:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8013b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b38:	3301      	adds	r3, #1
 8013b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013b3e:	e06c      	b.n	8013c1a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8013b40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013b44:	4613      	mov	r3, r2
 8013b46:	005b      	lsls	r3, r3, #1
 8013b48:	4413      	add	r3, r2
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	4413      	add	r3, r2
 8013b52:	2200      	movs	r2, #0
 8013b54:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8013b56:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	005b      	lsls	r3, r3, #1
 8013b5e:	4413      	add	r3, r2
 8013b60:	00db      	lsls	r3, r3, #3
 8013b62:	461a      	mov	r2, r3
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	4413      	add	r3, r2
 8013b68:	691b      	ldr	r3, [r3, #16]
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d215      	bcs.n	8013b9c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8013b70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013b74:	4613      	mov	r3, r2
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4413      	add	r3, r2
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	4413      	add	r3, r2
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	69ba      	ldr	r2, [r7, #24]
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	bf28      	it	cs
 8013b8e:	4613      	movcs	r3, r2
 8013b90:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8013b92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b96:	3301      	adds	r3, #1
 8013b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	f083 0301 	eor.w	r3, r3, #1
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d038      	beq.n	8013c1a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8013ba8:	2300      	movs	r3, #0
 8013baa:	60fb      	str	r3, [r7, #12]
 8013bac:	2300      	movs	r3, #0
 8013bae:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013bb0:	8afb      	ldrh	r3, [r7, #22]
 8013bb2:	2b64      	cmp	r3, #100	; 0x64
 8013bb4:	d103      	bne.n	8013bbe <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8013bb6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013bba:	60fb      	str	r3, [r7, #12]
 8013bbc:	e009      	b.n	8013bd2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013bbe:	8afb      	ldrh	r3, [r7, #22]
 8013bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013bc4:	d103      	bne.n	8013bce <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8013bc6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8013bca:	60fb      	str	r3, [r7, #12]
 8013bcc:	e001      	b.n	8013bd2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013bce:	4b1e      	ldr	r3, [pc, #120]	; (8013c48 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013bd0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8013bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bd4:	4a1c      	ldr	r2, [pc, #112]	; (8013c48 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d90e      	bls.n	8013bf8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bde:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013be2:	3b30      	subs	r3, #48	; 0x30
 8013be4:	4919      	ldr	r1, [pc, #100]	; (8013c4c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8013be6:	fba1 1303 	umull	r1, r3, r1, r3
 8013bea:	0c1b      	lsrs	r3, r3, #16
 8013bec:	3301      	adds	r3, #1
 8013bee:	4918      	ldr	r1, [pc, #96]	; (8013c50 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8013bf0:	fb01 f303 	mul.w	r3, r1, r3
 8013bf4:	4413      	add	r3, r2
 8013bf6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8013bf8:	f107 000c 	add.w	r0, r7, #12
 8013bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bfe:	9300      	str	r3, [sp, #0]
 8013c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c02:	f107 020c 	add.w	r2, r7, #12
 8013c06:	ca06      	ldmia	r2, {r1, r2}
 8013c08:	f006 fb0b 	bl	801a222 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8013c0c:	f107 030c 	add.w	r3, r7, #12
 8013c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c14:	f006 fbc4 	bl	801a3a0 <SysTimeToMs>
 8013c18:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8013c1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c1e:	3301      	adds	r3, #1
 8013c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013c24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013c28:	79bb      	ldrb	r3, [r7, #6]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	f4ff af3f 	bcc.w	8013aae <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8013c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d102      	bne.n	8013c3e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8013c38:	f04f 33ff 	mov.w	r3, #4294967295
 8013c3c:	e000      	b.n	8013c40 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	372c      	adds	r7, #44	; 0x2c
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c48:	0001ec30 	.word	0x0001ec30
 8013c4c:	c22e4507 	.word	0xc22e4507
 8013c50:	00015180 	.word	0x00015180

08013c54 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013c54:	b480      	push	{r7}
 8013c56:	b085      	sub	sp, #20
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	2b03      	cmp	r3, #3
 8013c68:	d13f      	bne.n	8013cea <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	b25a      	sxtb	r2, r3
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013c7c:	f003 030f 	and.w	r3, r3, #15
 8013c80:	b25a      	sxtb	r2, r3
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013c8c:	b2db      	uxtb	r3, r3
 8013c8e:	091b      	lsrs	r3, r3, #4
 8013c90:	b2db      	uxtb	r3, r3
 8013c92:	b25a      	sxtb	r2, r3
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	3302      	adds	r3, #2
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	889b      	ldrh	r3, [r3, #4]
 8013ca8:	b21a      	sxth	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	3303      	adds	r3, #3
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	021b      	lsls	r3, r3, #8
 8013cb2:	b21b      	sxth	r3, r3
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	b21b      	sxth	r3, r3
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	791a      	ldrb	r2, [r3, #4]
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	091b      	lsrs	r3, r3, #4
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	f003 0307 	and.w	r3, r3, #7
 8013cd2:	b2da      	uxtb	r2, r3
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	f003 030f 	and.w	r3, r3, #15
 8013ce0:	b2da      	uxtb	r2, r3
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013ce6:	2305      	movs	r3, #5
 8013ce8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8013cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3714      	adds	r7, #20
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bc80      	pop	{r7}
 8013cf4:	4770      	bx	lr

08013cf6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013cf6:	b5b0      	push	{r4, r5, r7, lr}
 8013cf8:	b088      	sub	sp, #32
 8013cfa:	af02      	add	r7, sp, #8
 8013cfc:	60f8      	str	r0, [r7, #12]
 8013cfe:	60b9      	str	r1, [r7, #8]
 8013d00:	607a      	str	r2, [r7, #4]
 8013d02:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	791b      	ldrb	r3, [r3, #4]
 8013d08:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	799b      	ldrb	r3, [r3, #6]
 8013d0e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	79db      	ldrb	r3, [r3, #7]
 8013d14:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	7a1b      	ldrb	r3, [r3, #8]
 8013d1a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	795b      	ldrb	r3, [r3, #5]
 8013d20:	f083 0301 	eor.w	r3, r3, #1
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d008      	beq.n	8013d3c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	7adb      	ldrb	r3, [r3, #11]
 8013d2e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	7a5b      	ldrb	r3, [r3, #9]
 8013d34:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	7a9b      	ldrb	r3, [r3, #10]
 8013d3a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8013d3c:	7dfb      	ldrb	r3, [r7, #23]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d03a      	beq.n	8013db8 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	7b18      	ldrb	r0, [r3, #12]
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	6919      	ldr	r1, [r3, #16]
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	6992      	ldr	r2, [r2, #24]
 8013d5a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8013d5e:	9201      	str	r2, [sp, #4]
 8013d60:	9300      	str	r3, [sp, #0]
 8013d62:	462b      	mov	r3, r5
 8013d64:	4622      	mov	r2, r4
 8013d66:	f7ff fd42 	bl	80137ee <RegionCommonChanVerifyDr>
 8013d6a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8013d6c:	f083 0301 	eor.w	r3, r3, #1
 8013d70:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d003      	beq.n	8013d7e <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8013d76:	7dfb      	ldrb	r3, [r7, #23]
 8013d78:	f023 0302 	bic.w	r3, r3, #2
 8013d7c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8013d8a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ff fd9f 	bl	80138d2 <RegionCommonValueInRange>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10e      	bne.n	8013db8 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8013da0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	da03      	bge.n	8013db0 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	7f5b      	ldrb	r3, [r3, #29]
 8013dac:	757b      	strb	r3, [r7, #21]
 8013dae:	e003      	b.n	8013db8 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013db0:	7dfb      	ldrb	r3, [r7, #23]
 8013db2:	f023 0304 	bic.w	r3, r3, #4
 8013db6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013db8:	7dfb      	ldrb	r3, [r7, #23]
 8013dba:	2b07      	cmp	r3, #7
 8013dbc:	d105      	bne.n	8013dca <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8013dbe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d101      	bne.n	8013dca <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	7dba      	ldrb	r2, [r7, #22]
 8013dce:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	7d7a      	ldrb	r2, [r7, #21]
 8013dd4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013dd6:	7d3a      	ldrb	r2, [r7, #20]
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	701a      	strb	r2, [r3, #0]

    return status;
 8013ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3718      	adds	r7, #24
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013de8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	4603      	mov	r3, r0
 8013df0:	6039      	str	r1, [r7, #0]
 8013df2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8013df4:	79fb      	ldrb	r3, [r7, #7]
 8013df6:	4a06      	ldr	r2, [pc, #24]	; (8013e10 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8013df8:	fa02 f303 	lsl.w	r3, r2, r3
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	370c      	adds	r7, #12
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bc80      	pop	{r7}
 8013e0c:	4770      	bx	lr
 8013e0e:	bf00      	nop
 8013e10:	000f4240 	.word	0x000f4240

08013e14 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8013e14:	b480      	push	{r7}
 8013e16:	b083      	sub	sp, #12
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013e24:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	370c      	adds	r7, #12
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bc80      	pop	{r7}
 8013e30:	4770      	bx	lr
	...

08013e34 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8013e34:	b480      	push	{r7}
 8013e36:	b085      	sub	sp, #20
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	607a      	str	r2, [r7, #4]
 8013e3e:	603b      	str	r3, [r7, #0]
 8013e40:	460b      	mov	r3, r1
 8013e42:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013e44:	7afa      	ldrb	r2, [r7, #11]
 8013e46:	7afb      	ldrb	r3, [r7, #11]
 8013e48:	3b04      	subs	r3, #4
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	fb03 f101 	mul.w	r1, r3, r1
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013e58:	fb00 f303 	mul.w	r3, r0, r3
 8013e5c:	440b      	add	r3, r1
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d013      	beq.n	8013e8c <RegionCommonComputeRxWindowParameters+0x58>
 8013e64:	7afb      	ldrb	r3, [r7, #11]
 8013e66:	3b04      	subs	r3, #4
 8013e68:	4619      	mov	r1, r3
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	fb03 f101 	mul.w	r1, r3, r1
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013e76:	fb00 f303 	mul.w	r3, r0, r3
 8013e7a:	440b      	add	r3, r1
 8013e7c:	0059      	lsls	r1, r3, #1
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	440b      	add	r3, r1
 8013e82:	1e59      	subs	r1, r3, #1
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8013e8a:	e00f      	b.n	8013eac <RegionCommonComputeRxWindowParameters+0x78>
 8013e8c:	7afb      	ldrb	r3, [r7, #11]
 8013e8e:	3b04      	subs	r3, #4
 8013e90:	4619      	mov	r1, r3
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	fb03 f101 	mul.w	r1, r3, r1
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013e9e:	fb00 f303 	mul.w	r3, r0, r3
 8013ea2:	440b      	add	r3, r1
 8013ea4:	0059      	lsls	r1, r3, #1
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8013eac:	429a      	cmp	r2, r3
 8013eae:	bf38      	it	cc
 8013eb0:	461a      	movcc	r2, r3
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	4619      	mov	r1, r3
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	68fa      	ldr	r2, [r7, #12]
 8013ec2:	fb02 f303 	mul.w	r3, r2, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d007      	beq.n	8013eda <RegionCommonComputeRxWindowParameters+0xa6>
 8013eca:	69bb      	ldr	r3, [r7, #24]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	68fa      	ldr	r2, [r7, #12]
 8013ed0:	fb02 f303 	mul.w	r3, r2, r3
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	085b      	lsrs	r3, r3, #1
 8013ed8:	e005      	b.n	8013ee6 <RegionCommonComputeRxWindowParameters+0xb2>
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	68fa      	ldr	r2, [r7, #12]
 8013ee0:	fb02 f303 	mul.w	r3, r2, r3
 8013ee4:	085b      	lsrs	r3, r3, #1
 8013ee6:	1acb      	subs	r3, r1, r3
 8013ee8:	683a      	ldr	r2, [r7, #0]
 8013eea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013eee:	fb01 f202 	mul.w	r2, r1, r2
 8013ef2:	1a9b      	subs	r3, r3, r2
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	dd27      	ble.n	8013f48 <RegionCommonComputeRxWindowParameters+0x114>
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	009b      	lsls	r3, r3, #2
 8013efc:	4619      	mov	r1, r3
 8013efe:	69bb      	ldr	r3, [r7, #24]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	fb02 f303 	mul.w	r3, r2, r3
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d007      	beq.n	8013f1c <RegionCommonComputeRxWindowParameters+0xe8>
 8013f0c:	69bb      	ldr	r3, [r7, #24]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	68fa      	ldr	r2, [r7, #12]
 8013f12:	fb02 f303 	mul.w	r3, r2, r3
 8013f16:	3301      	adds	r3, #1
 8013f18:	085b      	lsrs	r3, r3, #1
 8013f1a:	e005      	b.n	8013f28 <RegionCommonComputeRxWindowParameters+0xf4>
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	68fa      	ldr	r2, [r7, #12]
 8013f22:	fb02 f303 	mul.w	r3, r2, r3
 8013f26:	085b      	lsrs	r3, r3, #1
 8013f28:	1acb      	subs	r3, r1, r3
 8013f2a:	683a      	ldr	r2, [r7, #0]
 8013f2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013f30:	fb01 f202 	mul.w	r2, r1, r2
 8013f34:	1a9b      	subs	r3, r3, r2
 8013f36:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8013f3a:	4a19      	ldr	r2, [pc, #100]	; (8013fa0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8013f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8013f40:	1192      	asrs	r2, r2, #6
 8013f42:	17db      	asrs	r3, r3, #31
 8013f44:	1ad3      	subs	r3, r2, r3
 8013f46:	e024      	b.n	8013f92 <RegionCommonComputeRxWindowParameters+0x15e>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	fb02 f303 	mul.w	r3, r2, r3
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d007      	beq.n	8013f6c <RegionCommonComputeRxWindowParameters+0x138>
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	68fa      	ldr	r2, [r7, #12]
 8013f62:	fb02 f303 	mul.w	r3, r2, r3
 8013f66:	3301      	adds	r3, #1
 8013f68:	085b      	lsrs	r3, r3, #1
 8013f6a:	e005      	b.n	8013f78 <RegionCommonComputeRxWindowParameters+0x144>
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	fb02 f303 	mul.w	r3, r2, r3
 8013f76:	085b      	lsrs	r3, r3, #1
 8013f78:	1acb      	subs	r3, r1, r3
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013f80:	fb01 f202 	mul.w	r2, r1, r2
 8013f84:	1a9b      	subs	r3, r3, r2
 8013f86:	4a06      	ldr	r2, [pc, #24]	; (8013fa0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8013f88:	fb82 1203 	smull	r1, r2, r2, r3
 8013f8c:	1192      	asrs	r2, r2, #6
 8013f8e:	17db      	asrs	r3, r3, #31
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	69fa      	ldr	r2, [r7, #28]
 8013f94:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8013f96:	bf00      	nop
 8013f98:	3714      	adds	r7, #20
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bc80      	pop	{r7}
 8013f9e:	4770      	bx	lr
 8013fa0:	10624dd3 	.word	0x10624dd3

08013fa4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b086      	sub	sp, #24
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	4603      	mov	r3, r0
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	607a      	str	r2, [r7, #4]
 8013fb0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7ec fc05 	bl	80007cc <__aeabi_ui2f>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	68b8      	ldr	r0, [r7, #8]
 8013fc8:	f7ec fb4e 	bl	8000668 <__aeabi_fsub>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	6879      	ldr	r1, [r7, #4]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7ec fb49 	bl	8000668 <__aeabi_fsub>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7ec fa39 	bl	8000450 <__aeabi_f2d>
 8013fde:	4602      	mov	r2, r0
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	4610      	mov	r0, r2
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	f007 fb87 	bl	801b6f8 <floor>
 8013fea:	4602      	mov	r2, r0
 8013fec:	460b      	mov	r3, r1
 8013fee:	4610      	mov	r0, r2
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	f7ec fb0d 	bl	8000610 <__aeabi_d2iz>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8013ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3718      	adds	r7, #24
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014006:	b590      	push	{r4, r7, lr}
 8014008:	b087      	sub	sp, #28
 801400a:	af00      	add	r7, sp, #0
 801400c:	60f8      	str	r0, [r7, #12]
 801400e:	60b9      	str	r1, [r7, #8]
 8014010:	607a      	str	r2, [r7, #4]
 8014012:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014014:	2300      	movs	r3, #0
 8014016:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014018:	2300      	movs	r3, #0
 801401a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801401c:	2300      	movs	r3, #0
 801401e:	757b      	strb	r3, [r7, #21]
 8014020:	2300      	movs	r3, #0
 8014022:	753b      	strb	r3, [r7, #20]
 8014024:	e09c      	b.n	8014160 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014026:	2300      	movs	r3, #0
 8014028:	74fb      	strb	r3, [r7, #19]
 801402a:	e08f      	b.n	801414c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	685a      	ldr	r2, [r3, #4]
 8014030:	7d3b      	ldrb	r3, [r7, #20]
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	4413      	add	r3, r2
 8014036:	881b      	ldrh	r3, [r3, #0]
 8014038:	461a      	mov	r2, r3
 801403a:	7cfb      	ldrb	r3, [r7, #19]
 801403c:	fa42 f303 	asr.w	r3, r2, r3
 8014040:	f003 0301 	and.w	r3, r3, #1
 8014044:	2b00      	cmp	r3, #0
 8014046:	d07e      	beq.n	8014146 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	689a      	ldr	r2, [r3, #8]
 801404c:	7d79      	ldrb	r1, [r7, #21]
 801404e:	7cfb      	ldrb	r3, [r7, #19]
 8014050:	440b      	add	r3, r1
 8014052:	4619      	mov	r1, r3
 8014054:	460b      	mov	r3, r1
 8014056:	005b      	lsls	r3, r3, #1
 8014058:	440b      	add	r3, r1
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	4413      	add	r3, r2
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d06b      	beq.n	801413c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	f083 0301 	eor.w	r3, r3, #1
 801406c:	b2db      	uxtb	r3, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	d011      	beq.n	8014096 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014076:	2b00      	cmp	r3, #0
 8014078:	d00d      	beq.n	8014096 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	695a      	ldr	r2, [r3, #20]
 801407e:	7d3b      	ldrb	r3, [r7, #20]
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	4413      	add	r3, r2
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	461a      	mov	r2, r3
 8014088:	7cfb      	ldrb	r3, [r7, #19]
 801408a:	fa42 f303 	asr.w	r3, r2, r3
 801408e:	f003 0301 	and.w	r3, r3, #1
 8014092:	2b00      	cmp	r3, #0
 8014094:	d054      	beq.n	8014140 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	785b      	ldrb	r3, [r3, #1]
 801409a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	689a      	ldr	r2, [r3, #8]
 80140a0:	7d79      	ldrb	r1, [r7, #21]
 80140a2:	7cfb      	ldrb	r3, [r7, #19]
 80140a4:	440b      	add	r3, r1
 80140a6:	4619      	mov	r1, r3
 80140a8:	460b      	mov	r3, r1
 80140aa:	005b      	lsls	r3, r3, #1
 80140ac:	440b      	add	r3, r1
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	4413      	add	r3, r2
 80140b2:	7a1b      	ldrb	r3, [r3, #8]
 80140b4:	f343 0303 	sbfx	r3, r3, #0, #4
 80140b8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80140ba:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	689a      	ldr	r2, [r3, #8]
 80140c0:	7d79      	ldrb	r1, [r7, #21]
 80140c2:	7cfb      	ldrb	r3, [r7, #19]
 80140c4:	440b      	add	r3, r1
 80140c6:	4619      	mov	r1, r3
 80140c8:	460b      	mov	r3, r1
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	440b      	add	r3, r1
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4413      	add	r3, r2
 80140d2:	7a1b      	ldrb	r3, [r3, #8]
 80140d4:	f343 1303 	sbfx	r3, r3, #4, #4
 80140d8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80140da:	461a      	mov	r2, r3
 80140dc:	4621      	mov	r1, r4
 80140de:	f7ff fbf8 	bl	80138d2 <RegionCommonValueInRange>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d02d      	beq.n	8014144 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	68da      	ldr	r2, [r3, #12]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6899      	ldr	r1, [r3, #8]
 80140f0:	7d78      	ldrb	r0, [r7, #21]
 80140f2:	7cfb      	ldrb	r3, [r7, #19]
 80140f4:	4403      	add	r3, r0
 80140f6:	4618      	mov	r0, r3
 80140f8:	4603      	mov	r3, r0
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	4403      	add	r3, r0
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	440b      	add	r3, r1
 8014102:	7a5b      	ldrb	r3, [r3, #9]
 8014104:	4619      	mov	r1, r3
 8014106:	460b      	mov	r3, r1
 8014108:	005b      	lsls	r3, r3, #1
 801410a:	440b      	add	r3, r1
 801410c:	00db      	lsls	r3, r3, #3
 801410e:	4413      	add	r3, r2
 8014110:	7d1b      	ldrb	r3, [r3, #20]
 8014112:	f083 0301 	eor.w	r3, r3, #1
 8014116:	b2db      	uxtb	r3, r3
 8014118:	2b00      	cmp	r3, #0
 801411a:	d003      	beq.n	8014124 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801411c:	7dbb      	ldrb	r3, [r7, #22]
 801411e:	3301      	adds	r3, #1
 8014120:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014122:	e010      	b.n	8014146 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014124:	7dfb      	ldrb	r3, [r7, #23]
 8014126:	1c5a      	adds	r2, r3, #1
 8014128:	75fa      	strb	r2, [r7, #23]
 801412a:	461a      	mov	r2, r3
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	4413      	add	r3, r2
 8014130:	7d79      	ldrb	r1, [r7, #21]
 8014132:	7cfa      	ldrb	r2, [r7, #19]
 8014134:	440a      	add	r2, r1
 8014136:	b2d2      	uxtb	r2, r2
 8014138:	701a      	strb	r2, [r3, #0]
 801413a:	e004      	b.n	8014146 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801413c:	bf00      	nop
 801413e:	e002      	b.n	8014146 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014140:	bf00      	nop
 8014142:	e000      	b.n	8014146 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014144:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014146:	7cfb      	ldrb	r3, [r7, #19]
 8014148:	3301      	adds	r3, #1
 801414a:	74fb      	strb	r3, [r7, #19]
 801414c:	7cfb      	ldrb	r3, [r7, #19]
 801414e:	2b0f      	cmp	r3, #15
 8014150:	f67f af6c 	bls.w	801402c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014154:	7d7b      	ldrb	r3, [r7, #21]
 8014156:	3310      	adds	r3, #16
 8014158:	757b      	strb	r3, [r7, #21]
 801415a:	7d3b      	ldrb	r3, [r7, #20]
 801415c:	3301      	adds	r3, #1
 801415e:	753b      	strb	r3, [r7, #20]
 8014160:	7d7b      	ldrb	r3, [r7, #21]
 8014162:	b29a      	uxth	r2, r3
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	8a1b      	ldrh	r3, [r3, #16]
 8014168:	429a      	cmp	r2, r3
 801416a:	f4ff af5c 	bcc.w	8014026 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	7dfa      	ldrb	r2, [r7, #23]
 8014172:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	7dba      	ldrb	r2, [r7, #22]
 8014178:	701a      	strb	r2, [r3, #0]
}
 801417a:	bf00      	nop
 801417c:	371c      	adds	r7, #28
 801417e:	46bd      	mov	sp, r7
 8014180:	bd90      	pop	{r4, r7, pc}

08014182 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014184:	b08b      	sub	sp, #44	; 0x2c
 8014186:	af04      	add	r7, sp, #16
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
 801418e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	4618      	mov	r0, r3
 8014196:	f006 ff2b 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 801419a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	1ad2      	subs	r2, r2, r3
 80141a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141a6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80141a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141aa:	2201      	movs	r2, #1
 80141ac:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	2200      	movs	r2, #0
 80141b2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d004      	beq.n	80141c6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80141c0:	697a      	ldr	r2, [r7, #20]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d32b      	bcc.n	801421e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	2200      	movs	r2, #0
 80141ca:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	69db      	ldr	r3, [r3, #28]
 80141d0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80141d6:	68dd      	ldr	r5, [r3, #12]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	7a5e      	ldrb	r6, [r3, #9]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f893 c008 	ldrb.w	ip, [r3, #8]
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	7d1b      	ldrb	r3, [r3, #20]
 80141e6:	68fa      	ldr	r2, [r7, #12]
 80141e8:	6992      	ldr	r2, [r2, #24]
 80141ea:	9203      	str	r2, [sp, #12]
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	f10d 0e04 	add.w	lr, sp, #4
 80141f2:	320c      	adds	r2, #12
 80141f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141f8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80141fc:	9300      	str	r3, [sp, #0]
 80141fe:	4663      	mov	r3, ip
 8014200:	4632      	mov	r2, r6
 8014202:	4629      	mov	r1, r5
 8014204:	4620      	mov	r0, r4
 8014206:	f7ff fc35 	bl	8013a74 <RegionCommonUpdateBandTimeOff>
 801420a:	4602      	mov	r2, r0
 801420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801420e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	69d8      	ldr	r0, [r3, #28]
 8014214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014216:	683a      	ldr	r2, [r7, #0]
 8014218:	6879      	ldr	r1, [r7, #4]
 801421a:	f7ff fef4 	bl	8014006 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d004      	beq.n	8014230 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014228:	2200      	movs	r2, #0
 801422a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801422c:	2300      	movs	r3, #0
 801422e:	e006      	b.n	801423e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d001      	beq.n	801423c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014238:	230b      	movs	r3, #11
 801423a:	e000      	b.n	801423e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801423c:	230c      	movs	r3, #12
    }
}
 801423e:	4618      	mov	r0, r3
 8014240:	371c      	adds	r7, #28
 8014242:	46bd      	mov	sp, r7
 8014244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014246 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014246:	b5b0      	push	{r4, r5, r7, lr}
 8014248:	b086      	sub	sp, #24
 801424a:	af02      	add	r7, sp, #8
 801424c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f993 2000 	ldrsb.w	r2, [r3]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014260:	429a      	cmp	r2, r3
 8014262:	d103      	bne.n	801426c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801426a:	e026      	b.n	80142ba <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	3b01      	subs	r3, #1
 8014270:	b2db      	uxtb	r3, r3
 8014272:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801427a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801427e:	429a      	cmp	r2, r3
 8014280:	d019      	beq.n	80142b6 <RegionCommonGetNextLowerTxDr+0x70>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	78d8      	ldrb	r0, [r3, #3]
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6859      	ldr	r1, [r3, #4]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014296:	687a      	ldr	r2, [r7, #4]
 8014298:	6892      	ldr	r2, [r2, #8]
 801429a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801429e:	9201      	str	r2, [sp, #4]
 80142a0:	9300      	str	r3, [sp, #0]
 80142a2:	462b      	mov	r3, r5
 80142a4:	4622      	mov	r2, r4
 80142a6:	f7ff faa2 	bl	80137ee <RegionCommonChanVerifyDr>
 80142aa:	4603      	mov	r3, r0
 80142ac:	f083 0301 	eor.w	r3, r3, #1
 80142b0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d1da      	bne.n	801426c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80142b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3710      	adds	r7, #16
 80142be:	46bd      	mov	sp, r7
 80142c0:	bdb0      	pop	{r4, r5, r7, pc}

080142c2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80142c2:	b480      	push	{r7}
 80142c4:	b083      	sub	sp, #12
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	4603      	mov	r3, r0
 80142ca:	460a      	mov	r2, r1
 80142cc:	71fb      	strb	r3, [r7, #7]
 80142ce:	4613      	mov	r3, r2
 80142d0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80142d2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80142d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142da:	4293      	cmp	r3, r2
 80142dc:	bfb8      	it	lt
 80142de:	4613      	movlt	r3, r2
 80142e0:	b25b      	sxtb	r3, r3
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	370c      	adds	r7, #12
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bc80      	pop	{r7}
 80142ea:	4770      	bx	lr

080142ec <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	009b      	lsls	r3, r3, #2
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	4413      	add	r3, r2
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4a07      	ldr	r2, [pc, #28]	; (8014320 <RegionCommonGetBandwidth+0x34>)
 8014302:	4293      	cmp	r3, r2
 8014304:	d004      	beq.n	8014310 <RegionCommonGetBandwidth+0x24>
 8014306:	4a07      	ldr	r2, [pc, #28]	; (8014324 <RegionCommonGetBandwidth+0x38>)
 8014308:	4293      	cmp	r3, r2
 801430a:	d003      	beq.n	8014314 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801430c:	2300      	movs	r3, #0
 801430e:	e002      	b.n	8014316 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014310:	2301      	movs	r3, #1
 8014312:	e000      	b.n	8014316 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014314:	2302      	movs	r3, #2
    }
}
 8014316:	4618      	mov	r0, r3
 8014318:	370c      	adds	r7, #12
 801431a:	46bd      	mov	sp, r7
 801431c:	bc80      	pop	{r7}
 801431e:	4770      	bx	lr
 8014320:	0003d090 	.word	0x0003d090
 8014324:	0007a120 	.word	0x0007a120

08014328 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014328:	b5b0      	push	{r4, r5, r7, lr}
 801432a:	b08c      	sub	sp, #48	; 0x30
 801432c:	af04      	add	r7, sp, #16
 801432e:	4603      	mov	r3, r0
 8014330:	6039      	str	r1, [r7, #0]
 8014332:	71fb      	strb	r3, [r7, #7]
 8014334:	4613      	mov	r3, r2
 8014336:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014338:	4b17      	ldr	r3, [pc, #92]	; (8014398 <RegionCommonRxConfigPrint+0x70>)
 801433a:	f107 0408 	add.w	r4, r7, #8
 801433e:	461d      	mov	r5, r3
 8014340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014344:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014348:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 801434c:	79fb      	ldrb	r3, [r7, #7]
 801434e:	2b05      	cmp	r3, #5
 8014350:	d813      	bhi.n	801437a <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014352:	79fb      	ldrb	r3, [r7, #7]
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	f107 0220 	add.w	r2, r7, #32
 801435a:	4413      	add	r3, r2
 801435c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014360:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014364:	9202      	str	r2, [sp, #8]
 8014366:	683a      	ldr	r2, [r7, #0]
 8014368:	9201      	str	r2, [sp, #4]
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	4b0b      	ldr	r3, [pc, #44]	; (801439c <RegionCommonRxConfigPrint+0x74>)
 801436e:	2201      	movs	r2, #1
 8014370:	2100      	movs	r1, #0
 8014372:	2002      	movs	r0, #2
 8014374:	f006 ff1a 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014378:	e00a      	b.n	8014390 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801437a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	4b06      	ldr	r3, [pc, #24]	; (80143a0 <RegionCommonRxConfigPrint+0x78>)
 8014386:	2201      	movs	r2, #1
 8014388:	2100      	movs	r1, #0
 801438a:	2002      	movs	r0, #2
 801438c:	f006 ff0e 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 8014390:	bf00      	nop
 8014392:	3720      	adds	r7, #32
 8014394:	46bd      	mov	sp, r7
 8014396:	bdb0      	pop	{r4, r5, r7, pc}
 8014398:	0801be70 	.word	0x0801be70
 801439c:	0801be34 	.word	0x0801be34
 80143a0:	0801be54 	.word	0x0801be54

080143a4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af02      	add	r7, sp, #8
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	460b      	mov	r3, r1
 80143ae:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80143b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143b4:	9301      	str	r3, [sp, #4]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	4b05      	ldr	r3, [pc, #20]	; (80143d0 <RegionCommonTxConfigPrint+0x2c>)
 80143bc:	2201      	movs	r2, #1
 80143be:	2100      	movs	r1, #0
 80143c0:	2002      	movs	r0, #2
 80143c2:	f006 fef3 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
}
 80143c6:	bf00      	nop
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	0801be88 	.word	0x0801be88

080143d4 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80143de:	4b2d      	ldr	r3, [pc, #180]	; (8014494 <VerifyRfFreq+0xc0>)
 80143e0:	6a1b      	ldr	r3, [r3, #32]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	4798      	blx	r3
 80143e6:	4603      	mov	r3, r0
 80143e8:	f083 0301 	eor.w	r3, r3, #1
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d001      	beq.n	80143f6 <VerifyRfFreq+0x22>
    {
        return false;
 80143f2:	2300      	movs	r3, #0
 80143f4:	e04a      	b.n	801448c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4a27      	ldr	r2, [pc, #156]	; (8014498 <VerifyRfFreq+0xc4>)
 80143fa:	4293      	cmp	r3, r2
 80143fc:	d307      	bcc.n	801440e <VerifyRfFreq+0x3a>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	4a26      	ldr	r2, [pc, #152]	; (801449c <VerifyRfFreq+0xc8>)
 8014402:	4293      	cmp	r3, r2
 8014404:	d803      	bhi.n	801440e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	2202      	movs	r2, #2
 801440a:	701a      	strb	r2, [r3, #0]
 801440c:	e03d      	b.n	801448a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	4a22      	ldr	r2, [pc, #136]	; (801449c <VerifyRfFreq+0xc8>)
 8014412:	4293      	cmp	r3, r2
 8014414:	d907      	bls.n	8014426 <VerifyRfFreq+0x52>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4a21      	ldr	r2, [pc, #132]	; (80144a0 <VerifyRfFreq+0xcc>)
 801441a:	4293      	cmp	r3, r2
 801441c:	d803      	bhi.n	8014426 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	2200      	movs	r2, #0
 8014422:	701a      	strb	r2, [r3, #0]
 8014424:	e031      	b.n	801448a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	4a1d      	ldr	r2, [pc, #116]	; (80144a0 <VerifyRfFreq+0xcc>)
 801442a:	4293      	cmp	r3, r2
 801442c:	d907      	bls.n	801443e <VerifyRfFreq+0x6a>
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	4a1c      	ldr	r2, [pc, #112]	; (80144a4 <VerifyRfFreq+0xd0>)
 8014432:	4293      	cmp	r3, r2
 8014434:	d803      	bhi.n	801443e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	2201      	movs	r2, #1
 801443a:	701a      	strb	r2, [r3, #0]
 801443c:	e025      	b.n	801448a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	4a19      	ldr	r2, [pc, #100]	; (80144a8 <VerifyRfFreq+0xd4>)
 8014442:	4293      	cmp	r3, r2
 8014444:	d907      	bls.n	8014456 <VerifyRfFreq+0x82>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	4a18      	ldr	r2, [pc, #96]	; (80144ac <VerifyRfFreq+0xd8>)
 801444a:	4293      	cmp	r3, r2
 801444c:	d803      	bhi.n	8014456 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2205      	movs	r2, #5
 8014452:	701a      	strb	r2, [r3, #0]
 8014454:	e019      	b.n	801448a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4a15      	ldr	r2, [pc, #84]	; (80144b0 <VerifyRfFreq+0xdc>)
 801445a:	4293      	cmp	r3, r2
 801445c:	d907      	bls.n	801446e <VerifyRfFreq+0x9a>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4a14      	ldr	r2, [pc, #80]	; (80144b4 <VerifyRfFreq+0xe0>)
 8014462:	4293      	cmp	r3, r2
 8014464:	d803      	bhi.n	801446e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	2203      	movs	r2, #3
 801446a:	701a      	strb	r2, [r3, #0]
 801446c:	e00d      	b.n	801448a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4a11      	ldr	r2, [pc, #68]	; (80144b8 <VerifyRfFreq+0xe4>)
 8014472:	4293      	cmp	r3, r2
 8014474:	d307      	bcc.n	8014486 <VerifyRfFreq+0xb2>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	4a10      	ldr	r2, [pc, #64]	; (80144bc <VerifyRfFreq+0xe8>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d803      	bhi.n	8014486 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	2204      	movs	r2, #4
 8014482:	701a      	strb	r2, [r3, #0]
 8014484:	e001      	b.n	801448a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014486:	2300      	movs	r3, #0
 8014488:	e000      	b.n	801448c <VerifyRfFreq+0xb8>
    }
    return true;
 801448a:	2301      	movs	r3, #1
}
 801448c:	4618      	mov	r0, r3
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	0801c4cc 	.word	0x0801c4cc
 8014498:	337055c0 	.word	0x337055c0
 801449c:	338eda3f 	.word	0x338eda3f
 80144a0:	33bca100 	.word	0x33bca100
 80144a4:	33c5c8c0 	.word	0x33c5c8c0
 80144a8:	33c74f5f 	.word	0x33c74f5f
 80144ac:	33cef080 	.word	0x33cef080
 80144b0:	33d1fdbf 	.word	0x33d1fdbf
 80144b4:	33d5ce50 	.word	0x33d5ce50
 80144b8:	33d691a0 	.word	0x33d691a0
 80144bc:	33db2580 	.word	0x33db2580

080144c0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b08b      	sub	sp, #44	; 0x2c
 80144c4:	af04      	add	r7, sp, #16
 80144c6:	4603      	mov	r3, r0
 80144c8:	460a      	mov	r2, r1
 80144ca:	71fb      	strb	r3, [r7, #7]
 80144cc:	4613      	mov	r3, r2
 80144ce:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80144d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144d4:	4a1f      	ldr	r2, [pc, #124]	; (8014554 <GetTimeOnAir+0x94>)
 80144d6:	5cd3      	ldrb	r3, [r2, r3]
 80144d8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80144da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144de:	491e      	ldr	r1, [pc, #120]	; (8014558 <GetTimeOnAir+0x98>)
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7ff ff03 	bl	80142ec <RegionCommonGetBandwidth>
 80144e6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80144ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144f0:	2b07      	cmp	r3, #7
 80144f2:	d118      	bne.n	8014526 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80144f4:	4b19      	ldr	r3, [pc, #100]	; (801455c <GetTimeOnAir+0x9c>)
 80144f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80144f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014500:	fb02 f303 	mul.w	r3, r2, r3
 8014504:	4619      	mov	r1, r3
 8014506:	88bb      	ldrh	r3, [r7, #4]
 8014508:	b2db      	uxtb	r3, r3
 801450a:	2201      	movs	r2, #1
 801450c:	9203      	str	r2, [sp, #12]
 801450e:	9302      	str	r3, [sp, #8]
 8014510:	2300      	movs	r3, #0
 8014512:	9301      	str	r3, [sp, #4]
 8014514:	2305      	movs	r3, #5
 8014516:	9300      	str	r3, [sp, #0]
 8014518:	2300      	movs	r3, #0
 801451a:	460a      	mov	r2, r1
 801451c:	68f9      	ldr	r1, [r7, #12]
 801451e:	2000      	movs	r0, #0
 8014520:	47a0      	blx	r4
 8014522:	6178      	str	r0, [r7, #20]
 8014524:	e011      	b.n	801454a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014526:	4b0d      	ldr	r3, [pc, #52]	; (801455c <GetTimeOnAir+0x9c>)
 8014528:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801452a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801452e:	88bb      	ldrh	r3, [r7, #4]
 8014530:	b2db      	uxtb	r3, r3
 8014532:	2101      	movs	r1, #1
 8014534:	9103      	str	r1, [sp, #12]
 8014536:	9302      	str	r3, [sp, #8]
 8014538:	2300      	movs	r3, #0
 801453a:	9301      	str	r3, [sp, #4]
 801453c:	2308      	movs	r3, #8
 801453e:	9300      	str	r3, [sp, #0]
 8014540:	2301      	movs	r3, #1
 8014542:	68f9      	ldr	r1, [r7, #12]
 8014544:	2001      	movs	r0, #1
 8014546:	47a0      	blx	r4
 8014548:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801454a:	697b      	ldr	r3, [r7, #20]
}
 801454c:	4618      	mov	r0, r3
 801454e:	371c      	adds	r7, #28
 8014550:	46bd      	mov	sp, r7
 8014552:	bd90      	pop	{r4, r7, pc}
 8014554:	0801c410 	.word	0x0801c410
 8014558:	0801c418 	.word	0x0801c418
 801455c:	0801c4cc 	.word	0x0801c4cc

08014560 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b088      	sub	sp, #32
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014568:	2300      	movs	r3, #0
 801456a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	3b01      	subs	r3, #1
 8014572:	2b38      	cmp	r3, #56	; 0x38
 8014574:	f200 8128 	bhi.w	80147c8 <RegionEU868GetPhyParam+0x268>
 8014578:	a201      	add	r2, pc, #4	; (adr r2, 8014580 <RegionEU868GetPhyParam+0x20>)
 801457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801457e:	bf00      	nop
 8014580:	08014665 	.word	0x08014665
 8014584:	0801466b 	.word	0x0801466b
 8014588:	080147c9 	.word	0x080147c9
 801458c:	080147c9 	.word	0x080147c9
 8014590:	080147c9 	.word	0x080147c9
 8014594:	08014671 	.word	0x08014671
 8014598:	080147c9 	.word	0x080147c9
 801459c:	080146ab 	.word	0x080146ab
 80145a0:	080147c9 	.word	0x080147c9
 80145a4:	080146b1 	.word	0x080146b1
 80145a8:	080146b7 	.word	0x080146b7
 80145ac:	080146bd 	.word	0x080146bd
 80145b0:	080146c3 	.word	0x080146c3
 80145b4:	080146d3 	.word	0x080146d3
 80145b8:	080146e3 	.word	0x080146e3
 80145bc:	080146e9 	.word	0x080146e9
 80145c0:	080146f1 	.word	0x080146f1
 80145c4:	080146f9 	.word	0x080146f9
 80145c8:	08014701 	.word	0x08014701
 80145cc:	08014709 	.word	0x08014709
 80145d0:	08014711 	.word	0x08014711
 80145d4:	08014719 	.word	0x08014719
 80145d8:	0801472d 	.word	0x0801472d
 80145dc:	08014733 	.word	0x08014733
 80145e0:	08014739 	.word	0x08014739
 80145e4:	0801473f 	.word	0x0801473f
 80145e8:	0801474b 	.word	0x0801474b
 80145ec:	08014757 	.word	0x08014757
 80145f0:	0801475d 	.word	0x0801475d
 80145f4:	08014765 	.word	0x08014765
 80145f8:	0801476b 	.word	0x0801476b
 80145fc:	08014771 	.word	0x08014771
 8014600:	08014779 	.word	0x08014779
 8014604:	08014677 	.word	0x08014677
 8014608:	080147c9 	.word	0x080147c9
 801460c:	080147c9 	.word	0x080147c9
 8014610:	080147c9 	.word	0x080147c9
 8014614:	080147c9 	.word	0x080147c9
 8014618:	080147c9 	.word	0x080147c9
 801461c:	080147c9 	.word	0x080147c9
 8014620:	080147c9 	.word	0x080147c9
 8014624:	080147c9 	.word	0x080147c9
 8014628:	080147c9 	.word	0x080147c9
 801462c:	080147c9 	.word	0x080147c9
 8014630:	080147c9 	.word	0x080147c9
 8014634:	080147c9 	.word	0x080147c9
 8014638:	080147c9 	.word	0x080147c9
 801463c:	0801477f 	.word	0x0801477f
 8014640:	08014785 	.word	0x08014785
 8014644:	08014793 	.word	0x08014793
 8014648:	080147c9 	.word	0x080147c9
 801464c:	080147c9 	.word	0x080147c9
 8014650:	08014799 	.word	0x08014799
 8014654:	0801479f 	.word	0x0801479f
 8014658:	080147c9 	.word	0x080147c9
 801465c:	080147a5 	.word	0x080147a5
 8014660:	080147b5 	.word	0x080147b5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8014664:	2300      	movs	r3, #0
 8014666:	61bb      	str	r3, [r7, #24]
            break;
 8014668:	e0af      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801466a:	2300      	movs	r3, #0
 801466c:	61bb      	str	r3, [r7, #24]
            break;
 801466e:	e0ac      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8014670:	2300      	movs	r3, #0
 8014672:	61bb      	str	r3, [r7, #24]
            break;
 8014674:	e0a9      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801467c:	733b      	strb	r3, [r7, #12]
 801467e:	2307      	movs	r3, #7
 8014680:	737b      	strb	r3, [r7, #13]
 8014682:	2300      	movs	r3, #0
 8014684:	73bb      	strb	r3, [r7, #14]
 8014686:	2310      	movs	r3, #16
 8014688:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801468a:	4b54      	ldr	r3, [pc, #336]	; (80147dc <RegionEU868GetPhyParam+0x27c>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014692:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014694:	4b51      	ldr	r3, [pc, #324]	; (80147dc <RegionEU868GetPhyParam+0x27c>)
 8014696:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014698:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801469a:	f107 030c 	add.w	r3, r7, #12
 801469e:	4618      	mov	r0, r3
 80146a0:	f7ff fdd1 	bl	8014246 <RegionCommonGetNextLowerTxDr>
 80146a4:	4603      	mov	r3, r0
 80146a6:	61bb      	str	r3, [r7, #24]
            break;
 80146a8:	e08f      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80146aa:	2300      	movs	r3, #0
 80146ac:	61bb      	str	r3, [r7, #24]
            break;
 80146ae:	e08c      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80146b0:	2300      	movs	r3, #0
 80146b2:	61bb      	str	r3, [r7, #24]
            break;
 80146b4:	e089      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80146b6:	2340      	movs	r3, #64	; 0x40
 80146b8:	61bb      	str	r3, [r7, #24]
            break;
 80146ba:	e086      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80146bc:	2320      	movs	r3, #32
 80146be:	61bb      	str	r3, [r7, #24]
            break;
 80146c0:	e083      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80146c8:	461a      	mov	r2, r3
 80146ca:	4b45      	ldr	r3, [pc, #276]	; (80147e0 <RegionEU868GetPhyParam+0x280>)
 80146cc:	5c9b      	ldrb	r3, [r3, r2]
 80146ce:	61bb      	str	r3, [r7, #24]
            break;
 80146d0:	e07b      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80146d8:	461a      	mov	r2, r3
 80146da:	4b42      	ldr	r3, [pc, #264]	; (80147e4 <RegionEU868GetPhyParam+0x284>)
 80146dc:	5c9b      	ldrb	r3, [r3, r2]
 80146de:	61bb      	str	r3, [r7, #24]
            break;
 80146e0:	e073      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80146e2:	2301      	movs	r3, #1
 80146e4:	61bb      	str	r3, [r7, #24]
            break;
 80146e6:	e070      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80146e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80146ec:	61bb      	str	r3, [r7, #24]
            break;
 80146ee:	e06c      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80146f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80146f4:	61bb      	str	r3, [r7, #24]
            break;
 80146f6:	e068      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80146f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80146fc:	61bb      	str	r3, [r7, #24]
            break;
 80146fe:	e064      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014700:	f241 3388 	movw	r3, #5000	; 0x1388
 8014704:	61bb      	str	r3, [r7, #24]
            break;
 8014706:	e060      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014708:	f241 7370 	movw	r3, #6000	; 0x1770
 801470c:	61bb      	str	r3, [r7, #24]
            break;
 801470e:	e05c      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8014710:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014714:	61bb      	str	r3, [r7, #24]
            break;
 8014716:	e058      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8014718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801471c:	4832      	ldr	r0, [pc, #200]	; (80147e8 <RegionEU868GetPhyParam+0x288>)
 801471e:	f002 faed 	bl	8016cfc <randr>
 8014722:	4603      	mov	r3, r0
 8014724:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8014728:	61bb      	str	r3, [r7, #24]
            break;
 801472a:	e04e      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801472c:	2300      	movs	r3, #0
 801472e:	61bb      	str	r3, [r7, #24]
            break;
 8014730:	e04b      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8014732:	4b2e      	ldr	r3, [pc, #184]	; (80147ec <RegionEU868GetPhyParam+0x28c>)
 8014734:	61bb      	str	r3, [r7, #24]
            break;
 8014736:	e048      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8014738:	2300      	movs	r3, #0
 801473a:	61bb      	str	r3, [r7, #24]
            break;
 801473c:	e045      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801473e:	4b27      	ldr	r3, [pc, #156]	; (80147dc <RegionEU868GetPhyParam+0x27c>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8014746:	61bb      	str	r3, [r7, #24]
            break;
 8014748:	e03f      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801474a:	4b24      	ldr	r3, [pc, #144]	; (80147dc <RegionEU868GetPhyParam+0x27c>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8014752:	61bb      	str	r3, [r7, #24]
            break;
 8014754:	e039      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8014756:	2310      	movs	r3, #16
 8014758:	61bb      	str	r3, [r7, #24]
            break;
 801475a:	e036      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801475c:	4b1f      	ldr	r3, [pc, #124]	; (80147dc <RegionEU868GetPhyParam+0x27c>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	61bb      	str	r3, [r7, #24]
            break;
 8014762:	e032      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8014764:	2300      	movs	r3, #0
 8014766:	61bb      	str	r3, [r7, #24]
            break;
 8014768:	e02f      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801476a:	2300      	movs	r3, #0
 801476c:	61bb      	str	r3, [r7, #24]
            break;
 801476e:	e02c      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8014770:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8014774:	61bb      	str	r3, [r7, #24]
            break;
 8014776:	e028      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8014778:	4b1d      	ldr	r3, [pc, #116]	; (80147f0 <RegionEU868GetPhyParam+0x290>)
 801477a:	61bb      	str	r3, [r7, #24]
            break;
 801477c:	e025      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801477e:	4b1b      	ldr	r3, [pc, #108]	; (80147ec <RegionEU868GetPhyParam+0x28c>)
 8014780:	61bb      	str	r3, [r7, #24]
            break;
 8014782:	e022      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8014784:	2311      	movs	r3, #17
 8014786:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8014788:	2302      	movs	r3, #2
 801478a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801478c:	2300      	movs	r3, #0
 801478e:	76bb      	strb	r3, [r7, #26]
            break;
 8014790:	e01b      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8014792:	2303      	movs	r3, #3
 8014794:	61bb      	str	r3, [r7, #24]
            break;
 8014796:	e018      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8014798:	4b14      	ldr	r3, [pc, #80]	; (80147ec <RegionEU868GetPhyParam+0x28c>)
 801479a:	61bb      	str	r3, [r7, #24]
            break;
 801479c:	e015      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801479e:	2303      	movs	r3, #3
 80147a0:	61bb      	str	r3, [r7, #24]
            break;
 80147a2:	e012      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147aa:	461a      	mov	r2, r3
 80147ac:	4b11      	ldr	r3, [pc, #68]	; (80147f4 <RegionEU868GetPhyParam+0x294>)
 80147ae:	5c9b      	ldrb	r3, [r3, r2]
 80147b0:	61bb      	str	r3, [r7, #24]
            break;
 80147b2:	e00a      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147ba:	490f      	ldr	r1, [pc, #60]	; (80147f8 <RegionEU868GetPhyParam+0x298>)
 80147bc:	4618      	mov	r0, r3
 80147be:	f7ff fd95 	bl	80142ec <RegionCommonGetBandwidth>
 80147c2:	4603      	mov	r3, r0
 80147c4:	61bb      	str	r3, [r7, #24]
            break;
 80147c6:	e000      	b.n	80147ca <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80147c8:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	61fb      	str	r3, [r7, #28]
 80147ce:	2300      	movs	r3, #0
 80147d0:	69fb      	ldr	r3, [r7, #28]
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3720      	adds	r7, #32
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	20001098 	.word	0x20001098
 80147e0:	0801c438 	.word	0x0801c438
 80147e4:	0801c440 	.word	0x0801c440
 80147e8:	fffffc18 	.word	0xfffffc18
 80147ec:	33d3e608 	.word	0x33d3e608
 80147f0:	4009999a 	.word	0x4009999a
 80147f4:	0801c410 	.word	0x0801c410
 80147f8:	0801c418 	.word	0x0801c418

080147fc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80147fc:	b590      	push	{r4, r7, lr}
 80147fe:	b085      	sub	sp, #20
 8014800:	af02      	add	r7, sp, #8
 8014802:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014804:	4b11      	ldr	r3, [pc, #68]	; (801484c <RegionEU868SetBandTxDone+0x50>)
 8014806:	681a      	ldr	r2, [r3, #0]
 8014808:	4b11      	ldr	r3, [pc, #68]	; (8014850 <RegionEU868SetBandTxDone+0x54>)
 801480a:	6819      	ldr	r1, [r3, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	4618      	mov	r0, r3
 8014812:	4603      	mov	r3, r0
 8014814:	005b      	lsls	r3, r3, #1
 8014816:	4403      	add	r3, r0
 8014818:	009b      	lsls	r3, r3, #2
 801481a:	440b      	add	r3, r1
 801481c:	3309      	adds	r3, #9
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	4619      	mov	r1, r3
 8014822:	460b      	mov	r3, r1
 8014824:	005b      	lsls	r3, r3, #1
 8014826:	440b      	add	r3, r1
 8014828:	00db      	lsls	r3, r3, #3
 801482a:	18d0      	adds	r0, r2, r3
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6899      	ldr	r1, [r3, #8]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	785c      	ldrb	r4, [r3, #1]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	691a      	ldr	r2, [r3, #16]
 8014838:	9200      	str	r2, [sp, #0]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	4622      	mov	r2, r4
 801483e:	f7ff f8eb 	bl	8013a18 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8014842:	bf00      	nop
 8014844:	370c      	adds	r7, #12
 8014846:	46bd      	mov	sp, r7
 8014848:	bd90      	pop	{r4, r7, pc}
 801484a:	bf00      	nop
 801484c:	20001094 	.word	0x20001094
 8014850:	20001098 	.word	0x20001098

08014854 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b0b0      	sub	sp, #192	; 0xc0
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801485c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014860:	2290      	movs	r2, #144	; 0x90
 8014862:	2100      	movs	r1, #0
 8014864:	4618      	mov	r0, r3
 8014866:	f006 ff3f 	bl	801b6e8 <memset>
 801486a:	2364      	movs	r3, #100	; 0x64
 801486c:	863b      	strh	r3, [r7, #48]	; 0x30
 801486e:	2364      	movs	r3, #100	; 0x64
 8014870:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8014874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014878:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801487c:	230a      	movs	r3, #10
 801487e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8014882:	2364      	movs	r3, #100	; 0x64
 8014884:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8014888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801488c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	7a1b      	ldrb	r3, [r3, #8]
 8014894:	2b02      	cmp	r3, #2
 8014896:	d05e      	beq.n	8014956 <RegionEU868InitDefaults+0x102>
 8014898:	2b02      	cmp	r3, #2
 801489a:	dc6b      	bgt.n	8014974 <RegionEU868InitDefaults+0x120>
 801489c:	2b00      	cmp	r3, #0
 801489e:	d002      	beq.n	80148a6 <RegionEU868InitDefaults+0x52>
 80148a0:	2b01      	cmp	r3, #1
 80148a2:	d03f      	beq.n	8014924 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80148a4:	e066      	b.n	8014974 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d063      	beq.n	8014976 <RegionEU868InitDefaults+0x122>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d05f      	beq.n	8014976 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	4a30      	ldr	r2, [pc, #192]	; (801497c <RegionEU868InitDefaults+0x128>)
 80148bc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	4a2f      	ldr	r2, [pc, #188]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 80148c4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80148c6:	4b2d      	ldr	r3, [pc, #180]	; (801497c <RegionEU868InitDefaults+0x128>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80148d0:	2290      	movs	r2, #144	; 0x90
 80148d2:	4619      	mov	r1, r3
 80148d4:	f002 fa29 	bl	8016d2a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80148d8:	4b29      	ldr	r3, [pc, #164]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	4a29      	ldr	r2, [pc, #164]	; (8014984 <RegionEU868InitDefaults+0x130>)
 80148de:	ca07      	ldmia	r2, {r0, r1, r2}
 80148e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80148e4:	4b26      	ldr	r3, [pc, #152]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	4a27      	ldr	r2, [pc, #156]	; (8014988 <RegionEU868InitDefaults+0x134>)
 80148ea:	330c      	adds	r3, #12
 80148ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80148ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80148f2:	4b23      	ldr	r3, [pc, #140]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4a25      	ldr	r2, [pc, #148]	; (801498c <RegionEU868InitDefaults+0x138>)
 80148f8:	3318      	adds	r3, #24
 80148fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80148fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8014900:	4b1f      	ldr	r3, [pc, #124]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2207      	movs	r2, #7
 8014906:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801490a:	4b1d      	ldr	r3, [pc, #116]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8014912:	4b1b      	ldr	r3, [pc, #108]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801491a:	2201      	movs	r2, #1
 801491c:	4619      	mov	r1, r3
 801491e:	f7ff f855 	bl	80139cc <RegionCommonChanMaskCopy>
 8014922:	e028      	b.n	8014976 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014924:	4b16      	ldr	r3, [pc, #88]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	2200      	movs	r2, #0
 801492a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801492c:	4b14      	ldr	r3, [pc, #80]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2200      	movs	r2, #0
 8014932:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8014934:	4b12      	ldr	r3, [pc, #72]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2200      	movs	r2, #0
 801493a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801493c:	4b10      	ldr	r3, [pc, #64]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8014944:	4b0e      	ldr	r3, [pc, #56]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801494c:	2201      	movs	r2, #1
 801494e:	4619      	mov	r1, r3
 8014950:	f7ff f83c 	bl	80139cc <RegionCommonChanMaskCopy>
            break;
 8014954:	e00f      	b.n	8014976 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014956:	4b0a      	ldr	r3, [pc, #40]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801495e:	4b08      	ldr	r3, [pc, #32]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8014966:	4b06      	ldr	r3, [pc, #24]	; (8014980 <RegionEU868InitDefaults+0x12c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	430a      	orrs	r2, r1
 801496c:	b292      	uxth	r2, r2
 801496e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8014972:	e000      	b.n	8014976 <RegionEU868InitDefaults+0x122>
            break;
 8014974:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014976:	37c0      	adds	r7, #192	; 0xc0
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	20001094 	.word	0x20001094
 8014980:	20001098 	.word	0x20001098
 8014984:	0801bea4 	.word	0x0801bea4
 8014988:	0801beb0 	.word	0x0801beb0
 801498c:	0801bebc 	.word	0x0801bebc

08014990 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	460b      	mov	r3, r1
 801499a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 801499c:	78fb      	ldrb	r3, [r7, #3]
 801499e:	2b0f      	cmp	r3, #15
 80149a0:	d86c      	bhi.n	8014a7c <RegionEU868Verify+0xec>
 80149a2:	a201      	add	r2, pc, #4	; (adr r2, 80149a8 <RegionEU868Verify+0x18>)
 80149a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a8:	080149e9 	.word	0x080149e9
 80149ac:	08014a7d 	.word	0x08014a7d
 80149b0:	08014a7d 	.word	0x08014a7d
 80149b4:	08014a7d 	.word	0x08014a7d
 80149b8:	08014a7d 	.word	0x08014a7d
 80149bc:	08014a01 	.word	0x08014a01
 80149c0:	08014a1f 	.word	0x08014a1f
 80149c4:	08014a3d 	.word	0x08014a3d
 80149c8:	08014a7d 	.word	0x08014a7d
 80149cc:	08014a5b 	.word	0x08014a5b
 80149d0:	08014a5b 	.word	0x08014a5b
 80149d4:	08014a7d 	.word	0x08014a7d
 80149d8:	08014a7d 	.word	0x08014a7d
 80149dc:	08014a7d 	.word	0x08014a7d
 80149e0:	08014a7d 	.word	0x08014a7d
 80149e4:	08014a79 	.word	0x08014a79
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80149e8:	2300      	movs	r3, #0
 80149ea:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	f107 020f 	add.w	r2, r7, #15
 80149f4:	4611      	mov	r1, r2
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7ff fcec 	bl	80143d4 <VerifyRfFreq>
 80149fc:	4603      	mov	r3, r0
 80149fe:	e03e      	b.n	8014a7e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f993 3000 	ldrsb.w	r3, [r3]
 8014a06:	2207      	movs	r2, #7
 8014a08:	2100      	movs	r1, #0
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7fe ff61 	bl	80138d2 <RegionCommonValueInRange>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	bf14      	ite	ne
 8014a16:	2301      	movne	r3, #1
 8014a18:	2300      	moveq	r3, #0
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	e02f      	b.n	8014a7e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f993 3000 	ldrsb.w	r3, [r3]
 8014a24:	2205      	movs	r2, #5
 8014a26:	2100      	movs	r1, #0
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7fe ff52 	bl	80138d2 <RegionCommonValueInRange>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	bf14      	ite	ne
 8014a34:	2301      	movne	r3, #1
 8014a36:	2300      	moveq	r3, #0
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	e020      	b.n	8014a7e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8014a42:	2207      	movs	r2, #7
 8014a44:	2100      	movs	r1, #0
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7fe ff43 	bl	80138d2 <RegionCommonValueInRange>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	bf14      	ite	ne
 8014a52:	2301      	movne	r3, #1
 8014a54:	2300      	moveq	r3, #0
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	e011      	b.n	8014a7e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8014a60:	2207      	movs	r2, #7
 8014a62:	2100      	movs	r1, #0
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7fe ff34 	bl	80138d2 <RegionCommonValueInRange>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	bf14      	ite	ne
 8014a70:	2301      	movne	r3, #1
 8014a72:	2300      	moveq	r3, #0
 8014a74:	b2db      	uxtb	r3, r3
 8014a76:	e002      	b.n	8014a7e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e000      	b.n	8014a7e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8014a7c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3710      	adds	r7, #16
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop

08014a88 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b08a      	sub	sp, #40	; 0x28
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014a90:	2350      	movs	r3, #80	; 0x50
 8014a92:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	791b      	ldrb	r3, [r3, #4]
 8014a9a:	2b10      	cmp	r3, #16
 8014a9c:	d162      	bne.n	8014b64 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	330f      	adds	r3, #15
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d15e      	bne.n	8014b68 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ab0:	2303      	movs	r3, #3
 8014ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014ab6:	e050      	b.n	8014b5a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8014ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014abc:	2b07      	cmp	r3, #7
 8014abe:	d824      	bhi.n	8014b0a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ac8:	4413      	add	r3, r2
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014ace:	69ba      	ldr	r2, [r7, #24]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ad8:	3301      	adds	r3, #1
 8014ada:	440b      	add	r3, r1
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	021b      	lsls	r3, r3, #8
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014ae4:	69ba      	ldr	r2, [r7, #24]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6819      	ldr	r1, [r3, #0]
 8014aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aee:	3302      	adds	r3, #2
 8014af0:	440b      	add	r3, r1
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	041b      	lsls	r3, r3, #16
 8014af6:	4313      	orrs	r3, r2
 8014af8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014afa:	69bb      	ldr	r3, [r7, #24]
 8014afc:	2264      	movs	r2, #100	; 0x64
 8014afe:	fb02 f303 	mul.w	r3, r2, r3
 8014b02:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014b04:	2300      	movs	r3, #0
 8014b06:	61fb      	str	r3, [r7, #28]
 8014b08:	e006      	b.n	8014b18 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00b      	beq.n	8014b36 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014b1e:	f107 0318 	add.w	r3, r7, #24
 8014b22:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b28:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014b2a:	f107 0310 	add.w	r3, r7, #16
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 fd10 	bl	8015554 <RegionEU868ChannelAdd>
 8014b34:	e007      	b.n	8014b46 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b3a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8014b3c:	f107 030c 	add.w	r3, r7, #12
 8014b40:	4618      	mov	r0, r3
 8014b42:	f000 fda9 	bl	8015698 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b4a:	3303      	adds	r3, #3
 8014b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b54:	3301      	adds	r3, #1
 8014b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b5e:	2b0f      	cmp	r3, #15
 8014b60:	d9aa      	bls.n	8014ab8 <RegionEU868ApplyCFList+0x30>
 8014b62:	e002      	b.n	8014b6a <RegionEU868ApplyCFList+0xe2>
        return;
 8014b64:	bf00      	nop
 8014b66:	e000      	b.n	8014b6a <RegionEU868ApplyCFList+0xe2>
        return;
 8014b68:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014b6a:	3728      	adds	r7, #40	; 0x28
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}

08014b70 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b082      	sub	sp, #8
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	791b      	ldrb	r3, [r3, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <RegionEU868ChanMaskSet+0x16>
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d00b      	beq.n	8014b9c <RegionEU868ChanMaskSet+0x2c>
 8014b84:	e015      	b.n	8014bb2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014b86:	4b0e      	ldr	r3, [pc, #56]	; (8014bc0 <RegionEU868ChanMaskSet+0x50>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	2201      	movs	r2, #1
 8014b94:	4619      	mov	r1, r3
 8014b96:	f7fe ff19 	bl	80139cc <RegionCommonChanMaskCopy>
            break;
 8014b9a:	e00c      	b.n	8014bb6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014b9c:	4b08      	ldr	r3, [pc, #32]	; (8014bc0 <RegionEU868ChanMaskSet+0x50>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2201      	movs	r2, #1
 8014baa:	4619      	mov	r1, r3
 8014bac:	f7fe ff0e 	bl	80139cc <RegionCommonChanMaskCopy>
            break;
 8014bb0:	e001      	b.n	8014bb6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	e000      	b.n	8014bb8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8014bb6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3708      	adds	r7, #8
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}
 8014bc0:	20001098 	.word	0x20001098

08014bc4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b088      	sub	sp, #32
 8014bc8:	af02      	add	r7, sp, #8
 8014bca:	60ba      	str	r2, [r7, #8]
 8014bcc:	607b      	str	r3, [r7, #4]
 8014bce:	4603      	mov	r3, r0
 8014bd0:	73fb      	strb	r3, [r7, #15]
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8014bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bde:	2b07      	cmp	r3, #7
 8014be0:	bfa8      	it	ge
 8014be2:	2307      	movge	r3, #7
 8014be4:	b25a      	sxtb	r2, r3
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014bf0:	491e      	ldr	r1, [pc, #120]	; (8014c6c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7ff fb7a 	bl	80142ec <RegionCommonGetBandwidth>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	b2da      	uxtb	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c06:	2b07      	cmp	r3, #7
 8014c08:	d10a      	bne.n	8014c20 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c10:	461a      	mov	r2, r3
 8014c12:	4b17      	ldr	r3, [pc, #92]	; (8014c70 <RegionEU868ComputeRxWindowParameters+0xac>)
 8014c14:	5c9b      	ldrb	r3, [r3, r2]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff f8fc 	bl	8013e14 <RegionCommonComputeSymbolTimeFsk>
 8014c1c:	6178      	str	r0, [r7, #20]
 8014c1e:	e011      	b.n	8014c44 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c26:	461a      	mov	r2, r3
 8014c28:	4b11      	ldr	r3, [pc, #68]	; (8014c70 <RegionEU868ComputeRxWindowParameters+0xac>)
 8014c2a:	5c9a      	ldrb	r2, [r3, r2]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c32:	4619      	mov	r1, r3
 8014c34:	4b0d      	ldr	r3, [pc, #52]	; (8014c6c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8014c36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	4610      	mov	r0, r2
 8014c3e:	f7ff f8d3 	bl	8013de8 <RegionCommonComputeSymbolTimeLoRa>
 8014c42:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014c44:	4b0b      	ldr	r3, [pc, #44]	; (8014c74 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8014c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c48:	4798      	blx	r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	3308      	adds	r3, #8
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	320c      	adds	r2, #12
 8014c52:	7bb9      	ldrb	r1, [r7, #14]
 8014c54:	9201      	str	r2, [sp, #4]
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	4603      	mov	r3, r0
 8014c5a:	68ba      	ldr	r2, [r7, #8]
 8014c5c:	6978      	ldr	r0, [r7, #20]
 8014c5e:	f7ff f8e9 	bl	8013e34 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8014c62:	bf00      	nop
 8014c64:	3718      	adds	r7, #24
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	0801c418 	.word	0x0801c418
 8014c70:	0801c410 	.word	0x0801c410
 8014c74:	0801c4cc 	.word	0x0801c4cc

08014c78 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014c78:	b5b0      	push	{r4, r5, r7, lr}
 8014c7a:	b090      	sub	sp, #64	; 0x40
 8014c7c:	af0a      	add	r7, sp, #40	; 0x28
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	785b      	ldrb	r3, [r3, #1]
 8014c86:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014c96:	4b5a      	ldr	r3, [pc, #360]	; (8014e00 <RegionEU868RxConfig+0x188>)
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	4798      	blx	r3
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d001      	beq.n	8014ca6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	e0a8      	b.n	8014df8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	7cdb      	ldrb	r3, [r3, #19]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d126      	bne.n	8014cfc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014cae:	4b55      	ldr	r3, [pc, #340]	; (8014e04 <RegionEU868RxConfig+0x18c>)
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	460b      	mov	r3, r1
 8014cba:	005b      	lsls	r3, r3, #1
 8014cbc:	440b      	add	r3, r1
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	4413      	add	r3, r2
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014cc6:	4b4f      	ldr	r3, [pc, #316]	; (8014e04 <RegionEU868RxConfig+0x18c>)
 8014cc8:	681a      	ldr	r2, [r3, #0]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	005b      	lsls	r3, r3, #1
 8014cd4:	440b      	add	r3, r1
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	4413      	add	r3, r2
 8014cda:	3304      	adds	r3, #4
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00c      	beq.n	8014cfc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014ce2:	4b48      	ldr	r3, [pc, #288]	; (8014e04 <RegionEU868RxConfig+0x18c>)
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	4619      	mov	r1, r3
 8014cec:	460b      	mov	r3, r1
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	440b      	add	r3, r1
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	4413      	add	r3, r2
 8014cf6:	3304      	adds	r3, #4
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d00:	4a41      	ldr	r2, [pc, #260]	; (8014e08 <RegionEU868RxConfig+0x190>)
 8014d02:	5cd3      	ldrb	r3, [r2, r3]
 8014d04:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014d06:	4b3e      	ldr	r3, [pc, #248]	; (8014e00 <RegionEU868RxConfig+0x188>)
 8014d08:	68db      	ldr	r3, [r3, #12]
 8014d0a:	6938      	ldr	r0, [r7, #16]
 8014d0c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d12:	2b07      	cmp	r3, #7
 8014d14:	d128      	bne.n	8014d68 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8014d16:	2300      	movs	r3, #0
 8014d18:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014d1a:	4b39      	ldr	r3, [pc, #228]	; (8014e00 <RegionEU868RxConfig+0x188>)
 8014d1c:	699c      	ldr	r4, [r3, #24]
 8014d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014d26:	fb02 f303 	mul.w	r3, r2, r3
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	7c92      	ldrb	r2, [r2, #18]
 8014d36:	7df8      	ldrb	r0, [r7, #23]
 8014d38:	9209      	str	r2, [sp, #36]	; 0x24
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	9208      	str	r2, [sp, #32]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	9207      	str	r2, [sp, #28]
 8014d42:	2200      	movs	r2, #0
 8014d44:	9206      	str	r2, [sp, #24]
 8014d46:	2201      	movs	r2, #1
 8014d48:	9205      	str	r2, [sp, #20]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	9204      	str	r2, [sp, #16]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	9203      	str	r2, [sp, #12]
 8014d52:	9302      	str	r3, [sp, #8]
 8014d54:	2305      	movs	r3, #5
 8014d56:	9301      	str	r3, [sp, #4]
 8014d58:	4b2c      	ldr	r3, [pc, #176]	; (8014e0c <RegionEU868RxConfig+0x194>)
 8014d5a:	9300      	str	r3, [sp, #0]
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	460a      	mov	r2, r1
 8014d60:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014d64:	47a0      	blx	r4
 8014d66:	e024      	b.n	8014db2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014d6c:	4b24      	ldr	r3, [pc, #144]	; (8014e00 <RegionEU868RxConfig+0x188>)
 8014d6e:	699c      	ldr	r4, [r3, #24]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	789b      	ldrb	r3, [r3, #2]
 8014d74:	461d      	mov	r5, r3
 8014d76:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	689b      	ldr	r3, [r3, #8]
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	687a      	ldr	r2, [r7, #4]
 8014d82:	7c92      	ldrb	r2, [r2, #18]
 8014d84:	7df8      	ldrb	r0, [r7, #23]
 8014d86:	9209      	str	r2, [sp, #36]	; 0x24
 8014d88:	2201      	movs	r2, #1
 8014d8a:	9208      	str	r2, [sp, #32]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	9207      	str	r2, [sp, #28]
 8014d90:	2200      	movs	r2, #0
 8014d92:	9206      	str	r2, [sp, #24]
 8014d94:	2200      	movs	r2, #0
 8014d96:	9205      	str	r2, [sp, #20]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	9204      	str	r2, [sp, #16]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	9203      	str	r2, [sp, #12]
 8014da0:	9302      	str	r3, [sp, #8]
 8014da2:	2308      	movs	r3, #8
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	2300      	movs	r3, #0
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	2301      	movs	r3, #1
 8014dac:	460a      	mov	r2, r1
 8014dae:	4629      	mov	r1, r5
 8014db0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	7c5b      	ldrb	r3, [r3, #17]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d005      	beq.n	8014dc6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8014dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dbe:	4a14      	ldr	r2, [pc, #80]	; (8014e10 <RegionEU868RxConfig+0x198>)
 8014dc0:	5cd3      	ldrb	r3, [r2, r3]
 8014dc2:	75bb      	strb	r3, [r7, #22]
 8014dc4:	e004      	b.n	8014dd0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8014dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dca:	4a12      	ldr	r2, [pc, #72]	; (8014e14 <RegionEU868RxConfig+0x19c>)
 8014dcc:	5cd3      	ldrb	r3, [r2, r3]
 8014dce:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014dd0:	4b0b      	ldr	r3, [pc, #44]	; (8014e00 <RegionEU868RxConfig+0x188>)
 8014dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dd4:	7dba      	ldrb	r2, [r7, #22]
 8014dd6:	320d      	adds	r2, #13
 8014dd8:	b2d1      	uxtb	r1, r2
 8014dda:	7dfa      	ldrb	r2, [r7, #23]
 8014ddc:	4610      	mov	r0, r2
 8014dde:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	7cdb      	ldrb	r3, [r3, #19]
 8014de4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014de8:	6939      	ldr	r1, [r7, #16]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7ff fa9c 	bl	8014328 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	7bfa      	ldrb	r2, [r7, #15]
 8014df4:	701a      	strb	r2, [r3, #0]
    return true;
 8014df6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3718      	adds	r7, #24
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8014e00:	0801c4cc 	.word	0x0801c4cc
 8014e04:	20001098 	.word	0x20001098
 8014e08:	0801c410 	.word	0x0801c410
 8014e0c:	00014585 	.word	0x00014585
 8014e10:	0801c440 	.word	0x0801c440
 8014e14:	0801c438 	.word	0x0801c438

08014e18 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014e18:	b590      	push	{r4, r7, lr}
 8014e1a:	b093      	sub	sp, #76	; 0x4c
 8014e1c:	af0a      	add	r7, sp, #40	; 0x28
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	60b9      	str	r1, [r7, #8]
 8014e22:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e2a:	461a      	mov	r2, r3
 8014e2c:	4b5d      	ldr	r3, [pc, #372]	; (8014fa4 <RegionEU868TxConfig+0x18c>)
 8014e2e:	5c9b      	ldrb	r3, [r3, r2]
 8014e30:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014e38:	4b5b      	ldr	r3, [pc, #364]	; (8014fa8 <RegionEU868TxConfig+0x190>)
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	4b5b      	ldr	r3, [pc, #364]	; (8014fac <RegionEU868TxConfig+0x194>)
 8014e3e:	6819      	ldr	r1, [r3, #0]
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	461c      	mov	r4, r3
 8014e46:	4623      	mov	r3, r4
 8014e48:	005b      	lsls	r3, r3, #1
 8014e4a:	4423      	add	r3, r4
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	440b      	add	r3, r1
 8014e50:	3309      	adds	r3, #9
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	4619      	mov	r1, r3
 8014e56:	460b      	mov	r3, r1
 8014e58:	005b      	lsls	r3, r3, #1
 8014e5a:	440b      	add	r3, r1
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	4413      	add	r3, r2
 8014e60:	3302      	adds	r3, #2
 8014e62:	f993 3000 	ldrsb.w	r3, [r3]
 8014e66:	4619      	mov	r1, r3
 8014e68:	f7ff fa2b 	bl	80142c2 <RegionCommonLimitTxPower>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e76:	494e      	ldr	r1, [pc, #312]	; (8014fb0 <RegionEU868TxConfig+0x198>)
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7ff fa37 	bl	80142ec <RegionCommonGetBandwidth>
 8014e7e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014e80:	2300      	movs	r3, #0
 8014e82:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	6859      	ldr	r1, [r3, #4]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	689a      	ldr	r2, [r3, #8]
 8014e8c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7ff f887 	bl	8013fa4 <RegionCommonComputeTxPower>
 8014e96:	4603      	mov	r3, r0
 8014e98:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8014e9a:	4b46      	ldr	r3, [pc, #280]	; (8014fb4 <RegionEU868TxConfig+0x19c>)
 8014e9c:	68da      	ldr	r2, [r3, #12]
 8014e9e:	4b43      	ldr	r3, [pc, #268]	; (8014fac <RegionEU868TxConfig+0x194>)
 8014ea0:	6819      	ldr	r1, [r3, #0]
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	4403      	add	r3, r0
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	440b      	add	r3, r1
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ebe:	2b07      	cmp	r3, #7
 8014ec0:	d124      	bne.n	8014f0c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8014ec6:	4b3b      	ldr	r3, [pc, #236]	; (8014fb4 <RegionEU868TxConfig+0x19c>)
 8014ec8:	69dc      	ldr	r4, [r3, #28]
 8014eca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ed2:	fb02 f303 	mul.w	r3, r2, r3
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014edc:	7ff8      	ldrb	r0, [r7, #31]
 8014ede:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8014ee2:	9308      	str	r3, [sp, #32]
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	9307      	str	r3, [sp, #28]
 8014ee8:	2300      	movs	r3, #0
 8014eea:	9306      	str	r3, [sp, #24]
 8014eec:	2300      	movs	r3, #0
 8014eee:	9305      	str	r3, [sp, #20]
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	9304      	str	r3, [sp, #16]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	9303      	str	r3, [sp, #12]
 8014ef8:	2305      	movs	r3, #5
 8014efa:	9302      	str	r3, [sp, #8]
 8014efc:	2300      	movs	r3, #0
 8014efe:	9301      	str	r3, [sp, #4]
 8014f00:	9200      	str	r2, [sp, #0]
 8014f02:	69bb      	ldr	r3, [r7, #24]
 8014f04:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8014f08:	47a0      	blx	r4
 8014f0a:	e01d      	b.n	8014f48 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8014f10:	4b28      	ldr	r3, [pc, #160]	; (8014fb4 <RegionEU868TxConfig+0x19c>)
 8014f12:	69dc      	ldr	r4, [r3, #28]
 8014f14:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014f18:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014f1c:	7ff8      	ldrb	r0, [r7, #31]
 8014f1e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8014f22:	9208      	str	r2, [sp, #32]
 8014f24:	2200      	movs	r2, #0
 8014f26:	9207      	str	r2, [sp, #28]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	9206      	str	r2, [sp, #24]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	9205      	str	r2, [sp, #20]
 8014f30:	2201      	movs	r2, #1
 8014f32:	9204      	str	r2, [sp, #16]
 8014f34:	2200      	movs	r2, #0
 8014f36:	9203      	str	r2, [sp, #12]
 8014f38:	2208      	movs	r2, #8
 8014f3a:	9202      	str	r2, [sp, #8]
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	9201      	str	r2, [sp, #4]
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	2200      	movs	r2, #0
 8014f46:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8014f48:	4b18      	ldr	r3, [pc, #96]	; (8014fac <RegionEU868TxConfig+0x194>)
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	4619      	mov	r1, r3
 8014f52:	460b      	mov	r3, r1
 8014f54:	005b      	lsls	r3, r3, #1
 8014f56:	440b      	add	r3, r1
 8014f58:	009b      	lsls	r3, r3, #2
 8014f5a:	4413      	add	r3, r2
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f64:	4619      	mov	r1, r3
 8014f66:	4610      	mov	r0, r2
 8014f68:	f7ff fa1c 	bl	80143a4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	899b      	ldrh	r3, [r3, #12]
 8014f76:	4619      	mov	r1, r3
 8014f78:	4610      	mov	r0, r2
 8014f7a:	f7ff faa1 	bl	80144c0 <GetTimeOnAir>
 8014f7e:	4602      	mov	r2, r0
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8014f84:	4b0b      	ldr	r3, [pc, #44]	; (8014fb4 <RegionEU868TxConfig+0x19c>)
 8014f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f88:	68fa      	ldr	r2, [r7, #12]
 8014f8a:	8992      	ldrh	r2, [r2, #12]
 8014f8c:	b2d1      	uxtb	r1, r2
 8014f8e:	7ffa      	ldrb	r2, [r7, #31]
 8014f90:	4610      	mov	r0, r2
 8014f92:	4798      	blx	r3

    *txPower = txPowerLimited;
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	7f7a      	ldrb	r2, [r7, #29]
 8014f98:	701a      	strb	r2, [r3, #0]
    return true;
 8014f9a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3724      	adds	r7, #36	; 0x24
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd90      	pop	{r4, r7, pc}
 8014fa4:	0801c410 	.word	0x0801c410
 8014fa8:	20001094 	.word	0x20001094
 8014fac:	20001098 	.word	0x20001098
 8014fb0:	0801c418 	.word	0x0801c418
 8014fb4:	0801c4cc 	.word	0x0801c4cc

08014fb8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014fb8:	b590      	push	{r4, r7, lr}
 8014fba:	b093      	sub	sp, #76	; 0x4c
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	607a      	str	r2, [r7, #4]
 8014fc4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014fc6:	2307      	movs	r3, #7
 8014fc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014fcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	601a      	str	r2, [r3, #0]
 8014fd4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014fe6:	e085      	b.n	80150f4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	685a      	ldr	r2, [r3, #4]
 8014fec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014ff0:	4413      	add	r3, r2
 8014ff2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014ff6:	4611      	mov	r1, r2
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7fe fe2b 	bl	8013c54 <RegionCommonParseLinkAdrReq>
 8014ffe:	4603      	mov	r3, r0
 8015000:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015004:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015008:	2b00      	cmp	r3, #0
 801500a:	d07b      	beq.n	8015104 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801500c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015010:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015014:	4413      	add	r3, r2
 8015016:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801501a:	2307      	movs	r3, #7
 801501c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015024:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801502a:	2b00      	cmp	r3, #0
 801502c:	d109      	bne.n	8015042 <RegionEU868LinkAdrReq+0x8a>
 801502e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015030:	2b00      	cmp	r3, #0
 8015032:	d106      	bne.n	8015042 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015034:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015038:	f023 0301 	bic.w	r3, r3, #1
 801503c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015040:	e058      	b.n	80150f4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015042:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015046:	2b00      	cmp	r3, #0
 8015048:	d003      	beq.n	8015052 <RegionEU868LinkAdrReq+0x9a>
 801504a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801504e:	2b05      	cmp	r3, #5
 8015050:	d903      	bls.n	801505a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015056:	2b06      	cmp	r3, #6
 8015058:	d906      	bls.n	8015068 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801505a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801505e:	f023 0301 	bic.w	r3, r3, #1
 8015062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015066:	e045      	b.n	80150f4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015068:	2300      	movs	r3, #0
 801506a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801506e:	e03d      	b.n	80150ec <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015074:	2b06      	cmp	r3, #6
 8015076:	d118      	bne.n	80150aa <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015078:	4b5f      	ldr	r3, [pc, #380]	; (80151f8 <RegionEU868LinkAdrReq+0x240>)
 801507a:	6819      	ldr	r1, [r3, #0]
 801507c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015080:	4613      	mov	r3, r2
 8015082:	005b      	lsls	r3, r3, #1
 8015084:	4413      	add	r3, r2
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	440b      	add	r3, r1
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d028      	beq.n	80150e2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015090:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015094:	2201      	movs	r2, #1
 8015096:	fa02 f303 	lsl.w	r3, r2, r3
 801509a:	b21a      	sxth	r2, r3
 801509c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801509e:	b21b      	sxth	r3, r3
 80150a0:	4313      	orrs	r3, r2
 80150a2:	b21b      	sxth	r3, r3
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80150a8:	e01b      	b.n	80150e2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80150aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80150ac:	461a      	mov	r2, r3
 80150ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80150b2:	fa42 f303 	asr.w	r3, r2, r3
 80150b6:	f003 0301 	and.w	r3, r3, #1
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d011      	beq.n	80150e2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80150be:	4b4e      	ldr	r3, [pc, #312]	; (80151f8 <RegionEU868LinkAdrReq+0x240>)
 80150c0:	6819      	ldr	r1, [r3, #0]
 80150c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80150c6:	4613      	mov	r3, r2
 80150c8:	005b      	lsls	r3, r3, #1
 80150ca:	4413      	add	r3, r2
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	440b      	add	r3, r1
 80150d0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d105      	bne.n	80150e2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80150d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80150da:	f023 0301 	bic.w	r3, r3, #1
 80150de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80150e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80150e6:	3301      	adds	r3, #1
 80150e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80150ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80150f0:	2b0f      	cmp	r3, #15
 80150f2:	d9bd      	bls.n	8015070 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	7a1b      	ldrb	r3, [r3, #8]
 80150f8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80150fc:	429a      	cmp	r2, r3
 80150fe:	f4ff af73 	bcc.w	8014fe8 <RegionEU868LinkAdrReq+0x30>
 8015102:	e000      	b.n	8015106 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015104:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015106:	2302      	movs	r3, #2
 8015108:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	7a5b      	ldrb	r3, [r3, #9]
 8015110:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015114:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015118:	4618      	mov	r0, r3
 801511a:	f7ff fa21 	bl	8014560 <RegionEU868GetPhyParam>
 801511e:	4603      	mov	r3, r0
 8015120:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015122:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015126:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	7a9b      	ldrb	r3, [r3, #10]
 801512c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801512e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015132:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015134:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015138:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801513a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801513e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015146:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801514e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	7b5b      	ldrb	r3, [r3, #13]
 8015154:	b25b      	sxtb	r3, r3
 8015156:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015158:	2310      	movs	r3, #16
 801515a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801515c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015160:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015164:	b25b      	sxtb	r3, r3
 8015166:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801516a:	2307      	movs	r3, #7
 801516c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015170:	4b21      	ldr	r3, [pc, #132]	; (80151f8 <RegionEU868LinkAdrReq+0x240>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015176:	2307      	movs	r3, #7
 8015178:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801517c:	2300      	movs	r3, #0
 801517e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015188:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801518c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015190:	1c9a      	adds	r2, r3, #2
 8015192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015196:	1c59      	adds	r1, r3, #1
 8015198:	f107 0010 	add.w	r0, r7, #16
 801519c:	4623      	mov	r3, r4
 801519e:	f7fe fdaa 	bl	8013cf6 <RegionCommonLinkAdrReqVerifyParams>
 80151a2:	4603      	mov	r3, r0
 80151a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80151a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80151ac:	2b07      	cmp	r3, #7
 80151ae:	d10d      	bne.n	80151cc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80151b0:	4b11      	ldr	r3, [pc, #68]	; (80151f8 <RegionEU868LinkAdrReq+0x240>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80151b8:	220c      	movs	r2, #12
 80151ba:	2100      	movs	r1, #0
 80151bc:	4618      	mov	r0, r3
 80151be:	f001 fdef 	bl	8016da0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80151c2:	4b0d      	ldr	r3, [pc, #52]	; (80151f8 <RegionEU868LinkAdrReq+0x240>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151c8:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80151cc:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80151d4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80151dc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80151e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80151e6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80151ea:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80151ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	374c      	adds	r7, #76	; 0x4c
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd90      	pop	{r4, r7, pc}
 80151f8:	20001098 	.word	0x20001098

080151fc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015204:	2307      	movs	r3, #7
 8015206:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015208:	2300      	movs	r3, #0
 801520a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	f107 020e 	add.w	r2, r7, #14
 8015214:	4611      	mov	r1, r2
 8015216:	4618      	mov	r0, r3
 8015218:	f7ff f8dc 	bl	80143d4 <VerifyRfFreq>
 801521c:	4603      	mov	r3, r0
 801521e:	f083 0301 	eor.w	r3, r3, #1
 8015222:	b2db      	uxtb	r3, r3
 8015224:	2b00      	cmp	r3, #0
 8015226:	d003      	beq.n	8015230 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015228:	7bfb      	ldrb	r3, [r7, #15]
 801522a:	f023 0301 	bic.w	r3, r3, #1
 801522e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f993 3000 	ldrsb.w	r3, [r3]
 8015236:	2207      	movs	r2, #7
 8015238:	2100      	movs	r1, #0
 801523a:	4618      	mov	r0, r3
 801523c:	f7fe fb49 	bl	80138d2 <RegionCommonValueInRange>
 8015240:	4603      	mov	r3, r0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d103      	bne.n	801524e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015246:	7bfb      	ldrb	r3, [r7, #15]
 8015248:	f023 0302 	bic.w	r3, r3, #2
 801524c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015254:	2205      	movs	r2, #5
 8015256:	2100      	movs	r1, #0
 8015258:	4618      	mov	r0, r3
 801525a:	f7fe fb3a 	bl	80138d2 <RegionCommonValueInRange>
 801525e:	4603      	mov	r3, r0
 8015260:	2b00      	cmp	r3, #0
 8015262:	d103      	bne.n	801526c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015264:	7bfb      	ldrb	r3, [r7, #15]
 8015266:	f023 0304 	bic.w	r3, r3, #4
 801526a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801526c:	7bfb      	ldrb	r3, [r7, #15]
}
 801526e:	4618      	mov	r0, r3
 8015270:	3710      	adds	r7, #16
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
	...

08015278 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015280:	2303      	movs	r3, #3
 8015282:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d114      	bne.n	80152b8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015294:	b2db      	uxtb	r3, r3
 8015296:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015298:	f107 0308 	add.w	r3, r7, #8
 801529c:	4618      	mov	r0, r3
 801529e:	f000 f9fb 	bl	8015698 <RegionEU868ChannelsRemove>
 80152a2:	4603      	mov	r3, r0
 80152a4:	f083 0301 	eor.w	r3, r3, #1
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d03b      	beq.n	8015326 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80152ae:	7dfb      	ldrb	r3, [r7, #23]
 80152b0:	f023 0303 	bic.w	r3, r3, #3
 80152b4:	75fb      	strb	r3, [r7, #23]
 80152b6:	e036      	b.n	8015326 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80152c4:	b2db      	uxtb	r3, r3
 80152c6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80152c8:	f107 030c 	add.w	r3, r7, #12
 80152cc:	4618      	mov	r0, r3
 80152ce:	f000 f941 	bl	8015554 <RegionEU868ChannelAdd>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b06      	cmp	r3, #6
 80152d6:	d820      	bhi.n	801531a <RegionEU868NewChannelReq+0xa2>
 80152d8:	a201      	add	r2, pc, #4	; (adr r2, 80152e0 <RegionEU868NewChannelReq+0x68>)
 80152da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152de:	bf00      	nop
 80152e0:	08015325 	.word	0x08015325
 80152e4:	0801531b 	.word	0x0801531b
 80152e8:	0801531b 	.word	0x0801531b
 80152ec:	0801531b 	.word	0x0801531b
 80152f0:	080152fd 	.word	0x080152fd
 80152f4:	08015307 	.word	0x08015307
 80152f8:	08015311 	.word	0x08015311
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80152fc:	7dfb      	ldrb	r3, [r7, #23]
 80152fe:	f023 0301 	bic.w	r3, r3, #1
 8015302:	75fb      	strb	r3, [r7, #23]
                break;
 8015304:	e00f      	b.n	8015326 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015306:	7dfb      	ldrb	r3, [r7, #23]
 8015308:	f023 0302 	bic.w	r3, r3, #2
 801530c:	75fb      	strb	r3, [r7, #23]
                break;
 801530e:	e00a      	b.n	8015326 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015310:	7dfb      	ldrb	r3, [r7, #23]
 8015312:	f023 0303 	bic.w	r3, r3, #3
 8015316:	75fb      	strb	r3, [r7, #23]
                break;
 8015318:	e005      	b.n	8015326 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801531a:	7dfb      	ldrb	r3, [r7, #23]
 801531c:	f023 0303 	bic.w	r3, r3, #3
 8015320:	75fb      	strb	r3, [r7, #23]
                break;
 8015322:	e000      	b.n	8015326 <RegionEU868NewChannelReq+0xae>
                break;
 8015324:	bf00      	nop
            }
        }
    }

    return status;
 8015326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801532a:	4618      	mov	r0, r3
 801532c:	3718      	adds	r7, #24
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop

08015334 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801533c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015340:	4618      	mov	r0, r3
 8015342:	370c      	adds	r7, #12
 8015344:	46bd      	mov	sp, r7
 8015346:	bc80      	pop	{r7}
 8015348:	4770      	bx	lr
	...

0801534c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015354:	2303      	movs	r3, #3
 8015356:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015358:	2300      	movs	r3, #0
 801535a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	685b      	ldr	r3, [r3, #4]
 8015360:	f107 020e 	add.w	r2, r7, #14
 8015364:	4611      	mov	r1, r2
 8015366:	4618      	mov	r0, r3
 8015368:	f7ff f834 	bl	80143d4 <VerifyRfFreq>
 801536c:	4603      	mov	r3, r0
 801536e:	f083 0301 	eor.w	r3, r3, #1
 8015372:	b2db      	uxtb	r3, r3
 8015374:	2b00      	cmp	r3, #0
 8015376:	d003      	beq.n	8015380 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015378:	7bfb      	ldrb	r3, [r7, #15]
 801537a:	f023 0301 	bic.w	r3, r3, #1
 801537e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015380:	4b13      	ldr	r3, [pc, #76]	; (80153d0 <RegionEU868DlChannelReq+0x84>)
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	4619      	mov	r1, r3
 801538a:	460b      	mov	r3, r1
 801538c:	005b      	lsls	r3, r3, #1
 801538e:	440b      	add	r3, r1
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	4413      	add	r3, r2
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d103      	bne.n	80153a2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801539a:	7bfb      	ldrb	r3, [r7, #15]
 801539c:	f023 0302 	bic.w	r3, r3, #2
 80153a0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80153a2:	7bfb      	ldrb	r3, [r7, #15]
 80153a4:	2b03      	cmp	r3, #3
 80153a6:	d10d      	bne.n	80153c4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80153a8:	4b09      	ldr	r3, [pc, #36]	; (80153d0 <RegionEU868DlChannelReq+0x84>)
 80153aa:	6819      	ldr	r1, [r3, #0]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	4618      	mov	r0, r3
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	685a      	ldr	r2, [r3, #4]
 80153b6:	4603      	mov	r3, r0
 80153b8:	005b      	lsls	r3, r3, #1
 80153ba:	4403      	add	r3, r0
 80153bc:	009b      	lsls	r3, r3, #2
 80153be:	440b      	add	r3, r1
 80153c0:	3304      	adds	r3, #4
 80153c2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80153c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3710      	adds	r7, #16
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	20001098 	.word	0x20001098

080153d4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80153d4:	b480      	push	{r7}
 80153d6:	b083      	sub	sp, #12
 80153d8:	af00      	add	r7, sp, #0
 80153da:	4603      	mov	r3, r0
 80153dc:	460a      	mov	r2, r1
 80153de:	71fb      	strb	r3, [r7, #7]
 80153e0:	4613      	mov	r3, r2
 80153e2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80153e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	370c      	adds	r7, #12
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bc80      	pop	{r7}
 80153f0:	4770      	bx	lr
	...

080153f4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b09a      	sub	sp, #104	; 0x68
 80153f8:	af02      	add	r7, sp, #8
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015402:	2300      	movs	r3, #0
 8015404:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015408:	2300      	movs	r3, #0
 801540a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801540e:	2300      	movs	r3, #0
 8015410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015416:	2200      	movs	r2, #0
 8015418:	601a      	str	r2, [r3, #0]
 801541a:	605a      	str	r2, [r3, #4]
 801541c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801541e:	230c      	movs	r3, #12
 8015420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015424:	2307      	movs	r3, #7
 8015426:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015428:	4b48      	ldr	r3, [pc, #288]	; (801554c <RegionEU868NextChannel+0x158>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8015430:	2201      	movs	r2, #1
 8015432:	2100      	movs	r1, #0
 8015434:	4618      	mov	r0, r3
 8015436:	f7fe fa9d 	bl	8013974 <RegionCommonCountChannels>
 801543a:	4603      	mov	r3, r0
 801543c:	2b00      	cmp	r3, #0
 801543e:	d10a      	bne.n	8015456 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015440:	4b42      	ldr	r3, [pc, #264]	; (801554c <RegionEU868NextChannel+0x158>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8015448:	4b40      	ldr	r3, [pc, #256]	; (801554c <RegionEU868NextChannel+0x158>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	f042 0207 	orr.w	r2, r2, #7
 8015450:	b292      	uxth	r2, r2
 8015452:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	7a5b      	ldrb	r3, [r3, #9]
 801545a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015462:	b2db      	uxtb	r3, r3
 8015464:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015466:	4b39      	ldr	r3, [pc, #228]	; (801554c <RegionEU868NextChannel+0x158>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801546e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015470:	4b36      	ldr	r3, [pc, #216]	; (801554c <RegionEU868NextChannel+0x158>)
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015476:	4b36      	ldr	r3, [pc, #216]	; (8015550 <RegionEU868NextChannel+0x15c>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801547c:	2310      	movs	r3, #16
 801547e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015480:	f107 0312 	add.w	r3, r7, #18
 8015484:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	7a9b      	ldrb	r3, [r3, #10]
 8015496:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801549a:	2306      	movs	r3, #6
 801549c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80154a0:	68fa      	ldr	r2, [r7, #12]
 80154a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80154a6:	320c      	adds	r2, #12
 80154a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154ac:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	7d1b      	ldrb	r3, [r3, #20]
 80154b4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	8adb      	ldrh	r3, [r3, #22]
 80154c2:	4619      	mov	r1, r3
 80154c4:	4610      	mov	r0, r2
 80154c6:	f7fe fffb 	bl	80144c0 <GetTimeOnAir>
 80154ca:	4603      	mov	r3, r0
 80154cc:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80154ce:	f107 0314 	add.w	r3, r7, #20
 80154d2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80154d4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80154d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80154dc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	9301      	str	r3, [sp, #4]
 80154e4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80154e8:	9300      	str	r3, [sp, #0]
 80154ea:	460b      	mov	r3, r1
 80154ec:	6839      	ldr	r1, [r7, #0]
 80154ee:	f7fe fe48 	bl	8014182 <RegionCommonIdentifyChannels>
 80154f2:	4603      	mov	r3, r0
 80154f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80154f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d10f      	bne.n	8015520 <RegionEU868NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015500:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8015504:	3b01      	subs	r3, #1
 8015506:	4619      	mov	r1, r3
 8015508:	2000      	movs	r0, #0
 801550a:	f001 fbf7 	bl	8016cfc <randr>
 801550e:	4603      	mov	r3, r0
 8015510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8015514:	4413      	add	r3, r2
 8015516:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	701a      	strb	r2, [r3, #0]
 801551e:	e00e      	b.n	801553e <RegionEU868NextChannel+0x14a>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015524:	2b0c      	cmp	r3, #12
 8015526:	d10a      	bne.n	801553e <RegionEU868NextChannel+0x14a>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015528:	4b08      	ldr	r3, [pc, #32]	; (801554c <RegionEU868NextChannel+0x158>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8015530:	4b06      	ldr	r3, [pc, #24]	; (801554c <RegionEU868NextChannel+0x158>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	f042 0207 	orr.w	r2, r2, #7
 8015538:	b292      	uxth	r2, r2
 801553a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 801553e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015542:	4618      	mov	r0, r3
 8015544:	3760      	adds	r7, #96	; 0x60
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	20001098 	.word	0x20001098
 8015550:	20001094 	.word	0x20001094

08015554 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801555c:	2300      	movs	r3, #0
 801555e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8015560:	2300      	movs	r3, #0
 8015562:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015564:	2300      	movs	r3, #0
 8015566:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	791b      	ldrb	r3, [r3, #4]
 801556c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801556e:	7b7b      	ldrb	r3, [r7, #13]
 8015570:	2b02      	cmp	r3, #2
 8015572:	d801      	bhi.n	8015578 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015574:	2306      	movs	r3, #6
 8015576:	e089      	b.n	801568c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8015578:	7b7b      	ldrb	r3, [r7, #13]
 801557a:	2b0f      	cmp	r3, #15
 801557c:	d901      	bls.n	8015582 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801557e:	2303      	movs	r3, #3
 8015580:	e084      	b.n	801568c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	7a1b      	ldrb	r3, [r3, #8]
 8015588:	f343 0303 	sbfx	r3, r3, #0, #4
 801558c:	b25b      	sxtb	r3, r3
 801558e:	2207      	movs	r2, #7
 8015590:	2100      	movs	r1, #0
 8015592:	4618      	mov	r0, r3
 8015594:	f7fe f99d 	bl	80138d2 <RegionCommonValueInRange>
 8015598:	4603      	mov	r3, r0
 801559a:	2b00      	cmp	r3, #0
 801559c:	d101      	bne.n	80155a2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801559e:	2301      	movs	r3, #1
 80155a0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	7a1b      	ldrb	r3, [r3, #8]
 80155a8:	f343 1303 	sbfx	r3, r3, #4, #4
 80155ac:	b25b      	sxtb	r3, r3
 80155ae:	2207      	movs	r2, #7
 80155b0:	2100      	movs	r1, #0
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7fe f98d 	bl	80138d2 <RegionCommonValueInRange>
 80155b8:	4603      	mov	r3, r0
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d101      	bne.n	80155c2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80155be:	2301      	movs	r3, #1
 80155c0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	7a1b      	ldrb	r3, [r3, #8]
 80155c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80155cc:	b25a      	sxtb	r2, r3
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	7a1b      	ldrb	r3, [r3, #8]
 80155d4:	f343 1303 	sbfx	r3, r3, #4, #4
 80155d8:	b25b      	sxtb	r3, r3
 80155da:	429a      	cmp	r2, r3
 80155dc:	dd01      	ble.n	80155e2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80155de:	2301      	movs	r3, #1
 80155e0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80155e2:	7bbb      	ldrb	r3, [r7, #14]
 80155e4:	f083 0301 	eor.w	r3, r3, #1
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d010      	beq.n	8015610 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	f107 020c 	add.w	r2, r7, #12
 80155f8:	4611      	mov	r1, r2
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7fe feea 	bl	80143d4 <VerifyRfFreq>
 8015600:	4603      	mov	r3, r0
 8015602:	f083 0301 	eor.w	r3, r3, #1
 8015606:	b2db      	uxtb	r3, r3
 8015608:	2b00      	cmp	r3, #0
 801560a:	d001      	beq.n	8015610 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801560c:	2301      	movs	r3, #1
 801560e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015610:	7bfb      	ldrb	r3, [r7, #15]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d004      	beq.n	8015620 <RegionEU868ChannelAdd+0xcc>
 8015616:	7bbb      	ldrb	r3, [r7, #14]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d001      	beq.n	8015620 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801561c:	2306      	movs	r3, #6
 801561e:	e035      	b.n	801568c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8015620:	7bfb      	ldrb	r3, [r7, #15]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d001      	beq.n	801562a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015626:	2305      	movs	r3, #5
 8015628:	e030      	b.n	801568c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801562a:	7bbb      	ldrb	r3, [r7, #14]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d001      	beq.n	8015634 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015630:	2304      	movs	r3, #4
 8015632:	e02b      	b.n	801568c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015634:	4b17      	ldr	r3, [pc, #92]	; (8015694 <RegionEU868ChannelAdd+0x140>)
 8015636:	6819      	ldr	r1, [r3, #0]
 8015638:	7b7a      	ldrb	r2, [r7, #13]
 801563a:	4613      	mov	r3, r2
 801563c:	005b      	lsls	r3, r3, #1
 801563e:	4413      	add	r3, r2
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	18c8      	adds	r0, r1, r3
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	220c      	movs	r2, #12
 801564a:	4619      	mov	r1, r3
 801564c:	f001 fb6d 	bl	8016d2a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8015650:	4b10      	ldr	r3, [pc, #64]	; (8015694 <RegionEU868ChannelAdd+0x140>)
 8015652:	6819      	ldr	r1, [r3, #0]
 8015654:	7b7a      	ldrb	r2, [r7, #13]
 8015656:	7b38      	ldrb	r0, [r7, #12]
 8015658:	4613      	mov	r3, r2
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	4413      	add	r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	440b      	add	r3, r1
 8015662:	3309      	adds	r3, #9
 8015664:	4602      	mov	r2, r0
 8015666:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8015668:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <RegionEU868ChannelAdd+0x140>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8015670:	b21a      	sxth	r2, r3
 8015672:	7b7b      	ldrb	r3, [r7, #13]
 8015674:	2101      	movs	r1, #1
 8015676:	fa01 f303 	lsl.w	r3, r1, r3
 801567a:	b21b      	sxth	r3, r3
 801567c:	4313      	orrs	r3, r2
 801567e:	b21a      	sxth	r2, r3
 8015680:	4b04      	ldr	r3, [pc, #16]	; (8015694 <RegionEU868ChannelAdd+0x140>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	b292      	uxth	r2, r2
 8015686:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801568a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801568c:	4618      	mov	r0, r3
 801568e:	3710      	adds	r7, #16
 8015690:	46bd      	mov	sp, r7
 8015692:	bd80      	pop	{r7, pc}
 8015694:	20001098 	.word	0x20001098

08015698 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	781b      	ldrb	r3, [r3, #0]
 80156a4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80156a6:	7dfb      	ldrb	r3, [r7, #23]
 80156a8:	2b02      	cmp	r3, #2
 80156aa:	d801      	bhi.n	80156b0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80156ac:	2300      	movs	r3, #0
 80156ae:	e016      	b.n	80156de <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80156b0:	4b0d      	ldr	r3, [pc, #52]	; (80156e8 <RegionEU868ChannelsRemove+0x50>)
 80156b2:	6819      	ldr	r1, [r3, #0]
 80156b4:	7dfa      	ldrb	r2, [r7, #23]
 80156b6:	4613      	mov	r3, r2
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	4413      	add	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	440b      	add	r3, r1
 80156c0:	461a      	mov	r2, r3
 80156c2:	2300      	movs	r3, #0
 80156c4:	6013      	str	r3, [r2, #0]
 80156c6:	6053      	str	r3, [r2, #4]
 80156c8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80156ca:	4b07      	ldr	r3, [pc, #28]	; (80156e8 <RegionEU868ChannelsRemove+0x50>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80156d2:	7df9      	ldrb	r1, [r7, #23]
 80156d4:	2210      	movs	r2, #16
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fe f918 	bl	801390c <RegionCommonChanDisable>
 80156dc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3718      	adds	r7, #24
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	20001098 	.word	0x20001098

080156ec <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80156ec:	b590      	push	{r4, r7, lr}
 80156ee:	b085      	sub	sp, #20
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80156fa:	4b20      	ldr	r3, [pc, #128]	; (801577c <RegionEU868SetContinuousWave+0x90>)
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	4b20      	ldr	r3, [pc, #128]	; (8015780 <RegionEU868SetContinuousWave+0x94>)
 8015700:	6819      	ldr	r1, [r3, #0]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	461c      	mov	r4, r3
 8015708:	4623      	mov	r3, r4
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	4423      	add	r3, r4
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	440b      	add	r3, r1
 8015712:	3309      	adds	r3, #9
 8015714:	781b      	ldrb	r3, [r3, #0]
 8015716:	4619      	mov	r1, r3
 8015718:	460b      	mov	r3, r1
 801571a:	005b      	lsls	r3, r3, #1
 801571c:	440b      	add	r3, r1
 801571e:	00db      	lsls	r3, r3, #3
 8015720:	4413      	add	r3, r2
 8015722:	3302      	adds	r3, #2
 8015724:	f993 3000 	ldrsb.w	r3, [r3]
 8015728:	4619      	mov	r1, r3
 801572a:	f7fe fdca 	bl	80142c2 <RegionCommonLimitTxPower>
 801572e:	4603      	mov	r3, r0
 8015730:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015732:	2300      	movs	r3, #0
 8015734:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8015736:	4b12      	ldr	r3, [pc, #72]	; (8015780 <RegionEU868SetContinuousWave+0x94>)
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	4619      	mov	r1, r3
 8015740:	460b      	mov	r3, r1
 8015742:	005b      	lsls	r3, r3, #1
 8015744:	440b      	add	r3, r1
 8015746:	009b      	lsls	r3, r3, #2
 8015748:	4413      	add	r3, r2
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6859      	ldr	r1, [r3, #4]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	689a      	ldr	r2, [r3, #8]
 8015756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801575a:	4618      	mov	r0, r3
 801575c:	f7fe fc22 	bl	8013fa4 <RegionCommonComputeTxPower>
 8015760:	4603      	mov	r3, r0
 8015762:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8015764:	4b07      	ldr	r3, [pc, #28]	; (8015784 <RegionEU868SetContinuousWave+0x98>)
 8015766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	8992      	ldrh	r2, [r2, #12]
 801576c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015770:	68b8      	ldr	r0, [r7, #8]
 8015772:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8015774:	bf00      	nop
 8015776:	3714      	adds	r7, #20
 8015778:	46bd      	mov	sp, r7
 801577a:	bd90      	pop	{r4, r7, pc}
 801577c:	20001094 	.word	0x20001094
 8015780:	20001098 	.word	0x20001098
 8015784:	0801c4cc 	.word	0x0801c4cc

08015788 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015788:	b480      	push	{r7}
 801578a:	b085      	sub	sp, #20
 801578c:	af00      	add	r7, sp, #0
 801578e:	4603      	mov	r3, r0
 8015790:	71fb      	strb	r3, [r7, #7]
 8015792:	460b      	mov	r3, r1
 8015794:	71bb      	strb	r3, [r7, #6]
 8015796:	4613      	mov	r3, r2
 8015798:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801579a:	79ba      	ldrb	r2, [r7, #6]
 801579c:	797b      	ldrb	r3, [r7, #5]
 801579e:	1ad3      	subs	r3, r2, r3
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80157a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	da01      	bge.n	80157b0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80157ac:	2300      	movs	r3, #0
 80157ae:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80157b0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3714      	adds	r7, #20
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bc80      	pop	{r7}
 80157ba:	4770      	bx	lr

080157bc <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b084      	sub	sp, #16
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	603b      	str	r3, [r7, #0]
 80157c4:	4603      	mov	r3, r0
 80157c6:	71fb      	strb	r3, [r7, #7]
 80157c8:	460b      	mov	r3, r1
 80157ca:	71bb      	strb	r3, [r7, #6]
 80157cc:	4613      	mov	r3, r2
 80157ce:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80157d0:	79fb      	ldrb	r3, [r7, #7]
 80157d2:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80157d4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80157d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157dc:	4611      	mov	r1, r2
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fe fd6f 	bl	80142c2 <RegionCommonLimitTxPower>
 80157e4:	4603      	mov	r3, r0
 80157e6:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 80157e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80157ec:	2b04      	cmp	r3, #4
 80157ee:	d106      	bne.n	80157fe <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80157f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157f4:	2b02      	cmp	r3, #2
 80157f6:	bfb8      	it	lt
 80157f8:	2302      	movlt	r3, #2
 80157fa:	73fb      	strb	r3, [r7, #15]
 80157fc:	e00d      	b.n	801581a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80157fe:	2204      	movs	r2, #4
 8015800:	2100      	movs	r1, #0
 8015802:	6838      	ldr	r0, [r7, #0]
 8015804:	f7fe f8b6 	bl	8013974 <RegionCommonCountChannels>
 8015808:	4603      	mov	r3, r0
 801580a:	2b31      	cmp	r3, #49	; 0x31
 801580c:	d805      	bhi.n	801581a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015812:	2b05      	cmp	r3, #5
 8015814:	bfb8      	it	lt
 8015816:	2305      	movlt	r3, #5
 8015818:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801581a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801581e:	4618      	mov	r0, r3
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
	...

08015828 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015830:	4b18      	ldr	r3, [pc, #96]	; (8015894 <VerifyRfFreq+0x6c>)
 8015832:	6a1b      	ldr	r3, [r3, #32]
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	4798      	blx	r3
 8015838:	4603      	mov	r3, r0
 801583a:	f083 0301 	eor.w	r3, r3, #1
 801583e:	b2db      	uxtb	r3, r3
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <VerifyRfFreq+0x20>
    {
        return false;
 8015844:	2300      	movs	r3, #0
 8015846:	e021      	b.n	801588c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	4a13      	ldr	r2, [pc, #76]	; (8015898 <VerifyRfFreq+0x70>)
 801584c:	4293      	cmp	r3, r2
 801584e:	d910      	bls.n	8015872 <VerifyRfFreq+0x4a>
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	4a12      	ldr	r2, [pc, #72]	; (801589c <VerifyRfFreq+0x74>)
 8015854:	4293      	cmp	r3, r2
 8015856:	d80c      	bhi.n	8015872 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8015858:	687a      	ldr	r2, [r7, #4]
 801585a:	4b11      	ldr	r3, [pc, #68]	; (80158a0 <VerifyRfFreq+0x78>)
 801585c:	4413      	add	r3, r2
 801585e:	4a11      	ldr	r2, [pc, #68]	; (80158a4 <VerifyRfFreq+0x7c>)
 8015860:	fba2 1203 	umull	r1, r2, r2, r3
 8015864:	0c92      	lsrs	r2, r2, #18
 8015866:	4910      	ldr	r1, [pc, #64]	; (80158a8 <VerifyRfFreq+0x80>)
 8015868:	fb01 f202 	mul.w	r2, r1, r2
 801586c:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801586e:	2a00      	cmp	r2, #0
 8015870:	d001      	beq.n	8015876 <VerifyRfFreq+0x4e>
    {
        return false;
 8015872:	2300      	movs	r3, #0
 8015874:	e00a      	b.n	801588c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	4a0c      	ldr	r2, [pc, #48]	; (80158ac <VerifyRfFreq+0x84>)
 801587a:	4293      	cmp	r3, r2
 801587c:	d903      	bls.n	8015886 <VerifyRfFreq+0x5e>
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	4a06      	ldr	r2, [pc, #24]	; (801589c <VerifyRfFreq+0x74>)
 8015882:	4293      	cmp	r3, r2
 8015884:	d901      	bls.n	801588a <VerifyRfFreq+0x62>
    {
        return false;
 8015886:	2300      	movs	r3, #0
 8015888:	e000      	b.n	801588c <VerifyRfFreq+0x64>
    }
    return true;
 801588a:	2301      	movs	r3, #1
}
 801588c:	4618      	mov	r0, r3
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}
 8015894:	0801c4cc 	.word	0x0801c4cc
 8015898:	3708709f 	.word	0x3708709f
 801589c:	374886e0 	.word	0x374886e0
 80158a0:	c8f78f60 	.word	0xc8f78f60
 80158a4:	6fd91d85 	.word	0x6fd91d85
 80158a8:	000927c0 	.word	0x000927c0
 80158ac:	35c8015f 	.word	0x35c8015f

080158b0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80158b0:	b590      	push	{r4, r7, lr}
 80158b2:	b089      	sub	sp, #36	; 0x24
 80158b4:	af04      	add	r7, sp, #16
 80158b6:	4603      	mov	r3, r0
 80158b8:	460a      	mov	r2, r1
 80158ba:	71fb      	strb	r3, [r7, #7]
 80158bc:	4613      	mov	r3, r2
 80158be:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80158c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158c4:	4a0f      	ldr	r2, [pc, #60]	; (8015904 <GetTimeOnAir+0x54>)
 80158c6:	5cd3      	ldrb	r3, [r2, r3]
 80158c8:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80158ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158ce:	490e      	ldr	r1, [pc, #56]	; (8015908 <GetTimeOnAir+0x58>)
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7fe fd0b 	bl	80142ec <RegionCommonGetBandwidth>
 80158d6:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80158d8:	4b0c      	ldr	r3, [pc, #48]	; (801590c <GetTimeOnAir+0x5c>)
 80158da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80158dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80158e0:	88bb      	ldrh	r3, [r7, #4]
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	2101      	movs	r1, #1
 80158e6:	9103      	str	r1, [sp, #12]
 80158e8:	9302      	str	r3, [sp, #8]
 80158ea:	2300      	movs	r3, #0
 80158ec:	9301      	str	r3, [sp, #4]
 80158ee:	2308      	movs	r3, #8
 80158f0:	9300      	str	r3, [sp, #0]
 80158f2:	2301      	movs	r3, #1
 80158f4:	68b9      	ldr	r1, [r7, #8]
 80158f6:	2001      	movs	r0, #1
 80158f8:	47a0      	blx	r4
 80158fa:	4603      	mov	r3, r0
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3714      	adds	r7, #20
 8015900:	46bd      	mov	sp, r7
 8015902:	bd90      	pop	{r4, r7, pc}
 8015904:	0801c448 	.word	0x0801c448
 8015908:	0801c458 	.word	0x0801c458
 801590c:	0801c4cc 	.word	0x0801c4cc

08015910 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b088      	sub	sp, #32
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015918:	2300      	movs	r3, #0
 801591a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	3b01      	subs	r3, #1
 8015922:	2b38      	cmp	r3, #56	; 0x38
 8015924:	f200 813c 	bhi.w	8015ba0 <RegionUS915GetPhyParam+0x290>
 8015928:	a201      	add	r2, pc, #4	; (adr r2, 8015930 <RegionUS915GetPhyParam+0x20>)
 801592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801592e:	bf00      	nop
 8015930:	08015a15 	.word	0x08015a15
 8015934:	08015a1b 	.word	0x08015a1b
 8015938:	08015ba1 	.word	0x08015ba1
 801593c:	08015ba1 	.word	0x08015ba1
 8015940:	08015ba1 	.word	0x08015ba1
 8015944:	08015a21 	.word	0x08015a21
 8015948:	08015ba1 	.word	0x08015ba1
 801594c:	08015a5b 	.word	0x08015a5b
 8015950:	08015ba1 	.word	0x08015ba1
 8015954:	08015a61 	.word	0x08015a61
 8015958:	08015a67 	.word	0x08015a67
 801595c:	08015a6d 	.word	0x08015a6d
 8015960:	08015a73 	.word	0x08015a73
 8015964:	08015a83 	.word	0x08015a83
 8015968:	08015a93 	.word	0x08015a93
 801596c:	08015a99 	.word	0x08015a99
 8015970:	08015aa1 	.word	0x08015aa1
 8015974:	08015aa9 	.word	0x08015aa9
 8015978:	08015ab1 	.word	0x08015ab1
 801597c:	08015ab9 	.word	0x08015ab9
 8015980:	08015ac1 	.word	0x08015ac1
 8015984:	08015ac9 	.word	0x08015ac9
 8015988:	08015add 	.word	0x08015add
 801598c:	08015ae3 	.word	0x08015ae3
 8015990:	08015ae9 	.word	0x08015ae9
 8015994:	08015aef 	.word	0x08015aef
 8015998:	08015afb 	.word	0x08015afb
 801599c:	08015b07 	.word	0x08015b07
 80159a0:	08015b0d 	.word	0x08015b0d
 80159a4:	08015b15 	.word	0x08015b15
 80159a8:	08015b1b 	.word	0x08015b1b
 80159ac:	08015b21 	.word	0x08015b21
 80159b0:	08015b27 	.word	0x08015b27
 80159b4:	08015a27 	.word	0x08015a27
 80159b8:	08015ba1 	.word	0x08015ba1
 80159bc:	08015ba1 	.word	0x08015ba1
 80159c0:	08015ba1 	.word	0x08015ba1
 80159c4:	08015ba1 	.word	0x08015ba1
 80159c8:	08015ba1 	.word	0x08015ba1
 80159cc:	08015ba1 	.word	0x08015ba1
 80159d0:	08015ba1 	.word	0x08015ba1
 80159d4:	08015ba1 	.word	0x08015ba1
 80159d8:	08015ba1 	.word	0x08015ba1
 80159dc:	08015ba1 	.word	0x08015ba1
 80159e0:	08015ba1 	.word	0x08015ba1
 80159e4:	08015ba1 	.word	0x08015ba1
 80159e8:	08015ba1 	.word	0x08015ba1
 80159ec:	08015b2f 	.word	0x08015b2f
 80159f0:	08015b43 	.word	0x08015b43
 80159f4:	08015b51 	.word	0x08015b51
 80159f8:	08015b57 	.word	0x08015b57
 80159fc:	08015ba1 	.word	0x08015ba1
 8015a00:	08015b5d 	.word	0x08015b5d
 8015a04:	08015b71 	.word	0x08015b71
 8015a08:	08015b77 	.word	0x08015b77
 8015a0c:	08015b7d 	.word	0x08015b7d
 8015a10:	08015b8d 	.word	0x08015b8d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8015a14:	2308      	movs	r3, #8
 8015a16:	61bb      	str	r3, [r7, #24]
            break;
 8015a18:	e0c3      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	61bb      	str	r3, [r7, #24]
            break;
 8015a1e:	e0c0      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8015a20:	2300      	movs	r3, #0
 8015a22:	61bb      	str	r3, [r7, #24]
            break;
 8015a24:	e0bd      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015a2c:	733b      	strb	r3, [r7, #12]
 8015a2e:	2304      	movs	r3, #4
 8015a30:	737b      	strb	r3, [r7, #13]
 8015a32:	2300      	movs	r3, #0
 8015a34:	73bb      	strb	r3, [r7, #14]
 8015a36:	2348      	movs	r3, #72	; 0x48
 8015a38:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015a3a:	4b5e      	ldr	r3, [pc, #376]	; (8015bb4 <RegionUS915GetPhyParam+0x2a4>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015a42:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015a44:	4b5b      	ldr	r3, [pc, #364]	; (8015bb4 <RegionUS915GetPhyParam+0x2a4>)
 8015a46:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015a48:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015a4a:	f107 030c 	add.w	r3, r7, #12
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7fe fbf9 	bl	8014246 <RegionCommonGetNextLowerTxDr>
 8015a54:	4603      	mov	r3, r0
 8015a56:	61bb      	str	r3, [r7, #24]
            break;
 8015a58:	e0a3      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	61bb      	str	r3, [r7, #24]
            break;
 8015a5e:	e0a0      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8015a60:	2300      	movs	r3, #0
 8015a62:	61bb      	str	r3, [r7, #24]
            break;
 8015a64:	e09d      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015a66:	2340      	movs	r3, #64	; 0x40
 8015a68:	61bb      	str	r3, [r7, #24]
            break;
 8015a6a:	e09a      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015a6c:	2320      	movs	r3, #32
 8015a6e:	61bb      	str	r3, [r7, #24]
            break;
 8015a70:	e097      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a78:	461a      	mov	r2, r3
 8015a7a:	4b4f      	ldr	r3, [pc, #316]	; (8015bb8 <RegionUS915GetPhyParam+0x2a8>)
 8015a7c:	5c9b      	ldrb	r3, [r3, r2]
 8015a7e:	61bb      	str	r3, [r7, #24]
            break;
 8015a80:	e08f      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a88:	461a      	mov	r2, r3
 8015a8a:	4b4c      	ldr	r3, [pc, #304]	; (8015bbc <RegionUS915GetPhyParam+0x2ac>)
 8015a8c:	5c9b      	ldrb	r3, [r3, r2]
 8015a8e:	61bb      	str	r3, [r7, #24]
            break;
 8015a90:	e087      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8015a92:	2300      	movs	r3, #0
 8015a94:	61bb      	str	r3, [r7, #24]
            break;
 8015a96:	e084      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8015a98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015a9c:	61bb      	str	r3, [r7, #24]
            break;
 8015a9e:	e080      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015aa4:	61bb      	str	r3, [r7, #24]
            break;
 8015aa6:	e07c      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015aa8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015aac:	61bb      	str	r3, [r7, #24]
            break;
 8015aae:	e078      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015ab0:	f241 3388 	movw	r3, #5000	; 0x1388
 8015ab4:	61bb      	str	r3, [r7, #24]
            break;
 8015ab6:	e074      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015ab8:	f241 7370 	movw	r3, #6000	; 0x1770
 8015abc:	61bb      	str	r3, [r7, #24]
            break;
 8015abe:	e070      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8015ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015ac4:	61bb      	str	r3, [r7, #24]
            break;
 8015ac6:	e06c      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015acc:	483c      	ldr	r0, [pc, #240]	; (8015bc0 <RegionUS915GetPhyParam+0x2b0>)
 8015ace:	f001 f915 	bl	8016cfc <randr>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015ad8:	61bb      	str	r3, [r7, #24]
            break;
 8015ada:	e062      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015adc:	2300      	movs	r3, #0
 8015ade:	61bb      	str	r3, [r7, #24]
            break;
 8015ae0:	e05f      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8015ae2:	4b38      	ldr	r3, [pc, #224]	; (8015bc4 <RegionUS915GetPhyParam+0x2b4>)
 8015ae4:	61bb      	str	r3, [r7, #24]
            break;
 8015ae6:	e05c      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8015ae8:	2308      	movs	r3, #8
 8015aea:	61bb      	str	r3, [r7, #24]
            break;
 8015aec:	e059      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015aee:	4b31      	ldr	r3, [pc, #196]	; (8015bb4 <RegionUS915GetPhyParam+0x2a4>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8015af6:	61bb      	str	r3, [r7, #24]
            break;
 8015af8:	e053      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015afa:	4b2e      	ldr	r3, [pc, #184]	; (8015bb4 <RegionUS915GetPhyParam+0x2a4>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015b02:	61bb      	str	r3, [r7, #24]
            break;
 8015b04:	e04d      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8015b06:	2348      	movs	r3, #72	; 0x48
 8015b08:	61bb      	str	r3, [r7, #24]
            break;
 8015b0a:	e04a      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015b0c:	4b29      	ldr	r3, [pc, #164]	; (8015bb4 <RegionUS915GetPhyParam+0x2a4>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	61bb      	str	r3, [r7, #24]
            break;
 8015b12:	e046      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8015b14:	2300      	movs	r3, #0
 8015b16:	61bb      	str	r3, [r7, #24]
            break;
 8015b18:	e043      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	61bb      	str	r3, [r7, #24]
            break;
 8015b1e:	e040      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8015b20:	4b29      	ldr	r3, [pc, #164]	; (8015bc8 <RegionUS915GetPhyParam+0x2b8>)
 8015b22:	61bb      	str	r3, [r7, #24]
            break;
 8015b24:	e03d      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8015b26:	f04f 0300 	mov.w	r3, #0
 8015b2a:	61bb      	str	r3, [r7, #24]
            break;
 8015b2c:	e039      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	791b      	ldrb	r3, [r3, #4]
 8015b32:	4a26      	ldr	r2, [pc, #152]	; (8015bcc <RegionUS915GetPhyParam+0x2bc>)
 8015b34:	4923      	ldr	r1, [pc, #140]	; (8015bc4 <RegionUS915GetPhyParam+0x2b4>)
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7fd fcf8 	bl	801352c <RegionBaseUSCalcDownlinkFrequency>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8015b40:	e02f      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8015b42:	2317      	movs	r3, #23
 8015b44:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8015b46:	2305      	movs	r3, #5
 8015b48:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8015b4a:	2303      	movs	r3, #3
 8015b4c:	76bb      	strb	r3, [r7, #26]
            break;
 8015b4e:	e028      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8015b50:	2308      	movs	r3, #8
 8015b52:	61bb      	str	r3, [r7, #24]
            break;
 8015b54:	e025      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8015b56:	2308      	movs	r3, #8
 8015b58:	61bb      	str	r3, [r7, #24]
            break;
 8015b5a:	e022      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	791b      	ldrb	r3, [r3, #4]
 8015b60:	4a1a      	ldr	r2, [pc, #104]	; (8015bcc <RegionUS915GetPhyParam+0x2bc>)
 8015b62:	4918      	ldr	r1, [pc, #96]	; (8015bc4 <RegionUS915GetPhyParam+0x2b4>)
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fd fce1 	bl	801352c <RegionBaseUSCalcDownlinkFrequency>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8015b6e:	e018      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8015b70:	2308      	movs	r3, #8
 8015b72:	61bb      	str	r3, [r7, #24]
            break;
 8015b74:	e015      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8015b76:	2308      	movs	r3, #8
 8015b78:	61bb      	str	r3, [r7, #24]
            break;
 8015b7a:	e012      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b82:	461a      	mov	r2, r3
 8015b84:	4b12      	ldr	r3, [pc, #72]	; (8015bd0 <RegionUS915GetPhyParam+0x2c0>)
 8015b86:	5c9b      	ldrb	r3, [r3, r2]
 8015b88:	61bb      	str	r3, [r7, #24]
            break;
 8015b8a:	e00a      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b92:	4910      	ldr	r1, [pc, #64]	; (8015bd4 <RegionUS915GetPhyParam+0x2c4>)
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7fe fba9 	bl	80142ec <RegionCommonGetBandwidth>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	61bb      	str	r3, [r7, #24]
            break;
 8015b9e:	e000      	b.n	8015ba2 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8015ba0:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8015ba2:	69bb      	ldr	r3, [r7, #24]
 8015ba4:	61fb      	str	r3, [r7, #28]
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	69fb      	ldr	r3, [r7, #28]
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3720      	adds	r7, #32
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	200010a0 	.word	0x200010a0
 8015bb8:	0801c4ac 	.word	0x0801c4ac
 8015bbc:	0801c4bc 	.word	0x0801c4bc
 8015bc0:	fffffc18 	.word	0xfffffc18
 8015bc4:	370870a0 	.word	0x370870a0
 8015bc8:	4200999a 	.word	0x4200999a
 8015bcc:	000927c0 	.word	0x000927c0
 8015bd0:	0801c448 	.word	0x0801c448
 8015bd4:	0801c458 	.word	0x0801c458

08015bd8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015bd8:	b590      	push	{r4, r7, lr}
 8015bda:	b085      	sub	sp, #20
 8015bdc:	af02      	add	r7, sp, #8
 8015bde:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015be0:	4b11      	ldr	r3, [pc, #68]	; (8015c28 <RegionUS915SetBandTxDone+0x50>)
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	4b11      	ldr	r3, [pc, #68]	; (8015c2c <RegionUS915SetBandTxDone+0x54>)
 8015be6:	6819      	ldr	r1, [r3, #0]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	4618      	mov	r0, r3
 8015bee:	4603      	mov	r3, r0
 8015bf0:	005b      	lsls	r3, r3, #1
 8015bf2:	4403      	add	r3, r0
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	440b      	add	r3, r1
 8015bf8:	3309      	adds	r3, #9
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	460b      	mov	r3, r1
 8015c00:	005b      	lsls	r3, r3, #1
 8015c02:	440b      	add	r3, r1
 8015c04:	00db      	lsls	r3, r3, #3
 8015c06:	18d0      	adds	r0, r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6899      	ldr	r1, [r3, #8]
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	785c      	ldrb	r4, [r3, #1]
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	691a      	ldr	r2, [r3, #16]
 8015c14:	9200      	str	r2, [sp, #0]
 8015c16:	68db      	ldr	r3, [r3, #12]
 8015c18:	4622      	mov	r2, r4
 8015c1a:	f7fd fefd 	bl	8013a18 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8015c1e:	bf00      	nop
 8015c20:	370c      	adds	r7, #12
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd90      	pop	{r4, r7, pc}
 8015c26:	bf00      	nop
 8015c28:	2000109c 	.word	0x2000109c
 8015c2c:	200010a0 	.word	0x200010a0

08015c30 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b08a      	sub	sp, #40	; 0x28
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8015c38:	2301      	movs	r3, #1
 8015c3a:	81bb      	strh	r3, [r7, #12]
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	73bb      	strb	r3, [r7, #14]
 8015c40:	2300      	movs	r3, #0
 8015c42:	613b      	str	r3, [r7, #16]
 8015c44:	2300      	movs	r3, #0
 8015c46:	617b      	str	r3, [r7, #20]
 8015c48:	2300      	movs	r3, #0
 8015c4a:	61bb      	str	r3, [r7, #24]
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	61fb      	str	r3, [r7, #28]
 8015c50:	2300      	movs	r3, #0
 8015c52:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	7a1b      	ldrb	r3, [r3, #8]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d007      	beq.n	8015c6e <RegionUS915InitDefaults+0x3e>
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f2c0 8102 	blt.w	8015e68 <RegionUS915InitDefaults+0x238>
 8015c64:	3b01      	subs	r3, #1
 8015c66:	2b01      	cmp	r3, #1
 8015c68:	f200 80fe 	bhi.w	8015e68 <RegionUS915InitDefaults+0x238>
 8015c6c:	e0ca      	b.n	8015e04 <RegionUS915InitDefaults+0x1d4>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	f000 80fa 	beq.w	8015e6c <RegionUS915InitDefaults+0x23c>
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	f000 80f5 	beq.w	8015e6c <RegionUS915InitDefaults+0x23c>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	4a7b      	ldr	r2, [pc, #492]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015c88:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	685b      	ldr	r3, [r3, #4]
 8015c8e:	4a7a      	ldr	r2, [pc, #488]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015c90:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8015c92:	4b78      	ldr	r3, [pc, #480]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2200      	movs	r2, #0
 8015c98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8015c9c:	4b75      	ldr	r3, [pc, #468]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8015ca6:	4b73      	ldr	r3, [pc, #460]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	4618      	mov	r0, r3
 8015cac:	f107 030c 	add.w	r3, r7, #12
 8015cb0:	2218      	movs	r2, #24
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	f001 f839 	bl	8016d2a <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8015cb8:	2300      	movs	r3, #0
 8015cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cbe:	e02e      	b.n	8015d1e <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8015cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cc4:	4a6d      	ldr	r2, [pc, #436]	; (8015e7c <RegionUS915InitDefaults+0x24c>)
 8015cc6:	fb02 f203 	mul.w	r2, r2, r3
 8015cca:	4b6d      	ldr	r3, [pc, #436]	; (8015e80 <RegionUS915InitDefaults+0x250>)
 8015ccc:	4413      	add	r3, r2
 8015cce:	4a6a      	ldr	r2, [pc, #424]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015cd0:	6811      	ldr	r1, [r2, #0]
 8015cd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	4613      	mov	r3, r2
 8015cda:	005b      	lsls	r3, r3, #1
 8015cdc:	4413      	add	r3, r2
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	440b      	add	r3, r1
 8015ce2:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8015ce4:	4b64      	ldr	r3, [pc, #400]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015ce6:	6819      	ldr	r1, [r3, #0]
 8015ce8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015cec:	4613      	mov	r3, r2
 8015cee:	005b      	lsls	r3, r3, #1
 8015cf0:	4413      	add	r3, r2
 8015cf2:	009b      	lsls	r3, r3, #2
 8015cf4:	440b      	add	r3, r1
 8015cf6:	3308      	adds	r3, #8
 8015cf8:	2230      	movs	r2, #48	; 0x30
 8015cfa:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8015cfc:	4b5e      	ldr	r3, [pc, #376]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015cfe:	6819      	ldr	r1, [r3, #0]
 8015d00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015d04:	4613      	mov	r3, r2
 8015d06:	005b      	lsls	r3, r3, #1
 8015d08:	4413      	add	r3, r2
 8015d0a:	009b      	lsls	r3, r3, #2
 8015d0c:	440b      	add	r3, r1
 8015d0e:	3309      	adds	r3, #9
 8015d10:	2200      	movs	r2, #0
 8015d12:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8015d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d18:	3301      	adds	r3, #1
 8015d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d22:	2b3f      	cmp	r3, #63	; 0x3f
 8015d24:	d9cc      	bls.n	8015cc0 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8015d26:	2340      	movs	r3, #64	; 0x40
 8015d28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015d2c:	e02f      	b.n	8015d8e <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8015d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d32:	3b40      	subs	r3, #64	; 0x40
 8015d34:	4a53      	ldr	r2, [pc, #332]	; (8015e84 <RegionUS915InitDefaults+0x254>)
 8015d36:	fb02 f203 	mul.w	r2, r2, r3
 8015d3a:	4b53      	ldr	r3, [pc, #332]	; (8015e88 <RegionUS915InitDefaults+0x258>)
 8015d3c:	4413      	add	r3, r2
 8015d3e:	4a4e      	ldr	r2, [pc, #312]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015d40:	6811      	ldr	r1, [r2, #0]
 8015d42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015d46:	4618      	mov	r0, r3
 8015d48:	4613      	mov	r3, r2
 8015d4a:	005b      	lsls	r3, r3, #1
 8015d4c:	4413      	add	r3, r2
 8015d4e:	009b      	lsls	r3, r3, #2
 8015d50:	440b      	add	r3, r1
 8015d52:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8015d54:	4b48      	ldr	r3, [pc, #288]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015d56:	6819      	ldr	r1, [r3, #0]
 8015d58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015d5c:	4613      	mov	r3, r2
 8015d5e:	005b      	lsls	r3, r3, #1
 8015d60:	4413      	add	r3, r2
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	440b      	add	r3, r1
 8015d66:	3308      	adds	r3, #8
 8015d68:	2244      	movs	r2, #68	; 0x44
 8015d6a:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8015d6c:	4b42      	ldr	r3, [pc, #264]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015d6e:	6819      	ldr	r1, [r3, #0]
 8015d70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015d74:	4613      	mov	r3, r2
 8015d76:	005b      	lsls	r3, r3, #1
 8015d78:	4413      	add	r3, r2
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	440b      	add	r3, r1
 8015d7e:	3309      	adds	r3, #9
 8015d80:	2200      	movs	r2, #0
 8015d82:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8015d84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d88:	3301      	adds	r3, #1
 8015d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d92:	2b47      	cmp	r3, #71	; 0x47
 8015d94:	d9cb      	bls.n	8015d2e <RegionUS915InitDefaults+0xfe>
            }

            // Default ChannelsMask
            /* ST_WORKAROUND_BEGIN: Hybrid mode */
#if ( HYBRID_ENABLED == 1 )
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0x00FF;
 8015d96:	4b38      	ldr	r3, [pc, #224]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	22ff      	movs	r2, #255	; 0xff
 8015d9c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0x0000;
 8015da0:	4b35      	ldr	r3, [pc, #212]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	2200      	movs	r2, #0
 8015da6:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
 8015daa:	4b33      	ldr	r3, [pc, #204]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	2200      	movs	r2, #0
 8015db0:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
 8015db4:	4b30      	ldr	r3, [pc, #192]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	2200      	movs	r2, #0
 8015dba:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
 8015dbe:	4b2e      	ldr	r3, [pc, #184]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2201      	movs	r2, #1
 8015dc4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8015dc8:	4b2b      	ldr	r3, [pc, #172]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015dd2:	4b29      	ldr	r3, [pc, #164]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8015dda:	4b27      	ldr	r3, [pc, #156]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015de2:	2206      	movs	r2, #6
 8015de4:	4619      	mov	r1, r3
 8015de6:	f7fd fdf1 	bl	80139cc <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8015dea:	4b22      	ldr	r3, [pc, #136]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8015df2:	4b21      	ldr	r3, [pc, #132]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8015dfa:	2206      	movs	r2, #6
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	f7fd fde5 	bl	80139cc <RegionCommonChanMaskCopy>
            break;
 8015e02:	e034      	b.n	8015e6e <RegionUS915InitDefaults+0x23e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015e04:	4b1c      	ldr	r3, [pc, #112]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8015e0c:	4b1a      	ldr	r3, [pc, #104]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015e14:	2206      	movs	r2, #6
 8015e16:	4619      	mov	r1, r3
 8015e18:	f7fd fdd8 	bl	80139cc <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015e22:	e01c      	b.n	8015e5e <RegionUS915InitDefaults+0x22e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8015e24:	4b13      	ldr	r3, [pc, #76]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8015e2c:	3248      	adds	r2, #72	; 0x48
 8015e2e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8015e32:	4b11      	ldr	r3, [pc, #68]	; (8015e78 <RegionUS915InitDefaults+0x248>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8015e3a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8015e3e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8015e42:	4b0c      	ldr	r3, [pc, #48]	; (8015e74 <RegionUS915InitDefaults+0x244>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8015e4a:	4001      	ands	r1, r0
 8015e4c:	b289      	uxth	r1, r1
 8015e4e:	3248      	adds	r2, #72	; 0x48
 8015e50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8015e54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8015e58:	3301      	adds	r3, #1
 8015e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015e5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8015e62:	2b05      	cmp	r3, #5
 8015e64:	d9de      	bls.n	8015e24 <RegionUS915InitDefaults+0x1f4>
            }
            break;
 8015e66:	e002      	b.n	8015e6e <RegionUS915InitDefaults+0x23e>
        }
        default:
        {
            break;
 8015e68:	bf00      	nop
 8015e6a:	e000      	b.n	8015e6e <RegionUS915InitDefaults+0x23e>
                return;
 8015e6c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8015e6e:	3728      	adds	r7, #40	; 0x28
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	2000109c 	.word	0x2000109c
 8015e78:	200010a0 	.word	0x200010a0
 8015e7c:	00030d40 	.word	0x00030d40
 8015e80:	35c80160 	.word	0x35c80160
 8015e84:	00186a00 	.word	0x00186a00
 8015e88:	35d2afc0 	.word	0x35d2afc0

08015e8c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b082      	sub	sp, #8
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	460b      	mov	r3, r1
 8015e96:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8015e98:	78fb      	ldrb	r3, [r7, #3]
 8015e9a:	2b0f      	cmp	r3, #15
 8015e9c:	d858      	bhi.n	8015f50 <RegionUS915Verify+0xc4>
 8015e9e:	a201      	add	r2, pc, #4	; (adr r2, 8015ea4 <RegionUS915Verify+0x18>)
 8015ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ea4:	08015ee5 	.word	0x08015ee5
 8015ea8:	08015f51 	.word	0x08015f51
 8015eac:	08015f51 	.word	0x08015f51
 8015eb0:	08015f51 	.word	0x08015f51
 8015eb4:	08015f51 	.word	0x08015f51
 8015eb8:	08015ef3 	.word	0x08015ef3
 8015ebc:	08015ef3 	.word	0x08015ef3
 8015ec0:	08015f11 	.word	0x08015f11
 8015ec4:	08015f51 	.word	0x08015f51
 8015ec8:	08015f2f 	.word	0x08015f2f
 8015ecc:	08015f2f 	.word	0x08015f2f
 8015ed0:	08015f51 	.word	0x08015f51
 8015ed4:	08015f51 	.word	0x08015f51
 8015ed8:	08015f51 	.word	0x08015f51
 8015edc:	08015f51 	.word	0x08015f51
 8015ee0:	08015f4d 	.word	0x08015f4d
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7ff fc9d 	bl	8015828 <VerifyRfFreq>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	e02f      	b.n	8015f52 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8015ef8:	2204      	movs	r2, #4
 8015efa:	2100      	movs	r1, #0
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fd fce8 	bl	80138d2 <RegionCommonValueInRange>
 8015f02:	4603      	mov	r3, r0
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	bf14      	ite	ne
 8015f08:	2301      	movne	r3, #1
 8015f0a:	2300      	moveq	r3, #0
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	e020      	b.n	8015f52 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f993 3000 	ldrsb.w	r3, [r3]
 8015f16:	220d      	movs	r2, #13
 8015f18:	2108      	movs	r1, #8
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7fd fcd9 	bl	80138d2 <RegionCommonValueInRange>
 8015f20:	4603      	mov	r3, r0
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	bf14      	ite	ne
 8015f26:	2301      	movne	r3, #1
 8015f28:	2300      	moveq	r3, #0
 8015f2a:	b2db      	uxtb	r3, r3
 8015f2c:	e011      	b.n	8015f52 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f993 3000 	ldrsb.w	r3, [r3]
 8015f34:	220e      	movs	r2, #14
 8015f36:	2100      	movs	r1, #0
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f7fd fcca 	bl	80138d2 <RegionCommonValueInRange>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	bf14      	ite	ne
 8015f44:	2301      	movne	r3, #1
 8015f46:	2300      	moveq	r3, #0
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	e002      	b.n	8015f52 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e000      	b.n	8015f52 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 8015f50:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop

08015f5c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b085      	sub	sp, #20
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	791b      	ldrb	r3, [r3, #4]
 8015f68:	2b10      	cmp	r3, #16
 8015f6a:	d162      	bne.n	8016032 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	330f      	adds	r3, #15
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d15e      	bne.n	8016036 <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8015f78:	2300      	movs	r3, #0
 8015f7a:	73fb      	strb	r3, [r7, #15]
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	73bb      	strb	r3, [r7, #14]
 8015f80:	e053      	b.n	801602a <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681a      	ldr	r2, [r3, #0]
 8015f86:	7bbb      	ldrb	r3, [r7, #14]
 8015f88:	4413      	add	r3, r2
 8015f8a:	7819      	ldrb	r1, [r3, #0]
 8015f8c:	4b2c      	ldr	r3, [pc, #176]	; (8016040 <RegionUS915ApplyCFList+0xe4>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	7bfa      	ldrb	r2, [r7, #15]
 8015f92:	b289      	uxth	r1, r1
 8015f94:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8015f98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8015f9c:	4b28      	ldr	r3, [pc, #160]	; (8016040 <RegionUS915ApplyCFList+0xe4>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	7bfa      	ldrb	r2, [r7, #15]
 8015fa2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8015fa6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	7bbb      	ldrb	r3, [r7, #14]
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	4413      	add	r3, r2
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	021b      	lsls	r3, r3, #8
 8015fba:	b299      	uxth	r1, r3
 8015fbc:	4b20      	ldr	r3, [pc, #128]	; (8016040 <RegionUS915ApplyCFList+0xe4>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	7bfa      	ldrb	r2, [r7, #15]
 8015fc2:	4301      	orrs	r1, r0
 8015fc4:	b289      	uxth	r1, r1
 8015fc6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8015fca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8015fce:	7bfb      	ldrb	r3, [r7, #15]
 8015fd0:	2b04      	cmp	r3, #4
 8015fd2:	d10f      	bne.n	8015ff4 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8015fd4:	4b1a      	ldr	r3, [pc, #104]	; (8016040 <RegionUS915ApplyCFList+0xe4>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	7bfa      	ldrb	r2, [r7, #15]
 8015fda:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8015fde:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8015fe2:	4b17      	ldr	r3, [pc, #92]	; (8016040 <RegionUS915ApplyCFList+0xe4>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	7bfa      	ldrb	r2, [r7, #15]
 8015fe8:	b2c9      	uxtb	r1, r1
 8015fea:	b289      	uxth	r1, r1
 8015fec:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8015ff0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8015ff4:	4b13      	ldr	r3, [pc, #76]	; (8016044 <RegionUS915ApplyCFList+0xe8>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	7bfa      	ldrb	r2, [r7, #15]
 8015ffa:	3248      	adds	r2, #72	; 0x48
 8015ffc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016000:	4b0f      	ldr	r3, [pc, #60]	; (8016040 <RegionUS915ApplyCFList+0xe4>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	7bfa      	ldrb	r2, [r7, #15]
 8016006:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801600a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801600e:	4b0d      	ldr	r3, [pc, #52]	; (8016044 <RegionUS915ApplyCFList+0xe8>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	7bfa      	ldrb	r2, [r7, #15]
 8016014:	4001      	ands	r1, r0
 8016016:	b289      	uxth	r1, r1
 8016018:	3248      	adds	r2, #72	; 0x48
 801601a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801601e:	7bfb      	ldrb	r3, [r7, #15]
 8016020:	3301      	adds	r3, #1
 8016022:	73fb      	strb	r3, [r7, #15]
 8016024:	7bbb      	ldrb	r3, [r7, #14]
 8016026:	3302      	adds	r3, #2
 8016028:	73bb      	strb	r3, [r7, #14]
 801602a:	7bfb      	ldrb	r3, [r7, #15]
 801602c:	2b04      	cmp	r3, #4
 801602e:	d9a8      	bls.n	8015f82 <RegionUS915ApplyCFList+0x26>
 8016030:	e002      	b.n	8016038 <RegionUS915ApplyCFList+0xdc>
        return;
 8016032:	bf00      	nop
 8016034:	e000      	b.n	8016038 <RegionUS915ApplyCFList+0xdc>
        return;
 8016036:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8016038:	3714      	adds	r7, #20
 801603a:	46bd      	mov	sp, r7
 801603c:	bc80      	pop	{r7}
 801603e:	4770      	bx	lr
 8016040:	200010a0 	.word	0x200010a0
 8016044:	2000109c 	.word	0x2000109c

08016048 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2204      	movs	r2, #4
 8016056:	2100      	movs	r1, #0
 8016058:	4618      	mov	r0, r3
 801605a:	f7fd fc8b 	bl	8013974 <RegionCommonCountChannels>
 801605e:	4603      	mov	r3, r0
 8016060:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8016062:	7bbb      	ldrb	r3, [r7, #14]
 8016064:	2b01      	cmp	r3, #1
 8016066:	d804      	bhi.n	8016072 <RegionUS915ChanMaskSet+0x2a>
 8016068:	7bbb      	ldrb	r3, [r7, #14]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d001      	beq.n	8016072 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801606e:	2300      	movs	r3, #0
 8016070:	e04c      	b.n	801610c <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	791b      	ldrb	r3, [r3, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d002      	beq.n	8016080 <RegionUS915ChanMaskSet+0x38>
 801607a:	2b01      	cmp	r3, #1
 801607c:	d038      	beq.n	80160f0 <RegionUS915ChanMaskSet+0xa8>
 801607e:	e042      	b.n	8016106 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016080:	4b24      	ldr	r3, [pc, #144]	; (8016114 <RegionUS915ChanMaskSet+0xcc>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	2206      	movs	r2, #6
 801608e:	4619      	mov	r1, r3
 8016090:	f7fd fc9c 	bl	80139cc <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8016094:	4b1f      	ldr	r3, [pc, #124]	; (8016114 <RegionUS915ChanMaskSet+0xcc>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801609c:	4b1d      	ldr	r3, [pc, #116]	; (8016114 <RegionUS915ChanMaskSet+0xcc>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	b2d2      	uxtb	r2, r2
 80160a2:	b292      	uxth	r2, r2
 80160a4:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80160a8:	4b1a      	ldr	r3, [pc, #104]	; (8016114 <RegionUS915ChanMaskSet+0xcc>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2200      	movs	r2, #0
 80160ae:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80160b2:	2300      	movs	r3, #0
 80160b4:	73fb      	strb	r3, [r7, #15]
 80160b6:	e017      	b.n	80160e8 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80160b8:	4b17      	ldr	r3, [pc, #92]	; (8016118 <RegionUS915ChanMaskSet+0xd0>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	7bfa      	ldrb	r2, [r7, #15]
 80160be:	3248      	adds	r2, #72	; 0x48
 80160c0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80160c4:	4b13      	ldr	r3, [pc, #76]	; (8016114 <RegionUS915ChanMaskSet+0xcc>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	7bfa      	ldrb	r2, [r7, #15]
 80160ca:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80160ce:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80160d2:	4b11      	ldr	r3, [pc, #68]	; (8016118 <RegionUS915ChanMaskSet+0xd0>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	7bfa      	ldrb	r2, [r7, #15]
 80160d8:	4001      	ands	r1, r0
 80160da:	b289      	uxth	r1, r1
 80160dc:	3248      	adds	r2, #72	; 0x48
 80160de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80160e2:	7bfb      	ldrb	r3, [r7, #15]
 80160e4:	3301      	adds	r3, #1
 80160e6:	73fb      	strb	r3, [r7, #15]
 80160e8:	7bfb      	ldrb	r3, [r7, #15]
 80160ea:	2b05      	cmp	r3, #5
 80160ec:	d9e4      	bls.n	80160b8 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80160ee:	e00c      	b.n	801610a <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80160f0:	4b08      	ldr	r3, [pc, #32]	; (8016114 <RegionUS915ChanMaskSet+0xcc>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	2206      	movs	r2, #6
 80160fe:	4619      	mov	r1, r3
 8016100:	f7fd fc64 	bl	80139cc <RegionCommonChanMaskCopy>
            break;
 8016104:	e001      	b.n	801610a <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8016106:	2300      	movs	r3, #0
 8016108:	e000      	b.n	801610c <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 801610a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801610c:	4618      	mov	r0, r3
 801610e:	3710      	adds	r7, #16
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}
 8016114:	200010a0 	.word	0x200010a0
 8016118:	2000109c 	.word	0x2000109c

0801611c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b088      	sub	sp, #32
 8016120:	af02      	add	r7, sp, #8
 8016122:	60ba      	str	r2, [r7, #8]
 8016124:	607b      	str	r3, [r7, #4]
 8016126:	4603      	mov	r3, r0
 8016128:	73fb      	strb	r3, [r7, #15]
 801612a:	460b      	mov	r3, r1
 801612c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801612e:	2300      	movs	r3, #0
 8016130:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8016132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016136:	2b0d      	cmp	r3, #13
 8016138:	bfa8      	it	ge
 801613a:	230d      	movge	r3, #13
 801613c:	b25a      	sxtb	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016148:	4916      	ldr	r1, [pc, #88]	; (80161a4 <RegionUS915ComputeRxWindowParameters+0x88>)
 801614a:	4618      	mov	r0, r3
 801614c:	f7fe f8ce 	bl	80142ec <RegionCommonGetBandwidth>
 8016150:	4603      	mov	r3, r0
 8016152:	b2da      	uxtb	r2, r3
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801615e:	461a      	mov	r2, r3
 8016160:	4b11      	ldr	r3, [pc, #68]	; (80161a8 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8016162:	5c9a      	ldrb	r2, [r3, r2]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801616a:	4619      	mov	r1, r3
 801616c:	4b0d      	ldr	r3, [pc, #52]	; (80161a4 <RegionUS915ComputeRxWindowParameters+0x88>)
 801616e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016172:	4619      	mov	r1, r3
 8016174:	4610      	mov	r0, r2
 8016176:	f7fd fe37 	bl	8013de8 <RegionCommonComputeSymbolTimeLoRa>
 801617a:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801617c:	4b0b      	ldr	r3, [pc, #44]	; (80161ac <RegionUS915ComputeRxWindowParameters+0x90>)
 801617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016180:	4798      	blx	r3
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	3308      	adds	r3, #8
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	320c      	adds	r2, #12
 801618a:	7bb9      	ldrb	r1, [r7, #14]
 801618c:	9201      	str	r2, [sp, #4]
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	4603      	mov	r3, r0
 8016192:	68ba      	ldr	r2, [r7, #8]
 8016194:	6978      	ldr	r0, [r7, #20]
 8016196:	f7fd fe4d 	bl	8013e34 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801619a:	bf00      	nop
 801619c:	3718      	adds	r7, #24
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	0801c458 	.word	0x0801c458
 80161a8:	0801c448 	.word	0x0801c448
 80161ac:	0801c4cc 	.word	0x0801c4cc

080161b0 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80161b0:	b590      	push	{r4, r7, lr}
 80161b2:	b091      	sub	sp, #68	; 0x44
 80161b4:	af0a      	add	r7, sp, #40	; 0x28
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	785b      	ldrb	r3, [r3, #1]
 80161be:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80161c0:	2300      	movs	r3, #0
 80161c2:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80161c4:	2300      	movs	r3, #0
 80161c6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80161ce:	4b34      	ldr	r3, [pc, #208]	; (80162a0 <RegionUS915RxConfig+0xf0>)
 80161d0:	685b      	ldr	r3, [r3, #4]
 80161d2:	4798      	blx	r3
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d001      	beq.n	80161de <RegionUS915RxConfig+0x2e>
    {
        return false;
 80161da:	2300      	movs	r3, #0
 80161dc:	e05c      	b.n	8016298 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	7cdb      	ldrb	r3, [r3, #19]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d109      	bne.n	80161fa <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	f003 0307 	and.w	r3, r3, #7
 80161ee:	4a2d      	ldr	r2, [pc, #180]	; (80162a4 <RegionUS915RxConfig+0xf4>)
 80161f0:	fb02 f203 	mul.w	r2, r2, r3
 80161f4:	4b2c      	ldr	r3, [pc, #176]	; (80162a8 <RegionUS915RxConfig+0xf8>)
 80161f6:	4413      	add	r3, r2
 80161f8:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80161fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161fe:	4a2b      	ldr	r2, [pc, #172]	; (80162ac <RegionUS915RxConfig+0xfc>)
 8016200:	5cd3      	ldrb	r3, [r2, r3]
 8016202:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016204:	4b26      	ldr	r3, [pc, #152]	; (80162a0 <RegionUS915RxConfig+0xf0>)
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	6938      	ldr	r0, [r7, #16]
 801620a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801620c:	4b24      	ldr	r3, [pc, #144]	; (80162a0 <RegionUS915RxConfig+0xf0>)
 801620e:	699c      	ldr	r4, [r3, #24]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	789b      	ldrb	r3, [r3, #2]
 8016214:	4618      	mov	r0, r3
 8016216:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	689b      	ldr	r3, [r3, #8]
 801621e:	b29b      	uxth	r3, r3
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	7c92      	ldrb	r2, [r2, #18]
 8016224:	9209      	str	r2, [sp, #36]	; 0x24
 8016226:	2201      	movs	r2, #1
 8016228:	9208      	str	r2, [sp, #32]
 801622a:	2200      	movs	r2, #0
 801622c:	9207      	str	r2, [sp, #28]
 801622e:	2200      	movs	r2, #0
 8016230:	9206      	str	r2, [sp, #24]
 8016232:	2200      	movs	r2, #0
 8016234:	9205      	str	r2, [sp, #20]
 8016236:	2200      	movs	r2, #0
 8016238:	9204      	str	r2, [sp, #16]
 801623a:	2200      	movs	r2, #0
 801623c:	9203      	str	r2, [sp, #12]
 801623e:	9302      	str	r3, [sp, #8]
 8016240:	2308      	movs	r3, #8
 8016242:	9301      	str	r3, [sp, #4]
 8016244:	2300      	movs	r3, #0
 8016246:	9300      	str	r3, [sp, #0]
 8016248:	2301      	movs	r3, #1
 801624a:	460a      	mov	r2, r1
 801624c:	4601      	mov	r1, r0
 801624e:	2001      	movs	r0, #1
 8016250:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	7c5b      	ldrb	r3, [r3, #17]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d005      	beq.n	8016266 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801625a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801625e:	4a14      	ldr	r2, [pc, #80]	; (80162b0 <RegionUS915RxConfig+0x100>)
 8016260:	5cd3      	ldrb	r3, [r2, r3]
 8016262:	75fb      	strb	r3, [r7, #23]
 8016264:	e004      	b.n	8016270 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8016266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801626a:	4a12      	ldr	r2, [pc, #72]	; (80162b4 <RegionUS915RxConfig+0x104>)
 801626c:	5cd3      	ldrb	r3, [r2, r3]
 801626e:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016270:	4b0b      	ldr	r3, [pc, #44]	; (80162a0 <RegionUS915RxConfig+0xf0>)
 8016272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016274:	7dfa      	ldrb	r2, [r7, #23]
 8016276:	320d      	adds	r2, #13
 8016278:	b2d2      	uxtb	r2, r2
 801627a:	4611      	mov	r1, r2
 801627c:	2001      	movs	r0, #1
 801627e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	7cdb      	ldrb	r3, [r3, #19]
 8016284:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016288:	6939      	ldr	r1, [r7, #16]
 801628a:	4618      	mov	r0, r3
 801628c:	f7fe f84c 	bl	8014328 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	7bfa      	ldrb	r2, [r7, #15]
 8016294:	701a      	strb	r2, [r3, #0]
    return true;
 8016296:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016298:	4618      	mov	r0, r3
 801629a:	371c      	adds	r7, #28
 801629c:	46bd      	mov	sp, r7
 801629e:	bd90      	pop	{r4, r7, pc}
 80162a0:	0801c4cc 	.word	0x0801c4cc
 80162a4:	000927c0 	.word	0x000927c0
 80162a8:	370870a0 	.word	0x370870a0
 80162ac:	0801c448 	.word	0x0801c448
 80162b0:	0801c4bc 	.word	0x0801c4bc
 80162b4:	0801c4ac 	.word	0x0801c4ac

080162b8 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80162b8:	b590      	push	{r4, r7, lr}
 80162ba:	b093      	sub	sp, #76	; 0x4c
 80162bc:	af0a      	add	r7, sp, #40	; 0x28
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80162ca:	461a      	mov	r2, r3
 80162cc:	4b4a      	ldr	r3, [pc, #296]	; (80163f8 <RegionUS915TxConfig+0x140>)
 80162ce:	5c9b      	ldrb	r3, [r3, r2]
 80162d0:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80162d8:	4b48      	ldr	r3, [pc, #288]	; (80163fc <RegionUS915TxConfig+0x144>)
 80162da:	681a      	ldr	r2, [r3, #0]
 80162dc:	4b48      	ldr	r3, [pc, #288]	; (8016400 <RegionUS915TxConfig+0x148>)
 80162de:	6819      	ldr	r1, [r3, #0]
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	461c      	mov	r4, r3
 80162e6:	4623      	mov	r3, r4
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	4423      	add	r3, r4
 80162ec:	009b      	lsls	r3, r3, #2
 80162ee:	440b      	add	r3, r1
 80162f0:	3309      	adds	r3, #9
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	4619      	mov	r1, r3
 80162f6:	460b      	mov	r3, r1
 80162f8:	005b      	lsls	r3, r3, #1
 80162fa:	440b      	add	r3, r1
 80162fc:	00db      	lsls	r3, r3, #3
 80162fe:	4413      	add	r3, r2
 8016300:	3302      	adds	r3, #2
 8016302:	f993 1000 	ldrsb.w	r1, [r3]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801630c:	4b3c      	ldr	r3, [pc, #240]	; (8016400 <RegionUS915TxConfig+0x148>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016314:	f7ff fa52 	bl	80157bc <LimitTxPower>
 8016318:	4603      	mov	r3, r0
 801631a:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016322:	4938      	ldr	r1, [pc, #224]	; (8016404 <RegionUS915TxConfig+0x14c>)
 8016324:	4618      	mov	r0, r3
 8016326:	f7fd ffe1 	bl	80142ec <RegionCommonGetBandwidth>
 801632a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801632c:	2300      	movs	r3, #0
 801632e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8016330:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016334:	f04f 0200 	mov.w	r2, #0
 8016338:	4933      	ldr	r1, [pc, #204]	; (8016408 <RegionUS915TxConfig+0x150>)
 801633a:	4618      	mov	r0, r3
 801633c:	f7fd fe32 	bl	8013fa4 <RegionCommonComputeTxPower>
 8016340:	4603      	mov	r3, r0
 8016342:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016344:	4b31      	ldr	r3, [pc, #196]	; (801640c <RegionUS915TxConfig+0x154>)
 8016346:	68da      	ldr	r2, [r3, #12]
 8016348:	4b2d      	ldr	r3, [pc, #180]	; (8016400 <RegionUS915TxConfig+0x148>)
 801634a:	6819      	ldr	r1, [r3, #0]
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	4618      	mov	r0, r3
 8016352:	4603      	mov	r3, r0
 8016354:	005b      	lsls	r3, r3, #1
 8016356:	4403      	add	r3, r0
 8016358:	009b      	lsls	r3, r3, #2
 801635a:	440b      	add	r3, r1
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	4618      	mov	r0, r3
 8016360:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016362:	4b2a      	ldr	r3, [pc, #168]	; (801640c <RegionUS915TxConfig+0x154>)
 8016364:	69dc      	ldr	r4, [r3, #28]
 8016366:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801636a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801636e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8016372:	9208      	str	r2, [sp, #32]
 8016374:	2200      	movs	r2, #0
 8016376:	9207      	str	r2, [sp, #28]
 8016378:	2200      	movs	r2, #0
 801637a:	9206      	str	r2, [sp, #24]
 801637c:	2200      	movs	r2, #0
 801637e:	9205      	str	r2, [sp, #20]
 8016380:	2201      	movs	r2, #1
 8016382:	9204      	str	r2, [sp, #16]
 8016384:	2200      	movs	r2, #0
 8016386:	9203      	str	r2, [sp, #12]
 8016388:	2208      	movs	r2, #8
 801638a:	9202      	str	r2, [sp, #8]
 801638c:	2201      	movs	r2, #1
 801638e:	9201      	str	r2, [sp, #4]
 8016390:	9300      	str	r3, [sp, #0]
 8016392:	69bb      	ldr	r3, [r7, #24]
 8016394:	2200      	movs	r2, #0
 8016396:	2001      	movs	r0, #1
 8016398:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801639a:	4b19      	ldr	r3, [pc, #100]	; (8016400 <RegionUS915TxConfig+0x148>)
 801639c:	681a      	ldr	r2, [r3, #0]
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	781b      	ldrb	r3, [r3, #0]
 80163a2:	4619      	mov	r1, r3
 80163a4:	460b      	mov	r3, r1
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	440b      	add	r3, r1
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	4413      	add	r3, r2
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163b6:	4619      	mov	r1, r3
 80163b8:	4610      	mov	r0, r2
 80163ba:	f7fd fff3 	bl	80143a4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80163be:	4b13      	ldr	r3, [pc, #76]	; (801640c <RegionUS915TxConfig+0x154>)
 80163c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163c2:	68fa      	ldr	r2, [r7, #12]
 80163c4:	8992      	ldrh	r2, [r2, #12]
 80163c6:	b2d2      	uxtb	r2, r2
 80163c8:	4611      	mov	r1, r2
 80163ca:	2001      	movs	r0, #1
 80163cc:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	899b      	ldrh	r3, [r3, #12]
 80163d8:	4619      	mov	r1, r3
 80163da:	4610      	mov	r0, r2
 80163dc:	f7ff fa68 	bl	80158b0 <GetTimeOnAir>
 80163e0:	4602      	mov	r2, r0
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	7fba      	ldrb	r2, [r7, #30]
 80163ea:	701a      	strb	r2, [r3, #0]
    return true;
 80163ec:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3724      	adds	r7, #36	; 0x24
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd90      	pop	{r4, r7, pc}
 80163f6:	bf00      	nop
 80163f8:	0801c448 	.word	0x0801c448
 80163fc:	2000109c 	.word	0x2000109c
 8016400:	200010a0 	.word	0x200010a0
 8016404:	0801c458 	.word	0x0801c458
 8016408:	41f00000 	.word	0x41f00000
 801640c:	0801c4cc 	.word	0x0801c4cc

08016410 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016410:	b590      	push	{r4, r7, lr}
 8016412:	b097      	sub	sp, #92	; 0x5c
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
 801641c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801641e:	2307      	movs	r3, #7
 8016420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016424:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016428:	2200      	movs	r2, #0
 801642a:	601a      	str	r2, [r3, #0]
 801642c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801642e:	2300      	movs	r3, #0
 8016430:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8016434:	2300      	movs	r3, #0
 8016436:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801643a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801643e:	2200      	movs	r2, #0
 8016440:	601a      	str	r2, [r3, #0]
 8016442:	605a      	str	r2, [r3, #4]
 8016444:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8016446:	4b9c      	ldr	r3, [pc, #624]	; (80166b8 <RegionUS915LinkAdrReq+0x2a8>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801644e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016452:	2206      	movs	r2, #6
 8016454:	4618      	mov	r0, r3
 8016456:	f7fd fab9 	bl	80139cc <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801645a:	e124      	b.n	80166a6 <RegionUS915LinkAdrReq+0x296>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	685a      	ldr	r2, [r3, #4]
 8016460:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8016464:	4413      	add	r3, r2
 8016466:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801646a:	4611      	mov	r1, r2
 801646c:	4618      	mov	r0, r3
 801646e:	f7fd fbf1 	bl	8013c54 <RegionCommonParseLinkAdrReq>
 8016472:	4603      	mov	r3, r0
 8016474:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8016478:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801647c:	2b00      	cmp	r3, #0
 801647e:	f000 811d 	beq.w	80166bc <RegionUS915LinkAdrReq+0x2ac>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016482:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8016486:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801648a:	4413      	add	r3, r2
 801648c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016490:	2307      	movs	r3, #7
 8016492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8016496:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801649a:	2b06      	cmp	r3, #6
 801649c:	d116      	bne.n	80164cc <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801649e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 80164a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 80164ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 80164b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80164be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80164ca:	e0ec      	b.n	80166a6 <RegionUS915LinkAdrReq+0x296>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80164cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80164d0:	2b07      	cmp	r3, #7
 80164d2:	d112      	bne.n	80164fa <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80164d4:	2300      	movs	r3, #0
 80164d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 80164da:	2300      	movs	r3, #0
 80164dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 80164e0:	2300      	movs	r3, #0
 80164e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 80164e6:	2300      	movs	r3, #0
 80164e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80164ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80164f8:	e0d5      	b.n	80166a6 <RegionUS915LinkAdrReq+0x296>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80164fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80164fe:	2b05      	cmp	r3, #5
 8016500:	f040 80c7 	bne.w	8016692 <RegionUS915LinkAdrReq+0x282>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8016504:	2301      	movs	r3, #1
 8016506:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801650a:	2300      	movs	r3, #0
 801650c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8016510:	2300      	movs	r3, #0
 8016512:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8016516:	e0b6      	b.n	8016686 <RegionUS915LinkAdrReq+0x276>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8016518:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801651c:	b2da      	uxtb	r2, r3
 801651e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016522:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016526:	fa01 f303 	lsl.w	r3, r1, r3
 801652a:	4013      	ands	r3, r2
 801652c:	2b00      	cmp	r3, #0
 801652e:	d051      	beq.n	80165d4 <RegionUS915LinkAdrReq+0x1c4>
                {
                    if( ( i % 2 ) == 0 )
 8016530:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016534:	f003 0301 	and.w	r3, r3, #1
 8016538:	b2db      	uxtb	r3, r3
 801653a:	2b00      	cmp	r3, #0
 801653c:	d122      	bne.n	8016584 <RegionUS915LinkAdrReq+0x174>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801653e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016548:	4413      	add	r3, r2
 801654a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801654e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016552:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8016556:	b292      	uxth	r2, r2
 8016558:	005b      	lsls	r3, r3, #1
 801655a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801655e:	440b      	add	r3, r1
 8016560:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016564:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016568:	b21a      	sxth	r2, r3
 801656a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801656e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016572:	fa01 f303 	lsl.w	r3, r1, r3
 8016576:	b21b      	sxth	r3, r3
 8016578:	4313      	orrs	r3, r2
 801657a:	b21b      	sxth	r3, r3
 801657c:	b29b      	uxth	r3, r3
 801657e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016582:	e07b      	b.n	801667c <RegionUS915LinkAdrReq+0x26c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8016584:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016588:	005b      	lsls	r3, r3, #1
 801658a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801658e:	4413      	add	r3, r2
 8016590:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016594:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016598:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801659c:	b292      	uxth	r2, r2
 801659e:	005b      	lsls	r3, r3, #1
 80165a0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80165a4:	440b      	add	r3, r1
 80165a6:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80165aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80165ae:	b21a      	sxth	r2, r3
 80165b0:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80165b4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80165b8:	fa01 f303 	lsl.w	r3, r1, r3
 80165bc:	b21b      	sxth	r3, r3
 80165be:	4313      	orrs	r3, r2
 80165c0:	b21b      	sxth	r3, r3
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80165c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80165cc:	3301      	adds	r3, #1
 80165ce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80165d2:	e053      	b.n	801667c <RegionUS915LinkAdrReq+0x26c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80165d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80165d8:	f003 0301 	and.w	r3, r3, #1
 80165dc:	b2db      	uxtb	r3, r3
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d124      	bne.n	801662c <RegionUS915LinkAdrReq+0x21c>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80165e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80165e6:	005b      	lsls	r3, r3, #1
 80165e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80165ec:	4413      	add	r3, r2
 80165ee:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80165f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80165f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80165fa:	b292      	uxth	r2, r2
 80165fc:	005b      	lsls	r3, r3, #1
 80165fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016602:	440b      	add	r3, r1
 8016604:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016608:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801660c:	b21a      	sxth	r2, r3
 801660e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8016612:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016616:	fa01 f303 	lsl.w	r3, r1, r3
 801661a:	b21b      	sxth	r3, r3
 801661c:	43db      	mvns	r3, r3
 801661e:	b21b      	sxth	r3, r3
 8016620:	4013      	ands	r3, r2
 8016622:	b21b      	sxth	r3, r3
 8016624:	b29b      	uxth	r3, r3
 8016626:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801662a:	e027      	b.n	801667c <RegionUS915LinkAdrReq+0x26c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801662c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016636:	4413      	add	r3, r2
 8016638:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801663c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016640:	b2d2      	uxtb	r2, r2
 8016642:	b292      	uxth	r2, r2
 8016644:	005b      	lsls	r3, r3, #1
 8016646:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801664a:	440b      	add	r3, r1
 801664c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016650:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016654:	b21a      	sxth	r2, r3
 8016656:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801665a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801665e:	fa01 f303 	lsl.w	r3, r1, r3
 8016662:	b21b      	sxth	r3, r3
 8016664:	43db      	mvns	r3, r3
 8016666:	b21b      	sxth	r3, r3
 8016668:	4013      	ands	r3, r2
 801666a:	b21b      	sxth	r3, r3
 801666c:	b29b      	uxth	r3, r3
 801666e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8016672:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8016676:	3301      	adds	r3, #1
 8016678:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801667c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016680:	3301      	adds	r3, #1
 8016682:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8016686:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801668a:	2b07      	cmp	r3, #7
 801668c:	f67f af44 	bls.w	8016518 <RegionUS915LinkAdrReq+0x108>
 8016690:	e009      	b.n	80166a6 <RegionUS915LinkAdrReq+0x296>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8016692:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016696:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801669a:	005b      	lsls	r3, r3, #1
 801669c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80166a0:	440b      	add	r3, r1
 80166a2:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	7a1b      	ldrb	r3, [r3, #8]
 80166aa:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80166ae:	429a      	cmp	r2, r3
 80166b0:	f4ff aed4 	bcc.w	801645c <RegionUS915LinkAdrReq+0x4c>
 80166b4:	e003      	b.n	80166be <RegionUS915LinkAdrReq+0x2ae>
 80166b6:	bf00      	nop
 80166b8:	200010a0 	.word	0x200010a0
            break; // break loop, since no more request has been found
 80166bc:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80166be:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80166c2:	2b03      	cmp	r3, #3
 80166c4:	dc0f      	bgt.n	80166e6 <RegionUS915LinkAdrReq+0x2d6>
 80166c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80166ca:	2204      	movs	r2, #4
 80166cc:	2100      	movs	r1, #0
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7fd f950 	bl	8013974 <RegionCommonCountChannels>
 80166d4:	4603      	mov	r3, r0
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d805      	bhi.n	80166e6 <RegionUS915LinkAdrReq+0x2d6>
    {
        status &= 0xFE; // Channel mask KO
 80166da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80166de:	f023 0301 	bic.w	r3, r3, #1
 80166e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80166e6:	2302      	movs	r3, #2
 80166e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	7a5b      	ldrb	r3, [r3, #9]
 80166f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80166f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7ff f909 	bl	8015910 <RegionUS915GetPhyParam>
 80166fe:	4603      	mov	r3, r0
 8016700:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8016702:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016706:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	7a9b      	ldrb	r3, [r3, #10]
 801670c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801670e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8016712:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016714:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8016718:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801671a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801671e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016726:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801672e:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	7b5b      	ldrb	r3, [r3, #13]
 8016734:	b25b      	sxtb	r3, r3
 8016736:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8016738:	2348      	movs	r3, #72	; 0x48
 801673a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801673e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016742:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016746:	b25b      	sxtb	r3, r3
 8016748:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801674c:	2304      	movs	r3, #4
 801674e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016752:	4b44      	ldr	r3, [pc, #272]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8016758:	230e      	movs	r3, #14
 801675a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801675e:	2300      	movs	r3, #0
 8016760:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801676a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801676e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016772:	1c9a      	adds	r2, r3, #2
 8016774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016778:	1c59      	adds	r1, r3, #1
 801677a:	f107 0014 	add.w	r0, r7, #20
 801677e:	4623      	mov	r3, r4
 8016780:	f7fd fab9 	bl	8013cf6 <RegionCommonLinkAdrReqVerifyParams>
 8016784:	4603      	mov	r3, r0
 8016786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801678a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801678e:	2b07      	cmp	r3, #7
 8016790:	d151      	bne.n	8016836 <RegionUS915LinkAdrReq+0x426>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8016792:	4b34      	ldr	r3, [pc, #208]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801679a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801679e:	2206      	movs	r2, #6
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7fd f913 	bl	80139cc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80167a6:	4b30      	ldr	r3, [pc, #192]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 80167ae:	4b2d      	ldr	r3, [pc, #180]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80167b6:	4b2c      	ldr	r3, [pc, #176]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	400a      	ands	r2, r1
 80167bc:	b292      	uxth	r2, r2
 80167be:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80167c2:	4b29      	ldr	r3, [pc, #164]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 80167ca:	4b26      	ldr	r3, [pc, #152]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 80167d2:	4b25      	ldr	r3, [pc, #148]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	400a      	ands	r2, r1
 80167d8:	b292      	uxth	r2, r2
 80167da:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80167de:	4b22      	ldr	r3, [pc, #136]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 80167e6:	4b1f      	ldr	r3, [pc, #124]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 80167ee:	4b1e      	ldr	r3, [pc, #120]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	400a      	ands	r2, r1
 80167f4:	b292      	uxth	r2, r2
 80167f6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80167fa:	4b1b      	ldr	r3, [pc, #108]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 8016802:	4b18      	ldr	r3, [pc, #96]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801680a:	4b17      	ldr	r3, [pc, #92]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	400a      	ands	r2, r1
 8016810:	b292      	uxth	r2, r2
 8016812:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8016816:	4b13      	ldr	r3, [pc, #76]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	4b13      	ldr	r3, [pc, #76]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8016822:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8016826:	4b0f      	ldr	r3, [pc, #60]	; (8016864 <RegionUS915LinkAdrReq+0x454>)
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	4b0f      	ldr	r3, [pc, #60]	; (8016868 <RegionUS915LinkAdrReq+0x458>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8016832:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016836:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801683e:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016846:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801684e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016850:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8016854:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8016856:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801685a:	4618      	mov	r0, r3
 801685c:	375c      	adds	r7, #92	; 0x5c
 801685e:	46bd      	mov	sp, r7
 8016860:	bd90      	pop	{r4, r7, pc}
 8016862:	bf00      	nop
 8016864:	200010a0 	.word	0x200010a0
 8016868:	2000109c 	.word	0x2000109c

0801686c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b084      	sub	sp, #16
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016874:	2307      	movs	r3, #7
 8016876:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	4618      	mov	r0, r3
 801687e:	f7fe ffd3 	bl	8015828 <VerifyRfFreq>
 8016882:	4603      	mov	r3, r0
 8016884:	f083 0301 	eor.w	r3, r3, #1
 8016888:	b2db      	uxtb	r3, r3
 801688a:	2b00      	cmp	r3, #0
 801688c:	d003      	beq.n	8016896 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801688e:	7bfb      	ldrb	r3, [r7, #15]
 8016890:	f023 0301 	bic.w	r3, r3, #1
 8016894:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f993 3000 	ldrsb.w	r3, [r3]
 801689c:	220d      	movs	r2, #13
 801689e:	2108      	movs	r1, #8
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7fd f816 	bl	80138d2 <RegionCommonValueInRange>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d103      	bne.n	80168b4 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80168ac:	7bfb      	ldrb	r3, [r7, #15]
 80168ae:	f023 0302 	bic.w	r3, r3, #2
 80168b2:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f993 3000 	ldrsb.w	r3, [r3]
 80168ba:	2207      	movs	r2, #7
 80168bc:	2105      	movs	r1, #5
 80168be:	4618      	mov	r0, r3
 80168c0:	f7fd f807 	bl	80138d2 <RegionCommonValueInRange>
 80168c4:	4603      	mov	r3, r0
 80168c6:	2b01      	cmp	r3, #1
 80168c8:	d004      	beq.n	80168d4 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80168d0:	2b0d      	cmp	r3, #13
 80168d2:	dd03      	ble.n	80168dc <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 80168d4:	7bfb      	ldrb	r3, [r7, #15]
 80168d6:	f023 0302 	bic.w	r3, r3, #2
 80168da:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168e2:	2203      	movs	r2, #3
 80168e4:	2100      	movs	r1, #0
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7fc fff3 	bl	80138d2 <RegionCommonValueInRange>
 80168ec:	4603      	mov	r3, r0
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d103      	bne.n	80168fa <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80168f2:	7bfb      	ldrb	r3, [r7, #15]
 80168f4:	f023 0304 	bic.w	r3, r3, #4
 80168f8:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 80168fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80168fc:	4618      	mov	r0, r3
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}

08016904 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016904:	b480      	push	{r7}
 8016906:	b083      	sub	sp, #12
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801690c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016910:	4618      	mov	r0, r3
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	bc80      	pop	{r7}
 8016918:	4770      	bx	lr

0801691a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801691a:	b480      	push	{r7}
 801691c:	b083      	sub	sp, #12
 801691e:	af00      	add	r7, sp, #0
 8016920:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016926:	4618      	mov	r0, r3
 8016928:	370c      	adds	r7, #12
 801692a:	46bd      	mov	sp, r7
 801692c:	bc80      	pop	{r7}
 801692e:	4770      	bx	lr

08016930 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016930:	b480      	push	{r7}
 8016932:	b083      	sub	sp, #12
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016938:	f04f 33ff 	mov.w	r3, #4294967295
}
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	bc80      	pop	{r7}
 8016944:	4770      	bx	lr
	...

08016948 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	4603      	mov	r3, r0
 8016950:	460a      	mov	r2, r1
 8016952:	71fb      	strb	r3, [r7, #7]
 8016954:	4613      	mov	r3, r2
 8016956:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8016958:	79bb      	ldrb	r3, [r7, #6]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d108      	bne.n	8016970 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801695e:	4b16      	ldr	r3, [pc, #88]	; (80169b8 <RegionUS915AlternateDr+0x70>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8016966:	3201      	adds	r2, #1
 8016968:	b2d2      	uxtb	r2, r2
 801696a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 801696e:	e007      	b.n	8016980 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8016970:	4b11      	ldr	r3, [pc, #68]	; (80169b8 <RegionUS915AlternateDr+0x70>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8016978:	3a01      	subs	r2, #1
 801697a:	b2d2      	uxtb	r2, r2
 801697c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8016980:	4b0d      	ldr	r3, [pc, #52]	; (80169b8 <RegionUS915AlternateDr+0x70>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8016988:	4b0c      	ldr	r3, [pc, #48]	; (80169bc <RegionUS915AlternateDr+0x74>)
 801698a:	fba3 1302 	umull	r1, r3, r3, r2
 801698e:	0859      	lsrs	r1, r3, #1
 8016990:	460b      	mov	r3, r1
 8016992:	00db      	lsls	r3, r3, #3
 8016994:	440b      	add	r3, r1
 8016996:	1ad3      	subs	r3, r2, r3
 8016998:	b2db      	uxtb	r3, r3
 801699a:	2b00      	cmp	r3, #0
 801699c:	d102      	bne.n	80169a4 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801699e:	2304      	movs	r3, #4
 80169a0:	71fb      	strb	r3, [r7, #7]
 80169a2:	e001      	b.n	80169a8 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 80169a4:	2300      	movs	r3, #0
 80169a6:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80169a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	370c      	adds	r7, #12
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bc80      	pop	{r7}
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	2000109c 	.word	0x2000109c
 80169bc:	38e38e39 	.word	0x38e38e39

080169c0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b0a8      	sub	sp, #160	; 0xa0
 80169c4:	af02      	add	r7, sp, #8
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	60b9      	str	r1, [r7, #8]
 80169ca:	607a      	str	r2, [r7, #4]
 80169cc:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80169ce:	2300      	movs	r3, #0
 80169d0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 80169d4:	2300      	movs	r3, #0
 80169d6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80169da:	2300      	movs	r3, #0
 80169dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80169de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80169e2:	2244      	movs	r2, #68	; 0x44
 80169e4:	2100      	movs	r1, #0
 80169e6:	4618      	mov	r0, r3
 80169e8:	f004 fe7e 	bl	801b6e8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80169ec:	230c      	movs	r3, #12
 80169ee:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80169f2:	4b6c      	ldr	r3, [pc, #432]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	3390      	adds	r3, #144	; 0x90
 80169f8:	2204      	movs	r2, #4
 80169fa:	2100      	movs	r1, #0
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7fc ffb9 	bl	8013974 <RegionCommonCountChannels>
 8016a02:	4603      	mov	r3, r0
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d110      	bne.n	8016a2a <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8016a08:	4b66      	ldr	r3, [pc, #408]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8016a10:	4b65      	ldr	r3, [pc, #404]	; (8016ba8 <RegionUS915NextChannel+0x1e8>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016a18:	2204      	movs	r2, #4
 8016a1a:	4619      	mov	r1, r3
 8016a1c:	f7fc ffd6 	bl	80139cc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8016a20:	4b60      	ldr	r3, [pc, #384]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2200      	movs	r2, #0
 8016a26:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016a30:	2b03      	cmp	r3, #3
 8016a32:	dd0e      	ble.n	8016a52 <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8016a34:	4b5b      	ldr	r3, [pc, #364]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d107      	bne.n	8016a52 <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8016a42:	4b59      	ldr	r3, [pc, #356]	; (8016ba8 <RegionUS915NextChannel+0x1e8>)
 8016a44:	681a      	ldr	r2, [r3, #0]
 8016a46:	4b57      	ldr	r3, [pc, #348]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8016a4e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	7a5b      	ldrb	r3, [r3, #9]
 8016a56:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8016a62:	4b50      	ldr	r3, [pc, #320]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	3390      	adds	r3, #144	; 0x90
 8016a68:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016a6a:	4b4f      	ldr	r3, [pc, #316]	; (8016ba8 <RegionUS915NextChannel+0x1e8>)
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016a70:	4b4c      	ldr	r3, [pc, #304]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8016a76:	2348      	movs	r3, #72	; 0x48
 8016a78:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	685b      	ldr	r3, [r3, #4]
 8016a88:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	7a9b      	ldrb	r3, [r3, #10]
 8016a8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8016a92:	2301      	movs	r3, #1
 8016a94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016a98:	68fa      	ldr	r2, [r7, #12]
 8016a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016a9e:	320c      	adds	r2, #12
 8016aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016aa4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	7d1b      	ldrb	r3, [r3, #20]
 8016aac:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	8adb      	ldrh	r3, [r3, #22]
 8016aba:	4619      	mov	r1, r3
 8016abc:	4610      	mov	r0, r2
 8016abe:	f7fe fef7 	bl	80158b0 <GetTimeOnAir>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016ac6:	f107 0314 	add.w	r3, r7, #20
 8016aca:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016acc:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8016ad0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016ad4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	9301      	str	r3, [sp, #4]
 8016adc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8016ae0:	9300      	str	r3, [sp, #0]
 8016ae2:	460b      	mov	r3, r1
 8016ae4:	6839      	ldr	r1, [r7, #0]
 8016ae6:	f7fd fb4c 	bl	8014182 <RegionCommonIdentifyChannels>
 8016aea:	4603      	mov	r3, r0
 8016aec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016af0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d14e      	bne.n	8016b96 <RegionUS915NextChannel+0x1d6>
    {
        if( nextChanParams->Joined == true )
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	7a5b      	ldrb	r3, [r3, #9]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d00f      	beq.n	8016b20 <RegionUS915NextChannel+0x160>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016b00:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016b04:	3b01      	subs	r3, #1
 8016b06:	4619      	mov	r1, r3
 8016b08:	2000      	movs	r0, #0
 8016b0a:	f000 f8f7 	bl	8016cfc <randr>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8016b14:	4413      	add	r3, r2
 8016b16:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8016b1a:	68bb      	ldr	r3, [r7, #8]
 8016b1c:	701a      	strb	r2, [r3, #0]
 8016b1e:	e030      	b.n	8016b82 <RegionUS915NextChannel+0x1c2>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d10f      	bne.n	8016b4a <RegionUS915NextChannel+0x18a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8016b2a:	4b1e      	ldr	r3, [pc, #120]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8016b32:	4b1c      	ldr	r3, [pc, #112]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016b34:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8016b36:	339c      	adds	r3, #156	; 0x9c
 8016b38:	68ba      	ldr	r2, [r7, #8]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	f7fc fc84 	bl	8013448 <RegionBaseUSComputeNext125kHzJoinChannel>
 8016b40:	4603      	mov	r3, r0
 8016b42:	2b03      	cmp	r3, #3
 8016b44:	d11d      	bne.n	8016b82 <RegionUS915NextChannel+0x1c2>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8016b46:	2303      	movs	r3, #3
 8016b48:	e027      	b.n	8016b9a <RegionUS915NextChannel+0x1da>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8016b50:	e004      	b.n	8016b5c <RegionUS915NextChannel+0x19c>
                {
                    i++;
 8016b52:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8016b56:	3301      	adds	r3, #1
 8016b58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8016b5c:	4b11      	ldr	r3, [pc, #68]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8016b6a:	fa42 f303 	asr.w	r3, r2, r3
 8016b6e:	f003 0301 	and.w	r3, r3, #1
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d0ed      	beq.n	8016b52 <RegionUS915NextChannel+0x192>
                }
                *channel = 64 + i;
 8016b76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8016b7a:	3340      	adds	r3, #64	; 0x40
 8016b7c:	b2da      	uxtb	r2, r3
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8016b82:	4b08      	ldr	r3, [pc, #32]	; (8016ba4 <RegionUS915NextChannel+0x1e4>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	2248      	movs	r2, #72	; 0x48
 8016b90:	4619      	mov	r1, r3
 8016b92:	f7fc febb 	bl	801390c <RegionCommonChanDisable>
    }
    return status;
 8016b96:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3798      	adds	r7, #152	; 0x98
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	2000109c 	.word	0x2000109c
 8016ba8:	200010a0 	.word	0x200010a0

08016bac <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016bac:	b590      	push	{r4, r7, lr}
 8016bae:	b085      	sub	sp, #20
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016bba:	4b23      	ldr	r3, [pc, #140]	; (8016c48 <RegionUS915SetContinuousWave+0x9c>)
 8016bbc:	681a      	ldr	r2, [r3, #0]
 8016bbe:	4b23      	ldr	r3, [pc, #140]	; (8016c4c <RegionUS915SetContinuousWave+0xa0>)
 8016bc0:	6819      	ldr	r1, [r3, #0]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	781b      	ldrb	r3, [r3, #0]
 8016bc6:	461c      	mov	r4, r3
 8016bc8:	4623      	mov	r3, r4
 8016bca:	005b      	lsls	r3, r3, #1
 8016bcc:	4423      	add	r3, r4
 8016bce:	009b      	lsls	r3, r3, #2
 8016bd0:	440b      	add	r3, r1
 8016bd2:	3309      	adds	r3, #9
 8016bd4:	781b      	ldrb	r3, [r3, #0]
 8016bd6:	4619      	mov	r1, r3
 8016bd8:	460b      	mov	r3, r1
 8016bda:	005b      	lsls	r3, r3, #1
 8016bdc:	440b      	add	r3, r1
 8016bde:	00db      	lsls	r3, r3, #3
 8016be0:	4413      	add	r3, r2
 8016be2:	3302      	adds	r3, #2
 8016be4:	f993 1000 	ldrsb.w	r1, [r3]
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016bee:	4b17      	ldr	r3, [pc, #92]	; (8016c4c <RegionUS915SetContinuousWave+0xa0>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016bf6:	f7fe fde1 	bl	80157bc <LimitTxPower>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8016c02:	4b12      	ldr	r3, [pc, #72]	; (8016c4c <RegionUS915SetContinuousWave+0xa0>)
 8016c04:	681a      	ldr	r2, [r3, #0]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	4619      	mov	r1, r3
 8016c0c:	460b      	mov	r3, r1
 8016c0e:	005b      	lsls	r3, r3, #1
 8016c10:	440b      	add	r3, r1
 8016c12:	009b      	lsls	r3, r3, #2
 8016c14:	4413      	add	r3, r2
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8016c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c1e:	f04f 0200 	mov.w	r2, #0
 8016c22:	490b      	ldr	r1, [pc, #44]	; (8016c50 <RegionUS915SetContinuousWave+0xa4>)
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7fd f9bd 	bl	8013fa4 <RegionCommonComputeTxPower>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016c2e:	4b09      	ldr	r3, [pc, #36]	; (8016c54 <RegionUS915SetContinuousWave+0xa8>)
 8016c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	8992      	ldrh	r2, [r2, #12]
 8016c36:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016c3a:	68b8      	ldr	r0, [r7, #8]
 8016c3c:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8016c3e:	bf00      	nop
 8016c40:	3714      	adds	r7, #20
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd90      	pop	{r4, r7, pc}
 8016c46:	bf00      	nop
 8016c48:	2000109c 	.word	0x2000109c
 8016c4c:	200010a0 	.word	0x200010a0
 8016c50:	41f00000 	.word	0x41f00000
 8016c54:	0801c4cc 	.word	0x0801c4cc

08016c58 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b085      	sub	sp, #20
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	4603      	mov	r3, r0
 8016c60:	71fb      	strb	r3, [r7, #7]
 8016c62:	460b      	mov	r3, r1
 8016c64:	71bb      	strb	r3, [r7, #6]
 8016c66:	4613      	mov	r3, r2
 8016c68:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8016c6a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016c6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016c72:	4909      	ldr	r1, [pc, #36]	; (8016c98 <RegionUS915ApplyDrOffset+0x40>)
 8016c74:	0092      	lsls	r2, r2, #2
 8016c76:	440a      	add	r2, r1
 8016c78:	4413      	add	r3, r2
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	da01      	bge.n	8016c8a <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8016c86:	2300      	movs	r3, #0
 8016c88:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016c8a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3714      	adds	r7, #20
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bc80      	pop	{r7}
 8016c94:	4770      	bx	lr
 8016c96:	bf00      	nop
 8016c98:	0801c498 	.word	0x0801c498

08016c9c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016ca0:	4b0d      	ldr	r3, [pc, #52]	; (8016cd8 <rand1+0x3c>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4a0d      	ldr	r2, [pc, #52]	; (8016cdc <rand1+0x40>)
 8016ca6:	fb02 f303 	mul.w	r3, r2, r3
 8016caa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016cae:	3339      	adds	r3, #57	; 0x39
 8016cb0:	4a09      	ldr	r2, [pc, #36]	; (8016cd8 <rand1+0x3c>)
 8016cb2:	6013      	str	r3, [r2, #0]
 8016cb4:	4b08      	ldr	r3, [pc, #32]	; (8016cd8 <rand1+0x3c>)
 8016cb6:	681a      	ldr	r2, [r3, #0]
 8016cb8:	2303      	movs	r3, #3
 8016cba:	fba3 1302 	umull	r1, r3, r3, r2
 8016cbe:	1ad1      	subs	r1, r2, r3
 8016cc0:	0849      	lsrs	r1, r1, #1
 8016cc2:	440b      	add	r3, r1
 8016cc4:	0f99      	lsrs	r1, r3, #30
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	07db      	lsls	r3, r3, #31
 8016cca:	1a5b      	subs	r3, r3, r1
 8016ccc:	1ad1      	subs	r1, r2, r3
 8016cce:	460b      	mov	r3, r1
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bc80      	pop	{r7}
 8016cd6:	4770      	bx	lr
 8016cd8:	2000011c 	.word	0x2000011c
 8016cdc:	41c64e6d 	.word	0x41c64e6d

08016ce0 <srand1>:

void srand1( uint32_t seed )
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b083      	sub	sp, #12
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
    next = seed;
 8016ce8:	4a03      	ldr	r2, [pc, #12]	; (8016cf8 <srand1+0x18>)
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	6013      	str	r3, [r2, #0]
}
 8016cee:	bf00      	nop
 8016cf0:	370c      	adds	r7, #12
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bc80      	pop	{r7}
 8016cf6:	4770      	bx	lr
 8016cf8:	2000011c 	.word	0x2000011c

08016cfc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016d06:	f7ff ffc9 	bl	8016c9c <rand1>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	6839      	ldr	r1, [r7, #0]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	1acb      	subs	r3, r1, r3
 8016d12:	3301      	adds	r3, #1
 8016d14:	fb92 f1f3 	sdiv	r1, r2, r3
 8016d18:	fb03 f301 	mul.w	r3, r3, r1
 8016d1c:	1ad2      	subs	r2, r2, r3
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	4413      	add	r3, r2
}
 8016d22:	4618      	mov	r0, r3
 8016d24:	3708      	adds	r7, #8
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}

08016d2a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016d2a:	b480      	push	{r7}
 8016d2c:	b085      	sub	sp, #20
 8016d2e:	af00      	add	r7, sp, #0
 8016d30:	60f8      	str	r0, [r7, #12]
 8016d32:	60b9      	str	r1, [r7, #8]
 8016d34:	4613      	mov	r3, r2
 8016d36:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016d38:	e007      	b.n	8016d4a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016d3a:	68ba      	ldr	r2, [r7, #8]
 8016d3c:	1c53      	adds	r3, r2, #1
 8016d3e:	60bb      	str	r3, [r7, #8]
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	1c59      	adds	r1, r3, #1
 8016d44:	60f9      	str	r1, [r7, #12]
 8016d46:	7812      	ldrb	r2, [r2, #0]
 8016d48:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016d4a:	88fb      	ldrh	r3, [r7, #6]
 8016d4c:	1e5a      	subs	r2, r3, #1
 8016d4e:	80fa      	strh	r2, [r7, #6]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d1f2      	bne.n	8016d3a <memcpy1+0x10>
    }
}
 8016d54:	bf00      	nop
 8016d56:	bf00      	nop
 8016d58:	3714      	adds	r7, #20
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bc80      	pop	{r7}
 8016d5e:	4770      	bx	lr

08016d60 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016d6e:	88fb      	ldrh	r3, [r7, #6]
 8016d70:	3b01      	subs	r3, #1
 8016d72:	68fa      	ldr	r2, [r7, #12]
 8016d74:	4413      	add	r3, r2
 8016d76:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016d78:	e007      	b.n	8016d8a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016d7a:	68ba      	ldr	r2, [r7, #8]
 8016d7c:	1c53      	adds	r3, r2, #1
 8016d7e:	60bb      	str	r3, [r7, #8]
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	1e59      	subs	r1, r3, #1
 8016d84:	60f9      	str	r1, [r7, #12]
 8016d86:	7812      	ldrb	r2, [r2, #0]
 8016d88:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016d8a:	88fb      	ldrh	r3, [r7, #6]
 8016d8c:	1e5a      	subs	r2, r3, #1
 8016d8e:	80fa      	strh	r2, [r7, #6]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d1f2      	bne.n	8016d7a <memcpyr+0x1a>
    }
}
 8016d94:	bf00      	nop
 8016d96:	bf00      	nop
 8016d98:	3714      	adds	r7, #20
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bc80      	pop	{r7}
 8016d9e:	4770      	bx	lr

08016da0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016da0:	b480      	push	{r7}
 8016da2:	b083      	sub	sp, #12
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	460b      	mov	r3, r1
 8016daa:	70fb      	strb	r3, [r7, #3]
 8016dac:	4613      	mov	r3, r2
 8016dae:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016db0:	e004      	b.n	8016dbc <memset1+0x1c>
    {
        *dst++ = value;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	1c5a      	adds	r2, r3, #1
 8016db6:	607a      	str	r2, [r7, #4]
 8016db8:	78fa      	ldrb	r2, [r7, #3]
 8016dba:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016dbc:	883b      	ldrh	r3, [r7, #0]
 8016dbe:	1e5a      	subs	r2, r3, #1
 8016dc0:	803a      	strh	r2, [r7, #0]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d1f5      	bne.n	8016db2 <memset1+0x12>
    }
}
 8016dc6:	bf00      	nop
 8016dc8:	bf00      	nop
 8016dca:	370c      	adds	r7, #12
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bc80      	pop	{r7}
 8016dd0:	4770      	bx	lr
	...

08016dd4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016dd4:	b480      	push	{r7}
 8016dd6:	b087      	sub	sp, #28
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
 8016ddc:	460b      	mov	r3, r1
 8016dde:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016de0:	4b1a      	ldr	r3, [pc, #104]	; (8016e4c <Crc32+0x78>)
 8016de2:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016de4:	f04f 33ff 	mov.w	r3, #4294967295
 8016de8:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d101      	bne.n	8016df4 <Crc32+0x20>
    {
        return 0;
 8016df0:	2300      	movs	r3, #0
 8016df2:	e026      	b.n	8016e42 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016df4:	2300      	movs	r3, #0
 8016df6:	827b      	strh	r3, [r7, #18]
 8016df8:	e01d      	b.n	8016e36 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8016dfa:	8a7b      	ldrh	r3, [r7, #18]
 8016dfc:	687a      	ldr	r2, [r7, #4]
 8016dfe:	4413      	add	r3, r2
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	461a      	mov	r2, r3
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	4053      	eors	r3, r2
 8016e08:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	823b      	strh	r3, [r7, #16]
 8016e0e:	e00c      	b.n	8016e2a <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	085a      	lsrs	r2, r3, #1
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	f003 0301 	and.w	r3, r3, #1
 8016e1a:	4259      	negs	r1, r3
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	400b      	ands	r3, r1
 8016e20:	4053      	eors	r3, r2
 8016e22:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016e24:	8a3b      	ldrh	r3, [r7, #16]
 8016e26:	3301      	adds	r3, #1
 8016e28:	823b      	strh	r3, [r7, #16]
 8016e2a:	8a3b      	ldrh	r3, [r7, #16]
 8016e2c:	2b07      	cmp	r3, #7
 8016e2e:	d9ef      	bls.n	8016e10 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8016e30:	8a7b      	ldrh	r3, [r7, #18]
 8016e32:	3301      	adds	r3, #1
 8016e34:	827b      	strh	r3, [r7, #18]
 8016e36:	8a7a      	ldrh	r2, [r7, #18]
 8016e38:	887b      	ldrh	r3, [r7, #2]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d3dd      	bcc.n	8016dfa <Crc32+0x26>
        }
    }

    return ~crc;
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	43db      	mvns	r3, r3
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	371c      	adds	r7, #28
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bc80      	pop	{r7}
 8016e4a:	4770      	bx	lr
 8016e4c:	edb88320 	.word	0xedb88320

08016e50 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016e50:	b480      	push	{r7}
 8016e52:	b083      	sub	sp, #12
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	683a      	ldr	r2, [r7, #0]
 8016e5e:	619a      	str	r2, [r3, #24]
}
 8016e60:	bf00      	nop
 8016e62:	370c      	adds	r7, #12
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bc80      	pop	{r7}
 8016e68:	4770      	bx	lr

08016e6a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016e6a:	b480      	push	{r7}
 8016e6c:	b083      	sub	sp, #12
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	6078      	str	r0, [r7, #4]
 8016e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	683a      	ldr	r2, [r7, #0]
 8016e78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016e7a:	bf00      	nop
 8016e7c:	370c      	adds	r7, #12
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bc80      	pop	{r7}
 8016e82:	4770      	bx	lr

08016e84 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af02      	add	r7, sp, #8
 8016e8a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016e8c:	4a21      	ldr	r2, [pc, #132]	; (8016f14 <RadioInit+0x90>)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016e92:	4b21      	ldr	r3, [pc, #132]	; (8016f18 <RadioInit+0x94>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016e98:	4b1f      	ldr	r3, [pc, #124]	; (8016f18 <RadioInit+0x94>)
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016e9e:	4b1e      	ldr	r3, [pc, #120]	; (8016f18 <RadioInit+0x94>)
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8016ea4:	481d      	ldr	r0, [pc, #116]	; (8016f1c <RadioInit+0x98>)
 8016ea6:	f001 fee3 	bl	8018c70 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8016eaa:	2000      	movs	r0, #0
 8016eac:	f001 f82a 	bl	8017f04 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016eb0:	f002 f974 	bl	801919c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016eb4:	2100      	movs	r1, #0
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	f002 fcca 	bl	8019850 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016ebc:	2204      	movs	r2, #4
 8016ebe:	2100      	movs	r1, #0
 8016ec0:	2001      	movs	r0, #1
 8016ec2:	f002 faf5 	bl	80194b0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	2200      	movs	r2, #0
 8016eca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016ece:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016ed2:	f002 fa29 	bl	8019328 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016ed6:	f000 fea1 	bl	8017c1c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016eda:	2300      	movs	r3, #0
 8016edc:	9300      	str	r3, [sp, #0]
 8016ede:	4b10      	ldr	r3, [pc, #64]	; (8016f20 <RadioInit+0x9c>)
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8016ee6:	480f      	ldr	r0, [pc, #60]	; (8016f24 <RadioInit+0xa0>)
 8016ee8:	f003 feb2 	bl	801ac50 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016eec:	2300      	movs	r3, #0
 8016eee:	9300      	str	r3, [sp, #0]
 8016ef0:	4b0d      	ldr	r3, [pc, #52]	; (8016f28 <RadioInit+0xa4>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8016ef8:	480c      	ldr	r0, [pc, #48]	; (8016f2c <RadioInit+0xa8>)
 8016efa:	f003 fea9 	bl	801ac50 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016efe:	4809      	ldr	r0, [pc, #36]	; (8016f24 <RadioInit+0xa0>)
 8016f00:	f003 ff4a 	bl	801ad98 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016f04:	4809      	ldr	r0, [pc, #36]	; (8016f2c <RadioInit+0xa8>)
 8016f06:	f003 ff47 	bl	801ad98 <UTIL_TIMER_Stop>
}
 8016f0a:	bf00      	nop
 8016f0c:	3708      	adds	r7, #8
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	200011a4 	.word	0x200011a4
 8016f18:	20001a44 	.word	0x20001a44
 8016f1c:	08017ffd 	.word	0x08017ffd
 8016f20:	08017f71 	.word	0x08017f71
 8016f24:	20001a9c 	.word	0x20001a9c
 8016f28:	08017f85 	.word	0x08017f85
 8016f2c:	20001ab4 	.word	0x20001ab4

08016f30 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016f34:	f001 fede 	bl	8018cf4 <SUBGRF_GetOperatingMode>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	2b07      	cmp	r3, #7
 8016f3c:	d00a      	beq.n	8016f54 <RadioGetStatus+0x24>
 8016f3e:	2b07      	cmp	r3, #7
 8016f40:	dc0a      	bgt.n	8016f58 <RadioGetStatus+0x28>
 8016f42:	2b04      	cmp	r3, #4
 8016f44:	d002      	beq.n	8016f4c <RadioGetStatus+0x1c>
 8016f46:	2b05      	cmp	r3, #5
 8016f48:	d002      	beq.n	8016f50 <RadioGetStatus+0x20>
 8016f4a:	e005      	b.n	8016f58 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016f4c:	2302      	movs	r3, #2
 8016f4e:	e004      	b.n	8016f5a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016f50:	2301      	movs	r3, #1
 8016f52:	e002      	b.n	8016f5a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016f54:	2303      	movs	r3, #3
 8016f56:	e000      	b.n	8016f5a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016f58:	2300      	movs	r3, #0
    }
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	bd80      	pop	{r7, pc}
	...

08016f60 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016f6a:	4a25      	ldr	r2, [pc, #148]	; (8017000 <RadioSetModem+0xa0>)
 8016f6c:	79fb      	ldrb	r3, [r7, #7]
 8016f6e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8016f70:	79fb      	ldrb	r3, [r7, #7]
 8016f72:	4618      	mov	r0, r3
 8016f74:	f003 f831 	bl	8019fda <RFW_SetRadioModem>
    switch( modem )
 8016f78:	79fb      	ldrb	r3, [r7, #7]
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	2b03      	cmp	r3, #3
 8016f7e:	d80b      	bhi.n	8016f98 <RadioSetModem+0x38>
 8016f80:	a201      	add	r2, pc, #4	; (adr r2, 8016f88 <RadioSetModem+0x28>)
 8016f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f86:	bf00      	nop
 8016f88:	08016fa7 	.word	0x08016fa7
 8016f8c:	08016fcd 	.word	0x08016fcd
 8016f90:	08016fdb 	.word	0x08016fdb
 8016f94:	08016fe9 	.word	0x08016fe9
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016f98:	2000      	movs	r0, #0
 8016f9a:	f002 fa63 	bl	8019464 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016f9e:	4b18      	ldr	r3, [pc, #96]	; (8017000 <RadioSetModem+0xa0>)
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	735a      	strb	r2, [r3, #13]
        break;
 8016fa4:	e028      	b.n	8016ff8 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016fa6:	2001      	movs	r0, #1
 8016fa8:	f002 fa5c 	bl	8019464 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016fac:	4b14      	ldr	r3, [pc, #80]	; (8017000 <RadioSetModem+0xa0>)
 8016fae:	7b5a      	ldrb	r2, [r3, #13]
 8016fb0:	4b13      	ldr	r3, [pc, #76]	; (8017000 <RadioSetModem+0xa0>)
 8016fb2:	7b1b      	ldrb	r3, [r3, #12]
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	d01e      	beq.n	8016ff6 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016fb8:	4b11      	ldr	r3, [pc, #68]	; (8017000 <RadioSetModem+0xa0>)
 8016fba:	7b1a      	ldrb	r2, [r3, #12]
 8016fbc:	4b10      	ldr	r3, [pc, #64]	; (8017000 <RadioSetModem+0xa0>)
 8016fbe:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016fc0:	4b0f      	ldr	r3, [pc, #60]	; (8017000 <RadioSetModem+0xa0>)
 8016fc2:	7b5b      	ldrb	r3, [r3, #13]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f000 ff9d 	bl	8017f04 <RadioSetPublicNetwork>
        }
        break;
 8016fca:	e014      	b.n	8016ff6 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016fcc:	2002      	movs	r0, #2
 8016fce:	f002 fa49 	bl	8019464 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016fd2:	4b0b      	ldr	r3, [pc, #44]	; (8017000 <RadioSetModem+0xa0>)
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	735a      	strb	r2, [r3, #13]
        break;
 8016fd8:	e00e      	b.n	8016ff8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016fda:	2002      	movs	r0, #2
 8016fdc:	f002 fa42 	bl	8019464 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016fe0:	4b07      	ldr	r3, [pc, #28]	; (8017000 <RadioSetModem+0xa0>)
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	735a      	strb	r2, [r3, #13]
        break;
 8016fe6:	e007      	b.n	8016ff8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016fe8:	2000      	movs	r0, #0
 8016fea:	f002 fa3b 	bl	8019464 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016fee:	4b04      	ldr	r3, [pc, #16]	; (8017000 <RadioSetModem+0xa0>)
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	735a      	strb	r2, [r3, #13]
        break;
 8016ff4:	e000      	b.n	8016ff8 <RadioSetModem+0x98>
        break;
 8016ff6:	bf00      	nop
    }
}
 8016ff8:	bf00      	nop
 8016ffa:	3708      	adds	r7, #8
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}
 8017000:	20001a44 	.word	0x20001a44

08017004 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b082      	sub	sp, #8
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f002 f9e7 	bl	80193e0 <SUBGRF_SetRfFrequency>
}
 8017012:	bf00      	nop
 8017014:	3708      	adds	r7, #8
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}

0801701a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801701a:	b580      	push	{r7, lr}
 801701c:	b090      	sub	sp, #64	; 0x40
 801701e:	af0a      	add	r7, sp, #40	; 0x28
 8017020:	60f8      	str	r0, [r7, #12]
 8017022:	60b9      	str	r1, [r7, #8]
 8017024:	603b      	str	r3, [r7, #0]
 8017026:	4613      	mov	r3, r2
 8017028:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801702a:	2301      	movs	r3, #1
 801702c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801702e:	2300      	movs	r3, #0
 8017030:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8017036:	f000 fe04 	bl	8017c42 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801703a:	2000      	movs	r0, #0
 801703c:	f7ff ff90 	bl	8016f60 <RadioSetModem>

    RadioSetChannel( freq );
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f7ff ffdf 	bl	8017004 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017046:	2301      	movs	r3, #1
 8017048:	9309      	str	r3, [sp, #36]	; 0x24
 801704a:	2300      	movs	r3, #0
 801704c:	9308      	str	r3, [sp, #32]
 801704e:	2300      	movs	r3, #0
 8017050:	9307      	str	r3, [sp, #28]
 8017052:	2300      	movs	r3, #0
 8017054:	9306      	str	r3, [sp, #24]
 8017056:	2300      	movs	r3, #0
 8017058:	9305      	str	r3, [sp, #20]
 801705a:	2300      	movs	r3, #0
 801705c:	9304      	str	r3, [sp, #16]
 801705e:	2300      	movs	r3, #0
 8017060:	9303      	str	r3, [sp, #12]
 8017062:	2300      	movs	r3, #0
 8017064:	9302      	str	r3, [sp, #8]
 8017066:	2303      	movs	r3, #3
 8017068:	9301      	str	r3, [sp, #4]
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	2300      	movs	r3, #0
 8017070:	f44f 7216 	mov.w	r2, #600	; 0x258
 8017074:	68b9      	ldr	r1, [r7, #8]
 8017076:	2000      	movs	r0, #0
 8017078:	f000 f840 	bl	80170fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801707c:	2000      	movs	r0, #0
 801707e:	f000 fde7 	bl	8017c50 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017082:	f000 ff6d 	bl	8017f60 <RadioGetWakeupTime>
 8017086:	4603      	mov	r3, r0
 8017088:	4618      	mov	r0, r3
 801708a:	f7ea fc5e 	bl	800194a <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801708e:	f003 ff9d 	bl	801afcc <UTIL_TIMER_GetCurrentTime>
 8017092:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017094:	e00d      	b.n	80170b2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017096:	2000      	movs	r0, #0
 8017098:	f000 feb2 	bl	8017e00 <RadioRssi>
 801709c:	4603      	mov	r3, r0
 801709e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80170a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80170a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80170a8:	429a      	cmp	r2, r3
 80170aa:	dd02      	ble.n	80170b2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80170ac:	2300      	movs	r3, #0
 80170ae:	75fb      	strb	r3, [r7, #23]
            break;
 80170b0:	e006      	b.n	80170c0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80170b2:	6938      	ldr	r0, [r7, #16]
 80170b4:	f003 ff9c 	bl	801aff0 <UTIL_TIMER_GetElapsedTime>
 80170b8:	4602      	mov	r2, r0
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	4293      	cmp	r3, r2
 80170be:	d8ea      	bhi.n	8017096 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80170c0:	f000 fdbf 	bl	8017c42 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80170c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3718      	adds	r7, #24
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}

080170ce <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80170ce:	b580      	push	{r7, lr}
 80170d0:	b082      	sub	sp, #8
 80170d2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80170d4:	2300      	movs	r3, #0
 80170d6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80170d8:	2001      	movs	r0, #1
 80170da:	f7ff ff41 	bl	8016f60 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80170de:	2300      	movs	r3, #0
 80170e0:	2200      	movs	r2, #0
 80170e2:	2100      	movs	r1, #0
 80170e4:	2000      	movs	r0, #0
 80170e6:	f002 f91f 	bl	8019328 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80170ea:	f001 fed4 	bl	8018e96 <SUBGRF_GetRandom>
 80170ee:	6078      	str	r0, [r7, #4]

    return rnd;
 80170f0:	687b      	ldr	r3, [r7, #4]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3708      	adds	r7, #8
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
	...

080170fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b08a      	sub	sp, #40	; 0x28
 8017100:	af00      	add	r7, sp, #0
 8017102:	60b9      	str	r1, [r7, #8]
 8017104:	607a      	str	r2, [r7, #4]
 8017106:	461a      	mov	r2, r3
 8017108:	4603      	mov	r3, r0
 801710a:	73fb      	strb	r3, [r7, #15]
 801710c:	4613      	mov	r3, r2
 801710e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8017110:	4abd      	ldr	r2, [pc, #756]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017112:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017116:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017118:	f002 ff1d 	bl	8019f56 <RFW_DeInit>
    if( rxContinuous == true )
 801711c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017120:	2b00      	cmp	r3, #0
 8017122:	d001      	beq.n	8017128 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017124:	2300      	movs	r3, #0
 8017126:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8017128:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801712c:	2b00      	cmp	r3, #0
 801712e:	d004      	beq.n	801713a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017130:	4ab6      	ldr	r2, [pc, #728]	; (801740c <RadioSetRxConfig+0x310>)
 8017132:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017136:	7013      	strb	r3, [r2, #0]
 8017138:	e002      	b.n	8017140 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801713a:	4bb4      	ldr	r3, [pc, #720]	; (801740c <RadioSetRxConfig+0x310>)
 801713c:	22ff      	movs	r2, #255	; 0xff
 801713e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017140:	7bfb      	ldrb	r3, [r7, #15]
 8017142:	2b04      	cmp	r3, #4
 8017144:	d009      	beq.n	801715a <RadioSetRxConfig+0x5e>
 8017146:	2b04      	cmp	r3, #4
 8017148:	f300 81da 	bgt.w	8017500 <RadioSetRxConfig+0x404>
 801714c:	2b00      	cmp	r3, #0
 801714e:	f000 80bf 	beq.w	80172d0 <RadioSetRxConfig+0x1d4>
 8017152:	2b01      	cmp	r3, #1
 8017154:	f000 812c 	beq.w	80173b0 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017158:	e1d2      	b.n	8017500 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801715a:	2001      	movs	r0, #1
 801715c:	f001 ffe0 	bl	8019120 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017160:	4ba9      	ldr	r3, [pc, #676]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017162:	2200      	movs	r2, #0
 8017164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017168:	4aa7      	ldr	r2, [pc, #668]	; (8017408 <RadioSetRxConfig+0x30c>)
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801716e:	4ba6      	ldr	r3, [pc, #664]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017170:	2209      	movs	r2, #9
 8017172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017176:	4ba4      	ldr	r3, [pc, #656]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017178:	f44f 7248 	mov.w	r2, #800	; 0x320
 801717c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801717e:	68b8      	ldr	r0, [r7, #8]
 8017180:	f002 fe1a 	bl	8019db8 <SUBGRF_GetFskBandwidthRegValue>
 8017184:	4603      	mov	r3, r0
 8017186:	461a      	mov	r2, r3
 8017188:	4b9f      	ldr	r3, [pc, #636]	; (8017408 <RadioSetRxConfig+0x30c>)
 801718a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801718e:	4b9e      	ldr	r3, [pc, #632]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017190:	2200      	movs	r2, #0
 8017192:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017194:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017196:	00db      	lsls	r3, r3, #3
 8017198:	b29a      	uxth	r2, r3
 801719a:	4b9b      	ldr	r3, [pc, #620]	; (8017408 <RadioSetRxConfig+0x30c>)
 801719c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801719e:	4b9a      	ldr	r3, [pc, #616]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171a0:	2200      	movs	r2, #0
 80171a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80171a4:	4b98      	ldr	r3, [pc, #608]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171a6:	2210      	movs	r2, #16
 80171a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80171aa:	4b97      	ldr	r3, [pc, #604]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171ac:	2200      	movs	r2, #0
 80171ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80171b0:	4b95      	ldr	r3, [pc, #596]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171b2:	2200      	movs	r2, #0
 80171b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80171b6:	4b95      	ldr	r3, [pc, #596]	; (801740c <RadioSetRxConfig+0x310>)
 80171b8:	781a      	ldrb	r2, [r3, #0]
 80171ba:	4b93      	ldr	r3, [pc, #588]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80171be:	4b92      	ldr	r3, [pc, #584]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171c0:	2201      	movs	r2, #1
 80171c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80171c4:	4b90      	ldr	r3, [pc, #576]	; (8017408 <RadioSetRxConfig+0x30c>)
 80171c6:	2200      	movs	r2, #0
 80171c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80171ca:	2004      	movs	r0, #4
 80171cc:	f7ff fec8 	bl	8016f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80171d0:	488f      	ldr	r0, [pc, #572]	; (8017410 <RadioSetRxConfig+0x314>)
 80171d2:	f002 f9d3 	bl	801957c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171d6:	488f      	ldr	r0, [pc, #572]	; (8017414 <RadioSetRxConfig+0x318>)
 80171d8:	f002 fa9c 	bl	8019714 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80171dc:	4a8e      	ldr	r2, [pc, #568]	; (8017418 <RadioSetRxConfig+0x31c>)
 80171de:	f107 031c 	add.w	r3, r7, #28
 80171e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80171ea:	f107 031c 	add.w	r3, r7, #28
 80171ee:	4618      	mov	r0, r3
 80171f0:	f001 fdcf 	bl	8018d92 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80171f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80171f8:	f001 fe1a 	bl	8018e30 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80171fc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8017200:	f000 fe1d 	bl	8017e3e <RadioRead>
 8017204:	4603      	mov	r3, r0
 8017206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801720a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801720e:	f023 0310 	bic.w	r3, r3, #16
 8017212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8017216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801721a:	4619      	mov	r1, r3
 801721c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8017220:	f000 fdfb 	bl	8017e1a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8017224:	2104      	movs	r1, #4
 8017226:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801722a:	f000 fdf6 	bl	8017e1a <RadioWrite>
            modReg= RadioRead(0x89b);
 801722e:	f640 009b 	movw	r0, #2203	; 0x89b
 8017232:	f000 fe04 	bl	8017e3e <RadioRead>
 8017236:	4603      	mov	r3, r0
 8017238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017240:	f023 031c 	bic.w	r3, r3, #28
 8017244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8017248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801724c:	f043 0308 	orr.w	r3, r3, #8
 8017250:	b2db      	uxtb	r3, r3
 8017252:	4619      	mov	r1, r3
 8017254:	f640 009b 	movw	r0, #2203	; 0x89b
 8017258:	f000 fddf 	bl	8017e1a <RadioWrite>
            modReg= RadioRead(0x6d1);
 801725c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8017260:	f000 fded 	bl	8017e3e <RadioRead>
 8017264:	4603      	mov	r3, r0
 8017266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801726a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801726e:	f023 0318 	bic.w	r3, r3, #24
 8017272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8017276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801727a:	f043 0318 	orr.w	r3, r3, #24
 801727e:	b2db      	uxtb	r3, r3
 8017280:	4619      	mov	r1, r3
 8017282:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8017286:	f000 fdc8 	bl	8017e1a <RadioWrite>
            modReg= RadioRead(0x6ac);
 801728a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801728e:	f000 fdd6 	bl	8017e3e <RadioRead>
 8017292:	4603      	mov	r3, r0
 8017294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80172a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80172a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80172ac:	b2db      	uxtb	r3, r3
 80172ae:	4619      	mov	r1, r3
 80172b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80172b4:	f000 fdb1 	bl	8017e1a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80172b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80172ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80172be:	fb02 f303 	mul.w	r3, r2, r3
 80172c2:	461a      	mov	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80172ca:	4a4f      	ldr	r2, [pc, #316]	; (8017408 <RadioSetRxConfig+0x30c>)
 80172cc:	6093      	str	r3, [r2, #8]
            break;
 80172ce:	e118      	b.n	8017502 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80172d0:	2000      	movs	r0, #0
 80172d2:	f001 ff25 	bl	8019120 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80172d6:	4b4c      	ldr	r3, [pc, #304]	; (8017408 <RadioSetRxConfig+0x30c>)
 80172d8:	2200      	movs	r2, #0
 80172da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80172de:	4a4a      	ldr	r2, [pc, #296]	; (8017408 <RadioSetRxConfig+0x30c>)
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80172e4:	4b48      	ldr	r3, [pc, #288]	; (8017408 <RadioSetRxConfig+0x30c>)
 80172e6:	220b      	movs	r2, #11
 80172e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80172ec:	68b8      	ldr	r0, [r7, #8]
 80172ee:	f002 fd63 	bl	8019db8 <SUBGRF_GetFskBandwidthRegValue>
 80172f2:	4603      	mov	r3, r0
 80172f4:	461a      	mov	r2, r3
 80172f6:	4b44      	ldr	r3, [pc, #272]	; (8017408 <RadioSetRxConfig+0x30c>)
 80172f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80172fc:	4b42      	ldr	r3, [pc, #264]	; (8017408 <RadioSetRxConfig+0x30c>)
 80172fe:	2200      	movs	r2, #0
 8017300:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017304:	00db      	lsls	r3, r3, #3
 8017306:	b29a      	uxth	r2, r3
 8017308:	4b3f      	ldr	r3, [pc, #252]	; (8017408 <RadioSetRxConfig+0x30c>)
 801730a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801730c:	4b3e      	ldr	r3, [pc, #248]	; (8017408 <RadioSetRxConfig+0x30c>)
 801730e:	2204      	movs	r2, #4
 8017310:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017312:	4b3d      	ldr	r3, [pc, #244]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017314:	2218      	movs	r2, #24
 8017316:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017318:	4b3b      	ldr	r3, [pc, #236]	; (8017408 <RadioSetRxConfig+0x30c>)
 801731a:	2200      	movs	r2, #0
 801731c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801731e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017322:	f083 0301 	eor.w	r3, r3, #1
 8017326:	b2db      	uxtb	r3, r3
 8017328:	461a      	mov	r2, r3
 801732a:	4b37      	ldr	r3, [pc, #220]	; (8017408 <RadioSetRxConfig+0x30c>)
 801732c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801732e:	4b37      	ldr	r3, [pc, #220]	; (801740c <RadioSetRxConfig+0x310>)
 8017330:	781a      	ldrb	r2, [r3, #0]
 8017332:	4b35      	ldr	r3, [pc, #212]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017334:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017336:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801733a:	2b00      	cmp	r3, #0
 801733c:	d003      	beq.n	8017346 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801733e:	4b32      	ldr	r3, [pc, #200]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017340:	22f2      	movs	r2, #242	; 0xf2
 8017342:	75da      	strb	r2, [r3, #23]
 8017344:	e002      	b.n	801734c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017346:	4b30      	ldr	r3, [pc, #192]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017348:	2201      	movs	r2, #1
 801734a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801734c:	4b2e      	ldr	r3, [pc, #184]	; (8017408 <RadioSetRxConfig+0x30c>)
 801734e:	2201      	movs	r2, #1
 8017350:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017352:	f000 fc76 	bl	8017c42 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8017356:	4b2c      	ldr	r3, [pc, #176]	; (8017408 <RadioSetRxConfig+0x30c>)
 8017358:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801735c:	2b00      	cmp	r3, #0
 801735e:	bf14      	ite	ne
 8017360:	2301      	movne	r3, #1
 8017362:	2300      	moveq	r3, #0
 8017364:	b2db      	uxtb	r3, r3
 8017366:	4618      	mov	r0, r3
 8017368:	f7ff fdfa 	bl	8016f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801736c:	4828      	ldr	r0, [pc, #160]	; (8017410 <RadioSetRxConfig+0x314>)
 801736e:	f002 f905 	bl	801957c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017372:	4828      	ldr	r0, [pc, #160]	; (8017414 <RadioSetRxConfig+0x318>)
 8017374:	f002 f9ce 	bl	8019714 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017378:	4a28      	ldr	r2, [pc, #160]	; (801741c <RadioSetRxConfig+0x320>)
 801737a:	f107 0314 	add.w	r3, r7, #20
 801737e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017382:	e883 0003 	stmia.w	r3, {r0, r1}
 8017386:	f107 0314 	add.w	r3, r7, #20
 801738a:	4618      	mov	r0, r3
 801738c:	f001 fd01 	bl	8018d92 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017390:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017394:	f001 fd4c 	bl	8018e30 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801739a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801739e:	fb02 f303 	mul.w	r3, r2, r3
 80173a2:	461a      	mov	r2, r3
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80173aa:	4a17      	ldr	r2, [pc, #92]	; (8017408 <RadioSetRxConfig+0x30c>)
 80173ac:	6093      	str	r3, [r2, #8]
            break;
 80173ae:	e0a8      	b.n	8017502 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80173b0:	2000      	movs	r0, #0
 80173b2:	f001 feb5 	bl	8019120 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80173b6:	4b14      	ldr	r3, [pc, #80]	; (8017408 <RadioSetRxConfig+0x30c>)
 80173b8:	2201      	movs	r2, #1
 80173ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	b2da      	uxtb	r2, r3
 80173c2:	4b11      	ldr	r3, [pc, #68]	; (8017408 <RadioSetRxConfig+0x30c>)
 80173c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80173c8:	4a15      	ldr	r2, [pc, #84]	; (8017420 <RadioSetRxConfig+0x324>)
 80173ca:	68bb      	ldr	r3, [r7, #8]
 80173cc:	4413      	add	r3, r2
 80173ce:	781a      	ldrb	r2, [r3, #0]
 80173d0:	4b0d      	ldr	r3, [pc, #52]	; (8017408 <RadioSetRxConfig+0x30c>)
 80173d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80173d6:	4a0c      	ldr	r2, [pc, #48]	; (8017408 <RadioSetRxConfig+0x30c>)
 80173d8:	7bbb      	ldrb	r3, [r7, #14]
 80173da:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d105      	bne.n	80173f0 <RadioSetRxConfig+0x2f4>
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2b0b      	cmp	r3, #11
 80173e8:	d008      	beq.n	80173fc <RadioSetRxConfig+0x300>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	2b0c      	cmp	r3, #12
 80173ee:	d005      	beq.n	80173fc <RadioSetRxConfig+0x300>
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	2b01      	cmp	r3, #1
 80173f4:	d116      	bne.n	8017424 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2b0c      	cmp	r3, #12
 80173fa:	d113      	bne.n	8017424 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80173fc:	4b02      	ldr	r3, [pc, #8]	; (8017408 <RadioSetRxConfig+0x30c>)
 80173fe:	2201      	movs	r2, #1
 8017400:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017404:	e012      	b.n	801742c <RadioSetRxConfig+0x330>
 8017406:	bf00      	nop
 8017408:	20001a44 	.word	0x20001a44
 801740c:	20000120 	.word	0x20000120
 8017410:	20001a7c 	.word	0x20001a7c
 8017414:	20001a52 	.word	0x20001a52
 8017418:	0801bec8 	.word	0x0801bec8
 801741c:	0801bed0 	.word	0x0801bed0
 8017420:	0801c550 	.word	0x0801c550
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017424:	4b39      	ldr	r3, [pc, #228]	; (801750c <RadioSetRxConfig+0x410>)
 8017426:	2200      	movs	r2, #0
 8017428:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801742c:	4b37      	ldr	r3, [pc, #220]	; (801750c <RadioSetRxConfig+0x410>)
 801742e:	2201      	movs	r2, #1
 8017430:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017432:	4b36      	ldr	r3, [pc, #216]	; (801750c <RadioSetRxConfig+0x410>)
 8017434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017438:	2b05      	cmp	r3, #5
 801743a:	d004      	beq.n	8017446 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801743c:	4b33      	ldr	r3, [pc, #204]	; (801750c <RadioSetRxConfig+0x410>)
 801743e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017442:	2b06      	cmp	r3, #6
 8017444:	d10a      	bne.n	801745c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8017446:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017448:	2b0b      	cmp	r3, #11
 801744a:	d803      	bhi.n	8017454 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801744c:	4b2f      	ldr	r3, [pc, #188]	; (801750c <RadioSetRxConfig+0x410>)
 801744e:	220c      	movs	r2, #12
 8017450:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017452:	e006      	b.n	8017462 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017454:	4a2d      	ldr	r2, [pc, #180]	; (801750c <RadioSetRxConfig+0x410>)
 8017456:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017458:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801745a:	e002      	b.n	8017462 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801745c:	4a2b      	ldr	r2, [pc, #172]	; (801750c <RadioSetRxConfig+0x410>)
 801745e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017460:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017462:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017466:	4b29      	ldr	r3, [pc, #164]	; (801750c <RadioSetRxConfig+0x410>)
 8017468:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801746a:	4b29      	ldr	r3, [pc, #164]	; (8017510 <RadioSetRxConfig+0x414>)
 801746c:	781a      	ldrb	r2, [r3, #0]
 801746e:	4b27      	ldr	r3, [pc, #156]	; (801750c <RadioSetRxConfig+0x410>)
 8017470:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017472:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8017476:	4b25      	ldr	r3, [pc, #148]	; (801750c <RadioSetRxConfig+0x410>)
 8017478:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801747c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8017480:	4b22      	ldr	r3, [pc, #136]	; (801750c <RadioSetRxConfig+0x410>)
 8017482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017486:	f000 fbdc 	bl	8017c42 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801748a:	4b20      	ldr	r3, [pc, #128]	; (801750c <RadioSetRxConfig+0x410>)
 801748c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017490:	2b00      	cmp	r3, #0
 8017492:	bf14      	ite	ne
 8017494:	2301      	movne	r3, #1
 8017496:	2300      	moveq	r3, #0
 8017498:	b2db      	uxtb	r3, r3
 801749a:	4618      	mov	r0, r3
 801749c:	f7ff fd60 	bl	8016f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80174a0:	481c      	ldr	r0, [pc, #112]	; (8017514 <RadioSetRxConfig+0x418>)
 80174a2:	f002 f86b 	bl	801957c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174a6:	481c      	ldr	r0, [pc, #112]	; (8017518 <RadioSetRxConfig+0x41c>)
 80174a8:	f002 f934 	bl	8019714 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80174ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80174ae:	b2db      	uxtb	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f001 fe44 	bl	801913e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80174b6:	4b15      	ldr	r3, [pc, #84]	; (801750c <RadioSetRxConfig+0x410>)
 80174b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80174bc:	2b01      	cmp	r3, #1
 80174be:	d10d      	bne.n	80174dc <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80174c0:	f240 7036 	movw	r0, #1846	; 0x736
 80174c4:	f002 fa82 	bl	80199cc <SUBGRF_ReadRegister>
 80174c8:	4603      	mov	r3, r0
 80174ca:	f023 0304 	bic.w	r3, r3, #4
 80174ce:	b2db      	uxtb	r3, r3
 80174d0:	4619      	mov	r1, r3
 80174d2:	f240 7036 	movw	r0, #1846	; 0x736
 80174d6:	f002 fa65 	bl	80199a4 <SUBGRF_WriteRegister>
 80174da:	e00c      	b.n	80174f6 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80174dc:	f240 7036 	movw	r0, #1846	; 0x736
 80174e0:	f002 fa74 	bl	80199cc <SUBGRF_ReadRegister>
 80174e4:	4603      	mov	r3, r0
 80174e6:	f043 0304 	orr.w	r3, r3, #4
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	4619      	mov	r1, r3
 80174ee:	f240 7036 	movw	r0, #1846	; 0x736
 80174f2:	f002 fa57 	bl	80199a4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80174f6:	4b05      	ldr	r3, [pc, #20]	; (801750c <RadioSetRxConfig+0x410>)
 80174f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174fc:	609a      	str	r2, [r3, #8]
            break;
 80174fe:	e000      	b.n	8017502 <RadioSetRxConfig+0x406>
            break;
 8017500:	bf00      	nop
    }
}
 8017502:	bf00      	nop
 8017504:	3728      	adds	r7, #40	; 0x28
 8017506:	46bd      	mov	sp, r7
 8017508:	bd80      	pop	{r7, pc}
 801750a:	bf00      	nop
 801750c:	20001a44 	.word	0x20001a44
 8017510:	20000120 	.word	0x20000120
 8017514:	20001a7c 	.word	0x20001a7c
 8017518:	20001a52 	.word	0x20001a52

0801751c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b086      	sub	sp, #24
 8017520:	af00      	add	r7, sp, #0
 8017522:	60ba      	str	r2, [r7, #8]
 8017524:	607b      	str	r3, [r7, #4]
 8017526:	4603      	mov	r3, r0
 8017528:	73fb      	strb	r3, [r7, #15]
 801752a:	460b      	mov	r3, r1
 801752c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801752e:	f002 fd12 	bl	8019f56 <RFW_DeInit>
    switch( modem )
 8017532:	7bfb      	ldrb	r3, [r7, #15]
 8017534:	2b03      	cmp	r3, #3
 8017536:	f000 80d7 	beq.w	80176e8 <RadioSetTxConfig+0x1cc>
 801753a:	2b03      	cmp	r3, #3
 801753c:	f300 80e6 	bgt.w	801770c <RadioSetTxConfig+0x1f0>
 8017540:	2b00      	cmp	r3, #0
 8017542:	d002      	beq.n	801754a <RadioSetTxConfig+0x2e>
 8017544:	2b01      	cmp	r3, #1
 8017546:	d061      	beq.n	801760c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8017548:	e0e0      	b.n	801770c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801754a:	4b7c      	ldr	r3, [pc, #496]	; (801773c <RadioSetTxConfig+0x220>)
 801754c:	2200      	movs	r2, #0
 801754e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017552:	4a7a      	ldr	r2, [pc, #488]	; (801773c <RadioSetTxConfig+0x220>)
 8017554:	6a3b      	ldr	r3, [r7, #32]
 8017556:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017558:	4b78      	ldr	r3, [pc, #480]	; (801773c <RadioSetTxConfig+0x220>)
 801755a:	220b      	movs	r2, #11
 801755c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f002 fc29 	bl	8019db8 <SUBGRF_GetFskBandwidthRegValue>
 8017566:	4603      	mov	r3, r0
 8017568:	461a      	mov	r2, r3
 801756a:	4b74      	ldr	r3, [pc, #464]	; (801773c <RadioSetTxConfig+0x220>)
 801756c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017570:	4a72      	ldr	r2, [pc, #456]	; (801773c <RadioSetTxConfig+0x220>)
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017576:	4b71      	ldr	r3, [pc, #452]	; (801773c <RadioSetTxConfig+0x220>)
 8017578:	2200      	movs	r2, #0
 801757a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801757c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801757e:	00db      	lsls	r3, r3, #3
 8017580:	b29a      	uxth	r2, r3
 8017582:	4b6e      	ldr	r3, [pc, #440]	; (801773c <RadioSetTxConfig+0x220>)
 8017584:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017586:	4b6d      	ldr	r3, [pc, #436]	; (801773c <RadioSetTxConfig+0x220>)
 8017588:	2204      	movs	r2, #4
 801758a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801758c:	4b6b      	ldr	r3, [pc, #428]	; (801773c <RadioSetTxConfig+0x220>)
 801758e:	2218      	movs	r2, #24
 8017590:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017592:	4b6a      	ldr	r3, [pc, #424]	; (801773c <RadioSetTxConfig+0x220>)
 8017594:	2200      	movs	r2, #0
 8017596:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801759c:	f083 0301 	eor.w	r3, r3, #1
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	461a      	mov	r2, r3
 80175a4:	4b65      	ldr	r3, [pc, #404]	; (801773c <RadioSetTxConfig+0x220>)
 80175a6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80175a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d003      	beq.n	80175b8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80175b0:	4b62      	ldr	r3, [pc, #392]	; (801773c <RadioSetTxConfig+0x220>)
 80175b2:	22f2      	movs	r2, #242	; 0xf2
 80175b4:	75da      	strb	r2, [r3, #23]
 80175b6:	e002      	b.n	80175be <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80175b8:	4b60      	ldr	r3, [pc, #384]	; (801773c <RadioSetTxConfig+0x220>)
 80175ba:	2201      	movs	r2, #1
 80175bc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80175be:	4b5f      	ldr	r3, [pc, #380]	; (801773c <RadioSetTxConfig+0x220>)
 80175c0:	2201      	movs	r2, #1
 80175c2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80175c4:	f000 fb3d 	bl	8017c42 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80175c8:	4b5c      	ldr	r3, [pc, #368]	; (801773c <RadioSetTxConfig+0x220>)
 80175ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	bf14      	ite	ne
 80175d2:	2301      	movne	r3, #1
 80175d4:	2300      	moveq	r3, #0
 80175d6:	b2db      	uxtb	r3, r3
 80175d8:	4618      	mov	r0, r3
 80175da:	f7ff fcc1 	bl	8016f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80175de:	4858      	ldr	r0, [pc, #352]	; (8017740 <RadioSetTxConfig+0x224>)
 80175e0:	f001 ffcc 	bl	801957c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175e4:	4857      	ldr	r0, [pc, #348]	; (8017744 <RadioSetTxConfig+0x228>)
 80175e6:	f002 f895 	bl	8019714 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80175ea:	4a57      	ldr	r2, [pc, #348]	; (8017748 <RadioSetTxConfig+0x22c>)
 80175ec:	f107 0310 	add.w	r3, r7, #16
 80175f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80175f8:	f107 0310 	add.w	r3, r7, #16
 80175fc:	4618      	mov	r0, r3
 80175fe:	f001 fbc8 	bl	8018d92 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8017606:	f001 fc13 	bl	8018e30 <SUBGRF_SetWhiteningSeed>
            break;
 801760a:	e080      	b.n	801770e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801760c:	4b4b      	ldr	r3, [pc, #300]	; (801773c <RadioSetTxConfig+0x220>)
 801760e:	2201      	movs	r2, #1
 8017610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	b2da      	uxtb	r2, r3
 8017618:	4b48      	ldr	r3, [pc, #288]	; (801773c <RadioSetTxConfig+0x220>)
 801761a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801761e:	4a4b      	ldr	r2, [pc, #300]	; (801774c <RadioSetTxConfig+0x230>)
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	4413      	add	r3, r2
 8017624:	781a      	ldrb	r2, [r3, #0]
 8017626:	4b45      	ldr	r3, [pc, #276]	; (801773c <RadioSetTxConfig+0x220>)
 8017628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801762c:	4a43      	ldr	r2, [pc, #268]	; (801773c <RadioSetTxConfig+0x220>)
 801762e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017632:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d105      	bne.n	8017648 <RadioSetTxConfig+0x12c>
 801763c:	6a3b      	ldr	r3, [r7, #32]
 801763e:	2b0b      	cmp	r3, #11
 8017640:	d008      	beq.n	8017654 <RadioSetTxConfig+0x138>
 8017642:	6a3b      	ldr	r3, [r7, #32]
 8017644:	2b0c      	cmp	r3, #12
 8017646:	d005      	beq.n	8017654 <RadioSetTxConfig+0x138>
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	2b01      	cmp	r3, #1
 801764c:	d107      	bne.n	801765e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801764e:	6a3b      	ldr	r3, [r7, #32]
 8017650:	2b0c      	cmp	r3, #12
 8017652:	d104      	bne.n	801765e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017654:	4b39      	ldr	r3, [pc, #228]	; (801773c <RadioSetTxConfig+0x220>)
 8017656:	2201      	movs	r2, #1
 8017658:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801765c:	e003      	b.n	8017666 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801765e:	4b37      	ldr	r3, [pc, #220]	; (801773c <RadioSetTxConfig+0x220>)
 8017660:	2200      	movs	r2, #0
 8017662:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017666:	4b35      	ldr	r3, [pc, #212]	; (801773c <RadioSetTxConfig+0x220>)
 8017668:	2201      	movs	r2, #1
 801766a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801766c:	4b33      	ldr	r3, [pc, #204]	; (801773c <RadioSetTxConfig+0x220>)
 801766e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017672:	2b05      	cmp	r3, #5
 8017674:	d004      	beq.n	8017680 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017676:	4b31      	ldr	r3, [pc, #196]	; (801773c <RadioSetTxConfig+0x220>)
 8017678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801767c:	2b06      	cmp	r3, #6
 801767e:	d10a      	bne.n	8017696 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8017680:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017682:	2b0b      	cmp	r3, #11
 8017684:	d803      	bhi.n	801768e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017686:	4b2d      	ldr	r3, [pc, #180]	; (801773c <RadioSetTxConfig+0x220>)
 8017688:	220c      	movs	r2, #12
 801768a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801768c:	e006      	b.n	801769c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801768e:	4a2b      	ldr	r2, [pc, #172]	; (801773c <RadioSetTxConfig+0x220>)
 8017690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017692:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017694:	e002      	b.n	801769c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017696:	4a29      	ldr	r2, [pc, #164]	; (801773c <RadioSetTxConfig+0x220>)
 8017698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801769a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801769c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80176a0:	4b26      	ldr	r3, [pc, #152]	; (801773c <RadioSetTxConfig+0x220>)
 80176a2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80176a4:	4b2a      	ldr	r3, [pc, #168]	; (8017750 <RadioSetTxConfig+0x234>)
 80176a6:	781a      	ldrb	r2, [r3, #0]
 80176a8:	4b24      	ldr	r3, [pc, #144]	; (801773c <RadioSetTxConfig+0x220>)
 80176aa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80176ac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80176b0:	4b22      	ldr	r3, [pc, #136]	; (801773c <RadioSetTxConfig+0x220>)
 80176b2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80176b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80176ba:	4b20      	ldr	r3, [pc, #128]	; (801773c <RadioSetTxConfig+0x220>)
 80176bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80176c0:	f000 fabf 	bl	8017c42 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80176c4:	4b1d      	ldr	r3, [pc, #116]	; (801773c <RadioSetTxConfig+0x220>)
 80176c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	bf14      	ite	ne
 80176ce:	2301      	movne	r3, #1
 80176d0:	2300      	moveq	r3, #0
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	4618      	mov	r0, r3
 80176d6:	f7ff fc43 	bl	8016f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80176da:	4819      	ldr	r0, [pc, #100]	; (8017740 <RadioSetTxConfig+0x224>)
 80176dc:	f001 ff4e 	bl	801957c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80176e0:	4818      	ldr	r0, [pc, #96]	; (8017744 <RadioSetTxConfig+0x228>)
 80176e2:	f002 f817 	bl	8019714 <SUBGRF_SetPacketParams>
            break;
 80176e6:	e012      	b.n	801770e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80176e8:	2003      	movs	r0, #3
 80176ea:	f7ff fc39 	bl	8016f60 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80176ee:	4b13      	ldr	r3, [pc, #76]	; (801773c <RadioSetTxConfig+0x220>)
 80176f0:	2202      	movs	r2, #2
 80176f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80176f6:	4a11      	ldr	r2, [pc, #68]	; (801773c <RadioSetTxConfig+0x220>)
 80176f8:	6a3b      	ldr	r3, [r7, #32]
 80176fa:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80176fc:	4b0f      	ldr	r3, [pc, #60]	; (801773c <RadioSetTxConfig+0x220>)
 80176fe:	2216      	movs	r2, #22
 8017700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017704:	480e      	ldr	r0, [pc, #56]	; (8017740 <RadioSetTxConfig+0x224>)
 8017706:	f001 ff39 	bl	801957c <SUBGRF_SetModulationParams>
            break;
 801770a:	e000      	b.n	801770e <RadioSetTxConfig+0x1f2>
            break;
 801770c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017712:	4618      	mov	r0, r3
 8017714:	f002 fa62 	bl	8019bdc <SUBGRF_SetRfTxPower>
 8017718:	4603      	mov	r3, r0
 801771a:	461a      	mov	r2, r3
 801771c:	4b07      	ldr	r3, [pc, #28]	; (801773c <RadioSetTxConfig+0x220>)
 801771e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8017722:	4b06      	ldr	r3, [pc, #24]	; (801773c <RadioSetTxConfig+0x220>)
 8017724:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017728:	4618      	mov	r0, r3
 801772a:	f002 fc28 	bl	8019f7e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801772e:	4a03      	ldr	r2, [pc, #12]	; (801773c <RadioSetTxConfig+0x220>)
 8017730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017732:	6053      	str	r3, [r2, #4]
}
 8017734:	bf00      	nop
 8017736:	3718      	adds	r7, #24
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}
 801773c:	20001a44 	.word	0x20001a44
 8017740:	20001a7c 	.word	0x20001a7c
 8017744:	20001a52 	.word	0x20001a52
 8017748:	0801bed0 	.word	0x0801bed0
 801774c:	0801c550 	.word	0x0801c550
 8017750:	20000120 	.word	0x20000120

08017754 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017754:	b480      	push	{r7}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
    return true;
 801775c:	2301      	movs	r3, #1
}
 801775e:	4618      	mov	r0, r3
 8017760:	370c      	adds	r7, #12
 8017762:	46bd      	mov	sp, r7
 8017764:	bc80      	pop	{r7}
 8017766:	4770      	bx	lr

08017768 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017768:	b480      	push	{r7}
 801776a:	b085      	sub	sp, #20
 801776c:	af00      	add	r7, sp, #0
 801776e:	4603      	mov	r3, r0
 8017770:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017772:	2300      	movs	r3, #0
 8017774:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017776:	79fb      	ldrb	r3, [r7, #7]
 8017778:	2b0a      	cmp	r3, #10
 801777a:	d83e      	bhi.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
 801777c:	a201      	add	r2, pc, #4	; (adr r2, 8017784 <RadioGetLoRaBandwidthInHz+0x1c>)
 801777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017782:	bf00      	nop
 8017784:	080177b1 	.word	0x080177b1
 8017788:	080177c1 	.word	0x080177c1
 801778c:	080177d1 	.word	0x080177d1
 8017790:	080177e1 	.word	0x080177e1
 8017794:	080177e9 	.word	0x080177e9
 8017798:	080177ef 	.word	0x080177ef
 801779c:	080177f5 	.word	0x080177f5
 80177a0:	080177fb 	.word	0x080177fb
 80177a4:	080177b9 	.word	0x080177b9
 80177a8:	080177c9 	.word	0x080177c9
 80177ac:	080177d9 	.word	0x080177d9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80177b0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80177b4:	60fb      	str	r3, [r7, #12]
        break;
 80177b6:	e020      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80177b8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80177bc:	60fb      	str	r3, [r7, #12]
        break;
 80177be:	e01c      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80177c0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80177c4:	60fb      	str	r3, [r7, #12]
        break;
 80177c6:	e018      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80177c8:	f245 1361 	movw	r3, #20833	; 0x5161
 80177cc:	60fb      	str	r3, [r7, #12]
        break;
 80177ce:	e014      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80177d0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80177d4:	60fb      	str	r3, [r7, #12]
        break;
 80177d6:	e010      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80177d8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80177dc:	60fb      	str	r3, [r7, #12]
        break;
 80177de:	e00c      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80177e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80177e4:	60fb      	str	r3, [r7, #12]
        break;
 80177e6:	e008      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80177e8:	4b07      	ldr	r3, [pc, #28]	; (8017808 <RadioGetLoRaBandwidthInHz+0xa0>)
 80177ea:	60fb      	str	r3, [r7, #12]
        break;
 80177ec:	e005      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80177ee:	4b07      	ldr	r3, [pc, #28]	; (801780c <RadioGetLoRaBandwidthInHz+0xa4>)
 80177f0:	60fb      	str	r3, [r7, #12]
        break;
 80177f2:	e002      	b.n	80177fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80177f4:	4b06      	ldr	r3, [pc, #24]	; (8017810 <RadioGetLoRaBandwidthInHz+0xa8>)
 80177f6:	60fb      	str	r3, [r7, #12]
        break;
 80177f8:	bf00      	nop
    }

    return bandwidthInHz;
 80177fa:	68fb      	ldr	r3, [r7, #12]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3714      	adds	r7, #20
 8017800:	46bd      	mov	sp, r7
 8017802:	bc80      	pop	{r7}
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop
 8017808:	0001e848 	.word	0x0001e848
 801780c:	0003d090 	.word	0x0003d090
 8017810:	0007a120 	.word	0x0007a120

08017814 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017814:	b480      	push	{r7}
 8017816:	b083      	sub	sp, #12
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	4608      	mov	r0, r1
 801781e:	4611      	mov	r1, r2
 8017820:	461a      	mov	r2, r3
 8017822:	4603      	mov	r3, r0
 8017824:	70fb      	strb	r3, [r7, #3]
 8017826:	460b      	mov	r3, r1
 8017828:	803b      	strh	r3, [r7, #0]
 801782a:	4613      	mov	r3, r2
 801782c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801782e:	883b      	ldrh	r3, [r7, #0]
 8017830:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017832:	78ba      	ldrb	r2, [r7, #2]
 8017834:	f082 0201 	eor.w	r2, r2, #1
 8017838:	b2d2      	uxtb	r2, r2
 801783a:	2a00      	cmp	r2, #0
 801783c:	d001      	beq.n	8017842 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801783e:	2208      	movs	r2, #8
 8017840:	e000      	b.n	8017844 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017842:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017844:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017846:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801784a:	7c3b      	ldrb	r3, [r7, #16]
 801784c:	7d39      	ldrb	r1, [r7, #20]
 801784e:	2900      	cmp	r1, #0
 8017850:	d001      	beq.n	8017856 <RadioGetGfskTimeOnAirNumerator+0x42>
 8017852:	2102      	movs	r1, #2
 8017854:	e000      	b.n	8017858 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017856:	2100      	movs	r1, #0
 8017858:	440b      	add	r3, r1
 801785a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801785c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801785e:	4618      	mov	r0, r3
 8017860:	370c      	adds	r7, #12
 8017862:	46bd      	mov	sp, r7
 8017864:	bc80      	pop	{r7}
 8017866:	4770      	bx	lr

08017868 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017868:	b480      	push	{r7}
 801786a:	b08b      	sub	sp, #44	; 0x2c
 801786c:	af00      	add	r7, sp, #0
 801786e:	60f8      	str	r0, [r7, #12]
 8017870:	60b9      	str	r1, [r7, #8]
 8017872:	4611      	mov	r1, r2
 8017874:	461a      	mov	r2, r3
 8017876:	460b      	mov	r3, r1
 8017878:	71fb      	strb	r3, [r7, #7]
 801787a:	4613      	mov	r3, r2
 801787c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801787e:	79fb      	ldrb	r3, [r7, #7]
 8017880:	3304      	adds	r3, #4
 8017882:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017884:	2300      	movs	r3, #0
 8017886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	2b05      	cmp	r3, #5
 801788e:	d002      	beq.n	8017896 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	2b06      	cmp	r3, #6
 8017894:	d104      	bne.n	80178a0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017896:	88bb      	ldrh	r3, [r7, #4]
 8017898:	2b0b      	cmp	r3, #11
 801789a:	d801      	bhi.n	80178a0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801789c:	230c      	movs	r3, #12
 801789e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d105      	bne.n	80178b2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	2b0b      	cmp	r3, #11
 80178aa:	d008      	beq.n	80178be <RadioGetLoRaTimeOnAirNumerator+0x56>
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	2b0c      	cmp	r3, #12
 80178b0:	d005      	beq.n	80178be <RadioGetLoRaTimeOnAirNumerator+0x56>
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	2b01      	cmp	r3, #1
 80178b6:	d105      	bne.n	80178c4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	2b0c      	cmp	r3, #12
 80178bc:	d102      	bne.n	80178c4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80178be:	2301      	movs	r3, #1
 80178c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80178c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80178c8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80178ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80178ce:	2a00      	cmp	r2, #0
 80178d0:	d001      	beq.n	80178d6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80178d2:	2210      	movs	r2, #16
 80178d4:	e000      	b.n	80178d8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80178d6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80178d8:	4413      	add	r3, r2
 80178da:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80178e0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80178e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80178e6:	2a00      	cmp	r2, #0
 80178e8:	d001      	beq.n	80178ee <RadioGetLoRaTimeOnAirNumerator+0x86>
 80178ea:	2200      	movs	r2, #0
 80178ec:	e000      	b.n	80178f0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80178ee:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80178f0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80178f2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	2b06      	cmp	r3, #6
 80178f8:	d803      	bhi.n	8017902 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80178fa:	68bb      	ldr	r3, [r7, #8]
 80178fc:	009b      	lsls	r3, r3, #2
 80178fe:	623b      	str	r3, [r7, #32]
 8017900:	e00e      	b.n	8017920 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017902:	69fb      	ldr	r3, [r7, #28]
 8017904:	3308      	adds	r3, #8
 8017906:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801790c:	2b00      	cmp	r3, #0
 801790e:	d004      	beq.n	801791a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	3b02      	subs	r3, #2
 8017914:	009b      	lsls	r3, r3, #2
 8017916:	623b      	str	r3, [r7, #32]
 8017918:	e002      	b.n	8017920 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	009b      	lsls	r3, r3, #2
 801791e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017920:	69fb      	ldr	r3, [r7, #28]
 8017922:	2b00      	cmp	r3, #0
 8017924:	da01      	bge.n	801792a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017926:	2300      	movs	r3, #0
 8017928:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801792a:	69fa      	ldr	r2, [r7, #28]
 801792c:	6a3b      	ldr	r3, [r7, #32]
 801792e:	4413      	add	r3, r2
 8017930:	1e5a      	subs	r2, r3, #1
 8017932:	6a3b      	ldr	r3, [r7, #32]
 8017934:	fb92 f3f3 	sdiv	r3, r2, r3
 8017938:	697a      	ldr	r2, [r7, #20]
 801793a:	fb02 f203 	mul.w	r2, r2, r3
 801793e:	88bb      	ldrh	r3, [r7, #4]
 8017940:	4413      	add	r3, r2
    int32_t intermediate =
 8017942:	330c      	adds	r3, #12
 8017944:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017946:	68bb      	ldr	r3, [r7, #8]
 8017948:	2b06      	cmp	r3, #6
 801794a:	d802      	bhi.n	8017952 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801794c:	69bb      	ldr	r3, [r7, #24]
 801794e:	3302      	adds	r3, #2
 8017950:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017952:	69bb      	ldr	r3, [r7, #24]
 8017954:	009b      	lsls	r3, r3, #2
 8017956:	1c5a      	adds	r2, r3, #1
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	3b02      	subs	r3, #2
 801795c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017960:	4618      	mov	r0, r3
 8017962:	372c      	adds	r7, #44	; 0x2c
 8017964:	46bd      	mov	sp, r7
 8017966:	bc80      	pop	{r7}
 8017968:	4770      	bx	lr
	...

0801796c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b08a      	sub	sp, #40	; 0x28
 8017970:	af04      	add	r7, sp, #16
 8017972:	60b9      	str	r1, [r7, #8]
 8017974:	607a      	str	r2, [r7, #4]
 8017976:	461a      	mov	r2, r3
 8017978:	4603      	mov	r3, r0
 801797a:	73fb      	strb	r3, [r7, #15]
 801797c:	4613      	mov	r3, r2
 801797e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017980:	2300      	movs	r3, #0
 8017982:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017984:	2301      	movs	r3, #1
 8017986:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017988:	7bfb      	ldrb	r3, [r7, #15]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d002      	beq.n	8017994 <RadioTimeOnAir+0x28>
 801798e:	2b01      	cmp	r3, #1
 8017990:	d017      	beq.n	80179c2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017992:	e035      	b.n	8017a00 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017994:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017998:	8c3a      	ldrh	r2, [r7, #32]
 801799a:	7bb9      	ldrb	r1, [r7, #14]
 801799c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80179a0:	9301      	str	r3, [sp, #4]
 80179a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179a6:	9300      	str	r3, [sp, #0]
 80179a8:	4603      	mov	r3, r0
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f7ff ff32 	bl	8017814 <RadioGetGfskTimeOnAirNumerator>
 80179b0:	4603      	mov	r3, r0
 80179b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80179b6:	fb02 f303 	mul.w	r3, r2, r3
 80179ba:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	613b      	str	r3, [r7, #16]
        break;
 80179c0:	e01e      	b.n	8017a00 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80179c2:	8c39      	ldrh	r1, [r7, #32]
 80179c4:	7bba      	ldrb	r2, [r7, #14]
 80179c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80179ca:	9302      	str	r3, [sp, #8]
 80179cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179d0:	9301      	str	r3, [sp, #4]
 80179d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80179d6:	9300      	str	r3, [sp, #0]
 80179d8:	460b      	mov	r3, r1
 80179da:	6879      	ldr	r1, [r7, #4]
 80179dc:	68b8      	ldr	r0, [r7, #8]
 80179de:	f7ff ff43 	bl	8017868 <RadioGetLoRaTimeOnAirNumerator>
 80179e2:	4603      	mov	r3, r0
 80179e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80179e8:	fb02 f303 	mul.w	r3, r2, r3
 80179ec:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80179ee:	4a0a      	ldr	r2, [pc, #40]	; (8017a18 <RadioTimeOnAir+0xac>)
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	4413      	add	r3, r2
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7ff feb6 	bl	8017768 <RadioGetLoRaBandwidthInHz>
 80179fc:	6138      	str	r0, [r7, #16]
        break;
 80179fe:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017a00:	697a      	ldr	r2, [r7, #20]
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	4413      	add	r3, r2
 8017a06:	1e5a      	subs	r2, r3, #1
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	3718      	adds	r7, #24
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	bf00      	nop
 8017a18:	0801c550 	.word	0x0801c550

08017a1c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b084      	sub	sp, #16
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	460b      	mov	r3, r1
 8017a26:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017a28:	2300      	movs	r3, #0
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	f240 2101 	movw	r1, #513	; 0x201
 8017a30:	f240 2001 	movw	r0, #513	; 0x201
 8017a34:	f001 fc78 	bl	8019328 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8017a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017a3c:	4871      	ldr	r0, [pc, #452]	; (8017c04 <RadioSend+0x1e8>)
 8017a3e:	f7ff fa07 	bl	8016e50 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8017a42:	4b71      	ldr	r3, [pc, #452]	; (8017c08 <RadioSend+0x1ec>)
 8017a44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017a48:	2101      	movs	r1, #1
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f002 f89e 	bl	8019b8c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017a50:	4b6d      	ldr	r3, [pc, #436]	; (8017c08 <RadioSend+0x1ec>)
 8017a52:	781b      	ldrb	r3, [r3, #0]
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d112      	bne.n	8017a7e <RadioSend+0x62>
 8017a58:	4b6b      	ldr	r3, [pc, #428]	; (8017c08 <RadioSend+0x1ec>)
 8017a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017a5e:	2b06      	cmp	r3, #6
 8017a60:	d10d      	bne.n	8017a7e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8017a62:	f640 0089 	movw	r0, #2185	; 0x889
 8017a66:	f001 ffb1 	bl	80199cc <SUBGRF_ReadRegister>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	f023 0304 	bic.w	r3, r3, #4
 8017a70:	b2db      	uxtb	r3, r3
 8017a72:	4619      	mov	r1, r3
 8017a74:	f640 0089 	movw	r0, #2185	; 0x889
 8017a78:	f001 ff94 	bl	80199a4 <SUBGRF_WriteRegister>
 8017a7c:	e00c      	b.n	8017a98 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8017a7e:	f640 0089 	movw	r0, #2185	; 0x889
 8017a82:	f001 ffa3 	bl	80199cc <SUBGRF_ReadRegister>
 8017a86:	4603      	mov	r3, r0
 8017a88:	f043 0304 	orr.w	r3, r3, #4
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	4619      	mov	r1, r3
 8017a90:	f640 0089 	movw	r0, #2185	; 0x889
 8017a94:	f001 ff86 	bl	80199a4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8017a98:	4b5b      	ldr	r3, [pc, #364]	; (8017c08 <RadioSend+0x1ec>)
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	2b03      	cmp	r3, #3
 8017a9e:	f200 80a4 	bhi.w	8017bea <RadioSend+0x1ce>
 8017aa2:	a201      	add	r2, pc, #4	; (adr r2, 8017aa8 <RadioSend+0x8c>)
 8017aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aa8:	08017ad3 	.word	0x08017ad3
 8017aac:	08017ab9 	.word	0x08017ab9
 8017ab0:	08017b33 	.word	0x08017b33
 8017ab4:	08017b53 	.word	0x08017b53
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017ab8:	4a53      	ldr	r2, [pc, #332]	; (8017c08 <RadioSend+0x1ec>)
 8017aba:	78fb      	ldrb	r3, [r7, #3]
 8017abc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017abe:	4853      	ldr	r0, [pc, #332]	; (8017c0c <RadioSend+0x1f0>)
 8017ac0:	f001 fe28 	bl	8019714 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017ac4:	78fb      	ldrb	r3, [r7, #3]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	4619      	mov	r1, r3
 8017aca:	6878      	ldr	r0, [r7, #4]
 8017acc:	f001 f94e 	bl	8018d6c <SUBGRF_SendPayload>
            break;
 8017ad0:	e08c      	b.n	8017bec <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017ad2:	f002 fa46 	bl	8019f62 <RFW_Is_Init>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d11d      	bne.n	8017b18 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017adc:	f107 020d 	add.w	r2, r7, #13
 8017ae0:	78fb      	ldrb	r3, [r7, #3]
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	6878      	ldr	r0, [r7, #4]
 8017ae6:	f002 fa54 	bl	8019f92 <RFW_TransmitInit>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d10c      	bne.n	8017b0a <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017af0:	7b7a      	ldrb	r2, [r7, #13]
 8017af2:	4b45      	ldr	r3, [pc, #276]	; (8017c08 <RadioSend+0x1ec>)
 8017af4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017af6:	4845      	ldr	r0, [pc, #276]	; (8017c0c <RadioSend+0x1f0>)
 8017af8:	f001 fe0c 	bl	8019714 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017afc:	7b7b      	ldrb	r3, [r7, #13]
 8017afe:	2200      	movs	r2, #0
 8017b00:	4619      	mov	r1, r3
 8017b02:	6878      	ldr	r0, [r7, #4]
 8017b04:	f001 f932 	bl	8018d6c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017b08:	e070      	b.n	8017bec <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017b0a:	4b41      	ldr	r3, [pc, #260]	; (8017c10 <RadioSend+0x1f4>)
 8017b0c:	2201      	movs	r2, #1
 8017b0e:	2100      	movs	r1, #0
 8017b10:	2002      	movs	r0, #2
 8017b12:	f003 fb4b 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
 8017b16:	e072      	b.n	8017bfe <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017b18:	4a3b      	ldr	r2, [pc, #236]	; (8017c08 <RadioSend+0x1ec>)
 8017b1a:	78fb      	ldrb	r3, [r7, #3]
 8017b1c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b1e:	483b      	ldr	r0, [pc, #236]	; (8017c0c <RadioSend+0x1f0>)
 8017b20:	f001 fdf8 	bl	8019714 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017b24:	78fb      	ldrb	r3, [r7, #3]
 8017b26:	2200      	movs	r2, #0
 8017b28:	4619      	mov	r1, r3
 8017b2a:	6878      	ldr	r0, [r7, #4]
 8017b2c:	f001 f91e 	bl	8018d6c <SUBGRF_SendPayload>
            break;
 8017b30:	e05c      	b.n	8017bec <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017b32:	4b35      	ldr	r3, [pc, #212]	; (8017c08 <RadioSend+0x1ec>)
 8017b34:	2202      	movs	r2, #2
 8017b36:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017b38:	4a33      	ldr	r2, [pc, #204]	; (8017c08 <RadioSend+0x1ec>)
 8017b3a:	78fb      	ldrb	r3, [r7, #3]
 8017b3c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b3e:	4833      	ldr	r0, [pc, #204]	; (8017c0c <RadioSend+0x1f0>)
 8017b40:	f001 fde8 	bl	8019714 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017b44:	78fb      	ldrb	r3, [r7, #3]
 8017b46:	2200      	movs	r2, #0
 8017b48:	4619      	mov	r1, r3
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f001 f90e 	bl	8018d6c <SUBGRF_SendPayload>
            break;
 8017b50:	e04c      	b.n	8017bec <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017b52:	78fb      	ldrb	r3, [r7, #3]
 8017b54:	461a      	mov	r2, r3
 8017b56:	6879      	ldr	r1, [r7, #4]
 8017b58:	482e      	ldr	r0, [pc, #184]	; (8017c14 <RadioSend+0x1f8>)
 8017b5a:	f000 fc8e 	bl	801847a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017b5e:	4b2a      	ldr	r3, [pc, #168]	; (8017c08 <RadioSend+0x1ec>)
 8017b60:	2202      	movs	r2, #2
 8017b62:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017b64:	78fb      	ldrb	r3, [r7, #3]
 8017b66:	3301      	adds	r3, #1
 8017b68:	b2da      	uxtb	r2, r3
 8017b6a:	4b27      	ldr	r3, [pc, #156]	; (8017c08 <RadioSend+0x1ec>)
 8017b6c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b6e:	4827      	ldr	r0, [pc, #156]	; (8017c0c <RadioSend+0x1f0>)
 8017b70:	f001 fdd0 	bl	8019714 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8017b74:	2100      	movs	r1, #0
 8017b76:	20f1      	movs	r0, #241	; 0xf1
 8017b78:	f000 f94f 	bl	8017e1a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017b7c:	2100      	movs	r1, #0
 8017b7e:	20f0      	movs	r0, #240	; 0xf0
 8017b80:	f000 f94b 	bl	8017e1a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017b84:	4b20      	ldr	r3, [pc, #128]	; (8017c08 <RadioSend+0x1ec>)
 8017b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017b88:	2b64      	cmp	r3, #100	; 0x64
 8017b8a:	d108      	bne.n	8017b9e <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8017b8c:	2170      	movs	r1, #112	; 0x70
 8017b8e:	20f3      	movs	r0, #243	; 0xf3
 8017b90:	f000 f943 	bl	8017e1a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8017b94:	211d      	movs	r1, #29
 8017b96:	20f2      	movs	r0, #242	; 0xf2
 8017b98:	f000 f93f 	bl	8017e1a <RadioWrite>
 8017b9c:	e007      	b.n	8017bae <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8017b9e:	21e1      	movs	r1, #225	; 0xe1
 8017ba0:	20f3      	movs	r0, #243	; 0xf3
 8017ba2:	f000 f93a 	bl	8017e1a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8017ba6:	2104      	movs	r1, #4
 8017ba8:	20f2      	movs	r0, #242	; 0xf2
 8017baa:	f000 f936 	bl	8017e1a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017bae:	78fb      	ldrb	r3, [r7, #3]
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	00db      	lsls	r3, r3, #3
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	3302      	adds	r3, #2
 8017bb8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017bba:	89fb      	ldrh	r3, [r7, #14]
 8017bbc:	0a1b      	lsrs	r3, r3, #8
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	20f4      	movs	r0, #244	; 0xf4
 8017bc6:	f000 f928 	bl	8017e1a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8017bca:	89fb      	ldrh	r3, [r7, #14]
 8017bcc:	b2db      	uxtb	r3, r3
 8017bce:	4619      	mov	r1, r3
 8017bd0:	20f5      	movs	r0, #245	; 0xf5
 8017bd2:	f000 f922 	bl	8017e1a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017bd6:	78fb      	ldrb	r3, [r7, #3]
 8017bd8:	3301      	adds	r3, #1
 8017bda:	b2db      	uxtb	r3, r3
 8017bdc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017be0:	4619      	mov	r1, r3
 8017be2:	480c      	ldr	r0, [pc, #48]	; (8017c14 <RadioSend+0x1f8>)
 8017be4:	f001 f8c2 	bl	8018d6c <SUBGRF_SendPayload>
            break;
 8017be8:	e000      	b.n	8017bec <RadioSend+0x1d0>
        }
        default:
            break;
 8017bea:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017bec:	4b06      	ldr	r3, [pc, #24]	; (8017c08 <RadioSend+0x1ec>)
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	4809      	ldr	r0, [pc, #36]	; (8017c18 <RadioSend+0x1fc>)
 8017bf4:	f003 f940 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017bf8:	4807      	ldr	r0, [pc, #28]	; (8017c18 <RadioSend+0x1fc>)
 8017bfa:	f003 f85f 	bl	801acbc <UTIL_TIMER_Start>
}
 8017bfe:	3710      	adds	r7, #16
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}
 8017c04:	48000400 	.word	0x48000400
 8017c08:	20001a44 	.word	0x20001a44
 8017c0c:	20001a52 	.word	0x20001a52
 8017c10:	0801bed8 	.word	0x0801bed8
 8017c14:	200010a4 	.word	0x200010a4
 8017c18:	20001a9c 	.word	0x20001a9c

08017c1c <RadioSleep>:

static void RadioSleep( void )
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b082      	sub	sp, #8
 8017c20:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017c22:	2300      	movs	r3, #0
 8017c24:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017c26:	793b      	ldrb	r3, [r7, #4]
 8017c28:	f043 0304 	orr.w	r3, r3, #4
 8017c2c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017c2e:	7938      	ldrb	r0, [r7, #4]
 8017c30:	f001 f978 	bl	8018f24 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017c34:	2002      	movs	r0, #2
 8017c36:	f7e9 fe88 	bl	800194a <HAL_Delay>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <RadioStandby>:

static void RadioStandby( void )
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017c46:	2000      	movs	r0, #0
 8017c48:	f001 f99e 	bl	8018f88 <SUBGRF_SetStandby>
}
 8017c4c:	bf00      	nop
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017c58:	f002 f983 	bl	8019f62 <RFW_Is_Init>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	2b01      	cmp	r3, #1
 8017c60:	d102      	bne.n	8017c68 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8017c62:	f002 f9a6 	bl	8019fb2 <RFW_ReceiveInit>
 8017c66:	e007      	b.n	8017c78 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017c68:	2300      	movs	r3, #0
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	f240 2162 	movw	r1, #610	; 0x262
 8017c70:	f240 2062 	movw	r0, #610	; 0x262
 8017c74:	f001 fb58 	bl	8019328 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d006      	beq.n	8017c8c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017c7e:	6879      	ldr	r1, [r7, #4]
 8017c80:	4812      	ldr	r0, [pc, #72]	; (8017ccc <RadioRx+0x7c>)
 8017c82:	f003 f8f9 	bl	801ae78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017c86:	4811      	ldr	r0, [pc, #68]	; (8017ccc <RadioRx+0x7c>)
 8017c88:	f003 f818 	bl	801acbc <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8017c8c:	2101      	movs	r1, #1
 8017c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017c92:	f7ff f8dd 	bl	8016e50 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017c96:	4b0e      	ldr	r3, [pc, #56]	; (8017cd0 <RadioRx+0x80>)
 8017c98:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017c9c:	2100      	movs	r1, #0
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f001 ff74 	bl	8019b8c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017ca4:	4b0a      	ldr	r3, [pc, #40]	; (8017cd0 <RadioRx+0x80>)
 8017ca6:	785b      	ldrb	r3, [r3, #1]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d004      	beq.n	8017cb6 <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017cac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017cb0:	f001 f9a6 	bl	8019000 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017cb4:	e005      	b.n	8017cc2 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017cb6:	4b06      	ldr	r3, [pc, #24]	; (8017cd0 <RadioRx+0x80>)
 8017cb8:	689b      	ldr	r3, [r3, #8]
 8017cba:	019b      	lsls	r3, r3, #6
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f001 f99f 	bl	8019000 <SUBGRF_SetRx>
}
 8017cc2:	bf00      	nop
 8017cc4:	3708      	adds	r7, #8
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	20001ab4 	.word	0x20001ab4
 8017cd0:	20001a44 	.word	0x20001a44

08017cd4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8017cdc:	f002 f941 	bl	8019f62 <RFW_Is_Init>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d102      	bne.n	8017cec <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8017ce6:	f002 f964 	bl	8019fb2 <RFW_ReceiveInit>
 8017cea:	e007      	b.n	8017cfc <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017cec:	2300      	movs	r3, #0
 8017cee:	2200      	movs	r2, #0
 8017cf0:	f240 2162 	movw	r1, #610	; 0x262
 8017cf4:	f240 2062 	movw	r0, #610	; 0x262
 8017cf8:	f001 fb16 	bl	8019328 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d006      	beq.n	8017d10 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017d02:	6879      	ldr	r1, [r7, #4]
 8017d04:	480f      	ldr	r0, [pc, #60]	; (8017d44 <RadioRxBoosted+0x70>)
 8017d06:	f003 f8b7 	bl	801ae78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017d0a:	480e      	ldr	r0, [pc, #56]	; (8017d44 <RadioRxBoosted+0x70>)
 8017d0c:	f002 ffd6 	bl	801acbc <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017d10:	4b0d      	ldr	r3, [pc, #52]	; (8017d48 <RadioRxBoosted+0x74>)
 8017d12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017d16:	2100      	movs	r1, #0
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f001 ff37 	bl	8019b8c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017d1e:	4b0a      	ldr	r3, [pc, #40]	; (8017d48 <RadioRxBoosted+0x74>)
 8017d20:	785b      	ldrb	r3, [r3, #1]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d004      	beq.n	8017d30 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017d26:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017d2a:	f001 f989 	bl	8019040 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017d2e:	e005      	b.n	8017d3c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017d30:	4b05      	ldr	r3, [pc, #20]	; (8017d48 <RadioRxBoosted+0x74>)
 8017d32:	689b      	ldr	r3, [r3, #8]
 8017d34:	019b      	lsls	r3, r3, #6
 8017d36:	4618      	mov	r0, r3
 8017d38:	f001 f982 	bl	8019040 <SUBGRF_SetRxBoosted>
}
 8017d3c:	bf00      	nop
 8017d3e:	3708      	adds	r7, #8
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}
 8017d44:	20001ab4 	.word	0x20001ab4
 8017d48:	20001a44 	.word	0x20001a44

08017d4c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017d56:	4b07      	ldr	r3, [pc, #28]	; (8017d74 <RadioSetRxDutyCycle+0x28>)
 8017d58:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017d5c:	2100      	movs	r1, #0
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f001 ff14 	bl	8019b8c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017d64:	6839      	ldr	r1, [r7, #0]
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	f001 f98e 	bl	8019088 <SUBGRF_SetRxDutyCycle>
}
 8017d6c:	bf00      	nop
 8017d6e:	3708      	adds	r7, #8
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd80      	pop	{r7, pc}
 8017d74:	20001a44 	.word	0x20001a44

08017d78 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017d7c:	4b09      	ldr	r3, [pc, #36]	; (8017da4 <RadioStartCad+0x2c>)
 8017d7e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017d82:	2100      	movs	r1, #0
 8017d84:	4618      	mov	r0, r3
 8017d86:	f001 ff01 	bl	8019b8c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017d92:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017d96:	f001 fac7 	bl	8019328 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017d9a:	f001 f9a1 	bl	80190e0 <SUBGRF_SetCad>
}
 8017d9e:	bf00      	nop
 8017da0:	bd80      	pop	{r7, pc}
 8017da2:	bf00      	nop
 8017da4:	20001a44 	.word	0x20001a44

08017da8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b084      	sub	sp, #16
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
 8017db0:	460b      	mov	r3, r1
 8017db2:	70fb      	strb	r3, [r7, #3]
 8017db4:	4613      	mov	r3, r2
 8017db6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017db8:	883b      	ldrh	r3, [r7, #0]
 8017dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017dbe:	fb02 f303 	mul.w	r3, r2, r3
 8017dc2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f001 fb0b 	bl	80193e0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f001 ff04 	bl	8019bdc <SUBGRF_SetRfTxPower>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017dd8:	7afb      	ldrb	r3, [r7, #11]
 8017dda:	2101      	movs	r1, #1
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f001 fed5 	bl	8019b8c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017de2:	f001 f98b 	bl	80190fc <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017de6:	68f9      	ldr	r1, [r7, #12]
 8017de8:	4804      	ldr	r0, [pc, #16]	; (8017dfc <RadioSetTxContinuousWave+0x54>)
 8017dea:	f003 f845 	bl	801ae78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017dee:	4803      	ldr	r0, [pc, #12]	; (8017dfc <RadioSetTxContinuousWave+0x54>)
 8017df0:	f002 ff64 	bl	801acbc <UTIL_TIMER_Start>
}
 8017df4:	bf00      	nop
 8017df6:	3710      	adds	r7, #16
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}
 8017dfc:	20001a9c 	.word	0x20001a9c

08017e00 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	4603      	mov	r3, r0
 8017e08:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017e0a:	f001 fd38 	bl	801987e <SUBGRF_GetRssiInst>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	b21b      	sxth	r3, r3
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	3708      	adds	r7, #8
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd80      	pop	{r7, pc}

08017e1a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017e1a:	b580      	push	{r7, lr}
 8017e1c:	b082      	sub	sp, #8
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	4603      	mov	r3, r0
 8017e22:	460a      	mov	r2, r1
 8017e24:	80fb      	strh	r3, [r7, #6]
 8017e26:	4613      	mov	r3, r2
 8017e28:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8017e2a:	797a      	ldrb	r2, [r7, #5]
 8017e2c:	88fb      	ldrh	r3, [r7, #6]
 8017e2e:	4611      	mov	r1, r2
 8017e30:	4618      	mov	r0, r3
 8017e32:	f001 fdb7 	bl	80199a4 <SUBGRF_WriteRegister>
}
 8017e36:	bf00      	nop
 8017e38:	3708      	adds	r7, #8
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd80      	pop	{r7, pc}

08017e3e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017e3e:	b580      	push	{r7, lr}
 8017e40:	b082      	sub	sp, #8
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	4603      	mov	r3, r0
 8017e46:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017e48:	88fb      	ldrh	r3, [r7, #6]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f001 fdbe 	bl	80199cc <SUBGRF_ReadRegister>
 8017e50:	4603      	mov	r3, r0
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3708      	adds	r7, #8
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}

08017e5a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017e5a:	b580      	push	{r7, lr}
 8017e5c:	b082      	sub	sp, #8
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	4603      	mov	r3, r0
 8017e62:	6039      	str	r1, [r7, #0]
 8017e64:	80fb      	strh	r3, [r7, #6]
 8017e66:	4613      	mov	r3, r2
 8017e68:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017e6a:	797b      	ldrb	r3, [r7, #5]
 8017e6c:	b29a      	uxth	r2, r3
 8017e6e:	88fb      	ldrh	r3, [r7, #6]
 8017e70:	6839      	ldr	r1, [r7, #0]
 8017e72:	4618      	mov	r0, r3
 8017e74:	f001 fdbe 	bl	80199f4 <SUBGRF_WriteRegisters>
}
 8017e78:	bf00      	nop
 8017e7a:	3708      	adds	r7, #8
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}

08017e80 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	4603      	mov	r3, r0
 8017e88:	6039      	str	r1, [r7, #0]
 8017e8a:	80fb      	strh	r3, [r7, #6]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017e90:	797b      	ldrb	r3, [r7, #5]
 8017e92:	b29a      	uxth	r2, r3
 8017e94:	88fb      	ldrh	r3, [r7, #6]
 8017e96:	6839      	ldr	r1, [r7, #0]
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f001 fdcd 	bl	8019a38 <SUBGRF_ReadRegisters>
}
 8017e9e:	bf00      	nop
 8017ea0:	3708      	adds	r7, #8
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
	...

08017ea8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	4603      	mov	r3, r0
 8017eb0:	460a      	mov	r2, r1
 8017eb2:	71fb      	strb	r3, [r7, #7]
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017eb8:	79fb      	ldrb	r3, [r7, #7]
 8017eba:	2b01      	cmp	r3, #1
 8017ebc:	d10a      	bne.n	8017ed4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017ebe:	4a0e      	ldr	r2, [pc, #56]	; (8017ef8 <RadioSetMaxPayloadLength+0x50>)
 8017ec0:	79bb      	ldrb	r3, [r7, #6]
 8017ec2:	7013      	strb	r3, [r2, #0]
 8017ec4:	4b0c      	ldr	r3, [pc, #48]	; (8017ef8 <RadioSetMaxPayloadLength+0x50>)
 8017ec6:	781a      	ldrb	r2, [r3, #0]
 8017ec8:	4b0c      	ldr	r3, [pc, #48]	; (8017efc <RadioSetMaxPayloadLength+0x54>)
 8017eca:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017ecc:	480c      	ldr	r0, [pc, #48]	; (8017f00 <RadioSetMaxPayloadLength+0x58>)
 8017ece:	f001 fc21 	bl	8019714 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017ed2:	e00d      	b.n	8017ef0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017ed4:	4b09      	ldr	r3, [pc, #36]	; (8017efc <RadioSetMaxPayloadLength+0x54>)
 8017ed6:	7d5b      	ldrb	r3, [r3, #21]
 8017ed8:	2b01      	cmp	r3, #1
 8017eda:	d109      	bne.n	8017ef0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017edc:	4a06      	ldr	r2, [pc, #24]	; (8017ef8 <RadioSetMaxPayloadLength+0x50>)
 8017ede:	79bb      	ldrb	r3, [r7, #6]
 8017ee0:	7013      	strb	r3, [r2, #0]
 8017ee2:	4b05      	ldr	r3, [pc, #20]	; (8017ef8 <RadioSetMaxPayloadLength+0x50>)
 8017ee4:	781a      	ldrb	r2, [r3, #0]
 8017ee6:	4b05      	ldr	r3, [pc, #20]	; (8017efc <RadioSetMaxPayloadLength+0x54>)
 8017ee8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017eea:	4805      	ldr	r0, [pc, #20]	; (8017f00 <RadioSetMaxPayloadLength+0x58>)
 8017eec:	f001 fc12 	bl	8019714 <SUBGRF_SetPacketParams>
}
 8017ef0:	bf00      	nop
 8017ef2:	3708      	adds	r7, #8
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}
 8017ef8:	20000120 	.word	0x20000120
 8017efc:	20001a44 	.word	0x20001a44
 8017f00:	20001a52 	.word	0x20001a52

08017f04 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017f0e:	4a13      	ldr	r2, [pc, #76]	; (8017f5c <RadioSetPublicNetwork+0x58>)
 8017f10:	79fb      	ldrb	r3, [r7, #7]
 8017f12:	7313      	strb	r3, [r2, #12]
 8017f14:	4b11      	ldr	r3, [pc, #68]	; (8017f5c <RadioSetPublicNetwork+0x58>)
 8017f16:	7b1a      	ldrb	r2, [r3, #12]
 8017f18:	4b10      	ldr	r3, [pc, #64]	; (8017f5c <RadioSetPublicNetwork+0x58>)
 8017f1a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017f1c:	2001      	movs	r0, #1
 8017f1e:	f7ff f81f 	bl	8016f60 <RadioSetModem>
    if( enable == true )
 8017f22:	79fb      	ldrb	r3, [r7, #7]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d00a      	beq.n	8017f3e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017f28:	2134      	movs	r1, #52	; 0x34
 8017f2a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017f2e:	f001 fd39 	bl	80199a4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017f32:	2144      	movs	r1, #68	; 0x44
 8017f34:	f240 7041 	movw	r0, #1857	; 0x741
 8017f38:	f001 fd34 	bl	80199a4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017f3c:	e009      	b.n	8017f52 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017f3e:	2114      	movs	r1, #20
 8017f40:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017f44:	f001 fd2e 	bl	80199a4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017f48:	2124      	movs	r1, #36	; 0x24
 8017f4a:	f240 7041 	movw	r0, #1857	; 0x741
 8017f4e:	f001 fd29 	bl	80199a4 <SUBGRF_WriteRegister>
}
 8017f52:	bf00      	nop
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	20001a44 	.word	0x20001a44

08017f60 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017f64:	f001 fe6e 	bl	8019c44 <SUBGRF_GetRadioWakeUpTime>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	3303      	adds	r3, #3
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b082      	sub	sp, #8
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017f78:	f000 f80e 	bl	8017f98 <RadioOnTxTimeoutProcess>
}
 8017f7c:	bf00      	nop
 8017f7e:	3708      	adds	r7, #8
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017f8c:	f000 f81e 	bl	8017fcc <RadioOnRxTimeoutProcess>
}
 8017f90:	bf00      	nop
 8017f92:	3708      	adds	r7, #8
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}

08017f98 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 8017f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017fa0:	4808      	ldr	r0, [pc, #32]	; (8017fc4 <RadioOnTxTimeoutProcess+0x2c>)
 8017fa2:	f7fe ff62 	bl	8016e6a <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017fa6:	4b08      	ldr	r3, [pc, #32]	; (8017fc8 <RadioOnTxTimeoutProcess+0x30>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d008      	beq.n	8017fc0 <RadioOnTxTimeoutProcess+0x28>
 8017fae:	4b06      	ldr	r3, [pc, #24]	; (8017fc8 <RadioOnTxTimeoutProcess+0x30>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	685b      	ldr	r3, [r3, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d003      	beq.n	8017fc0 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017fb8:	4b03      	ldr	r3, [pc, #12]	; (8017fc8 <RadioOnTxTimeoutProcess+0x30>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	4798      	blx	r3
    }
}
 8017fc0:	bf00      	nop
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	48000400 	.word	0x48000400
 8017fc8:	200011a4 	.word	0x200011a4

08017fcc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017fd0:	2101      	movs	r1, #1
 8017fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017fd6:	f7fe ff48 	bl	8016e6a <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017fda:	4b07      	ldr	r3, [pc, #28]	; (8017ff8 <RadioOnRxTimeoutProcess+0x2c>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d008      	beq.n	8017ff4 <RadioOnRxTimeoutProcess+0x28>
 8017fe2:	4b05      	ldr	r3, [pc, #20]	; (8017ff8 <RadioOnRxTimeoutProcess+0x2c>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	68db      	ldr	r3, [r3, #12]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d003      	beq.n	8017ff4 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017fec:	4b02      	ldr	r3, [pc, #8]	; (8017ff8 <RadioOnRxTimeoutProcess+0x2c>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	68db      	ldr	r3, [r3, #12]
 8017ff2:	4798      	blx	r3
    }
}
 8017ff4:	bf00      	nop
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	200011a4 	.word	0x200011a4

08017ffc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	4603      	mov	r3, r0
 8018004:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018006:	4a05      	ldr	r2, [pc, #20]	; (801801c <RadioOnDioIrq+0x20>)
 8018008:	88fb      	ldrh	r3, [r7, #6]
 801800a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801800e:	f000 f807 	bl	8018020 <RadioIrqProcess>
}
 8018012:	bf00      	nop
 8018014:	3708      	adds	r7, #8
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}
 801801a:	bf00      	nop
 801801c:	20001a44 	.word	0x20001a44

08018020 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018020:	b590      	push	{r4, r7, lr}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018026:	2300      	movs	r3, #0
 8018028:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801802a:	2300      	movs	r3, #0
 801802c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801802e:	4bbf      	ldr	r3, [pc, #764]	; (801832c <RadioIrqProcess+0x30c>)
 8018030:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8018034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018038:	f000 8116 	beq.w	8018268 <RadioIrqProcess+0x248>
 801803c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018040:	f300 81cb 	bgt.w	80183da <RadioIrqProcess+0x3ba>
 8018044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018048:	f000 80fa 	beq.w	8018240 <RadioIrqProcess+0x220>
 801804c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018050:	f300 81c3 	bgt.w	80183da <RadioIrqProcess+0x3ba>
 8018054:	2b80      	cmp	r3, #128	; 0x80
 8018056:	f000 80df 	beq.w	8018218 <RadioIrqProcess+0x1f8>
 801805a:	2b80      	cmp	r3, #128	; 0x80
 801805c:	f300 81bd 	bgt.w	80183da <RadioIrqProcess+0x3ba>
 8018060:	2b20      	cmp	r3, #32
 8018062:	dc49      	bgt.n	80180f8 <RadioIrqProcess+0xd8>
 8018064:	2b00      	cmp	r3, #0
 8018066:	f340 81b8 	ble.w	80183da <RadioIrqProcess+0x3ba>
 801806a:	3b01      	subs	r3, #1
 801806c:	2b1f      	cmp	r3, #31
 801806e:	f200 81b4 	bhi.w	80183da <RadioIrqProcess+0x3ba>
 8018072:	a201      	add	r2, pc, #4	; (adr r2, 8018078 <RadioIrqProcess+0x58>)
 8018074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018078:	08018101 	.word	0x08018101
 801807c:	08018145 	.word	0x08018145
 8018080:	080183db 	.word	0x080183db
 8018084:	080182f5 	.word	0x080182f5
 8018088:	080183db 	.word	0x080183db
 801808c:	080183db 	.word	0x080183db
 8018090:	080183db 	.word	0x080183db
 8018094:	08018303 	.word	0x08018303
 8018098:	080183db 	.word	0x080183db
 801809c:	080183db 	.word	0x080183db
 80180a0:	080183db 	.word	0x080183db
 80180a4:	080183db 	.word	0x080183db
 80180a8:	080183db 	.word	0x080183db
 80180ac:	080183db 	.word	0x080183db
 80180b0:	080183db 	.word	0x080183db
 80180b4:	0801831f 	.word	0x0801831f
 80180b8:	080183db 	.word	0x080183db
 80180bc:	080183db 	.word	0x080183db
 80180c0:	080183db 	.word	0x080183db
 80180c4:	080183db 	.word	0x080183db
 80180c8:	080183db 	.word	0x080183db
 80180cc:	080183db 	.word	0x080183db
 80180d0:	080183db 	.word	0x080183db
 80180d4:	080183db 	.word	0x080183db
 80180d8:	080183db 	.word	0x080183db
 80180dc:	080183db 	.word	0x080183db
 80180e0:	080183db 	.word	0x080183db
 80180e4:	080183db 	.word	0x080183db
 80180e8:	080183db 	.word	0x080183db
 80180ec:	080183db 	.word	0x080183db
 80180f0:	080183db 	.word	0x080183db
 80180f4:	0801835d 	.word	0x0801835d
 80180f8:	2b40      	cmp	r3, #64	; 0x40
 80180fa:	f000 8150 	beq.w	801839e <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80180fe:	e16c      	b.n	80183da <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8018100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018104:	488a      	ldr	r0, [pc, #552]	; (8018330 <RadioIrqProcess+0x310>)
 8018106:	f7fe feb0 	bl	8016e6a <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 801810a:	488a      	ldr	r0, [pc, #552]	; (8018334 <RadioIrqProcess+0x314>)
 801810c:	f002 fe44 	bl	801ad98 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018110:	2000      	movs	r0, #0
 8018112:	f000 ff39 	bl	8018f88 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8018116:	f001 ff2b 	bl	8019f70 <RFW_Is_LongPacketModeEnabled>
 801811a:	4603      	mov	r3, r0
 801811c:	2b01      	cmp	r3, #1
 801811e:	d101      	bne.n	8018124 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8018120:	f001 ff4f 	bl	8019fc2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018124:	4b84      	ldr	r3, [pc, #528]	; (8018338 <RadioIrqProcess+0x318>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	f000 8158 	beq.w	80183de <RadioIrqProcess+0x3be>
 801812e:	4b82      	ldr	r3, [pc, #520]	; (8018338 <RadioIrqProcess+0x318>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	f000 8152 	beq.w	80183de <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 801813a:	4b7f      	ldr	r3, [pc, #508]	; (8018338 <RadioIrqProcess+0x318>)
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	4798      	blx	r3
        break;
 8018142:	e14c      	b.n	80183de <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8018144:	2101      	movs	r1, #1
 8018146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801814a:	f7fe fe8e 	bl	8016e6a <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 801814e:	487b      	ldr	r0, [pc, #492]	; (801833c <RadioIrqProcess+0x31c>)
 8018150:	f002 fe22 	bl	801ad98 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018154:	4b75      	ldr	r3, [pc, #468]	; (801832c <RadioIrqProcess+0x30c>)
 8018156:	785b      	ldrb	r3, [r3, #1]
 8018158:	f083 0301 	eor.w	r3, r3, #1
 801815c:	b2db      	uxtb	r3, r3
 801815e:	2b00      	cmp	r3, #0
 8018160:	d014      	beq.n	801818c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8018162:	2000      	movs	r0, #0
 8018164:	f000 ff10 	bl	8018f88 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8018168:	2100      	movs	r1, #0
 801816a:	f640 1002 	movw	r0, #2306	; 0x902
 801816e:	f001 fc19 	bl	80199a4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8018172:	f640 1044 	movw	r0, #2372	; 0x944
 8018176:	f001 fc29 	bl	80199cc <SUBGRF_ReadRegister>
 801817a:	4603      	mov	r3, r0
 801817c:	f043 0302 	orr.w	r3, r3, #2
 8018180:	b2db      	uxtb	r3, r3
 8018182:	4619      	mov	r1, r3
 8018184:	f640 1044 	movw	r0, #2372	; 0x944
 8018188:	f001 fc0c 	bl	80199a4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801818c:	1dfb      	adds	r3, r7, #7
 801818e:	22ff      	movs	r2, #255	; 0xff
 8018190:	4619      	mov	r1, r3
 8018192:	486b      	ldr	r0, [pc, #428]	; (8018340 <RadioIrqProcess+0x320>)
 8018194:	f000 fdc8 	bl	8018d28 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8018198:	486a      	ldr	r0, [pc, #424]	; (8018344 <RadioIrqProcess+0x324>)
 801819a:	f001 fbb1 	bl	8019900 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801819e:	4b66      	ldr	r3, [pc, #408]	; (8018338 <RadioIrqProcess+0x318>)
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d036      	beq.n	8018214 <RadioIrqProcess+0x1f4>
 80181a6:	4b64      	ldr	r3, [pc, #400]	; (8018338 <RadioIrqProcess+0x318>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	689b      	ldr	r3, [r3, #8]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d031      	beq.n	8018214 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 80181b0:	4b5e      	ldr	r3, [pc, #376]	; (801832c <RadioIrqProcess+0x30c>)
 80181b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80181b6:	2b01      	cmp	r3, #1
 80181b8:	d10e      	bne.n	80181d8 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80181ba:	4b5f      	ldr	r3, [pc, #380]	; (8018338 <RadioIrqProcess+0x318>)
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	689c      	ldr	r4, [r3, #8]
 80181c0:	79fb      	ldrb	r3, [r7, #7]
 80181c2:	b299      	uxth	r1, r3
 80181c4:	4b59      	ldr	r3, [pc, #356]	; (801832c <RadioIrqProcess+0x30c>)
 80181c6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80181ca:	b21a      	sxth	r2, r3
 80181cc:	4b57      	ldr	r3, [pc, #348]	; (801832c <RadioIrqProcess+0x30c>)
 80181ce:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80181d2:	485b      	ldr	r0, [pc, #364]	; (8018340 <RadioIrqProcess+0x320>)
 80181d4:	47a0      	blx	r4
                break;
 80181d6:	e01e      	b.n	8018216 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80181d8:	4b54      	ldr	r3, [pc, #336]	; (801832c <RadioIrqProcess+0x30c>)
 80181da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181dc:	463a      	mov	r2, r7
 80181de:	4611      	mov	r1, r2
 80181e0:	4618      	mov	r0, r3
 80181e2:	f001 fe11 	bl	8019e08 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80181e6:	4b54      	ldr	r3, [pc, #336]	; (8018338 <RadioIrqProcess+0x318>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	689c      	ldr	r4, [r3, #8]
 80181ec:	79fb      	ldrb	r3, [r7, #7]
 80181ee:	b299      	uxth	r1, r3
 80181f0:	4b4e      	ldr	r3, [pc, #312]	; (801832c <RadioIrqProcess+0x30c>)
 80181f2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80181f6:	b218      	sxth	r0, r3
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80181fe:	4a52      	ldr	r2, [pc, #328]	; (8018348 <RadioIrqProcess+0x328>)
 8018200:	fb82 c203 	smull	ip, r2, r2, r3
 8018204:	1192      	asrs	r2, r2, #6
 8018206:	17db      	asrs	r3, r3, #31
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	b25b      	sxtb	r3, r3
 801820c:	4602      	mov	r2, r0
 801820e:	484c      	ldr	r0, [pc, #304]	; (8018340 <RadioIrqProcess+0x320>)
 8018210:	47a0      	blx	r4
                break;
 8018212:	e000      	b.n	8018216 <RadioIrqProcess+0x1f6>
        }
 8018214:	bf00      	nop
        break;
 8018216:	e0ef      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8018218:	2000      	movs	r0, #0
 801821a:	f000 feb5 	bl	8018f88 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801821e:	4b46      	ldr	r3, [pc, #280]	; (8018338 <RadioIrqProcess+0x318>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	f000 80dd 	beq.w	80183e2 <RadioIrqProcess+0x3c2>
 8018228:	4b43      	ldr	r3, [pc, #268]	; (8018338 <RadioIrqProcess+0x318>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	699b      	ldr	r3, [r3, #24]
 801822e:	2b00      	cmp	r3, #0
 8018230:	f000 80d7 	beq.w	80183e2 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8018234:	4b40      	ldr	r3, [pc, #256]	; (8018338 <RadioIrqProcess+0x318>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	699b      	ldr	r3, [r3, #24]
 801823a:	2000      	movs	r0, #0
 801823c:	4798      	blx	r3
        break;
 801823e:	e0d0      	b.n	80183e2 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8018240:	2000      	movs	r0, #0
 8018242:	f000 fea1 	bl	8018f88 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018246:	4b3c      	ldr	r3, [pc, #240]	; (8018338 <RadioIrqProcess+0x318>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 80cb 	beq.w	80183e6 <RadioIrqProcess+0x3c6>
 8018250:	4b39      	ldr	r3, [pc, #228]	; (8018338 <RadioIrqProcess+0x318>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	699b      	ldr	r3, [r3, #24]
 8018256:	2b00      	cmp	r3, #0
 8018258:	f000 80c5 	beq.w	80183e6 <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 801825c:	4b36      	ldr	r3, [pc, #216]	; (8018338 <RadioIrqProcess+0x318>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	699b      	ldr	r3, [r3, #24]
 8018262:	2001      	movs	r0, #1
 8018264:	4798      	blx	r3
        break;
 8018266:	e0be      	b.n	80183e6 <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018268:	4b38      	ldr	r3, [pc, #224]	; (801834c <RadioIrqProcess+0x32c>)
 801826a:	2201      	movs	r2, #1
 801826c:	2100      	movs	r1, #0
 801826e:	2002      	movs	r0, #2
 8018270:	f002 ff9c 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018274:	f000 fd3e 	bl	8018cf4 <SUBGRF_GetOperatingMode>
 8018278:	4603      	mov	r3, r0
 801827a:	2b04      	cmp	r3, #4
 801827c:	d11a      	bne.n	80182b4 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 801827e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018282:	482b      	ldr	r0, [pc, #172]	; (8018330 <RadioIrqProcess+0x310>)
 8018284:	f7fe fdf1 	bl	8016e6a <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8018288:	482a      	ldr	r0, [pc, #168]	; (8018334 <RadioIrqProcess+0x314>)
 801828a:	f002 fd85 	bl	801ad98 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801828e:	2000      	movs	r0, #0
 8018290:	f000 fe7a 	bl	8018f88 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018294:	4b28      	ldr	r3, [pc, #160]	; (8018338 <RadioIrqProcess+0x318>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 80a6 	beq.w	80183ea <RadioIrqProcess+0x3ca>
 801829e:	4b26      	ldr	r3, [pc, #152]	; (8018338 <RadioIrqProcess+0x318>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	685b      	ldr	r3, [r3, #4]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	f000 80a0 	beq.w	80183ea <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 80182aa:	4b23      	ldr	r3, [pc, #140]	; (8018338 <RadioIrqProcess+0x318>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	685b      	ldr	r3, [r3, #4]
 80182b0:	4798      	blx	r3
        break;
 80182b2:	e09a      	b.n	80183ea <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80182b4:	f000 fd1e 	bl	8018cf4 <SUBGRF_GetOperatingMode>
 80182b8:	4603      	mov	r3, r0
 80182ba:	2b05      	cmp	r3, #5
 80182bc:	f040 8095 	bne.w	80183ea <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 80182c0:	2101      	movs	r1, #1
 80182c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80182c6:	f7fe fdd0 	bl	8016e6a <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 80182ca:	481c      	ldr	r0, [pc, #112]	; (801833c <RadioIrqProcess+0x31c>)
 80182cc:	f002 fd64 	bl	801ad98 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80182d0:	2000      	movs	r0, #0
 80182d2:	f000 fe59 	bl	8018f88 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80182d6:	4b18      	ldr	r3, [pc, #96]	; (8018338 <RadioIrqProcess+0x318>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f000 8085 	beq.w	80183ea <RadioIrqProcess+0x3ca>
 80182e0:	4b15      	ldr	r3, [pc, #84]	; (8018338 <RadioIrqProcess+0x318>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	68db      	ldr	r3, [r3, #12]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d07f      	beq.n	80183ea <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 80182ea:	4b13      	ldr	r3, [pc, #76]	; (8018338 <RadioIrqProcess+0x318>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	68db      	ldr	r3, [r3, #12]
 80182f0:	4798      	blx	r3
        break;
 80182f2:	e07a      	b.n	80183ea <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80182f4:	4b16      	ldr	r3, [pc, #88]	; (8018350 <RadioIrqProcess+0x330>)
 80182f6:	2201      	movs	r2, #1
 80182f8:	2100      	movs	r1, #0
 80182fa:	2002      	movs	r0, #2
 80182fc:	f002 ff56 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018300:	e07a      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018302:	4b14      	ldr	r3, [pc, #80]	; (8018354 <RadioIrqProcess+0x334>)
 8018304:	2201      	movs	r2, #1
 8018306:	2100      	movs	r1, #0
 8018308:	2002      	movs	r0, #2
 801830a:	f002 ff4f 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801830e:	f001 fe28 	bl	8019f62 <RFW_Is_Init>
 8018312:	4603      	mov	r3, r0
 8018314:	2b01      	cmp	r3, #1
 8018316:	d16a      	bne.n	80183ee <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8018318:	f001 fe59 	bl	8019fce <RFW_ReceivePayload>
        break;
 801831c:	e067      	b.n	80183ee <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801831e:	4b0e      	ldr	r3, [pc, #56]	; (8018358 <RadioIrqProcess+0x338>)
 8018320:	2201      	movs	r2, #1
 8018322:	2100      	movs	r1, #0
 8018324:	2002      	movs	r0, #2
 8018326:	f002 ff41 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        break;
 801832a:	e065      	b.n	80183f8 <RadioIrqProcess+0x3d8>
 801832c:	20001a44 	.word	0x20001a44
 8018330:	48000400 	.word	0x48000400
 8018334:	20001a9c 	.word	0x20001a9c
 8018338:	200011a4 	.word	0x200011a4
 801833c:	20001ab4 	.word	0x20001ab4
 8018340:	200010a4 	.word	0x200010a4
 8018344:	20001a68 	.word	0x20001a68
 8018348:	10624dd3 	.word	0x10624dd3
 801834c:	0801bef0 	.word	0x0801bef0
 8018350:	0801bf04 	.word	0x0801bf04
 8018354:	0801bf10 	.word	0x0801bf10
 8018358:	0801bf1c 	.word	0x0801bf1c
        TimerStop( &RxTimeoutTimer );
 801835c:	4828      	ldr	r0, [pc, #160]	; (8018400 <RadioIrqProcess+0x3e0>)
 801835e:	f002 fd1b 	bl	801ad98 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018362:	4b28      	ldr	r3, [pc, #160]	; (8018404 <RadioIrqProcess+0x3e4>)
 8018364:	785b      	ldrb	r3, [r3, #1]
 8018366:	f083 0301 	eor.w	r3, r3, #1
 801836a:	b2db      	uxtb	r3, r3
 801836c:	2b00      	cmp	r3, #0
 801836e:	d002      	beq.n	8018376 <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8018370:	2000      	movs	r0, #0
 8018372:	f000 fe09 	bl	8018f88 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018376:	4b24      	ldr	r3, [pc, #144]	; (8018408 <RadioIrqProcess+0x3e8>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d039      	beq.n	80183f2 <RadioIrqProcess+0x3d2>
 801837e:	4b22      	ldr	r3, [pc, #136]	; (8018408 <RadioIrqProcess+0x3e8>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	68db      	ldr	r3, [r3, #12]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d034      	beq.n	80183f2 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8018388:	4b1f      	ldr	r3, [pc, #124]	; (8018408 <RadioIrqProcess+0x3e8>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	68db      	ldr	r3, [r3, #12]
 801838e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018390:	4b1e      	ldr	r3, [pc, #120]	; (801840c <RadioIrqProcess+0x3ec>)
 8018392:	2201      	movs	r2, #1
 8018394:	2100      	movs	r1, #0
 8018396:	2002      	movs	r0, #2
 8018398:	f002 ff08 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        break;
 801839c:	e029      	b.n	80183f2 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801839e:	4b1c      	ldr	r3, [pc, #112]	; (8018410 <RadioIrqProcess+0x3f0>)
 80183a0:	2201      	movs	r2, #1
 80183a2:	2100      	movs	r1, #0
 80183a4:	2002      	movs	r0, #2
 80183a6:	f002 ff01 	bl	801b1ac <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80183aa:	4b16      	ldr	r3, [pc, #88]	; (8018404 <RadioIrqProcess+0x3e4>)
 80183ac:	785b      	ldrb	r3, [r3, #1]
 80183ae:	f083 0301 	eor.w	r3, r3, #1
 80183b2:	b2db      	uxtb	r3, r3
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d002      	beq.n	80183be <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 80183b8:	2000      	movs	r0, #0
 80183ba:	f000 fde5 	bl	8018f88 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80183be:	4b12      	ldr	r3, [pc, #72]	; (8018408 <RadioIrqProcess+0x3e8>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d017      	beq.n	80183f6 <RadioIrqProcess+0x3d6>
 80183c6:	4b10      	ldr	r3, [pc, #64]	; (8018408 <RadioIrqProcess+0x3e8>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	691b      	ldr	r3, [r3, #16]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d012      	beq.n	80183f6 <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 80183d0:	4b0d      	ldr	r3, [pc, #52]	; (8018408 <RadioIrqProcess+0x3e8>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	691b      	ldr	r3, [r3, #16]
 80183d6:	4798      	blx	r3
        break;
 80183d8:	e00d      	b.n	80183f6 <RadioIrqProcess+0x3d6>
        break;
 80183da:	bf00      	nop
 80183dc:	e00c      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183de:	bf00      	nop
 80183e0:	e00a      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183e2:	bf00      	nop
 80183e4:	e008      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183e6:	bf00      	nop
 80183e8:	e006      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183ea:	bf00      	nop
 80183ec:	e004      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183ee:	bf00      	nop
 80183f0:	e002      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183f2:	bf00      	nop
 80183f4:	e000      	b.n	80183f8 <RadioIrqProcess+0x3d8>
        break;
 80183f6:	bf00      	nop
  }
}
 80183f8:	bf00      	nop
 80183fa:	370c      	adds	r7, #12
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd90      	pop	{r4, r7, pc}
 8018400:	20001ab4 	.word	0x20001ab4
 8018404:	20001a44 	.word	0x20001a44
 8018408:	200011a4 	.word	0x200011a4
 801840c:	0801bf28 	.word	0x0801bf28
 8018410:	0801bf34 	.word	0x0801bf34

08018414 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018414:	b580      	push	{r7, lr}
 8018416:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018418:	4b09      	ldr	r3, [pc, #36]	; (8018440 <RadioTxPrbs+0x2c>)
 801841a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801841e:	2101      	movs	r1, #1
 8018420:	4618      	mov	r0, r3
 8018422:	f001 fbb3 	bl	8019b8c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8018426:	4b07      	ldr	r3, [pc, #28]	; (8018444 <RadioTxPrbs+0x30>)
 8018428:	212d      	movs	r1, #45	; 0x2d
 801842a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801842e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018430:	f000 fe6d 	bl	801910e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018434:	4804      	ldr	r0, [pc, #16]	; (8018448 <RadioTxPrbs+0x34>)
 8018436:	f000 fdc3 	bl	8018fc0 <SUBGRF_SetTx>
}
 801843a:	bf00      	nop
 801843c:	bd80      	pop	{r7, pc}
 801843e:	bf00      	nop
 8018440:	20001a44 	.word	0x20001a44
 8018444:	08017e1b 	.word	0x08017e1b
 8018448:	000fffff 	.word	0x000fffff

0801844c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b084      	sub	sp, #16
 8018450:	af00      	add	r7, sp, #0
 8018452:	4603      	mov	r3, r0
 8018454:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801845a:	4618      	mov	r0, r3
 801845c:	f001 fbbe 	bl	8019bdc <SUBGRF_SetRfTxPower>
 8018460:	4603      	mov	r3, r0
 8018462:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018464:	7bfb      	ldrb	r3, [r7, #15]
 8018466:	2101      	movs	r1, #1
 8018468:	4618      	mov	r0, r3
 801846a:	f001 fb8f 	bl	8019b8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801846e:	f000 fe45 	bl	80190fc <SUBGRF_SetTxContinuousWave>
}
 8018472:	bf00      	nop
 8018474:	3710      	adds	r7, #16
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}

0801847a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801847a:	b480      	push	{r7}
 801847c:	b089      	sub	sp, #36	; 0x24
 801847e:	af00      	add	r7, sp, #0
 8018480:	60f8      	str	r0, [r7, #12]
 8018482:	60b9      	str	r1, [r7, #8]
 8018484:	4613      	mov	r3, r2
 8018486:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018488:	2300      	movs	r3, #0
 801848a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801848c:	2300      	movs	r3, #0
 801848e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8018490:	2300      	movs	r3, #0
 8018492:	61bb      	str	r3, [r7, #24]
 8018494:	e011      	b.n	80184ba <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018496:	69bb      	ldr	r3, [r7, #24]
 8018498:	68ba      	ldr	r2, [r7, #8]
 801849a:	4413      	add	r3, r2
 801849c:	781a      	ldrb	r2, [r3, #0]
 801849e:	69bb      	ldr	r3, [r7, #24]
 80184a0:	68b9      	ldr	r1, [r7, #8]
 80184a2:	440b      	add	r3, r1
 80184a4:	43d2      	mvns	r2, r2
 80184a6:	b2d2      	uxtb	r2, r2
 80184a8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80184aa:	69bb      	ldr	r3, [r7, #24]
 80184ac:	68fa      	ldr	r2, [r7, #12]
 80184ae:	4413      	add	r3, r2
 80184b0:	2200      	movs	r2, #0
 80184b2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80184b4:	69bb      	ldr	r3, [r7, #24]
 80184b6:	3301      	adds	r3, #1
 80184b8:	61bb      	str	r3, [r7, #24]
 80184ba:	79fb      	ldrb	r3, [r7, #7]
 80184bc:	69ba      	ldr	r2, [r7, #24]
 80184be:	429a      	cmp	r2, r3
 80184c0:	dbe9      	blt.n	8018496 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80184c2:	2300      	movs	r3, #0
 80184c4:	61bb      	str	r3, [r7, #24]
 80184c6:	e049      	b.n	801855c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80184c8:	69bb      	ldr	r3, [r7, #24]
 80184ca:	425a      	negs	r2, r3
 80184cc:	f003 0307 	and.w	r3, r3, #7
 80184d0:	f002 0207 	and.w	r2, r2, #7
 80184d4:	bf58      	it	pl
 80184d6:	4253      	negpl	r3, r2
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	f1c3 0307 	rsb	r3, r3, #7
 80184de:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80184e0:	69bb      	ldr	r3, [r7, #24]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	da00      	bge.n	80184e8 <payload_integration+0x6e>
 80184e6:	3307      	adds	r3, #7
 80184e8:	10db      	asrs	r3, r3, #3
 80184ea:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80184ec:	69bb      	ldr	r3, [r7, #24]
 80184ee:	3301      	adds	r3, #1
 80184f0:	425a      	negs	r2, r3
 80184f2:	f003 0307 	and.w	r3, r3, #7
 80184f6:	f002 0207 	and.w	r2, r2, #7
 80184fa:	bf58      	it	pl
 80184fc:	4253      	negpl	r3, r2
 80184fe:	b2db      	uxtb	r3, r3
 8018500:	f1c3 0307 	rsb	r3, r3, #7
 8018504:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018506:	69bb      	ldr	r3, [r7, #24]
 8018508:	3301      	adds	r3, #1
 801850a:	2b00      	cmp	r3, #0
 801850c:	da00      	bge.n	8018510 <payload_integration+0x96>
 801850e:	3307      	adds	r3, #7
 8018510:	10db      	asrs	r3, r3, #3
 8018512:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018514:	7dbb      	ldrb	r3, [r7, #22]
 8018516:	68ba      	ldr	r2, [r7, #8]
 8018518:	4413      	add	r3, r2
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	461a      	mov	r2, r3
 801851e:	7dfb      	ldrb	r3, [r7, #23]
 8018520:	fa42 f303 	asr.w	r3, r2, r3
 8018524:	b2db      	uxtb	r3, r3
 8018526:	f003 0301 	and.w	r3, r3, #1
 801852a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801852c:	7ffa      	ldrb	r2, [r7, #31]
 801852e:	7cfb      	ldrb	r3, [r7, #19]
 8018530:	4053      	eors	r3, r2
 8018532:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018534:	7d3b      	ldrb	r3, [r7, #20]
 8018536:	68fa      	ldr	r2, [r7, #12]
 8018538:	4413      	add	r3, r2
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	b25a      	sxtb	r2, r3
 801853e:	7ff9      	ldrb	r1, [r7, #31]
 8018540:	7d7b      	ldrb	r3, [r7, #21]
 8018542:	fa01 f303 	lsl.w	r3, r1, r3
 8018546:	b25b      	sxtb	r3, r3
 8018548:	4313      	orrs	r3, r2
 801854a:	b259      	sxtb	r1, r3
 801854c:	7d3b      	ldrb	r3, [r7, #20]
 801854e:	68fa      	ldr	r2, [r7, #12]
 8018550:	4413      	add	r3, r2
 8018552:	b2ca      	uxtb	r2, r1
 8018554:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8018556:	69bb      	ldr	r3, [r7, #24]
 8018558:	3301      	adds	r3, #1
 801855a:	61bb      	str	r3, [r7, #24]
 801855c:	79fb      	ldrb	r3, [r7, #7]
 801855e:	00db      	lsls	r3, r3, #3
 8018560:	69ba      	ldr	r2, [r7, #24]
 8018562:	429a      	cmp	r2, r3
 8018564:	dbb0      	blt.n	80184c8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018566:	7ffb      	ldrb	r3, [r7, #31]
 8018568:	01db      	lsls	r3, r3, #7
 801856a:	b25a      	sxtb	r2, r3
 801856c:	7ffb      	ldrb	r3, [r7, #31]
 801856e:	019b      	lsls	r3, r3, #6
 8018570:	b25b      	sxtb	r3, r3
 8018572:	4313      	orrs	r3, r2
 8018574:	b25b      	sxtb	r3, r3
 8018576:	7ffa      	ldrb	r2, [r7, #31]
 8018578:	2a00      	cmp	r2, #0
 801857a:	d101      	bne.n	8018580 <payload_integration+0x106>
 801857c:	2220      	movs	r2, #32
 801857e:	e000      	b.n	8018582 <payload_integration+0x108>
 8018580:	2200      	movs	r2, #0
 8018582:	4313      	orrs	r3, r2
 8018584:	b259      	sxtb	r1, r3
 8018586:	79fb      	ldrb	r3, [r7, #7]
 8018588:	68fa      	ldr	r2, [r7, #12]
 801858a:	4413      	add	r3, r2
 801858c:	b2ca      	uxtb	r2, r1
 801858e:	701a      	strb	r2, [r3, #0]
}
 8018590:	bf00      	nop
 8018592:	3724      	adds	r7, #36	; 0x24
 8018594:	46bd      	mov	sp, r7
 8018596:	bc80      	pop	{r7}
 8018598:	4770      	bx	lr
	...

0801859c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b08c      	sub	sp, #48	; 0x30
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60b9      	str	r1, [r7, #8]
 80185a4:	607a      	str	r2, [r7, #4]
 80185a6:	603b      	str	r3, [r7, #0]
 80185a8:	4603      	mov	r3, r0
 80185aa:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80185ac:	2300      	movs	r3, #0
 80185ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80185b0:	2300      	movs	r3, #0
 80185b2:	61fb      	str	r3, [r7, #28]
 80185b4:	2300      	movs	r3, #0
 80185b6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80185b8:	f001 fccd 	bl	8019f56 <RFW_DeInit>

    if( rxContinuous != 0 )
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d001      	beq.n	80185c6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80185c2:	2300      	movs	r3, #0
 80185c4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	bf14      	ite	ne
 80185cc:	2301      	movne	r3, #1
 80185ce:	2300      	moveq	r3, #0
 80185d0:	b2da      	uxtb	r2, r3
 80185d2:	4ba9      	ldr	r3, [pc, #676]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80185d4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80185d6:	7bfb      	ldrb	r3, [r7, #15]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d003      	beq.n	80185e4 <RadioSetRxGenericConfig+0x48>
 80185dc:	2b01      	cmp	r3, #1
 80185de:	f000 80e8 	beq.w	80187b2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80185e2:	e1a0      	b.n	8018926 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	68db      	ldr	r3, [r3, #12]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d003      	beq.n	80185f4 <RadioSetRxGenericConfig+0x58>
 80185ec:	68bb      	ldr	r3, [r7, #8]
 80185ee:	691b      	ldr	r3, [r3, #16]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d102      	bne.n	80185fa <RadioSetRxGenericConfig+0x5e>
            return -1;
 80185f4:	f04f 33ff 	mov.w	r3, #4294967295
 80185f8:	e196      	b.n	8018928 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80185fa:	68bb      	ldr	r3, [r7, #8]
 80185fc:	7d5b      	ldrb	r3, [r3, #21]
 80185fe:	2b08      	cmp	r3, #8
 8018600:	d902      	bls.n	8018608 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8018602:	f04f 33ff 	mov.w	r3, #4294967295
 8018606:	e18f      	b.n	8018928 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018608:	2300      	movs	r3, #0
 801860a:	62bb      	str	r3, [r7, #40]	; 0x28
 801860c:	e00d      	b.n	801862a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	699a      	ldr	r2, [r3, #24]
 8018612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018614:	4413      	add	r3, r2
 8018616:	7819      	ldrb	r1, [r3, #0]
 8018618:	f107 021c 	add.w	r2, r7, #28
 801861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801861e:	4413      	add	r3, r2
 8018620:	460a      	mov	r2, r1
 8018622:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018626:	3301      	adds	r3, #1
 8018628:	62bb      	str	r3, [r7, #40]	; 0x28
 801862a:	68bb      	ldr	r3, [r7, #8]
 801862c:	7d5b      	ldrb	r3, [r3, #21]
 801862e:	461a      	mov	r2, r3
 8018630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018632:	4293      	cmp	r3, r2
 8018634:	dbeb      	blt.n	801860e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018636:	68bb      	ldr	r3, [r7, #8]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2b00      	cmp	r3, #0
 801863c:	bf14      	ite	ne
 801863e:	2301      	movne	r3, #1
 8018640:	2300      	moveq	r3, #0
 8018642:	b2db      	uxtb	r3, r3
 8018644:	4618      	mov	r0, r3
 8018646:	f000 fd6b 	bl	8019120 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801864a:	4b8b      	ldr	r3, [pc, #556]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801864c:	2200      	movs	r2, #0
 801864e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018652:	68bb      	ldr	r3, [r7, #8]
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	4a88      	ldr	r2, [pc, #544]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018658:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801865a:	68bb      	ldr	r3, [r7, #8]
 801865c:	791a      	ldrb	r2, [r3, #4]
 801865e:	4b86      	ldr	r3, [pc, #536]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	689b      	ldr	r3, [r3, #8]
 8018668:	4618      	mov	r0, r3
 801866a:	f001 fba5 	bl	8019db8 <SUBGRF_GetFskBandwidthRegValue>
 801866e:	4603      	mov	r3, r0
 8018670:	461a      	mov	r2, r3
 8018672:	4b81      	ldr	r3, [pc, #516]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018678:	4b7f      	ldr	r3, [pc, #508]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801867a:	2200      	movs	r2, #0
 801867c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	691b      	ldr	r3, [r3, #16]
 8018682:	b29b      	uxth	r3, r3
 8018684:	00db      	lsls	r3, r3, #3
 8018686:	b29a      	uxth	r2, r3
 8018688:	4b7b      	ldr	r3, [pc, #492]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801868a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	7d1a      	ldrb	r2, [r3, #20]
 8018690:	4b79      	ldr	r3, [pc, #484]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018692:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	7d5b      	ldrb	r3, [r3, #21]
 8018698:	00db      	lsls	r3, r3, #3
 801869a:	b2da      	uxtb	r2, r3
 801869c:	4b76      	ldr	r3, [pc, #472]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801869e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80186a6:	4b74      	ldr	r3, [pc, #464]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80186a8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d105      	bne.n	80186c0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	69db      	ldr	r3, [r3, #28]
 80186b8:	b2da      	uxtb	r2, r3
 80186ba:	4b6f      	ldr	r3, [pc, #444]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80186bc:	759a      	strb	r2, [r3, #22]
 80186be:	e00b      	b.n	80186d8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80186c0:	68bb      	ldr	r3, [r7, #8]
 80186c2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80186c6:	2b02      	cmp	r3, #2
 80186c8:	d103      	bne.n	80186d2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80186ca:	4b6b      	ldr	r3, [pc, #428]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80186cc:	22ff      	movs	r2, #255	; 0xff
 80186ce:	759a      	strb	r2, [r3, #22]
 80186d0:	e002      	b.n	80186d8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80186d2:	4b69      	ldr	r3, [pc, #420]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80186d4:	22ff      	movs	r2, #255	; 0xff
 80186d6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80186de:	2b02      	cmp	r3, #2
 80186e0:	d004      	beq.n	80186ec <RadioSetRxGenericConfig+0x150>
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80186e8:	2b02      	cmp	r3, #2
 80186ea:	d12d      	bne.n	8018748 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80186f2:	2bf1      	cmp	r3, #241	; 0xf1
 80186f4:	d00c      	beq.n	8018710 <RadioSetRxGenericConfig+0x174>
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80186fc:	2bf2      	cmp	r3, #242	; 0xf2
 80186fe:	d007      	beq.n	8018710 <RadioSetRxGenericConfig+0x174>
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018706:	2b01      	cmp	r3, #1
 8018708:	d002      	beq.n	8018710 <RadioSetRxGenericConfig+0x174>
            return -1;
 801870a:	f04f 33ff 	mov.w	r3, #4294967295
 801870e:	e10b      	b.n	8018928 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8018710:	2300      	movs	r3, #0
 8018712:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018718:	4b58      	ldr	r3, [pc, #352]	; (801887c <RadioSetRxGenericConfig+0x2e0>)
 801871a:	6819      	ldr	r1, [r3, #0]
 801871c:	f107 0310 	add.w	r3, r7, #16
 8018720:	4a57      	ldr	r2, [pc, #348]	; (8018880 <RadioSetRxGenericConfig+0x2e4>)
 8018722:	4618      	mov	r0, r3
 8018724:	f001 fc0a 	bl	8019f3c <RFW_Init>
 8018728:	4603      	mov	r3, r0
 801872a:	2b00      	cmp	r3, #0
 801872c:	d002      	beq.n	8018734 <RadioSetRxGenericConfig+0x198>
            return -1;
 801872e:	f04f 33ff 	mov.w	r3, #4294967295
 8018732:	e0f9      	b.n	8018928 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018734:	4b50      	ldr	r3, [pc, #320]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018736:	2200      	movs	r2, #0
 8018738:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801873a:	4b4f      	ldr	r3, [pc, #316]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801873c:	2201      	movs	r2, #1
 801873e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018740:	4b4d      	ldr	r3, [pc, #308]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018742:	2200      	movs	r2, #0
 8018744:	755a      	strb	r2, [r3, #21]
        {
 8018746:	e00e      	b.n	8018766 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801874e:	4b4a      	ldr	r3, [pc, #296]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018750:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018758:	4b47      	ldr	r3, [pc, #284]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801875a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801875c:	68bb      	ldr	r3, [r7, #8]
 801875e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018762:	4b45      	ldr	r3, [pc, #276]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018764:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018766:	f7ff fa6c 	bl	8017c42 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801876a:	2000      	movs	r0, #0
 801876c:	f7fe fbf8 	bl	8016f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018770:	4844      	ldr	r0, [pc, #272]	; (8018884 <RadioSetRxGenericConfig+0x2e8>)
 8018772:	f000 ff03 	bl	801957c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018776:	4844      	ldr	r0, [pc, #272]	; (8018888 <RadioSetRxGenericConfig+0x2ec>)
 8018778:	f000 ffcc 	bl	8019714 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801877c:	f107 031c 	add.w	r3, r7, #28
 8018780:	4618      	mov	r0, r3
 8018782:	f000 fb06 	bl	8018d92 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018786:	68bb      	ldr	r3, [r7, #8]
 8018788:	8c1b      	ldrh	r3, [r3, #32]
 801878a:	4618      	mov	r0, r3
 801878c:	f000 fb50 	bl	8018e30 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018794:	4618      	mov	r0, r3
 8018796:	f000 fb2b 	bl	8018df0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801879a:	683b      	ldr	r3, [r7, #0]
 801879c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80187a0:	fb02 f203 	mul.w	r2, r2, r3
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	68db      	ldr	r3, [r3, #12]
 80187a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80187ac:	4a32      	ldr	r2, [pc, #200]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80187ae:	6093      	str	r3, [r2, #8]
        break;
 80187b0:	e0b9      	b.n	8018926 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d102      	bne.n	80187c0 <RadioSetRxGenericConfig+0x224>
            return -1;
 80187ba:	f04f 33ff 	mov.w	r3, #4294967295
 80187be:	e0b3      	b.n	8018928 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80187c6:	2b01      	cmp	r3, #1
 80187c8:	d104      	bne.n	80187d4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80187ca:	68bb      	ldr	r3, [r7, #8]
 80187cc:	69db      	ldr	r3, [r3, #28]
 80187ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80187d2:	e002      	b.n	80187da <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80187d4:	23ff      	movs	r3, #255	; 0xff
 80187d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187de:	2b00      	cmp	r3, #0
 80187e0:	bf14      	ite	ne
 80187e2:	2301      	movne	r3, #1
 80187e4:	2300      	moveq	r3, #0
 80187e6:	b2db      	uxtb	r3, r3
 80187e8:	4618      	mov	r0, r3
 80187ea:	f000 fc99 	bl	8019120 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	b2db      	uxtb	r3, r3
 80187f2:	4618      	mov	r0, r3
 80187f4:	f000 fca3 	bl	801913e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80187f8:	4b1f      	ldr	r3, [pc, #124]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 80187fa:	2201      	movs	r2, #1
 80187fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018806:	4b1c      	ldr	r3, [pc, #112]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8018812:	4b19      	ldr	r3, [pc, #100]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801881e:	4b16      	ldr	r3, [pc, #88]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018820:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801882a:	2b02      	cmp	r3, #2
 801882c:	d010      	beq.n	8018850 <RadioSetRxGenericConfig+0x2b4>
 801882e:	2b02      	cmp	r3, #2
 8018830:	dc2c      	bgt.n	801888c <RadioSetRxGenericConfig+0x2f0>
 8018832:	2b00      	cmp	r3, #0
 8018834:	d002      	beq.n	801883c <RadioSetRxGenericConfig+0x2a0>
 8018836:	2b01      	cmp	r3, #1
 8018838:	d005      	beq.n	8018846 <RadioSetRxGenericConfig+0x2aa>
            break;
 801883a:	e027      	b.n	801888c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801883c:	4b0e      	ldr	r3, [pc, #56]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 801883e:	2200      	movs	r2, #0
 8018840:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018844:	e023      	b.n	801888e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018846:	4b0c      	ldr	r3, [pc, #48]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018848:	2201      	movs	r2, #1
 801884a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801884e:	e01e      	b.n	801888e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018856:	2b0b      	cmp	r3, #11
 8018858:	d004      	beq.n	8018864 <RadioSetRxGenericConfig+0x2c8>
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018860:	2b0c      	cmp	r3, #12
 8018862:	d104      	bne.n	801886e <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018864:	4b04      	ldr	r3, [pc, #16]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018866:	2201      	movs	r2, #1
 8018868:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801886c:	e00f      	b.n	801888e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801886e:	4b02      	ldr	r3, [pc, #8]	; (8018878 <RadioSetRxGenericConfig+0x2dc>)
 8018870:	2200      	movs	r2, #0
 8018872:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018876:	e00a      	b.n	801888e <RadioSetRxGenericConfig+0x2f2>
 8018878:	20001a44 	.word	0x20001a44
 801887c:	200011a4 	.word	0x200011a4
 8018880:	20001ab4 	.word	0x20001ab4
 8018884:	20001a7c 	.word	0x20001a7c
 8018888:	20001a52 	.word	0x20001a52
            break;
 801888c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801888e:	4b28      	ldr	r3, [pc, #160]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 8018890:	2201      	movs	r2, #1
 8018892:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8018898:	4b25      	ldr	r3, [pc, #148]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 801889a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80188a2:	4b23      	ldr	r3, [pc, #140]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 80188a4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80188a6:	4a22      	ldr	r2, [pc, #136]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 80188a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188ac:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80188b4:	4b1e      	ldr	r3, [pc, #120]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 80188b6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80188c0:	4b1b      	ldr	r3, [pc, #108]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 80188c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80188c6:	f7ff f9bc 	bl	8017c42 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80188ca:	2001      	movs	r0, #1
 80188cc:	f7fe fb48 	bl	8016f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80188d0:	4818      	ldr	r0, [pc, #96]	; (8018934 <RadioSetRxGenericConfig+0x398>)
 80188d2:	f000 fe53 	bl	801957c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80188d6:	4818      	ldr	r0, [pc, #96]	; (8018938 <RadioSetRxGenericConfig+0x39c>)
 80188d8:	f000 ff1c 	bl	8019714 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80188dc:	4b14      	ldr	r3, [pc, #80]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 80188de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80188e2:	2b01      	cmp	r3, #1
 80188e4:	d10d      	bne.n	8018902 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80188e6:	f240 7036 	movw	r0, #1846	; 0x736
 80188ea:	f001 f86f 	bl	80199cc <SUBGRF_ReadRegister>
 80188ee:	4603      	mov	r3, r0
 80188f0:	f023 0304 	bic.w	r3, r3, #4
 80188f4:	b2db      	uxtb	r3, r3
 80188f6:	4619      	mov	r1, r3
 80188f8:	f240 7036 	movw	r0, #1846	; 0x736
 80188fc:	f001 f852 	bl	80199a4 <SUBGRF_WriteRegister>
 8018900:	e00c      	b.n	801891c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8018902:	f240 7036 	movw	r0, #1846	; 0x736
 8018906:	f001 f861 	bl	80199cc <SUBGRF_ReadRegister>
 801890a:	4603      	mov	r3, r0
 801890c:	f043 0304 	orr.w	r3, r3, #4
 8018910:	b2db      	uxtb	r3, r3
 8018912:	4619      	mov	r1, r3
 8018914:	f240 7036 	movw	r0, #1846	; 0x736
 8018918:	f001 f844 	bl	80199a4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801891c:	4b04      	ldr	r3, [pc, #16]	; (8018930 <RadioSetRxGenericConfig+0x394>)
 801891e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018922:	609a      	str	r2, [r3, #8]
        break;
 8018924:	bf00      	nop
    }
    return status;
 8018926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018928:	4618      	mov	r0, r3
 801892a:	3730      	adds	r7, #48	; 0x30
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}
 8018930:	20001a44 	.word	0x20001a44
 8018934:	20001a7c 	.word	0x20001a7c
 8018938:	20001a52 	.word	0x20001a52

0801893c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b08a      	sub	sp, #40	; 0x28
 8018940:	af00      	add	r7, sp, #0
 8018942:	60b9      	str	r1, [r7, #8]
 8018944:	607b      	str	r3, [r7, #4]
 8018946:	4603      	mov	r3, r0
 8018948:	73fb      	strb	r3, [r7, #15]
 801894a:	4613      	mov	r3, r2
 801894c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801894e:	2300      	movs	r3, #0
 8018950:	61fb      	str	r3, [r7, #28]
 8018952:	2300      	movs	r3, #0
 8018954:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018956:	f001 fafe 	bl	8019f56 <RFW_DeInit>
    switch( modem )
 801895a:	7bfb      	ldrb	r3, [r7, #15]
 801895c:	2b02      	cmp	r3, #2
 801895e:	f000 8144 	beq.w	8018bea <RadioSetTxGenericConfig+0x2ae>
 8018962:	2b02      	cmp	r3, #2
 8018964:	f300 8160 	bgt.w	8018c28 <RadioSetTxGenericConfig+0x2ec>
 8018968:	2b00      	cmp	r3, #0
 801896a:	d003      	beq.n	8018974 <RadioSetTxGenericConfig+0x38>
 801896c:	2b01      	cmp	r3, #1
 801896e:	f000 80b7 	beq.w	8018ae0 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8018972:	e159      	b.n	8018c28 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	689b      	ldr	r3, [r3, #8]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d003      	beq.n	8018984 <RadioSetTxGenericConfig+0x48>
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	691b      	ldr	r3, [r3, #16]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d102      	bne.n	801898a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8018984:	f04f 33ff 	mov.w	r3, #4294967295
 8018988:	e163      	b.n	8018c52 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801898a:	68bb      	ldr	r3, [r7, #8]
 801898c:	7d1b      	ldrb	r3, [r3, #20]
 801898e:	2b08      	cmp	r3, #8
 8018990:	d902      	bls.n	8018998 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8018992:	f04f 33ff 	mov.w	r3, #4294967295
 8018996:	e15c      	b.n	8018c52 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018998:	2300      	movs	r3, #0
 801899a:	627b      	str	r3, [r7, #36]	; 0x24
 801899c:	e00d      	b.n	80189ba <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	699a      	ldr	r2, [r3, #24]
 80189a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189a4:	4413      	add	r3, r2
 80189a6:	7819      	ldrb	r1, [r3, #0]
 80189a8:	f107 021c 	add.w	r2, r7, #28
 80189ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ae:	4413      	add	r3, r2
 80189b0:	460a      	mov	r2, r1
 80189b2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80189b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189b6:	3301      	adds	r3, #1
 80189b8:	627b      	str	r3, [r7, #36]	; 0x24
 80189ba:	68bb      	ldr	r3, [r7, #8]
 80189bc:	7d1b      	ldrb	r3, [r3, #20]
 80189be:	461a      	mov	r2, r3
 80189c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c2:	4293      	cmp	r3, r2
 80189c4:	dbeb      	blt.n	801899e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80189c6:	4ba5      	ldr	r3, [pc, #660]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 80189c8:	2200      	movs	r2, #0
 80189ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80189ce:	68bb      	ldr	r3, [r7, #8]
 80189d0:	689b      	ldr	r3, [r3, #8]
 80189d2:	4aa2      	ldr	r2, [pc, #648]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 80189d4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	781a      	ldrb	r2, [r3, #0]
 80189da:	4ba0      	ldr	r3, [pc, #640]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 80189dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	4618      	mov	r0, r3
 80189e6:	f001 f9e7 	bl	8019db8 <SUBGRF_GetFskBandwidthRegValue>
 80189ea:	4603      	mov	r3, r0
 80189ec:	461a      	mov	r2, r3
 80189ee:	4b9b      	ldr	r3, [pc, #620]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 80189f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	68db      	ldr	r3, [r3, #12]
 80189f8:	4a98      	ldr	r2, [pc, #608]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 80189fa:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80189fc:	4b97      	ldr	r3, [pc, #604]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 80189fe:	2200      	movs	r2, #0
 8018a00:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018a02:	68bb      	ldr	r3, [r7, #8]
 8018a04:	691b      	ldr	r3, [r3, #16]
 8018a06:	b29b      	uxth	r3, r3
 8018a08:	00db      	lsls	r3, r3, #3
 8018a0a:	b29a      	uxth	r2, r3
 8018a0c:	4b93      	ldr	r3, [pc, #588]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a0e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018a10:	4b92      	ldr	r3, [pc, #584]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a12:	2204      	movs	r2, #4
 8018a14:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018a16:	68bb      	ldr	r3, [r7, #8]
 8018a18:	7d1b      	ldrb	r3, [r3, #20]
 8018a1a:	00db      	lsls	r3, r3, #3
 8018a1c:	b2da      	uxtb	r2, r3
 8018a1e:	4b8f      	ldr	r3, [pc, #572]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a20:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018a22:	4b8e      	ldr	r3, [pc, #568]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a24:	2200      	movs	r2, #0
 8018a26:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018a2e:	2b02      	cmp	r3, #2
 8018a30:	d003      	beq.n	8018a3a <RadioSetTxGenericConfig+0xfe>
 8018a32:	68bb      	ldr	r3, [r7, #8]
 8018a34:	7f9b      	ldrb	r3, [r3, #30]
 8018a36:	2b02      	cmp	r3, #2
 8018a38:	d12a      	bne.n	8018a90 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	7fdb      	ldrb	r3, [r3, #31]
 8018a3e:	2bf1      	cmp	r3, #241	; 0xf1
 8018a40:	d00a      	beq.n	8018a58 <RadioSetTxGenericConfig+0x11c>
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	7fdb      	ldrb	r3, [r3, #31]
 8018a46:	2bf2      	cmp	r3, #242	; 0xf2
 8018a48:	d006      	beq.n	8018a58 <RadioSetTxGenericConfig+0x11c>
 8018a4a:	68bb      	ldr	r3, [r7, #8]
 8018a4c:	7fdb      	ldrb	r3, [r3, #31]
 8018a4e:	2b01      	cmp	r3, #1
 8018a50:	d002      	beq.n	8018a58 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8018a52:	f04f 33ff 	mov.w	r3, #4294967295
 8018a56:	e0fc      	b.n	8018c52 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018a58:	2301      	movs	r3, #1
 8018a5a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018a5c:	68bb      	ldr	r3, [r7, #8]
 8018a5e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018a60:	4b7f      	ldr	r3, [pc, #508]	; (8018c60 <RadioSetTxGenericConfig+0x324>)
 8018a62:	6819      	ldr	r1, [r3, #0]
 8018a64:	f107 0310 	add.w	r3, r7, #16
 8018a68:	4a7e      	ldr	r2, [pc, #504]	; (8018c64 <RadioSetTxGenericConfig+0x328>)
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f001 fa66 	bl	8019f3c <RFW_Init>
 8018a70:	4603      	mov	r3, r0
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d002      	beq.n	8018a7c <RadioSetTxGenericConfig+0x140>
              return -1;
 8018a76:	f04f 33ff 	mov.w	r3, #4294967295
 8018a7a:	e0ea      	b.n	8018c52 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018a7c:	4b77      	ldr	r3, [pc, #476]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a7e:	2200      	movs	r2, #0
 8018a80:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018a82:	4b76      	ldr	r3, [pc, #472]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a84:	2201      	movs	r2, #1
 8018a86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018a88:	4b74      	ldr	r3, [pc, #464]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	755a      	strb	r2, [r3, #21]
        {
 8018a8e:	e00c      	b.n	8018aaa <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	7fda      	ldrb	r2, [r3, #31]
 8018a94:	4b71      	ldr	r3, [pc, #452]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018a96:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018a9e:	4b6f      	ldr	r3, [pc, #444]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018aa0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018aa2:	68bb      	ldr	r3, [r7, #8]
 8018aa4:	7f9a      	ldrb	r2, [r3, #30]
 8018aa6:	4b6d      	ldr	r3, [pc, #436]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018aa8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018aaa:	f7ff f8ca 	bl	8017c42 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018aae:	2000      	movs	r0, #0
 8018ab0:	f7fe fa56 	bl	8016f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ab4:	486c      	ldr	r0, [pc, #432]	; (8018c68 <RadioSetTxGenericConfig+0x32c>)
 8018ab6:	f000 fd61 	bl	801957c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018aba:	486c      	ldr	r0, [pc, #432]	; (8018c6c <RadioSetTxGenericConfig+0x330>)
 8018abc:	f000 fe2a 	bl	8019714 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018ac0:	f107 031c 	add.w	r3, r7, #28
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f000 f964 	bl	8018d92 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	8b9b      	ldrh	r3, [r3, #28]
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f000 f9ae 	bl	8018e30 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018ad4:	68bb      	ldr	r3, [r7, #8]
 8018ad6:	8c1b      	ldrh	r3, [r3, #32]
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f000 f989 	bl	8018df0 <SUBGRF_SetCrcPolynomial>
        break;
 8018ade:	e0a4      	b.n	8018c2a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018ae0:	4b5e      	ldr	r3, [pc, #376]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8018aee:	4b5b      	ldr	r3, [pc, #364]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8018afa:	4b58      	ldr	r3, [pc, #352]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018b06:	4b55      	ldr	r3, [pc, #340]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018b0c:	68bb      	ldr	r3, [r7, #8]
 8018b0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018b12:	2b02      	cmp	r3, #2
 8018b14:	d010      	beq.n	8018b38 <RadioSetTxGenericConfig+0x1fc>
 8018b16:	2b02      	cmp	r3, #2
 8018b18:	dc22      	bgt.n	8018b60 <RadioSetTxGenericConfig+0x224>
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d002      	beq.n	8018b24 <RadioSetTxGenericConfig+0x1e8>
 8018b1e:	2b01      	cmp	r3, #1
 8018b20:	d005      	beq.n	8018b2e <RadioSetTxGenericConfig+0x1f2>
            break;
 8018b22:	e01d      	b.n	8018b60 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018b24:	4b4d      	ldr	r3, [pc, #308]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b26:	2200      	movs	r2, #0
 8018b28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018b2c:	e019      	b.n	8018b62 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018b2e:	4b4b      	ldr	r3, [pc, #300]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b30:	2201      	movs	r2, #1
 8018b32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018b36:	e014      	b.n	8018b62 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b3e:	2b0b      	cmp	r3, #11
 8018b40:	d004      	beq.n	8018b4c <RadioSetTxGenericConfig+0x210>
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b48:	2b0c      	cmp	r3, #12
 8018b4a:	d104      	bne.n	8018b56 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018b4c:	4b43      	ldr	r3, [pc, #268]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b4e:	2201      	movs	r2, #1
 8018b50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018b54:	e005      	b.n	8018b62 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018b56:	4b41      	ldr	r3, [pc, #260]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b58:	2200      	movs	r2, #0
 8018b5a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018b5e:	e000      	b.n	8018b62 <RadioSetTxGenericConfig+0x226>
            break;
 8018b60:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018b62:	4b3e      	ldr	r3, [pc, #248]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b64:	2201      	movs	r2, #1
 8018b66:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018b6c:	4b3b      	ldr	r3, [pc, #236]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b6e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8018b76:	4b39      	ldr	r3, [pc, #228]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b78:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018b80:	4b36      	ldr	r3, [pc, #216]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b82:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018b8c:	4b33      	ldr	r3, [pc, #204]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8018b92:	f7ff f856 	bl	8017c42 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018b96:	2001      	movs	r0, #1
 8018b98:	f7fe f9e2 	bl	8016f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b9c:	4832      	ldr	r0, [pc, #200]	; (8018c68 <RadioSetTxGenericConfig+0x32c>)
 8018b9e:	f000 fced 	bl	801957c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ba2:	4832      	ldr	r0, [pc, #200]	; (8018c6c <RadioSetTxGenericConfig+0x330>)
 8018ba4:	f000 fdb6 	bl	8019714 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018ba8:	4b2c      	ldr	r3, [pc, #176]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018bae:	2b06      	cmp	r3, #6
 8018bb0:	d10d      	bne.n	8018bce <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8018bb2:	f640 0089 	movw	r0, #2185	; 0x889
 8018bb6:	f000 ff09 	bl	80199cc <SUBGRF_ReadRegister>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	f023 0304 	bic.w	r3, r3, #4
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	4619      	mov	r1, r3
 8018bc4:	f640 0089 	movw	r0, #2185	; 0x889
 8018bc8:	f000 feec 	bl	80199a4 <SUBGRF_WriteRegister>
        break;
 8018bcc:	e02d      	b.n	8018c2a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8018bce:	f640 0089 	movw	r0, #2185	; 0x889
 8018bd2:	f000 fefb 	bl	80199cc <SUBGRF_ReadRegister>
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	f043 0304 	orr.w	r3, r3, #4
 8018bdc:	b2db      	uxtb	r3, r3
 8018bde:	4619      	mov	r1, r3
 8018be0:	f640 0089 	movw	r0, #2185	; 0x889
 8018be4:	f000 fede 	bl	80199a4 <SUBGRF_WriteRegister>
        break;
 8018be8:	e01f      	b.n	8018c2a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d004      	beq.n	8018bfc <RadioSetTxGenericConfig+0x2c0>
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018bfa:	d902      	bls.n	8018c02 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8018bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8018c00:	e027      	b.n	8018c52 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8018c02:	2002      	movs	r0, #2
 8018c04:	f7fe f9ac 	bl	8016f60 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018c08:	4b14      	ldr	r3, [pc, #80]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018c0a:	2202      	movs	r2, #2
 8018c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c14:	4a11      	ldr	r2, [pc, #68]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018c16:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018c18:	4b10      	ldr	r3, [pc, #64]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018c1a:	2216      	movs	r2, #22
 8018c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c20:	4811      	ldr	r0, [pc, #68]	; (8018c68 <RadioSetTxGenericConfig+0x32c>)
 8018c22:	f000 fcab 	bl	801957c <SUBGRF_SetModulationParams>
        break;
 8018c26:	e000      	b.n	8018c2a <RadioSetTxGenericConfig+0x2ee>
        break;
 8018c28:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f000 ffd4 	bl	8019bdc <SUBGRF_SetRfTxPower>
 8018c34:	4603      	mov	r3, r0
 8018c36:	461a      	mov	r2, r3
 8018c38:	4b08      	ldr	r3, [pc, #32]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018c3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018c3e:	4b07      	ldr	r3, [pc, #28]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018c40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018c44:	4618      	mov	r0, r3
 8018c46:	f001 f99a 	bl	8019f7e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018c4a:	4a04      	ldr	r2, [pc, #16]	; (8018c5c <RadioSetTxGenericConfig+0x320>)
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6053      	str	r3, [r2, #4]
    return 0;
 8018c50:	2300      	movs	r3, #0
}
 8018c52:	4618      	mov	r0, r3
 8018c54:	3728      	adds	r7, #40	; 0x28
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}
 8018c5a:	bf00      	nop
 8018c5c:	20001a44 	.word	0x20001a44
 8018c60:	200011a4 	.word	0x200011a4
 8018c64:	20001a9c 	.word	0x20001a9c
 8018c68:	20001a7c 	.word	0x20001a7c
 8018c6c:	20001a52 	.word	0x20001a52

08018c70 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d002      	beq.n	8018c84 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018c7e:	4a1a      	ldr	r2, [pc, #104]	; (8018ce8 <SUBGRF_Init+0x78>)
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018c84:	f7e8 fca0 	bl	80015c8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018c88:	2002      	movs	r0, #2
 8018c8a:	f001 f873 	bl	8019d74 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018c8e:	4b17      	ldr	r3, [pc, #92]	; (8018cec <SUBGRF_Init+0x7c>)
 8018c90:	2200      	movs	r2, #0
 8018c92:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018c94:	2000      	movs	r0, #0
 8018c96:	f000 f977 	bl	8018f88 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018c9a:	f7f0 ff3b 	bl	8009b14 <RBI_IsTCXO>
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	2b01      	cmp	r3, #1
 8018ca2:	d10e      	bne.n	8018cc2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018ca4:	2140      	movs	r1, #64	; 0x40
 8018ca6:	2001      	movs	r0, #1
 8018ca8:	f000 fb78 	bl	801939c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018cac:	2100      	movs	r1, #0
 8018cae:	f640 1011 	movw	r0, #2321	; 0x911
 8018cb2:	f000 fe77 	bl	80199a4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018cb6:	237f      	movs	r3, #127	; 0x7f
 8018cb8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018cba:	7b38      	ldrb	r0, [r7, #12]
 8018cbc:	f000 fa85 	bl	80191ca <SUBGRF_Calibrate>
 8018cc0:	e009      	b.n	8018cd6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018cc2:	2120      	movs	r1, #32
 8018cc4:	f640 1011 	movw	r0, #2321	; 0x911
 8018cc8:	f000 fe6c 	bl	80199a4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018ccc:	2120      	movs	r1, #32
 8018cce:	f640 1012 	movw	r0, #2322	; 0x912
 8018cd2:	f000 fe67 	bl	80199a4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018cd6:	f7f0 ff01 	bl	8009adc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018cda:	4b05      	ldr	r3, [pc, #20]	; (8018cf0 <SUBGRF_Init+0x80>)
 8018cdc:	2201      	movs	r2, #1
 8018cde:	701a      	strb	r2, [r3, #0]
}
 8018ce0:	bf00      	nop
 8018ce2:	3710      	adds	r7, #16
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	200011b4 	.word	0x200011b4
 8018cec:	200011b0 	.word	0x200011b0
 8018cf0:	200011a8 	.word	0x200011a8

08018cf4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018cf8:	4b02      	ldr	r3, [pc, #8]	; (8018d04 <SUBGRF_GetOperatingMode+0x10>)
 8018cfa:	781b      	ldrb	r3, [r3, #0]
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bc80      	pop	{r7}
 8018d02:	4770      	bx	lr
 8018d04:	200011a8 	.word	0x200011a8

08018d08 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
 8018d10:	460b      	mov	r3, r1
 8018d12:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018d14:	78fb      	ldrb	r3, [r7, #3]
 8018d16:	461a      	mov	r2, r3
 8018d18:	6879      	ldr	r1, [r7, #4]
 8018d1a:	2000      	movs	r0, #0
 8018d1c:	f000 feae 	bl	8019a7c <SUBGRF_WriteBuffer>
}
 8018d20:	bf00      	nop
 8018d22:	3708      	adds	r7, #8
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}

08018d28 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b086      	sub	sp, #24
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	4613      	mov	r3, r2
 8018d34:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018d36:	2300      	movs	r3, #0
 8018d38:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018d3a:	f107 0317 	add.w	r3, r7, #23
 8018d3e:	4619      	mov	r1, r3
 8018d40:	68b8      	ldr	r0, [r7, #8]
 8018d42:	f000 fdb1 	bl	80198a8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018d46:	68bb      	ldr	r3, [r7, #8]
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	79fa      	ldrb	r2, [r7, #7]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	d201      	bcs.n	8018d54 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018d50:	2301      	movs	r3, #1
 8018d52:	e007      	b.n	8018d64 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018d54:	7df8      	ldrb	r0, [r7, #23]
 8018d56:	68bb      	ldr	r3, [r7, #8]
 8018d58:	781b      	ldrb	r3, [r3, #0]
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	68f9      	ldr	r1, [r7, #12]
 8018d5e:	f000 feaf 	bl	8019ac0 <SUBGRF_ReadBuffer>

    return 0;
 8018d62:	2300      	movs	r3, #0
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	3718      	adds	r7, #24
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}

08018d6c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b084      	sub	sp, #16
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	460b      	mov	r3, r1
 8018d76:	607a      	str	r2, [r7, #4]
 8018d78:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018d7a:	7afb      	ldrb	r3, [r7, #11]
 8018d7c:	4619      	mov	r1, r3
 8018d7e:	68f8      	ldr	r0, [r7, #12]
 8018d80:	f7ff ffc2 	bl	8018d08 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f000 f91b 	bl	8018fc0 <SUBGRF_SetTx>
}
 8018d8a:	bf00      	nop
 8018d8c:	3710      	adds	r7, #16
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}

08018d92 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018d92:	b580      	push	{r7, lr}
 8018d94:	b082      	sub	sp, #8
 8018d96:	af00      	add	r7, sp, #0
 8018d98:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018d9a:	2208      	movs	r2, #8
 8018d9c:	6879      	ldr	r1, [r7, #4]
 8018d9e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8018da2:	f000 fe27 	bl	80199f4 <SUBGRF_WriteRegisters>
    return 0;
 8018da6:	2300      	movs	r3, #0
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3708      	adds	r7, #8
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}

08018db0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b084      	sub	sp, #16
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	4603      	mov	r3, r0
 8018db8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018dba:	88fb      	ldrh	r3, [r7, #6]
 8018dbc:	0a1b      	lsrs	r3, r3, #8
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	b2db      	uxtb	r3, r3
 8018dc2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018dc4:	88fb      	ldrh	r3, [r7, #6]
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018dca:	f000 fb67 	bl	801949c <SUBGRF_GetPacketType>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d108      	bne.n	8018de6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018dd4:	f107 030c 	add.w	r3, r7, #12
 8018dd8:	2202      	movs	r2, #2
 8018dda:	4619      	mov	r1, r3
 8018ddc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018de0:	f000 fe08 	bl	80199f4 <SUBGRF_WriteRegisters>
            break;
 8018de4:	e000      	b.n	8018de8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018de6:	bf00      	nop
    }
}
 8018de8:	bf00      	nop
 8018dea:	3710      	adds	r7, #16
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b084      	sub	sp, #16
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	4603      	mov	r3, r0
 8018df8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018dfa:	88fb      	ldrh	r3, [r7, #6]
 8018dfc:	0a1b      	lsrs	r3, r3, #8
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	b2db      	uxtb	r3, r3
 8018e02:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018e04:	88fb      	ldrh	r3, [r7, #6]
 8018e06:	b2db      	uxtb	r3, r3
 8018e08:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018e0a:	f000 fb47 	bl	801949c <SUBGRF_GetPacketType>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d108      	bne.n	8018e26 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018e14:	f107 030c 	add.w	r3, r7, #12
 8018e18:	2202      	movs	r2, #2
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	f240 60be 	movw	r0, #1726	; 0x6be
 8018e20:	f000 fde8 	bl	80199f4 <SUBGRF_WriteRegisters>
            break;
 8018e24:	e000      	b.n	8018e28 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018e26:	bf00      	nop
    }
}
 8018e28:	bf00      	nop
 8018e2a:	3710      	adds	r7, #16
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b084      	sub	sp, #16
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	4603      	mov	r3, r0
 8018e38:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018e3e:	f000 fb2d 	bl	801949c <SUBGRF_GetPacketType>
 8018e42:	4603      	mov	r3, r0
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d121      	bne.n	8018e8c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018e48:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018e4c:	f000 fdbe 	bl	80199cc <SUBGRF_ReadRegister>
 8018e50:	4603      	mov	r3, r0
 8018e52:	f023 0301 	bic.w	r3, r3, #1
 8018e56:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018e58:	88fb      	ldrh	r3, [r7, #6]
 8018e5a:	0a1b      	lsrs	r3, r3, #8
 8018e5c:	b29b      	uxth	r3, r3
 8018e5e:	b25b      	sxtb	r3, r3
 8018e60:	f003 0301 	and.w	r3, r3, #1
 8018e64:	b25a      	sxtb	r2, r3
 8018e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e6a:	4313      	orrs	r3, r2
 8018e6c:	b25b      	sxtb	r3, r3
 8018e6e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018e70:	7bfb      	ldrb	r3, [r7, #15]
 8018e72:	4619      	mov	r1, r3
 8018e74:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018e78:	f000 fd94 	bl	80199a4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018e7c:	88fb      	ldrh	r3, [r7, #6]
 8018e7e:	b2db      	uxtb	r3, r3
 8018e80:	4619      	mov	r1, r3
 8018e82:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018e86:	f000 fd8d 	bl	80199a4 <SUBGRF_WriteRegister>
            break;
 8018e8a:	e000      	b.n	8018e8e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018e8c:	bf00      	nop
    }
}
 8018e8e:	bf00      	nop
 8018e90:	3710      	adds	r7, #16
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}

08018e96 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018e96:	b580      	push	{r7, lr}
 8018e98:	b082      	sub	sp, #8
 8018e9a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018ea8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018eac:	f000 fd8e 	bl	80199cc <SUBGRF_ReadRegister>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018eb4:	79fb      	ldrb	r3, [r7, #7]
 8018eb6:	f023 0301 	bic.w	r3, r3, #1
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018ec2:	f000 fd6f 	bl	80199a4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018ec6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018eca:	f000 fd7f 	bl	80199cc <SUBGRF_ReadRegister>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018ed2:	79bb      	ldrb	r3, [r7, #6]
 8018ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018ed8:	b2db      	uxtb	r3, r3
 8018eda:	4619      	mov	r1, r3
 8018edc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018ee0:	f000 fd60 	bl	80199a4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018ee4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018ee8:	f000 f88a 	bl	8019000 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018eec:	463b      	mov	r3, r7
 8018eee:	2204      	movs	r2, #4
 8018ef0:	4619      	mov	r1, r3
 8018ef2:	f640 0019 	movw	r0, #2073	; 0x819
 8018ef6:	f000 fd9f 	bl	8019a38 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018efa:	2000      	movs	r0, #0
 8018efc:	f000 f844 	bl	8018f88 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018f00:	79fb      	ldrb	r3, [r7, #7]
 8018f02:	4619      	mov	r1, r3
 8018f04:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018f08:	f000 fd4c 	bl	80199a4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018f0c:	79bb      	ldrb	r3, [r7, #6]
 8018f0e:	4619      	mov	r1, r3
 8018f10:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018f14:	f000 fd46 	bl	80199a4 <SUBGRF_WriteRegister>

    return number;
 8018f18:	683b      	ldr	r3, [r7, #0]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
	...

08018f24 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018f2c:	2000      	movs	r0, #0
 8018f2e:	f7f0 fddc 	bl	8009aea <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018f32:	2002      	movs	r0, #2
 8018f34:	f000 ff1e 	bl	8019d74 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018f38:	793b      	ldrb	r3, [r7, #4]
 8018f3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	009b      	lsls	r3, r3, #2
 8018f42:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018f44:	793b      	ldrb	r3, [r7, #4]
 8018f46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018f4e:	b25b      	sxtb	r3, r3
 8018f50:	4313      	orrs	r3, r2
 8018f52:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018f54:	793b      	ldrb	r3, [r7, #4]
 8018f56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018f5e:	4313      	orrs	r3, r2
 8018f60:	b25b      	sxtb	r3, r3
 8018f62:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018f64:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018f66:	f107 030f 	add.w	r3, r7, #15
 8018f6a:	2201      	movs	r2, #1
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	2084      	movs	r0, #132	; 0x84
 8018f70:	f000 fdc8 	bl	8019b04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018f74:	4b03      	ldr	r3, [pc, #12]	; (8018f84 <SUBGRF_SetSleep+0x60>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	701a      	strb	r2, [r3, #0]
}
 8018f7a:	bf00      	nop
 8018f7c:	3710      	adds	r7, #16
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}
 8018f82:	bf00      	nop
 8018f84:	200011a8 	.word	0x200011a8

08018f88 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b082      	sub	sp, #8
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	4603      	mov	r3, r0
 8018f90:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018f92:	1dfb      	adds	r3, r7, #7
 8018f94:	2201      	movs	r2, #1
 8018f96:	4619      	mov	r1, r3
 8018f98:	2080      	movs	r0, #128	; 0x80
 8018f9a:	f000 fdb3 	bl	8019b04 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018f9e:	79fb      	ldrb	r3, [r7, #7]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d103      	bne.n	8018fac <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018fa4:	4b05      	ldr	r3, [pc, #20]	; (8018fbc <SUBGRF_SetStandby+0x34>)
 8018fa6:	2201      	movs	r2, #1
 8018fa8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018faa:	e002      	b.n	8018fb2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018fac:	4b03      	ldr	r3, [pc, #12]	; (8018fbc <SUBGRF_SetStandby+0x34>)
 8018fae:	2202      	movs	r2, #2
 8018fb0:	701a      	strb	r2, [r3, #0]
}
 8018fb2:	bf00      	nop
 8018fb4:	3708      	adds	r7, #8
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	bd80      	pop	{r7, pc}
 8018fba:	bf00      	nop
 8018fbc:	200011a8 	.word	0x200011a8

08018fc0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b084      	sub	sp, #16
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018fc8:	4b0c      	ldr	r3, [pc, #48]	; (8018ffc <SUBGRF_SetTx+0x3c>)
 8018fca:	2204      	movs	r2, #4
 8018fcc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	0c1b      	lsrs	r3, r3, #16
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	0a1b      	lsrs	r3, r3, #8
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	b2db      	uxtb	r3, r3
 8018fe2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018fe4:	f107 030c 	add.w	r3, r7, #12
 8018fe8:	2203      	movs	r2, #3
 8018fea:	4619      	mov	r1, r3
 8018fec:	2083      	movs	r0, #131	; 0x83
 8018fee:	f000 fd89 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8018ff2:	bf00      	nop
 8018ff4:	3710      	adds	r7, #16
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}
 8018ffa:	bf00      	nop
 8018ffc:	200011a8 	.word	0x200011a8

08019000 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b084      	sub	sp, #16
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019008:	4b0c      	ldr	r3, [pc, #48]	; (801903c <SUBGRF_SetRx+0x3c>)
 801900a:	2205      	movs	r2, #5
 801900c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	0c1b      	lsrs	r3, r3, #16
 8019012:	b2db      	uxtb	r3, r3
 8019014:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	0a1b      	lsrs	r3, r3, #8
 801901a:	b2db      	uxtb	r3, r3
 801901c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	b2db      	uxtb	r3, r3
 8019022:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019024:	f107 030c 	add.w	r3, r7, #12
 8019028:	2203      	movs	r2, #3
 801902a:	4619      	mov	r1, r3
 801902c:	2082      	movs	r0, #130	; 0x82
 801902e:	f000 fd69 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019032:	bf00      	nop
 8019034:	3710      	adds	r7, #16
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
 801903a:	bf00      	nop
 801903c:	200011a8 	.word	0x200011a8

08019040 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b084      	sub	sp, #16
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019048:	4b0e      	ldr	r3, [pc, #56]	; (8019084 <SUBGRF_SetRxBoosted+0x44>)
 801904a:	2205      	movs	r2, #5
 801904c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801904e:	2197      	movs	r1, #151	; 0x97
 8019050:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8019054:	f000 fca6 	bl	80199a4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	0c1b      	lsrs	r3, r3, #16
 801905c:	b2db      	uxtb	r3, r3
 801905e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	0a1b      	lsrs	r3, r3, #8
 8019064:	b2db      	uxtb	r3, r3
 8019066:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	b2db      	uxtb	r3, r3
 801906c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801906e:	f107 030c 	add.w	r3, r7, #12
 8019072:	2203      	movs	r2, #3
 8019074:	4619      	mov	r1, r3
 8019076:	2082      	movs	r0, #130	; 0x82
 8019078:	f000 fd44 	bl	8019b04 <SUBGRF_WriteCommand>
}
 801907c:	bf00      	nop
 801907e:	3710      	adds	r7, #16
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}
 8019084:	200011a8 	.word	0x200011a8

08019088 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
 8019090:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	0c1b      	lsrs	r3, r3, #16
 8019096:	b2db      	uxtb	r3, r3
 8019098:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	0a1b      	lsrs	r3, r3, #8
 801909e:	b2db      	uxtb	r3, r3
 80190a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	b2db      	uxtb	r3, r3
 80190a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	0c1b      	lsrs	r3, r3, #16
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	0a1b      	lsrs	r3, r3, #8
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	b2db      	uxtb	r3, r3
 80190bc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80190be:	f107 0308 	add.w	r3, r7, #8
 80190c2:	2206      	movs	r2, #6
 80190c4:	4619      	mov	r1, r3
 80190c6:	2094      	movs	r0, #148	; 0x94
 80190c8:	f000 fd1c 	bl	8019b04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80190cc:	4b03      	ldr	r3, [pc, #12]	; (80190dc <SUBGRF_SetRxDutyCycle+0x54>)
 80190ce:	2206      	movs	r2, #6
 80190d0:	701a      	strb	r2, [r3, #0]
}
 80190d2:	bf00      	nop
 80190d4:	3710      	adds	r7, #16
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}
 80190da:	bf00      	nop
 80190dc:	200011a8 	.word	0x200011a8

080190e0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80190e4:	2200      	movs	r2, #0
 80190e6:	2100      	movs	r1, #0
 80190e8:	20c5      	movs	r0, #197	; 0xc5
 80190ea:	f000 fd0b 	bl	8019b04 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80190ee:	4b02      	ldr	r3, [pc, #8]	; (80190f8 <SUBGRF_SetCad+0x18>)
 80190f0:	2207      	movs	r2, #7
 80190f2:	701a      	strb	r2, [r3, #0]
}
 80190f4:	bf00      	nop
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	200011a8 	.word	0x200011a8

080190fc <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019100:	2200      	movs	r2, #0
 8019102:	2100      	movs	r1, #0
 8019104:	20d1      	movs	r0, #209	; 0xd1
 8019106:	f000 fcfd 	bl	8019b04 <SUBGRF_WriteCommand>
}
 801910a:	bf00      	nop
 801910c:	bd80      	pop	{r7, pc}

0801910e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801910e:	b580      	push	{r7, lr}
 8019110:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019112:	2200      	movs	r2, #0
 8019114:	2100      	movs	r1, #0
 8019116:	20d2      	movs	r0, #210	; 0xd2
 8019118:	f000 fcf4 	bl	8019b04 <SUBGRF_WriteCommand>
}
 801911c:	bf00      	nop
 801911e:	bd80      	pop	{r7, pc}

08019120 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b082      	sub	sp, #8
 8019124:	af00      	add	r7, sp, #0
 8019126:	4603      	mov	r3, r0
 8019128:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801912a:	1dfb      	adds	r3, r7, #7
 801912c:	2201      	movs	r2, #1
 801912e:	4619      	mov	r1, r3
 8019130:	209f      	movs	r0, #159	; 0x9f
 8019132:	f000 fce7 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019136:	bf00      	nop
 8019138:	3708      	adds	r7, #8
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}

0801913e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801913e:	b580      	push	{r7, lr}
 8019140:	b084      	sub	sp, #16
 8019142:	af00      	add	r7, sp, #0
 8019144:	4603      	mov	r3, r0
 8019146:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019148:	1dfb      	adds	r3, r7, #7
 801914a:	2201      	movs	r2, #1
 801914c:	4619      	mov	r1, r3
 801914e:	20a0      	movs	r0, #160	; 0xa0
 8019150:	f000 fcd8 	bl	8019b04 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019154:	79fb      	ldrb	r3, [r7, #7]
 8019156:	2b3f      	cmp	r3, #63	; 0x3f
 8019158:	d91c      	bls.n	8019194 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801915a:	79fb      	ldrb	r3, [r7, #7]
 801915c:	085b      	lsrs	r3, r3, #1
 801915e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019160:	2300      	movs	r3, #0
 8019162:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019164:	2300      	movs	r3, #0
 8019166:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019168:	e005      	b.n	8019176 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801916a:	7bfb      	ldrb	r3, [r7, #15]
 801916c:	089b      	lsrs	r3, r3, #2
 801916e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019170:	7bbb      	ldrb	r3, [r7, #14]
 8019172:	3301      	adds	r3, #1
 8019174:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019176:	7bfb      	ldrb	r3, [r7, #15]
 8019178:	2b1f      	cmp	r3, #31
 801917a:	d8f6      	bhi.n	801916a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801917c:	7bfb      	ldrb	r3, [r7, #15]
 801917e:	00db      	lsls	r3, r3, #3
 8019180:	b2da      	uxtb	r2, r3
 8019182:	7bbb      	ldrb	r3, [r7, #14]
 8019184:	4413      	add	r3, r2
 8019186:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019188:	7b7b      	ldrb	r3, [r7, #13]
 801918a:	4619      	mov	r1, r3
 801918c:	f240 7006 	movw	r0, #1798	; 0x706
 8019190:	f000 fc08 	bl	80199a4 <SUBGRF_WriteRegister>
    }
}
 8019194:	bf00      	nop
 8019196:	3710      	adds	r7, #16
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}

0801919c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b082      	sub	sp, #8
 80191a0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80191a2:	f7f0 fcbe 	bl	8009b22 <RBI_IsDCDC>
 80191a6:	4603      	mov	r3, r0
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d102      	bne.n	80191b2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80191ac:	2301      	movs	r3, #1
 80191ae:	71fb      	strb	r3, [r7, #7]
 80191b0:	e001      	b.n	80191b6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80191b2:	2300      	movs	r3, #0
 80191b4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80191b6:	1dfb      	adds	r3, r7, #7
 80191b8:	2201      	movs	r2, #1
 80191ba:	4619      	mov	r1, r3
 80191bc:	2096      	movs	r0, #150	; 0x96
 80191be:	f000 fca1 	bl	8019b04 <SUBGRF_WriteCommand>
}
 80191c2:	bf00      	nop
 80191c4:	3708      	adds	r7, #8
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}

080191ca <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80191ca:	b580      	push	{r7, lr}
 80191cc:	b084      	sub	sp, #16
 80191ce:	af00      	add	r7, sp, #0
 80191d0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80191d2:	793b      	ldrb	r3, [r7, #4]
 80191d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80191d8:	b2db      	uxtb	r3, r3
 80191da:	019b      	lsls	r3, r3, #6
 80191dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80191de:	793b      	ldrb	r3, [r7, #4]
 80191e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80191e8:	b25b      	sxtb	r3, r3
 80191ea:	4313      	orrs	r3, r2
 80191ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80191ee:	793b      	ldrb	r3, [r7, #4]
 80191f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80191f8:	b25b      	sxtb	r3, r3
 80191fa:	4313      	orrs	r3, r2
 80191fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80191fe:	793b      	ldrb	r3, [r7, #4]
 8019200:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019204:	b2db      	uxtb	r3, r3
 8019206:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019208:	b25b      	sxtb	r3, r3
 801920a:	4313      	orrs	r3, r2
 801920c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801920e:	793b      	ldrb	r3, [r7, #4]
 8019210:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019214:	b2db      	uxtb	r3, r3
 8019216:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019218:	b25b      	sxtb	r3, r3
 801921a:	4313      	orrs	r3, r2
 801921c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801921e:	793b      	ldrb	r3, [r7, #4]
 8019220:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019224:	b2db      	uxtb	r3, r3
 8019226:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019228:	b25b      	sxtb	r3, r3
 801922a:	4313      	orrs	r3, r2
 801922c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801922e:	793b      	ldrb	r3, [r7, #4]
 8019230:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019234:	b2db      	uxtb	r3, r3
 8019236:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019238:	4313      	orrs	r3, r2
 801923a:	b25b      	sxtb	r3, r3
 801923c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801923e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019240:	f107 030f 	add.w	r3, r7, #15
 8019244:	2201      	movs	r2, #1
 8019246:	4619      	mov	r1, r3
 8019248:	2089      	movs	r0, #137	; 0x89
 801924a:	f000 fc5b 	bl	8019b04 <SUBGRF_WriteCommand>
}
 801924e:	bf00      	nop
 8019250:	3710      	adds	r7, #16
 8019252:	46bd      	mov	sp, r7
 8019254:	bd80      	pop	{r7, pc}
	...

08019258 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b084      	sub	sp, #16
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	4a1b      	ldr	r2, [pc, #108]	; (80192d0 <SUBGRF_CalibrateImage+0x78>)
 8019264:	4293      	cmp	r3, r2
 8019266:	d904      	bls.n	8019272 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019268:	23e1      	movs	r3, #225	; 0xe1
 801926a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801926c:	23e9      	movs	r3, #233	; 0xe9
 801926e:	737b      	strb	r3, [r7, #13]
 8019270:	e022      	b.n	80192b8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	4a17      	ldr	r2, [pc, #92]	; (80192d4 <SUBGRF_CalibrateImage+0x7c>)
 8019276:	4293      	cmp	r3, r2
 8019278:	d904      	bls.n	8019284 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801927a:	23d7      	movs	r3, #215	; 0xd7
 801927c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801927e:	23db      	movs	r3, #219	; 0xdb
 8019280:	737b      	strb	r3, [r7, #13]
 8019282:	e019      	b.n	80192b8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	4a14      	ldr	r2, [pc, #80]	; (80192d8 <SUBGRF_CalibrateImage+0x80>)
 8019288:	4293      	cmp	r3, r2
 801928a:	d904      	bls.n	8019296 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801928c:	23c1      	movs	r3, #193	; 0xc1
 801928e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019290:	23c5      	movs	r3, #197	; 0xc5
 8019292:	737b      	strb	r3, [r7, #13]
 8019294:	e010      	b.n	80192b8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	4a10      	ldr	r2, [pc, #64]	; (80192dc <SUBGRF_CalibrateImage+0x84>)
 801929a:	4293      	cmp	r3, r2
 801929c:	d904      	bls.n	80192a8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801929e:	2375      	movs	r3, #117	; 0x75
 80192a0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80192a2:	2381      	movs	r3, #129	; 0x81
 80192a4:	737b      	strb	r3, [r7, #13]
 80192a6:	e007      	b.n	80192b8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	4a0d      	ldr	r2, [pc, #52]	; (80192e0 <SUBGRF_CalibrateImage+0x88>)
 80192ac:	4293      	cmp	r3, r2
 80192ae:	d903      	bls.n	80192b8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80192b0:	236b      	movs	r3, #107	; 0x6b
 80192b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80192b4:	236f      	movs	r3, #111	; 0x6f
 80192b6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80192b8:	f107 030c 	add.w	r3, r7, #12
 80192bc:	2202      	movs	r2, #2
 80192be:	4619      	mov	r1, r3
 80192c0:	2098      	movs	r0, #152	; 0x98
 80192c2:	f000 fc1f 	bl	8019b04 <SUBGRF_WriteCommand>
}
 80192c6:	bf00      	nop
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	35a4e900 	.word	0x35a4e900
 80192d4:	32a9f880 	.word	0x32a9f880
 80192d8:	2de54480 	.word	0x2de54480
 80192dc:	1b6b0b00 	.word	0x1b6b0b00
 80192e0:	1954fc40 	.word	0x1954fc40

080192e4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80192e4:	b590      	push	{r4, r7, lr}
 80192e6:	b085      	sub	sp, #20
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	4604      	mov	r4, r0
 80192ec:	4608      	mov	r0, r1
 80192ee:	4611      	mov	r1, r2
 80192f0:	461a      	mov	r2, r3
 80192f2:	4623      	mov	r3, r4
 80192f4:	71fb      	strb	r3, [r7, #7]
 80192f6:	4603      	mov	r3, r0
 80192f8:	71bb      	strb	r3, [r7, #6]
 80192fa:	460b      	mov	r3, r1
 80192fc:	717b      	strb	r3, [r7, #5]
 80192fe:	4613      	mov	r3, r2
 8019300:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019302:	79fb      	ldrb	r3, [r7, #7]
 8019304:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019306:	79bb      	ldrb	r3, [r7, #6]
 8019308:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801930a:	797b      	ldrb	r3, [r7, #5]
 801930c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801930e:	793b      	ldrb	r3, [r7, #4]
 8019310:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019312:	f107 030c 	add.w	r3, r7, #12
 8019316:	2204      	movs	r2, #4
 8019318:	4619      	mov	r1, r3
 801931a:	2095      	movs	r0, #149	; 0x95
 801931c:	f000 fbf2 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019320:	bf00      	nop
 8019322:	3714      	adds	r7, #20
 8019324:	46bd      	mov	sp, r7
 8019326:	bd90      	pop	{r4, r7, pc}

08019328 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019328:	b590      	push	{r4, r7, lr}
 801932a:	b085      	sub	sp, #20
 801932c:	af00      	add	r7, sp, #0
 801932e:	4604      	mov	r4, r0
 8019330:	4608      	mov	r0, r1
 8019332:	4611      	mov	r1, r2
 8019334:	461a      	mov	r2, r3
 8019336:	4623      	mov	r3, r4
 8019338:	80fb      	strh	r3, [r7, #6]
 801933a:	4603      	mov	r3, r0
 801933c:	80bb      	strh	r3, [r7, #4]
 801933e:	460b      	mov	r3, r1
 8019340:	807b      	strh	r3, [r7, #2]
 8019342:	4613      	mov	r3, r2
 8019344:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019346:	88fb      	ldrh	r3, [r7, #6]
 8019348:	0a1b      	lsrs	r3, r3, #8
 801934a:	b29b      	uxth	r3, r3
 801934c:	b2db      	uxtb	r3, r3
 801934e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019350:	88fb      	ldrh	r3, [r7, #6]
 8019352:	b2db      	uxtb	r3, r3
 8019354:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019356:	88bb      	ldrh	r3, [r7, #4]
 8019358:	0a1b      	lsrs	r3, r3, #8
 801935a:	b29b      	uxth	r3, r3
 801935c:	b2db      	uxtb	r3, r3
 801935e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019360:	88bb      	ldrh	r3, [r7, #4]
 8019362:	b2db      	uxtb	r3, r3
 8019364:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019366:	887b      	ldrh	r3, [r7, #2]
 8019368:	0a1b      	lsrs	r3, r3, #8
 801936a:	b29b      	uxth	r3, r3
 801936c:	b2db      	uxtb	r3, r3
 801936e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019370:	887b      	ldrh	r3, [r7, #2]
 8019372:	b2db      	uxtb	r3, r3
 8019374:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019376:	883b      	ldrh	r3, [r7, #0]
 8019378:	0a1b      	lsrs	r3, r3, #8
 801937a:	b29b      	uxth	r3, r3
 801937c:	b2db      	uxtb	r3, r3
 801937e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019380:	883b      	ldrh	r3, [r7, #0]
 8019382:	b2db      	uxtb	r3, r3
 8019384:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019386:	f107 0308 	add.w	r3, r7, #8
 801938a:	2208      	movs	r2, #8
 801938c:	4619      	mov	r1, r3
 801938e:	2008      	movs	r0, #8
 8019390:	f000 fbb8 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019394:	bf00      	nop
 8019396:	3714      	adds	r7, #20
 8019398:	46bd      	mov	sp, r7
 801939a:	bd90      	pop	{r4, r7, pc}

0801939c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b084      	sub	sp, #16
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	4603      	mov	r3, r0
 80193a4:	6039      	str	r1, [r7, #0]
 80193a6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80193a8:	79fb      	ldrb	r3, [r7, #7]
 80193aa:	f003 0307 	and.w	r3, r3, #7
 80193ae:	b2db      	uxtb	r3, r3
 80193b0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	0c1b      	lsrs	r3, r3, #16
 80193b6:	b2db      	uxtb	r3, r3
 80193b8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	0a1b      	lsrs	r3, r3, #8
 80193be:	b2db      	uxtb	r3, r3
 80193c0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	b2db      	uxtb	r3, r3
 80193c6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80193c8:	f107 030c 	add.w	r3, r7, #12
 80193cc:	2204      	movs	r2, #4
 80193ce:	4619      	mov	r1, r3
 80193d0:	2097      	movs	r0, #151	; 0x97
 80193d2:	f000 fb97 	bl	8019b04 <SUBGRF_WriteCommand>
}
 80193d6:	bf00      	nop
 80193d8:	3710      	adds	r7, #16
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}
	...

080193e0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80193e0:	b5b0      	push	{r4, r5, r7, lr}
 80193e2:	b084      	sub	sp, #16
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80193e8:	2300      	movs	r3, #0
 80193ea:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80193ec:	4b1b      	ldr	r3, [pc, #108]	; (801945c <SUBGRF_SetRfFrequency+0x7c>)
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	f083 0301 	eor.w	r3, r3, #1
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d005      	beq.n	8019406 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80193fa:	6878      	ldr	r0, [r7, #4]
 80193fc:	f7ff ff2c 	bl	8019258 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019400:	4b16      	ldr	r3, [pc, #88]	; (801945c <SUBGRF_SetRfFrequency+0x7c>)
 8019402:	2201      	movs	r2, #1
 8019404:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	461a      	mov	r2, r3
 801940a:	f04f 0300 	mov.w	r3, #0
 801940e:	09d5      	lsrs	r5, r2, #7
 8019410:	0654      	lsls	r4, r2, #25
 8019412:	4a13      	ldr	r2, [pc, #76]	; (8019460 <SUBGRF_SetRfFrequency+0x80>)
 8019414:	f04f 0300 	mov.w	r3, #0
 8019418:	4620      	mov	r0, r4
 801941a:	4629      	mov	r1, r5
 801941c:	f7e7 fb9e 	bl	8000b5c <__aeabi_uldivmod>
 8019420:	4602      	mov	r2, r0
 8019422:	460b      	mov	r3, r1
 8019424:	4613      	mov	r3, r2
 8019426:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	0e1b      	lsrs	r3, r3, #24
 801942c:	b2db      	uxtb	r3, r3
 801942e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	0c1b      	lsrs	r3, r3, #16
 8019434:	b2db      	uxtb	r3, r3
 8019436:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	0a1b      	lsrs	r3, r3, #8
 801943c:	b2db      	uxtb	r3, r3
 801943e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	b2db      	uxtb	r3, r3
 8019444:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019446:	f107 0308 	add.w	r3, r7, #8
 801944a:	2204      	movs	r2, #4
 801944c:	4619      	mov	r1, r3
 801944e:	2086      	movs	r0, #134	; 0x86
 8019450:	f000 fb58 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019454:	bf00      	nop
 8019456:	3710      	adds	r7, #16
 8019458:	46bd      	mov	sp, r7
 801945a:	bdb0      	pop	{r4, r5, r7, pc}
 801945c:	200011b0 	.word	0x200011b0
 8019460:	01e84800 	.word	0x01e84800

08019464 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	4603      	mov	r3, r0
 801946c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801946e:	79fa      	ldrb	r2, [r7, #7]
 8019470:	4b09      	ldr	r3, [pc, #36]	; (8019498 <SUBGRF_SetPacketType+0x34>)
 8019472:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019474:	79fb      	ldrb	r3, [r7, #7]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d104      	bne.n	8019484 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801947a:	2100      	movs	r1, #0
 801947c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019480:	f000 fa90 	bl	80199a4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019484:	1dfb      	adds	r3, r7, #7
 8019486:	2201      	movs	r2, #1
 8019488:	4619      	mov	r1, r3
 801948a:	208a      	movs	r0, #138	; 0x8a
 801948c:	f000 fb3a 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019490:	bf00      	nop
 8019492:	3708      	adds	r7, #8
 8019494:	46bd      	mov	sp, r7
 8019496:	bd80      	pop	{r7, pc}
 8019498:	200011a9 	.word	0x200011a9

0801949c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801949c:	b480      	push	{r7}
 801949e:	af00      	add	r7, sp, #0
    return PacketType;
 80194a0:	4b02      	ldr	r3, [pc, #8]	; (80194ac <SUBGRF_GetPacketType+0x10>)
 80194a2:	781b      	ldrb	r3, [r3, #0]
}
 80194a4:	4618      	mov	r0, r3
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bc80      	pop	{r7}
 80194aa:	4770      	bx	lr
 80194ac:	200011a9 	.word	0x200011a9

080194b0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b084      	sub	sp, #16
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	4603      	mov	r3, r0
 80194b8:	71fb      	strb	r3, [r7, #7]
 80194ba:	460b      	mov	r3, r1
 80194bc:	71bb      	strb	r3, [r7, #6]
 80194be:	4613      	mov	r3, r2
 80194c0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80194c2:	79fb      	ldrb	r3, [r7, #7]
 80194c4:	2b01      	cmp	r3, #1
 80194c6:	d124      	bne.n	8019512 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80194c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80194cc:	2b0f      	cmp	r3, #15
 80194ce:	d106      	bne.n	80194de <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80194d0:	2301      	movs	r3, #1
 80194d2:	2201      	movs	r2, #1
 80194d4:	2100      	movs	r1, #0
 80194d6:	2006      	movs	r0, #6
 80194d8:	f7ff ff04 	bl	80192e4 <SUBGRF_SetPaConfig>
 80194dc:	e005      	b.n	80194ea <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80194de:	2301      	movs	r3, #1
 80194e0:	2201      	movs	r2, #1
 80194e2:	2100      	movs	r1, #0
 80194e4:	2004      	movs	r0, #4
 80194e6:	f7ff fefd 	bl	80192e4 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80194ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80194ee:	2b0d      	cmp	r3, #13
 80194f0:	dd02      	ble.n	80194f8 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80194f2:	230e      	movs	r3, #14
 80194f4:	71bb      	strb	r3, [r7, #6]
 80194f6:	e006      	b.n	8019506 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80194f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80194fc:	f113 0f11 	cmn.w	r3, #17
 8019500:	da01      	bge.n	8019506 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8019502:	23ef      	movs	r3, #239	; 0xef
 8019504:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8019506:	2118      	movs	r1, #24
 8019508:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801950c:	f000 fa4a 	bl	80199a4 <SUBGRF_WriteRegister>
 8019510:	e025      	b.n	801955e <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8019512:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8019516:	f000 fa59 	bl	80199cc <SUBGRF_ReadRegister>
 801951a:	4603      	mov	r3, r0
 801951c:	f043 031e 	orr.w	r3, r3, #30
 8019520:	b2db      	uxtb	r3, r3
 8019522:	4619      	mov	r1, r3
 8019524:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8019528:	f000 fa3c 	bl	80199a4 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801952c:	2301      	movs	r3, #1
 801952e:	2200      	movs	r2, #0
 8019530:	2107      	movs	r1, #7
 8019532:	2004      	movs	r0, #4
 8019534:	f7ff fed6 	bl	80192e4 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8019538:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801953c:	2b16      	cmp	r3, #22
 801953e:	dd02      	ble.n	8019546 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8019540:	2316      	movs	r3, #22
 8019542:	71bb      	strb	r3, [r7, #6]
 8019544:	e006      	b.n	8019554 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8019546:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801954a:	f113 0f09 	cmn.w	r3, #9
 801954e:	da01      	bge.n	8019554 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8019550:	23f7      	movs	r3, #247	; 0xf7
 8019552:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8019554:	2138      	movs	r1, #56	; 0x38
 8019556:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801955a:	f000 fa23 	bl	80199a4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801955e:	79bb      	ldrb	r3, [r7, #6]
 8019560:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8019562:	797b      	ldrb	r3, [r7, #5]
 8019564:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8019566:	f107 030c 	add.w	r3, r7, #12
 801956a:	2202      	movs	r2, #2
 801956c:	4619      	mov	r1, r3
 801956e:	208e      	movs	r0, #142	; 0x8e
 8019570:	f000 fac8 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019574:	bf00      	nop
 8019576:	3710      	adds	r7, #16
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}

0801957c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801957c:	b5b0      	push	{r4, r5, r7, lr}
 801957e:	b086      	sub	sp, #24
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019584:	2300      	movs	r3, #0
 8019586:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019588:	4a5e      	ldr	r2, [pc, #376]	; (8019704 <SUBGRF_SetModulationParams+0x188>)
 801958a:	f107 0308 	add.w	r3, r7, #8
 801958e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019592:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	781a      	ldrb	r2, [r3, #0]
 801959a:	4b5b      	ldr	r3, [pc, #364]	; (8019708 <SUBGRF_SetModulationParams+0x18c>)
 801959c:	781b      	ldrb	r3, [r3, #0]
 801959e:	429a      	cmp	r2, r3
 80195a0:	d004      	beq.n	80195ac <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	781b      	ldrb	r3, [r3, #0]
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7ff ff5c 	bl	8019464 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	781b      	ldrb	r3, [r3, #0]
 80195b0:	2b03      	cmp	r3, #3
 80195b2:	f200 80a2 	bhi.w	80196fa <SUBGRF_SetModulationParams+0x17e>
 80195b6:	a201      	add	r2, pc, #4	; (adr r2, 80195bc <SUBGRF_SetModulationParams+0x40>)
 80195b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195bc:	080195cd 	.word	0x080195cd
 80195c0:	08019689 	.word	0x08019689
 80195c4:	0801964b 	.word	0x0801964b
 80195c8:	080196b7 	.word	0x080196b7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80195cc:	2308      	movs	r3, #8
 80195ce:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	4a4d      	ldr	r2, [pc, #308]	; (801970c <SUBGRF_SetModulationParams+0x190>)
 80195d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80195da:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80195dc:	697b      	ldr	r3, [r7, #20]
 80195de:	0c1b      	lsrs	r3, r3, #16
 80195e0:	b2db      	uxtb	r3, r3
 80195e2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80195e4:	697b      	ldr	r3, [r7, #20]
 80195e6:	0a1b      	lsrs	r3, r3, #8
 80195e8:	b2db      	uxtb	r3, r3
 80195ea:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80195ec:	697b      	ldr	r3, [r7, #20]
 80195ee:	b2db      	uxtb	r3, r3
 80195f0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	7b1b      	ldrb	r3, [r3, #12]
 80195f6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	7b5b      	ldrb	r3, [r3, #13]
 80195fc:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	689b      	ldr	r3, [r3, #8]
 8019602:	461a      	mov	r2, r3
 8019604:	f04f 0300 	mov.w	r3, #0
 8019608:	09d5      	lsrs	r5, r2, #7
 801960a:	0654      	lsls	r4, r2, #25
 801960c:	4a40      	ldr	r2, [pc, #256]	; (8019710 <SUBGRF_SetModulationParams+0x194>)
 801960e:	f04f 0300 	mov.w	r3, #0
 8019612:	4620      	mov	r0, r4
 8019614:	4629      	mov	r1, r5
 8019616:	f7e7 faa1 	bl	8000b5c <__aeabi_uldivmod>
 801961a:	4602      	mov	r2, r0
 801961c:	460b      	mov	r3, r1
 801961e:	4613      	mov	r3, r2
 8019620:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	0c1b      	lsrs	r3, r3, #16
 8019626:	b2db      	uxtb	r3, r3
 8019628:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	0a1b      	lsrs	r3, r3, #8
 801962e:	b2db      	uxtb	r3, r3
 8019630:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019632:	697b      	ldr	r3, [r7, #20]
 8019634:	b2db      	uxtb	r3, r3
 8019636:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019638:	7cfb      	ldrb	r3, [r7, #19]
 801963a:	b29a      	uxth	r2, r3
 801963c:	f107 0308 	add.w	r3, r7, #8
 8019640:	4619      	mov	r1, r3
 8019642:	208b      	movs	r0, #139	; 0x8b
 8019644:	f000 fa5e 	bl	8019b04 <SUBGRF_WriteCommand>
        break;
 8019648:	e058      	b.n	80196fc <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 801964a:	2304      	movs	r3, #4
 801964c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	691b      	ldr	r3, [r3, #16]
 8019652:	4a2e      	ldr	r2, [pc, #184]	; (801970c <SUBGRF_SetModulationParams+0x190>)
 8019654:	fbb2 f3f3 	udiv	r3, r2, r3
 8019658:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	0c1b      	lsrs	r3, r3, #16
 801965e:	b2db      	uxtb	r3, r3
 8019660:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	0a1b      	lsrs	r3, r3, #8
 8019666:	b2db      	uxtb	r3, r3
 8019668:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	b2db      	uxtb	r3, r3
 801966e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	7d1b      	ldrb	r3, [r3, #20]
 8019674:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019676:	7cfb      	ldrb	r3, [r7, #19]
 8019678:	b29a      	uxth	r2, r3
 801967a:	f107 0308 	add.w	r3, r7, #8
 801967e:	4619      	mov	r1, r3
 8019680:	208b      	movs	r0, #139	; 0x8b
 8019682:	f000 fa3f 	bl	8019b04 <SUBGRF_WriteCommand>
        break;
 8019686:	e039      	b.n	80196fc <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8019688:	2304      	movs	r3, #4
 801968a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	7e1b      	ldrb	r3, [r3, #24]
 8019690:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	7e5b      	ldrb	r3, [r3, #25]
 8019696:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	7e9b      	ldrb	r3, [r3, #26]
 801969c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	7edb      	ldrb	r3, [r3, #27]
 80196a2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80196a4:	7cfb      	ldrb	r3, [r7, #19]
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	f107 0308 	add.w	r3, r7, #8
 80196ac:	4619      	mov	r1, r3
 80196ae:	208b      	movs	r0, #139	; 0x8b
 80196b0:	f000 fa28 	bl	8019b04 <SUBGRF_WriteCommand>

        break;
 80196b4:	e022      	b.n	80196fc <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80196b6:	2305      	movs	r3, #5
 80196b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	4a13      	ldr	r2, [pc, #76]	; (801970c <SUBGRF_SetModulationParams+0x190>)
 80196c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80196c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	0c1b      	lsrs	r3, r3, #16
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	0a1b      	lsrs	r3, r3, #8
 80196d2:	b2db      	uxtb	r3, r3
 80196d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	7b1b      	ldrb	r3, [r3, #12]
 80196e0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	7b5b      	ldrb	r3, [r3, #13]
 80196e6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80196e8:	7cfb      	ldrb	r3, [r7, #19]
 80196ea:	b29a      	uxth	r2, r3
 80196ec:	f107 0308 	add.w	r3, r7, #8
 80196f0:	4619      	mov	r1, r3
 80196f2:	208b      	movs	r0, #139	; 0x8b
 80196f4:	f000 fa06 	bl	8019b04 <SUBGRF_WriteCommand>
        break;
 80196f8:	e000      	b.n	80196fc <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80196fa:	bf00      	nop
    }
}
 80196fc:	bf00      	nop
 80196fe:	3718      	adds	r7, #24
 8019700:	46bd      	mov	sp, r7
 8019702:	bdb0      	pop	{r4, r5, r7, pc}
 8019704:	0801bf44 	.word	0x0801bf44
 8019708:	200011a9 	.word	0x200011a9
 801970c:	3d090000 	.word	0x3d090000
 8019710:	01e84800 	.word	0x01e84800

08019714 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b086      	sub	sp, #24
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801971c:	2300      	movs	r3, #0
 801971e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019720:	4a48      	ldr	r2, [pc, #288]	; (8019844 <SUBGRF_SetPacketParams+0x130>)
 8019722:	f107 030c 	add.w	r3, r7, #12
 8019726:	ca07      	ldmia	r2, {r0, r1, r2}
 8019728:	c303      	stmia	r3!, {r0, r1}
 801972a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	781a      	ldrb	r2, [r3, #0]
 8019730:	4b45      	ldr	r3, [pc, #276]	; (8019848 <SUBGRF_SetPacketParams+0x134>)
 8019732:	781b      	ldrb	r3, [r3, #0]
 8019734:	429a      	cmp	r2, r3
 8019736:	d004      	beq.n	8019742 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	4618      	mov	r0, r3
 801973e:	f7ff fe91 	bl	8019464 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	781b      	ldrb	r3, [r3, #0]
 8019746:	2b03      	cmp	r3, #3
 8019748:	d878      	bhi.n	801983c <SUBGRF_SetPacketParams+0x128>
 801974a:	a201      	add	r2, pc, #4	; (adr r2, 8019750 <SUBGRF_SetPacketParams+0x3c>)
 801974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019750:	08019761 	.word	0x08019761
 8019754:	080197f1 	.word	0x080197f1
 8019758:	080197e5 	.word	0x080197e5
 801975c:	08019761 	.word	0x08019761
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	7a5b      	ldrb	r3, [r3, #9]
 8019764:	2bf1      	cmp	r3, #241	; 0xf1
 8019766:	d10a      	bne.n	801977e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019768:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801976c:	f7ff fb20 	bl	8018db0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019770:	f248 0005 	movw	r0, #32773	; 0x8005
 8019774:	f7ff fb3c 	bl	8018df0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019778:	2302      	movs	r3, #2
 801977a:	75bb      	strb	r3, [r7, #22]
 801977c:	e011      	b.n	80197a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	7a5b      	ldrb	r3, [r3, #9]
 8019782:	2bf2      	cmp	r3, #242	; 0xf2
 8019784:	d10a      	bne.n	801979c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019786:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801978a:	f7ff fb11 	bl	8018db0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801978e:	f241 0021 	movw	r0, #4129	; 0x1021
 8019792:	f7ff fb2d 	bl	8018df0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019796:	2306      	movs	r3, #6
 8019798:	75bb      	strb	r3, [r7, #22]
 801979a:	e002      	b.n	80197a2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	7a5b      	ldrb	r3, [r3, #9]
 80197a0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80197a2:	2309      	movs	r3, #9
 80197a4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	885b      	ldrh	r3, [r3, #2]
 80197aa:	0a1b      	lsrs	r3, r3, #8
 80197ac:	b29b      	uxth	r3, r3
 80197ae:	b2db      	uxtb	r3, r3
 80197b0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	885b      	ldrh	r3, [r3, #2]
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	791b      	ldrb	r3, [r3, #4]
 80197be:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	795b      	ldrb	r3, [r3, #5]
 80197c4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	799b      	ldrb	r3, [r3, #6]
 80197ca:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	79db      	ldrb	r3, [r3, #7]
 80197d0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	7a1b      	ldrb	r3, [r3, #8]
 80197d6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80197d8:	7dbb      	ldrb	r3, [r7, #22]
 80197da:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	7a9b      	ldrb	r3, [r3, #10]
 80197e0:	753b      	strb	r3, [r7, #20]
        break;
 80197e2:	e022      	b.n	801982a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80197e4:	2301      	movs	r3, #1
 80197e6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	7b1b      	ldrb	r3, [r3, #12]
 80197ec:	733b      	strb	r3, [r7, #12]
        break;
 80197ee:	e01c      	b.n	801982a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80197f0:	2306      	movs	r3, #6
 80197f2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	89db      	ldrh	r3, [r3, #14]
 80197f8:	0a1b      	lsrs	r3, r3, #8
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	b2db      	uxtb	r3, r3
 80197fe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	89db      	ldrh	r3, [r3, #14]
 8019804:	b2db      	uxtb	r3, r3
 8019806:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	7c1a      	ldrb	r2, [r3, #16]
 801980c:	4b0f      	ldr	r3, [pc, #60]	; (801984c <SUBGRF_SetPacketParams+0x138>)
 801980e:	4611      	mov	r1, r2
 8019810:	7019      	strb	r1, [r3, #0]
 8019812:	4613      	mov	r3, r2
 8019814:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	7c5b      	ldrb	r3, [r3, #17]
 801981a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	7c9b      	ldrb	r3, [r3, #18]
 8019820:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	7cdb      	ldrb	r3, [r3, #19]
 8019826:	747b      	strb	r3, [r7, #17]
        break;
 8019828:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801982a:	7dfb      	ldrb	r3, [r7, #23]
 801982c:	b29a      	uxth	r2, r3
 801982e:	f107 030c 	add.w	r3, r7, #12
 8019832:	4619      	mov	r1, r3
 8019834:	208c      	movs	r0, #140	; 0x8c
 8019836:	f000 f965 	bl	8019b04 <SUBGRF_WriteCommand>
 801983a:	e000      	b.n	801983e <SUBGRF_SetPacketParams+0x12a>
        return;
 801983c:	bf00      	nop
}
 801983e:	3718      	adds	r7, #24
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}
 8019844:	0801bf4c 	.word	0x0801bf4c
 8019848:	200011a9 	.word	0x200011a9
 801984c:	200011aa 	.word	0x200011aa

08019850 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b084      	sub	sp, #16
 8019854:	af00      	add	r7, sp, #0
 8019856:	4603      	mov	r3, r0
 8019858:	460a      	mov	r2, r1
 801985a:	71fb      	strb	r3, [r7, #7]
 801985c:	4613      	mov	r3, r2
 801985e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019860:	79fb      	ldrb	r3, [r7, #7]
 8019862:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019864:	79bb      	ldrb	r3, [r7, #6]
 8019866:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019868:	f107 030c 	add.w	r3, r7, #12
 801986c:	2202      	movs	r2, #2
 801986e:	4619      	mov	r1, r3
 8019870:	208f      	movs	r0, #143	; 0x8f
 8019872:	f000 f947 	bl	8019b04 <SUBGRF_WriteCommand>
}
 8019876:	bf00      	nop
 8019878:	3710      	adds	r7, #16
 801987a:	46bd      	mov	sp, r7
 801987c:	bd80      	pop	{r7, pc}

0801987e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801987e:	b580      	push	{r7, lr}
 8019880:	b082      	sub	sp, #8
 8019882:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019884:	2300      	movs	r3, #0
 8019886:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019888:	1d3b      	adds	r3, r7, #4
 801988a:	2201      	movs	r2, #1
 801988c:	4619      	mov	r1, r3
 801988e:	2015      	movs	r0, #21
 8019890:	f000 f95a 	bl	8019b48 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019894:	793b      	ldrb	r3, [r7, #4]
 8019896:	425b      	negs	r3, r3
 8019898:	105b      	asrs	r3, r3, #1
 801989a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801989c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}

080198a8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b084      	sub	sp, #16
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80198b2:	f107 030c 	add.w	r3, r7, #12
 80198b6:	2202      	movs	r2, #2
 80198b8:	4619      	mov	r1, r3
 80198ba:	2013      	movs	r0, #19
 80198bc:	f000 f944 	bl	8019b48 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80198c0:	f7ff fdec 	bl	801949c <SUBGRF_GetPacketType>
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b01      	cmp	r3, #1
 80198c8:	d10d      	bne.n	80198e6 <SUBGRF_GetRxBufferStatus+0x3e>
 80198ca:	4b0c      	ldr	r3, [pc, #48]	; (80198fc <SUBGRF_GetRxBufferStatus+0x54>)
 80198cc:	781b      	ldrb	r3, [r3, #0]
 80198ce:	b2db      	uxtb	r3, r3
 80198d0:	2b01      	cmp	r3, #1
 80198d2:	d108      	bne.n	80198e6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80198d4:	f240 7002 	movw	r0, #1794	; 0x702
 80198d8:	f000 f878 	bl	80199cc <SUBGRF_ReadRegister>
 80198dc:	4603      	mov	r3, r0
 80198de:	461a      	mov	r2, r3
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	701a      	strb	r2, [r3, #0]
 80198e4:	e002      	b.n	80198ec <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80198e6:	7b3a      	ldrb	r2, [r7, #12]
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80198ec:	7b7a      	ldrb	r2, [r7, #13]
 80198ee:	683b      	ldr	r3, [r7, #0]
 80198f0:	701a      	strb	r2, [r3, #0]
}
 80198f2:	bf00      	nop
 80198f4:	3710      	adds	r7, #16
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}
 80198fa:	bf00      	nop
 80198fc:	200011aa 	.word	0x200011aa

08019900 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019908:	f107 030c 	add.w	r3, r7, #12
 801990c:	2203      	movs	r2, #3
 801990e:	4619      	mov	r1, r3
 8019910:	2014      	movs	r0, #20
 8019912:	f000 f919 	bl	8019b48 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019916:	f7ff fdc1 	bl	801949c <SUBGRF_GetPacketType>
 801991a:	4603      	mov	r3, r0
 801991c:	461a      	mov	r2, r3
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	781b      	ldrb	r3, [r3, #0]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d002      	beq.n	8019930 <SUBGRF_GetPacketStatus+0x30>
 801992a:	2b01      	cmp	r3, #1
 801992c:	d013      	beq.n	8019956 <SUBGRF_GetPacketStatus+0x56>
 801992e:	e02a      	b.n	8019986 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019930:	7b3a      	ldrb	r2, [r7, #12]
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019936:	7b7b      	ldrb	r3, [r7, #13]
 8019938:	425b      	negs	r3, r3
 801993a:	105b      	asrs	r3, r3, #1
 801993c:	b25a      	sxtb	r2, r3
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019942:	7bbb      	ldrb	r3, [r7, #14]
 8019944:	425b      	negs	r3, r3
 8019946:	105b      	asrs	r3, r3, #1
 8019948:	b25a      	sxtb	r2, r3
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2200      	movs	r2, #0
 8019952:	609a      	str	r2, [r3, #8]
            break;
 8019954:	e020      	b.n	8019998 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019956:	7b3b      	ldrb	r3, [r7, #12]
 8019958:	425b      	negs	r3, r3
 801995a:	105b      	asrs	r3, r3, #1
 801995c:	b25a      	sxtb	r2, r3
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019962:	7b7b      	ldrb	r3, [r7, #13]
 8019964:	b25b      	sxtb	r3, r3
 8019966:	3302      	adds	r3, #2
 8019968:	109b      	asrs	r3, r3, #2
 801996a:	b25a      	sxtb	r2, r3
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019970:	7bbb      	ldrb	r3, [r7, #14]
 8019972:	425b      	negs	r3, r3
 8019974:	105b      	asrs	r3, r3, #1
 8019976:	b25a      	sxtb	r2, r3
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801997c:	4b08      	ldr	r3, [pc, #32]	; (80199a0 <SUBGRF_GetPacketStatus+0xa0>)
 801997e:	681a      	ldr	r2, [r3, #0]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	611a      	str	r2, [r3, #16]
            break;
 8019984:	e008      	b.n	8019998 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019986:	2214      	movs	r2, #20
 8019988:	2100      	movs	r1, #0
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	f000 fbf5 	bl	801a17a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	220f      	movs	r2, #15
 8019994:	701a      	strb	r2, [r3, #0]
            break;
 8019996:	bf00      	nop
    }
}
 8019998:	bf00      	nop
 801999a:	3710      	adds	r7, #16
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}
 80199a0:	200011ac 	.word	0x200011ac

080199a4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	4603      	mov	r3, r0
 80199ac:	460a      	mov	r2, r1
 80199ae:	80fb      	strh	r3, [r7, #6]
 80199b0:	4613      	mov	r3, r2
 80199b2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80199b4:	1d7a      	adds	r2, r7, #5
 80199b6:	88f9      	ldrh	r1, [r7, #6]
 80199b8:	2301      	movs	r3, #1
 80199ba:	4803      	ldr	r0, [pc, #12]	; (80199c8 <SUBGRF_WriteRegister+0x24>)
 80199bc:	f7ec ffba 	bl	8006934 <HAL_SUBGHZ_WriteRegisters>
}
 80199c0:	bf00      	nop
 80199c2:	3708      	adds	r7, #8
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	20001918 	.word	0x20001918

080199cc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b084      	sub	sp, #16
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	4603      	mov	r3, r0
 80199d4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80199d6:	f107 020f 	add.w	r2, r7, #15
 80199da:	88f9      	ldrh	r1, [r7, #6]
 80199dc:	2301      	movs	r3, #1
 80199de:	4804      	ldr	r0, [pc, #16]	; (80199f0 <SUBGRF_ReadRegister+0x24>)
 80199e0:	f7ed f807 	bl	80069f2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80199e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3710      	adds	r7, #16
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
 80199ee:	bf00      	nop
 80199f0:	20001918 	.word	0x20001918

080199f4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b086      	sub	sp, #24
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	4603      	mov	r3, r0
 80199fc:	6039      	str	r1, [r7, #0]
 80199fe:	80fb      	strh	r3, [r7, #6]
 8019a00:	4613      	mov	r3, r2
 8019a02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a04:	f3ef 8310 	mrs	r3, PRIMASK
 8019a08:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a0e:	b672      	cpsid	i
}
 8019a10:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019a12:	88bb      	ldrh	r3, [r7, #4]
 8019a14:	88f9      	ldrh	r1, [r7, #6]
 8019a16:	683a      	ldr	r2, [r7, #0]
 8019a18:	4806      	ldr	r0, [pc, #24]	; (8019a34 <SUBGRF_WriteRegisters+0x40>)
 8019a1a:	f7ec ff8b 	bl	8006934 <HAL_SUBGHZ_WriteRegisters>
 8019a1e:	697b      	ldr	r3, [r7, #20]
 8019a20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a22:	693b      	ldr	r3, [r7, #16]
 8019a24:	f383 8810 	msr	PRIMASK, r3
}
 8019a28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a2a:	bf00      	nop
 8019a2c:	3718      	adds	r7, #24
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	bd80      	pop	{r7, pc}
 8019a32:	bf00      	nop
 8019a34:	20001918 	.word	0x20001918

08019a38 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b086      	sub	sp, #24
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	4603      	mov	r3, r0
 8019a40:	6039      	str	r1, [r7, #0]
 8019a42:	80fb      	strh	r3, [r7, #6]
 8019a44:	4613      	mov	r3, r2
 8019a46:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a48:	f3ef 8310 	mrs	r3, PRIMASK
 8019a4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a4e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a52:	b672      	cpsid	i
}
 8019a54:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019a56:	88bb      	ldrh	r3, [r7, #4]
 8019a58:	88f9      	ldrh	r1, [r7, #6]
 8019a5a:	683a      	ldr	r2, [r7, #0]
 8019a5c:	4806      	ldr	r0, [pc, #24]	; (8019a78 <SUBGRF_ReadRegisters+0x40>)
 8019a5e:	f7ec ffc8 	bl	80069f2 <HAL_SUBGHZ_ReadRegisters>
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a66:	693b      	ldr	r3, [r7, #16]
 8019a68:	f383 8810 	msr	PRIMASK, r3
}
 8019a6c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a6e:	bf00      	nop
 8019a70:	3718      	adds	r7, #24
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	20001918 	.word	0x20001918

08019a7c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b086      	sub	sp, #24
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	4603      	mov	r3, r0
 8019a84:	6039      	str	r1, [r7, #0]
 8019a86:	71fb      	strb	r3, [r7, #7]
 8019a88:	4613      	mov	r3, r2
 8019a8a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8019a90:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a92:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a96:	b672      	cpsid	i
}
 8019a98:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019a9a:	79bb      	ldrb	r3, [r7, #6]
 8019a9c:	b29b      	uxth	r3, r3
 8019a9e:	79f9      	ldrb	r1, [r7, #7]
 8019aa0:	683a      	ldr	r2, [r7, #0]
 8019aa2:	4806      	ldr	r0, [pc, #24]	; (8019abc <SUBGRF_WriteBuffer+0x40>)
 8019aa4:	f7ed f8b9 	bl	8006c1a <HAL_SUBGHZ_WriteBuffer>
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019aac:	693b      	ldr	r3, [r7, #16]
 8019aae:	f383 8810 	msr	PRIMASK, r3
}
 8019ab2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019ab4:	bf00      	nop
 8019ab6:	3718      	adds	r7, #24
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}
 8019abc:	20001918 	.word	0x20001918

08019ac0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b086      	sub	sp, #24
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	6039      	str	r1, [r7, #0]
 8019aca:	71fb      	strb	r3, [r7, #7]
 8019acc:	4613      	mov	r3, r2
 8019ace:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8019ad4:	60fb      	str	r3, [r7, #12]
  return(result);
 8019ad6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019ad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ada:	b672      	cpsid	i
}
 8019adc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019ade:	79bb      	ldrb	r3, [r7, #6]
 8019ae0:	b29b      	uxth	r3, r3
 8019ae2:	79f9      	ldrb	r1, [r7, #7]
 8019ae4:	683a      	ldr	r2, [r7, #0]
 8019ae6:	4806      	ldr	r0, [pc, #24]	; (8019b00 <SUBGRF_ReadBuffer+0x40>)
 8019ae8:	f7ed f8ea 	bl	8006cc0 <HAL_SUBGHZ_ReadBuffer>
 8019aec:	697b      	ldr	r3, [r7, #20]
 8019aee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019af0:	693b      	ldr	r3, [r7, #16]
 8019af2:	f383 8810 	msr	PRIMASK, r3
}
 8019af6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019af8:	bf00      	nop
 8019afa:	3718      	adds	r7, #24
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}
 8019b00:	20001918 	.word	0x20001918

08019b04 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b086      	sub	sp, #24
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	6039      	str	r1, [r7, #0]
 8019b0e:	71fb      	strb	r3, [r7, #7]
 8019b10:	4613      	mov	r3, r2
 8019b12:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b14:	f3ef 8310 	mrs	r3, PRIMASK
 8019b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019b1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b1e:	b672      	cpsid	i
}
 8019b20:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019b22:	88bb      	ldrh	r3, [r7, #4]
 8019b24:	79f9      	ldrb	r1, [r7, #7]
 8019b26:	683a      	ldr	r2, [r7, #0]
 8019b28:	4806      	ldr	r0, [pc, #24]	; (8019b44 <SUBGRF_WriteCommand+0x40>)
 8019b2a:	f7ec ffc3 	bl	8006ab4 <HAL_SUBGHZ_ExecSetCmd>
 8019b2e:	697b      	ldr	r3, [r7, #20]
 8019b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b32:	693b      	ldr	r3, [r7, #16]
 8019b34:	f383 8810 	msr	PRIMASK, r3
}
 8019b38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b3a:	bf00      	nop
 8019b3c:	3718      	adds	r7, #24
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	20001918 	.word	0x20001918

08019b48 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b086      	sub	sp, #24
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	4603      	mov	r3, r0
 8019b50:	6039      	str	r1, [r7, #0]
 8019b52:	71fb      	strb	r3, [r7, #7]
 8019b54:	4613      	mov	r3, r2
 8019b56:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b58:	f3ef 8310 	mrs	r3, PRIMASK
 8019b5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b62:	b672      	cpsid	i
}
 8019b64:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019b66:	88bb      	ldrh	r3, [r7, #4]
 8019b68:	79f9      	ldrb	r1, [r7, #7]
 8019b6a:	683a      	ldr	r2, [r7, #0]
 8019b6c:	4806      	ldr	r0, [pc, #24]	; (8019b88 <SUBGRF_ReadCommand+0x40>)
 8019b6e:	f7ed f800 	bl	8006b72 <HAL_SUBGHZ_ExecGetCmd>
 8019b72:	697b      	ldr	r3, [r7, #20]
 8019b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b76:	693b      	ldr	r3, [r7, #16]
 8019b78:	f383 8810 	msr	PRIMASK, r3
}
 8019b7c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b7e:	bf00      	nop
 8019b80:	3718      	adds	r7, #24
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bd80      	pop	{r7, pc}
 8019b86:	bf00      	nop
 8019b88:	20001918 	.word	0x20001918

08019b8c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	4603      	mov	r3, r0
 8019b94:	460a      	mov	r2, r1
 8019b96:	71fb      	strb	r3, [r7, #7]
 8019b98:	4613      	mov	r3, r2
 8019b9a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019b9c:	2301      	movs	r3, #1
 8019b9e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019ba0:	79bb      	ldrb	r3, [r7, #6]
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d10d      	bne.n	8019bc2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019ba6:	79fb      	ldrb	r3, [r7, #7]
 8019ba8:	2b01      	cmp	r3, #1
 8019baa:	d104      	bne.n	8019bb6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019bac:	2302      	movs	r3, #2
 8019bae:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019bb0:	2004      	movs	r0, #4
 8019bb2:	f000 f8df 	bl	8019d74 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019bb6:	79fb      	ldrb	r3, [r7, #7]
 8019bb8:	2b02      	cmp	r3, #2
 8019bba:	d107      	bne.n	8019bcc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019bbc:	2303      	movs	r3, #3
 8019bbe:	73fb      	strb	r3, [r7, #15]
 8019bc0:	e004      	b.n	8019bcc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019bc2:	79bb      	ldrb	r3, [r7, #6]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d101      	bne.n	8019bcc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019bc8:	2301      	movs	r3, #1
 8019bca:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019bcc:	7bfb      	ldrb	r3, [r7, #15]
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f7ef ff8b 	bl	8009aea <RBI_ConfigRFSwitch>
}
 8019bd4:	bf00      	nop
 8019bd6:	3710      	adds	r7, #16
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bd80      	pop	{r7, pc}

08019bdc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b084      	sub	sp, #16
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	4603      	mov	r3, r0
 8019be4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019be6:	2301      	movs	r3, #1
 8019be8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019bea:	f7ef ff8c 	bl	8009b06 <RBI_GetTxConfig>
 8019bee:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	2b02      	cmp	r3, #2
 8019bf4:	d016      	beq.n	8019c24 <SUBGRF_SetRfTxPower+0x48>
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	2b02      	cmp	r3, #2
 8019bfa:	dc16      	bgt.n	8019c2a <SUBGRF_SetRfTxPower+0x4e>
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d003      	beq.n	8019c0a <SUBGRF_SetRfTxPower+0x2e>
 8019c02:	68bb      	ldr	r3, [r7, #8]
 8019c04:	2b01      	cmp	r3, #1
 8019c06:	d00a      	beq.n	8019c1e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019c08:	e00f      	b.n	8019c2a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c0e:	2b0f      	cmp	r3, #15
 8019c10:	dd02      	ble.n	8019c18 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019c12:	2302      	movs	r3, #2
 8019c14:	73fb      	strb	r3, [r7, #15]
            break;
 8019c16:	e009      	b.n	8019c2c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019c18:	2301      	movs	r3, #1
 8019c1a:	73fb      	strb	r3, [r7, #15]
            break;
 8019c1c:	e006      	b.n	8019c2c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019c1e:	2301      	movs	r3, #1
 8019c20:	73fb      	strb	r3, [r7, #15]
            break;
 8019c22:	e003      	b.n	8019c2c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019c24:	2302      	movs	r3, #2
 8019c26:	73fb      	strb	r3, [r7, #15]
            break;
 8019c28:	e000      	b.n	8019c2c <SUBGRF_SetRfTxPower+0x50>
            break;
 8019c2a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019c2c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019c30:	7bfb      	ldrb	r3, [r7, #15]
 8019c32:	2202      	movs	r2, #2
 8019c34:	4618      	mov	r0, r3
 8019c36:	f7ff fc3b 	bl	80194b0 <SUBGRF_SetTxParams>

    return paSelect;
 8019c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	3710      	adds	r7, #16
 8019c40:	46bd      	mov	sp, r7
 8019c42:	bd80      	pop	{r7, pc}

08019c44 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019c44:	b480      	push	{r7}
 8019c46:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019c48:	2301      	movs	r3, #1
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bc80      	pop	{r7}
 8019c50:	4770      	bx	lr
	...

08019c54 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b082      	sub	sp, #8
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019c5c:	4b03      	ldr	r3, [pc, #12]	; (8019c6c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	2001      	movs	r0, #1
 8019c62:	4798      	blx	r3
}
 8019c64:	bf00      	nop
 8019c66:	3708      	adds	r7, #8
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	200011b4 	.word	0x200011b4

08019c70 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b082      	sub	sp, #8
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019c78:	4b03      	ldr	r3, [pc, #12]	; (8019c88 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	2002      	movs	r0, #2
 8019c7e:	4798      	blx	r3
}
 8019c80:	bf00      	nop
 8019c82:	3708      	adds	r7, #8
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}
 8019c88:	200011b4 	.word	0x200011b4

08019c8c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019c94:	4b03      	ldr	r3, [pc, #12]	; (8019ca4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2040      	movs	r0, #64	; 0x40
 8019c9a:	4798      	blx	r3
}
 8019c9c:	bf00      	nop
 8019c9e:	3708      	adds	r7, #8
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	bd80      	pop	{r7, pc}
 8019ca4:	200011b4 	.word	0x200011b4

08019ca8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b082      	sub	sp, #8
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
 8019cb0:	460b      	mov	r3, r1
 8019cb2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019cb4:	78fb      	ldrb	r3, [r7, #3]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d002      	beq.n	8019cc0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	d005      	beq.n	8019cca <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019cbe:	e00a      	b.n	8019cd6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019cc0:	4b07      	ldr	r3, [pc, #28]	; (8019ce0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	2080      	movs	r0, #128	; 0x80
 8019cc6:	4798      	blx	r3
            break;
 8019cc8:	e005      	b.n	8019cd6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019cca:	4b05      	ldr	r3, [pc, #20]	; (8019ce0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019cd2:	4798      	blx	r3
            break;
 8019cd4:	bf00      	nop
    }
}
 8019cd6:	bf00      	nop
 8019cd8:	3708      	adds	r7, #8
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	200011b4 	.word	0x200011b4

08019ce4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b082      	sub	sp, #8
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019cec:	4b04      	ldr	r3, [pc, #16]	; (8019d00 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019cf4:	4798      	blx	r3
}
 8019cf6:	bf00      	nop
 8019cf8:	3708      	adds	r7, #8
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}
 8019cfe:	bf00      	nop
 8019d00:	200011b4 	.word	0x200011b4

08019d04 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b082      	sub	sp, #8
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019d0c:	4b03      	ldr	r3, [pc, #12]	; (8019d1c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	2020      	movs	r0, #32
 8019d12:	4798      	blx	r3
}
 8019d14:	bf00      	nop
 8019d16:	3708      	adds	r7, #8
 8019d18:	46bd      	mov	sp, r7
 8019d1a:	bd80      	pop	{r7, pc}
 8019d1c:	200011b4 	.word	0x200011b4

08019d20 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b082      	sub	sp, #8
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019d28:	4b03      	ldr	r3, [pc, #12]	; (8019d38 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	2004      	movs	r0, #4
 8019d2e:	4798      	blx	r3
}
 8019d30:	bf00      	nop
 8019d32:	3708      	adds	r7, #8
 8019d34:	46bd      	mov	sp, r7
 8019d36:	bd80      	pop	{r7, pc}
 8019d38:	200011b4 	.word	0x200011b4

08019d3c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b082      	sub	sp, #8
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019d44:	4b03      	ldr	r3, [pc, #12]	; (8019d54 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	2008      	movs	r0, #8
 8019d4a:	4798      	blx	r3
}
 8019d4c:	bf00      	nop
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	200011b4 	.word	0x200011b4

08019d58 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019d60:	4b03      	ldr	r3, [pc, #12]	; (8019d70 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	2010      	movs	r0, #16
 8019d66:	4798      	blx	r3
}
 8019d68:	bf00      	nop
 8019d6a:	3708      	adds	r7, #8
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	200011b4 	.word	0x200011b4

08019d74 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b084      	sub	sp, #16
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019d7e:	f7ef fed0 	bl	8009b22 <RBI_IsDCDC>
 8019d82:	4603      	mov	r3, r0
 8019d84:	2b01      	cmp	r3, #1
 8019d86:	d112      	bne.n	8019dae <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019d88:	f640 1023 	movw	r0, #2339	; 0x923
 8019d8c:	f7ff fe1e 	bl	80199cc <SUBGRF_ReadRegister>
 8019d90:	4603      	mov	r3, r0
 8019d92:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019d94:	7bfb      	ldrb	r3, [r7, #15]
 8019d96:	f023 0306 	bic.w	r3, r3, #6
 8019d9a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019d9c:	7bfa      	ldrb	r2, [r7, #15]
 8019d9e:	79fb      	ldrb	r3, [r7, #7]
 8019da0:	4313      	orrs	r3, r2
 8019da2:	b2db      	uxtb	r3, r3
 8019da4:	4619      	mov	r1, r3
 8019da6:	f640 1023 	movw	r0, #2339	; 0x923
 8019daa:	f7ff fdfb 	bl	80199a4 <SUBGRF_WriteRegister>
  }
}
 8019dae:	bf00      	nop
 8019db0:	3710      	adds	r7, #16
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}
	...

08019db8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019db8:	b480      	push	{r7}
 8019dba:	b085      	sub	sp, #20
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d101      	bne.n	8019dca <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019dc6:	231f      	movs	r3, #31
 8019dc8:	e016      	b.n	8019df8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019dca:	2300      	movs	r3, #0
 8019dcc:	73fb      	strb	r3, [r7, #15]
 8019dce:	e00f      	b.n	8019df0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019dd0:	7bfb      	ldrb	r3, [r7, #15]
 8019dd2:	4a0c      	ldr	r2, [pc, #48]	; (8019e04 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019dd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019dd8:	687a      	ldr	r2, [r7, #4]
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d205      	bcs.n	8019dea <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019dde:	7bfb      	ldrb	r3, [r7, #15]
 8019de0:	4a08      	ldr	r2, [pc, #32]	; (8019e04 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019de2:	00db      	lsls	r3, r3, #3
 8019de4:	4413      	add	r3, r2
 8019de6:	791b      	ldrb	r3, [r3, #4]
 8019de8:	e006      	b.n	8019df8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019dea:	7bfb      	ldrb	r3, [r7, #15]
 8019dec:	3301      	adds	r3, #1
 8019dee:	73fb      	strb	r3, [r7, #15]
 8019df0:	7bfb      	ldrb	r3, [r7, #15]
 8019df2:	2b15      	cmp	r3, #21
 8019df4:	d9ec      	bls.n	8019dd0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019df6:	e7fe      	b.n	8019df6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3714      	adds	r7, #20
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bc80      	pop	{r7}
 8019e00:	4770      	bx	lr
 8019e02:	bf00      	nop
 8019e04:	0801c554 	.word	0x0801c554

08019e08 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b08a      	sub	sp, #40	; 0x28
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
 8019e10:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019e12:	4b36      	ldr	r3, [pc, #216]	; (8019eec <SUBGRF_GetCFO+0xe4>)
 8019e14:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8019e16:	f640 0007 	movw	r0, #2055	; 0x807
 8019e1a:	f7ff fdd7 	bl	80199cc <SUBGRF_ReadRegister>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019e22:	7ffb      	ldrb	r3, [r7, #31]
 8019e24:	08db      	lsrs	r3, r3, #3
 8019e26:	b2db      	uxtb	r3, r3
 8019e28:	f003 0303 	and.w	r3, r3, #3
 8019e2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019e30:	4413      	add	r3, r2
 8019e32:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019e36:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019e38:	7ffb      	ldrb	r3, [r7, #31]
 8019e3a:	f003 0307 	and.w	r3, r3, #7
 8019e3e:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019e40:	7fba      	ldrb	r2, [r7, #30]
 8019e42:	7f7b      	ldrb	r3, [r7, #29]
 8019e44:	3b01      	subs	r3, #1
 8019e46:	fa02 f303 	lsl.w	r3, r2, r3
 8019e4a:	461a      	mov	r2, r3
 8019e4c:	4b28      	ldr	r3, [pc, #160]	; (8019ef0 <SUBGRF_GetCFO+0xe8>)
 8019e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e52:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019e54:	69ba      	ldr	r2, [r7, #24]
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e5c:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019e5e:	2301      	movs	r3, #1
 8019e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e68:	697a      	ldr	r2, [r7, #20]
 8019e6a:	fb02 f303 	mul.w	r3, r2, r3
 8019e6e:	2b07      	cmp	r3, #7
 8019e70:	d802      	bhi.n	8019e78 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8019e72:	2302      	movs	r3, #2
 8019e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e7c:	697a      	ldr	r2, [r7, #20]
 8019e7e:	fb02 f303 	mul.w	r3, r2, r3
 8019e82:	2b03      	cmp	r3, #3
 8019e84:	d802      	bhi.n	8019e8c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8019e86:	2304      	movs	r3, #4
 8019e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019e8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019e90:	69bb      	ldr	r3, [r7, #24]
 8019e92:	fb02 f303 	mul.w	r3, r2, r3
 8019e96:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8019e98:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019e9c:	f7ff fd96 	bl	80199cc <SUBGRF_ReadRegister>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	021b      	lsls	r3, r3, #8
 8019ea4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019ea8:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8019eaa:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019eae:	f7ff fd8d 	bl	80199cc <SUBGRF_ReadRegister>
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	461a      	mov	r2, r3
 8019eb6:	6a3b      	ldr	r3, [r7, #32]
 8019eb8:	4313      	orrs	r3, r2
 8019eba:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019ebc:	6a3b      	ldr	r3, [r7, #32]
 8019ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d005      	beq.n	8019ed2 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8019ec6:	6a3b      	ldr	r3, [r7, #32]
 8019ec8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019ecc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019ed0:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019ed2:	693b      	ldr	r3, [r7, #16]
 8019ed4:	095b      	lsrs	r3, r3, #5
 8019ed6:	6a3a      	ldr	r2, [r7, #32]
 8019ed8:	fb02 f303 	mul.w	r3, r2, r3
 8019edc:	11da      	asrs	r2, r3, #7
 8019ede:	683b      	ldr	r3, [r7, #0]
 8019ee0:	601a      	str	r2, [r3, #0]
}
 8019ee2:	bf00      	nop
 8019ee4:	3728      	adds	r7, #40	; 0x28
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	bd80      	pop	{r7, pc}
 8019eea:	bf00      	nop
 8019eec:	0c0a0804 	.word	0x0c0a0804
 8019ef0:	01e84800 	.word	0x01e84800

08019ef4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019ef4:	b480      	push	{r7}
 8019ef6:	b087      	sub	sp, #28
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	4603      	mov	r3, r0
 8019efc:	60b9      	str	r1, [r7, #8]
 8019efe:	607a      	str	r2, [r7, #4]
 8019f00:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019f02:	2300      	movs	r3, #0
 8019f04:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019f06:	f04f 33ff 	mov.w	r3, #4294967295
 8019f0a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019f0c:	697b      	ldr	r3, [r7, #20]
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	371c      	adds	r7, #28
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bc80      	pop	{r7}
 8019f16:	4770      	bx	lr

08019f18 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b087      	sub	sp, #28
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	4603      	mov	r3, r0
 8019f20:	60b9      	str	r1, [r7, #8]
 8019f22:	607a      	str	r2, [r7, #4]
 8019f24:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019f26:	2300      	movs	r3, #0
 8019f28:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8019f2e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019f30:	697b      	ldr	r3, [r7, #20]
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	371c      	adds	r7, #28
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bc80      	pop	{r7}
 8019f3a:	4770      	bx	lr

08019f3c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	b085      	sub	sp, #20
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	60f8      	str	r0, [r7, #12]
 8019f44:	60b9      	str	r1, [r7, #8]
 8019f46:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019f48:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	3714      	adds	r7, #20
 8019f50:	46bd      	mov	sp, r7
 8019f52:	bc80      	pop	{r7}
 8019f54:	4770      	bx	lr

08019f56 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019f56:	b480      	push	{r7}
 8019f58:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019f5a:	bf00      	nop
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	bc80      	pop	{r7}
 8019f60:	4770      	bx	lr

08019f62 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019f62:	b480      	push	{r7}
 8019f64:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019f66:	2300      	movs	r3, #0
#endif
}
 8019f68:	4618      	mov	r0, r3
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bc80      	pop	{r7}
 8019f6e:	4770      	bx	lr

08019f70 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019f70:	b480      	push	{r7}
 8019f72:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019f74:	2300      	movs	r3, #0
#endif
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bc80      	pop	{r7}
 8019f7c:	4770      	bx	lr

08019f7e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019f7e:	b480      	push	{r7}
 8019f80:	b083      	sub	sp, #12
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	4603      	mov	r3, r0
 8019f86:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019f88:	bf00      	nop
 8019f8a:	370c      	adds	r7, #12
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	bc80      	pop	{r7}
 8019f90:	4770      	bx	lr

08019f92 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019f92:	b480      	push	{r7}
 8019f94:	b087      	sub	sp, #28
 8019f96:	af00      	add	r7, sp, #0
 8019f98:	60f8      	str	r0, [r7, #12]
 8019f9a:	460b      	mov	r3, r1
 8019f9c:	607a      	str	r2, [r7, #4]
 8019f9e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8019fa6:	697b      	ldr	r3, [r7, #20]
}
 8019fa8:	4618      	mov	r0, r3
 8019faa:	371c      	adds	r7, #28
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bc80      	pop	{r7}
 8019fb0:	4770      	bx	lr

08019fb2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019fb2:	b480      	push	{r7}
 8019fb4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019fb6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	bc80      	pop	{r7}
 8019fc0:	4770      	bx	lr

08019fc2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019fc2:	b480      	push	{r7}
 8019fc4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019fc6:	bf00      	nop
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bc80      	pop	{r7}
 8019fcc:	4770      	bx	lr

08019fce <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019fce:	b480      	push	{r7}
 8019fd0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019fd2:	bf00      	nop
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bc80      	pop	{r7}
 8019fd8:	4770      	bx	lr

08019fda <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019fda:	b480      	push	{r7}
 8019fdc:	b083      	sub	sp, #12
 8019fde:	af00      	add	r7, sp, #0
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019fe4:	bf00      	nop
 8019fe6:	370c      	adds	r7, #12
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bc80      	pop	{r7}
 8019fec:	4770      	bx	lr
	...

08019ff0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019ff0:	b480      	push	{r7}
 8019ff2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019ff4:	4b04      	ldr	r3, [pc, #16]	; (801a008 <UTIL_LPM_Init+0x18>)
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019ffa:	4b04      	ldr	r3, [pc, #16]	; (801a00c <UTIL_LPM_Init+0x1c>)
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a000:	bf00      	nop
 801a002:	46bd      	mov	sp, r7
 801a004:	bc80      	pop	{r7}
 801a006:	4770      	bx	lr
 801a008:	200011b8 	.word	0x200011b8
 801a00c:	200011bc 	.word	0x200011bc

0801a010 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a010:	b480      	push	{r7}
 801a012:	b087      	sub	sp, #28
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	460b      	mov	r3, r1
 801a01a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a01c:	f3ef 8310 	mrs	r3, PRIMASK
 801a020:	613b      	str	r3, [r7, #16]
  return(result);
 801a022:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a026:	b672      	cpsid	i
}
 801a028:	bf00      	nop
  
  switch( state )
 801a02a:	78fb      	ldrb	r3, [r7, #3]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d008      	beq.n	801a042 <UTIL_LPM_SetStopMode+0x32>
 801a030:	2b01      	cmp	r3, #1
 801a032:	d10e      	bne.n	801a052 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a034:	4b0d      	ldr	r3, [pc, #52]	; (801a06c <UTIL_LPM_SetStopMode+0x5c>)
 801a036:	681a      	ldr	r2, [r3, #0]
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	4313      	orrs	r3, r2
 801a03c:	4a0b      	ldr	r2, [pc, #44]	; (801a06c <UTIL_LPM_SetStopMode+0x5c>)
 801a03e:	6013      	str	r3, [r2, #0]
      break;
 801a040:	e008      	b.n	801a054 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	43da      	mvns	r2, r3
 801a046:	4b09      	ldr	r3, [pc, #36]	; (801a06c <UTIL_LPM_SetStopMode+0x5c>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	4013      	ands	r3, r2
 801a04c:	4a07      	ldr	r2, [pc, #28]	; (801a06c <UTIL_LPM_SetStopMode+0x5c>)
 801a04e:	6013      	str	r3, [r2, #0]
      break;
 801a050:	e000      	b.n	801a054 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a052:	bf00      	nop
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	f383 8810 	msr	PRIMASK, r3
}
 801a05e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a060:	bf00      	nop
 801a062:	371c      	adds	r7, #28
 801a064:	46bd      	mov	sp, r7
 801a066:	bc80      	pop	{r7}
 801a068:	4770      	bx	lr
 801a06a:	bf00      	nop
 801a06c:	200011b8 	.word	0x200011b8

0801a070 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a070:	b480      	push	{r7}
 801a072:	b087      	sub	sp, #28
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	460b      	mov	r3, r1
 801a07a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a07c:	f3ef 8310 	mrs	r3, PRIMASK
 801a080:	613b      	str	r3, [r7, #16]
  return(result);
 801a082:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a086:	b672      	cpsid	i
}
 801a088:	bf00      	nop
  
  switch(state)
 801a08a:	78fb      	ldrb	r3, [r7, #3]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d008      	beq.n	801a0a2 <UTIL_LPM_SetOffMode+0x32>
 801a090:	2b01      	cmp	r3, #1
 801a092:	d10e      	bne.n	801a0b2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a094:	4b0d      	ldr	r3, [pc, #52]	; (801a0cc <UTIL_LPM_SetOffMode+0x5c>)
 801a096:	681a      	ldr	r2, [r3, #0]
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	4313      	orrs	r3, r2
 801a09c:	4a0b      	ldr	r2, [pc, #44]	; (801a0cc <UTIL_LPM_SetOffMode+0x5c>)
 801a09e:	6013      	str	r3, [r2, #0]
      break;
 801a0a0:	e008      	b.n	801a0b4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	43da      	mvns	r2, r3
 801a0a6:	4b09      	ldr	r3, [pc, #36]	; (801a0cc <UTIL_LPM_SetOffMode+0x5c>)
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	4013      	ands	r3, r2
 801a0ac:	4a07      	ldr	r2, [pc, #28]	; (801a0cc <UTIL_LPM_SetOffMode+0x5c>)
 801a0ae:	6013      	str	r3, [r2, #0]
      break;
 801a0b0:	e000      	b.n	801a0b4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a0b2:	bf00      	nop
 801a0b4:	697b      	ldr	r3, [r7, #20]
 801a0b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	f383 8810 	msr	PRIMASK, r3
}
 801a0be:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a0c0:	bf00      	nop
 801a0c2:	371c      	adds	r7, #28
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bc80      	pop	{r7}
 801a0c8:	4770      	bx	lr
 801a0ca:	bf00      	nop
 801a0cc:	200011bc 	.word	0x200011bc

0801a0d0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b084      	sub	sp, #16
 801a0d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0d6:	f3ef 8310 	mrs	r3, PRIMASK
 801a0da:	60bb      	str	r3, [r7, #8]
  return(result);
 801a0dc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a0de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0e0:	b672      	cpsid	i
}
 801a0e2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0e4:	4b12      	ldr	r3, [pc, #72]	; (801a130 <UTIL_LPM_EnterLowPower+0x60>)
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d006      	beq.n	801a0fa <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a0ec:	4b11      	ldr	r3, [pc, #68]	; (801a134 <UTIL_LPM_EnterLowPower+0x64>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a0f2:	4b10      	ldr	r3, [pc, #64]	; (801a134 <UTIL_LPM_EnterLowPower+0x64>)
 801a0f4:	685b      	ldr	r3, [r3, #4]
 801a0f6:	4798      	blx	r3
 801a0f8:	e010      	b.n	801a11c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0fa:	4b0f      	ldr	r3, [pc, #60]	; (801a138 <UTIL_LPM_EnterLowPower+0x68>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d006      	beq.n	801a110 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a102:	4b0c      	ldr	r3, [pc, #48]	; (801a134 <UTIL_LPM_EnterLowPower+0x64>)
 801a104:	689b      	ldr	r3, [r3, #8]
 801a106:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a108:	4b0a      	ldr	r3, [pc, #40]	; (801a134 <UTIL_LPM_EnterLowPower+0x64>)
 801a10a:	68db      	ldr	r3, [r3, #12]
 801a10c:	4798      	blx	r3
 801a10e:	e005      	b.n	801a11c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a110:	4b08      	ldr	r3, [pc, #32]	; (801a134 <UTIL_LPM_EnterLowPower+0x64>)
 801a112:	691b      	ldr	r3, [r3, #16]
 801a114:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a116:	4b07      	ldr	r3, [pc, #28]	; (801a134 <UTIL_LPM_EnterLowPower+0x64>)
 801a118:	695b      	ldr	r3, [r3, #20]
 801a11a:	4798      	blx	r3
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	f383 8810 	msr	PRIMASK, r3
}
 801a126:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a128:	bf00      	nop
 801a12a:	3710      	adds	r7, #16
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}
 801a130:	200011b8 	.word	0x200011b8
 801a134:	0801bfb0 	.word	0x0801bfb0
 801a138:	200011bc 	.word	0x200011bc

0801a13c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a13c:	b480      	push	{r7}
 801a13e:	b087      	sub	sp, #28
 801a140:	af00      	add	r7, sp, #0
 801a142:	60f8      	str	r0, [r7, #12]
 801a144:	60b9      	str	r1, [r7, #8]
 801a146:	4613      	mov	r3, r2
 801a148:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a14e:	68bb      	ldr	r3, [r7, #8]
 801a150:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a152:	e007      	b.n	801a164 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a154:	693a      	ldr	r2, [r7, #16]
 801a156:	1c53      	adds	r3, r2, #1
 801a158:	613b      	str	r3, [r7, #16]
 801a15a:	697b      	ldr	r3, [r7, #20]
 801a15c:	1c59      	adds	r1, r3, #1
 801a15e:	6179      	str	r1, [r7, #20]
 801a160:	7812      	ldrb	r2, [r2, #0]
 801a162:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a164:	88fb      	ldrh	r3, [r7, #6]
 801a166:	1e5a      	subs	r2, r3, #1
 801a168:	80fa      	strh	r2, [r7, #6]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d1f2      	bne.n	801a154 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a16e:	bf00      	nop
 801a170:	bf00      	nop
 801a172:	371c      	adds	r7, #28
 801a174:	46bd      	mov	sp, r7
 801a176:	bc80      	pop	{r7}
 801a178:	4770      	bx	lr

0801a17a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a17a:	b480      	push	{r7}
 801a17c:	b085      	sub	sp, #20
 801a17e:	af00      	add	r7, sp, #0
 801a180:	6078      	str	r0, [r7, #4]
 801a182:	460b      	mov	r3, r1
 801a184:	70fb      	strb	r3, [r7, #3]
 801a186:	4613      	mov	r3, r2
 801a188:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a18e:	e004      	b.n	801a19a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	1c5a      	adds	r2, r3, #1
 801a194:	60fa      	str	r2, [r7, #12]
 801a196:	78fa      	ldrb	r2, [r7, #3]
 801a198:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a19a:	883b      	ldrh	r3, [r7, #0]
 801a19c:	1e5a      	subs	r2, r3, #1
 801a19e:	803a      	strh	r2, [r7, #0]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d1f5      	bne.n	801a190 <UTIL_MEM_set_8+0x16>
  }
}
 801a1a4:	bf00      	nop
 801a1a6:	bf00      	nop
 801a1a8:	3714      	adds	r7, #20
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bc80      	pop	{r7}
 801a1ae:	4770      	bx	lr

0801a1b0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a1b0:	b082      	sub	sp, #8
 801a1b2:	b480      	push	{r7}
 801a1b4:	b087      	sub	sp, #28
 801a1b6:	af00      	add	r7, sp, #0
 801a1b8:	60f8      	str	r0, [r7, #12]
 801a1ba:	1d38      	adds	r0, r7, #4
 801a1bc:	e880 0006 	stmia.w	r0, {r1, r2}
 801a1c0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	613b      	str	r3, [r7, #16]
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a1ca:	687a      	ldr	r2, [r7, #4]
 801a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ce:	4413      	add	r3, r2
 801a1d0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a1d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a1d6:	b29a      	uxth	r2, r3
 801a1d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801a1dc:	b29b      	uxth	r3, r3
 801a1de:	4413      	add	r3, r2
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	b21b      	sxth	r3, r3
 801a1e4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a1e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a1ee:	db0a      	blt.n	801a206 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a1f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801a200:	b29b      	uxth	r3, r3
 801a202:	b21b      	sxth	r3, r3
 801a204:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	461a      	mov	r2, r3
 801a20a:	f107 0310 	add.w	r3, r7, #16
 801a20e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a212:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a216:	68f8      	ldr	r0, [r7, #12]
 801a218:	371c      	adds	r7, #28
 801a21a:	46bd      	mov	sp, r7
 801a21c:	bc80      	pop	{r7}
 801a21e:	b002      	add	sp, #8
 801a220:	4770      	bx	lr

0801a222 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a222:	b082      	sub	sp, #8
 801a224:	b480      	push	{r7}
 801a226:	b087      	sub	sp, #28
 801a228:	af00      	add	r7, sp, #0
 801a22a:	60f8      	str	r0, [r7, #12]
 801a22c:	1d38      	adds	r0, r7, #4
 801a22e:	e880 0006 	stmia.w	r0, {r1, r2}
 801a232:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a234:	2300      	movs	r3, #0
 801a236:	613b      	str	r3, [r7, #16]
 801a238:	2300      	movs	r3, #0
 801a23a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a23c:	687a      	ldr	r2, [r7, #4]
 801a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a240:	1ad3      	subs	r3, r2, r3
 801a242:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a244:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a248:	b29a      	uxth	r2, r3
 801a24a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801a24e:	b29b      	uxth	r3, r3
 801a250:	1ad3      	subs	r3, r2, r3
 801a252:	b29b      	uxth	r3, r3
 801a254:	b21b      	sxth	r3, r3
 801a256:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	da0a      	bge.n	801a276 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a260:	693b      	ldr	r3, [r7, #16]
 801a262:	3b01      	subs	r3, #1
 801a264:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a266:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801a270:	b29b      	uxth	r3, r3
 801a272:	b21b      	sxth	r3, r3
 801a274:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	461a      	mov	r2, r3
 801a27a:	f107 0310 	add.w	r3, r7, #16
 801a27e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a282:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a286:	68f8      	ldr	r0, [r7, #12]
 801a288:	371c      	adds	r7, #28
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bc80      	pop	{r7}
 801a28e:	b002      	add	sp, #8
 801a290:	4770      	bx	lr
	...

0801a294 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b088      	sub	sp, #32
 801a298:	af02      	add	r7, sp, #8
 801a29a:	463b      	mov	r3, r7
 801a29c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	60bb      	str	r3, [r7, #8]
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a2a8:	4b10      	ldr	r3, [pc, #64]	; (801a2ec <SysTimeSet+0x58>)
 801a2aa:	691b      	ldr	r3, [r3, #16]
 801a2ac:	f107 0208 	add.w	r2, r7, #8
 801a2b0:	3204      	adds	r2, #4
 801a2b2:	4610      	mov	r0, r2
 801a2b4:	4798      	blx	r3
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a2ba:	f107 0010 	add.w	r0, r7, #16
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	9300      	str	r3, [sp, #0]
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	463a      	mov	r2, r7
 801a2c6:	ca06      	ldmia	r2, {r1, r2}
 801a2c8:	f7ff ffab 	bl	801a222 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a2cc:	4b07      	ldr	r3, [pc, #28]	; (801a2ec <SysTimeSet+0x58>)
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	693a      	ldr	r2, [r7, #16]
 801a2d2:	4610      	mov	r0, r2
 801a2d4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a2d6:	4b05      	ldr	r3, [pc, #20]	; (801a2ec <SysTimeSet+0x58>)
 801a2d8:	689b      	ldr	r3, [r3, #8]
 801a2da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a2de:	4610      	mov	r0, r2
 801a2e0:	4798      	blx	r3
}
 801a2e2:	bf00      	nop
 801a2e4:	3718      	adds	r7, #24
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}
 801a2ea:	bf00      	nop
 801a2ec:	0801c094 	.word	0x0801c094

0801a2f0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b08a      	sub	sp, #40	; 0x28
 801a2f4:	af02      	add	r7, sp, #8
 801a2f6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	61bb      	str	r3, [r7, #24]
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a300:	2300      	movs	r3, #0
 801a302:	613b      	str	r3, [r7, #16]
 801a304:	2300      	movs	r3, #0
 801a306:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a308:	4b14      	ldr	r3, [pc, #80]	; (801a35c <SysTimeGet+0x6c>)
 801a30a:	691b      	ldr	r3, [r3, #16]
 801a30c:	f107 0218 	add.w	r2, r7, #24
 801a310:	3204      	adds	r2, #4
 801a312:	4610      	mov	r0, r2
 801a314:	4798      	blx	r3
 801a316:	4603      	mov	r3, r0
 801a318:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a31a:	4b10      	ldr	r3, [pc, #64]	; (801a35c <SysTimeGet+0x6c>)
 801a31c:	68db      	ldr	r3, [r3, #12]
 801a31e:	4798      	blx	r3
 801a320:	4603      	mov	r3, r0
 801a322:	b21b      	sxth	r3, r3
 801a324:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a326:	4b0d      	ldr	r3, [pc, #52]	; (801a35c <SysTimeGet+0x6c>)
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	4798      	blx	r3
 801a32c:	4603      	mov	r3, r0
 801a32e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a330:	f107 0010 	add.w	r0, r7, #16
 801a334:	69fb      	ldr	r3, [r7, #28]
 801a336:	9300      	str	r3, [sp, #0]
 801a338:	69bb      	ldr	r3, [r7, #24]
 801a33a:	f107 0208 	add.w	r2, r7, #8
 801a33e:	ca06      	ldmia	r2, {r1, r2}
 801a340:	f7ff ff36 	bl	801a1b0 <SysTimeAdd>

  return sysTime;
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	461a      	mov	r2, r3
 801a348:	f107 0310 	add.w	r3, r7, #16
 801a34c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a350:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a354:	6878      	ldr	r0, [r7, #4]
 801a356:	3720      	adds	r7, #32
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}
 801a35c:	0801c094 	.word	0x0801c094

0801a360 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a368:	2300      	movs	r3, #0
 801a36a:	60bb      	str	r3, [r7, #8]
 801a36c:	2300      	movs	r3, #0
 801a36e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a370:	4b0a      	ldr	r3, [pc, #40]	; (801a39c <SysTimeGetMcuTime+0x3c>)
 801a372:	691b      	ldr	r3, [r3, #16]
 801a374:	f107 0208 	add.w	r2, r7, #8
 801a378:	3204      	adds	r2, #4
 801a37a:	4610      	mov	r0, r2
 801a37c:	4798      	blx	r3
 801a37e:	4603      	mov	r3, r0
 801a380:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	461a      	mov	r2, r3
 801a386:	f107 0308 	add.w	r3, r7, #8
 801a38a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a38e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a392:	6878      	ldr	r0, [r7, #4]
 801a394:	3710      	adds	r7, #16
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}
 801a39a:	bf00      	nop
 801a39c:	0801c094 	.word	0x0801c094

0801a3a0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b088      	sub	sp, #32
 801a3a4:	af02      	add	r7, sp, #8
 801a3a6:	463b      	mov	r3, r7
 801a3a8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a3ac:	4b0f      	ldr	r3, [pc, #60]	; (801a3ec <SysTimeToMs+0x4c>)
 801a3ae:	68db      	ldr	r3, [r3, #12]
 801a3b0:	4798      	blx	r3
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	b21b      	sxth	r3, r3
 801a3b6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a3b8:	4b0c      	ldr	r3, [pc, #48]	; (801a3ec <SysTimeToMs+0x4c>)
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	4798      	blx	r3
 801a3be:	4603      	mov	r3, r0
 801a3c0:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a3c2:	f107 0008 	add.w	r0, r7, #8
 801a3c6:	697b      	ldr	r3, [r7, #20]
 801a3c8:	9300      	str	r3, [sp, #0]
 801a3ca:	693b      	ldr	r3, [r7, #16]
 801a3cc:	463a      	mov	r2, r7
 801a3ce:	ca06      	ldmia	r2, {r1, r2}
 801a3d0:	f7ff ff27 	bl	801a222 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a3da:	fb02 f303 	mul.w	r3, r2, r3
 801a3de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a3e2:	4413      	add	r3, r2
}
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	3718      	adds	r7, #24
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}
 801a3ec:	0801c094 	.word	0x0801c094

0801a3f0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b08a      	sub	sp, #40	; 0x28
 801a3f4:	af02      	add	r7, sp, #8
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	4a19      	ldr	r2, [pc, #100]	; (801a464 <SysTimeFromMs+0x74>)
 801a3fe:	fba2 2303 	umull	r2, r3, r2, r3
 801a402:	099b      	lsrs	r3, r3, #6
 801a404:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a406:	69fb      	ldr	r3, [r7, #28]
 801a408:	617b      	str	r3, [r7, #20]
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	b29a      	uxth	r2, r3
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	b29b      	uxth	r3, r3
 801a412:	4619      	mov	r1, r3
 801a414:	0149      	lsls	r1, r1, #5
 801a416:	1ac9      	subs	r1, r1, r3
 801a418:	0089      	lsls	r1, r1, #2
 801a41a:	440b      	add	r3, r1
 801a41c:	00db      	lsls	r3, r3, #3
 801a41e:	b29b      	uxth	r3, r3
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	b29b      	uxth	r3, r3
 801a424:	b21b      	sxth	r3, r3
 801a426:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a428:	f107 030c 	add.w	r3, r7, #12
 801a42c:	2200      	movs	r2, #0
 801a42e:	601a      	str	r2, [r3, #0]
 801a430:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a432:	4b0d      	ldr	r3, [pc, #52]	; (801a468 <SysTimeFromMs+0x78>)
 801a434:	68db      	ldr	r3, [r3, #12]
 801a436:	4798      	blx	r3
 801a438:	4603      	mov	r3, r0
 801a43a:	b21b      	sxth	r3, r3
 801a43c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a43e:	4b0a      	ldr	r3, [pc, #40]	; (801a468 <SysTimeFromMs+0x78>)
 801a440:	685b      	ldr	r3, [r3, #4]
 801a442:	4798      	blx	r3
 801a444:	4603      	mov	r3, r0
 801a446:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a448:	6878      	ldr	r0, [r7, #4]
 801a44a:	693b      	ldr	r3, [r7, #16]
 801a44c:	9300      	str	r3, [sp, #0]
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	f107 0214 	add.w	r2, r7, #20
 801a454:	ca06      	ldmia	r2, {r1, r2}
 801a456:	f7ff feab 	bl	801a1b0 <SysTimeAdd>
}
 801a45a:	6878      	ldr	r0, [r7, #4]
 801a45c:	3720      	adds	r7, #32
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}
 801a462:	bf00      	nop
 801a464:	10624dd3 	.word	0x10624dd3
 801a468:	0801c094 	.word	0x0801c094

0801a46c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a46c:	b480      	push	{r7}
 801a46e:	b085      	sub	sp, #20
 801a470:	af00      	add	r7, sp, #0
 801a472:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a474:	2300      	movs	r3, #0
 801a476:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a478:	e00e      	b.n	801a498 <ee_skip_atoi+0x2c>
 801a47a:	68fa      	ldr	r2, [r7, #12]
 801a47c:	4613      	mov	r3, r2
 801a47e:	009b      	lsls	r3, r3, #2
 801a480:	4413      	add	r3, r2
 801a482:	005b      	lsls	r3, r3, #1
 801a484:	4618      	mov	r0, r3
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	1c59      	adds	r1, r3, #1
 801a48c:	687a      	ldr	r2, [r7, #4]
 801a48e:	6011      	str	r1, [r2, #0]
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	4403      	add	r3, r0
 801a494:	3b30      	subs	r3, #48	; 0x30
 801a496:	60fb      	str	r3, [r7, #12]
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	781b      	ldrb	r3, [r3, #0]
 801a49e:	2b2f      	cmp	r3, #47	; 0x2f
 801a4a0:	d904      	bls.n	801a4ac <ee_skip_atoi+0x40>
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	2b39      	cmp	r3, #57	; 0x39
 801a4aa:	d9e6      	bls.n	801a47a <ee_skip_atoi+0xe>
  return i;
 801a4ac:	68fb      	ldr	r3, [r7, #12]
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3714      	adds	r7, #20
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bc80      	pop	{r7}
 801a4b6:	4770      	bx	lr

0801a4b8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	b099      	sub	sp, #100	; 0x64
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	60f8      	str	r0, [r7, #12]
 801a4c0:	60b9      	str	r1, [r7, #8]
 801a4c2:	607a      	str	r2, [r7, #4]
 801a4c4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a4c6:	4b72      	ldr	r3, [pc, #456]	; (801a690 <ee_number+0x1d8>)
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a4cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d002      	beq.n	801a4dc <ee_number+0x24>
 801a4d6:	4b6f      	ldr	r3, [pc, #444]	; (801a694 <ee_number+0x1dc>)
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	2b01      	cmp	r3, #1
 801a4e0:	dd02      	ble.n	801a4e8 <ee_number+0x30>
 801a4e2:	683b      	ldr	r3, [r7, #0]
 801a4e4:	2b24      	cmp	r3, #36	; 0x24
 801a4e6:	dd01      	ble.n	801a4ec <ee_number+0x34>
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	e0cc      	b.n	801a686 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801a4ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a4ee:	f003 0301 	and.w	r3, r3, #1
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d001      	beq.n	801a4fa <ee_number+0x42>
 801a4f6:	2330      	movs	r3, #48	; 0x30
 801a4f8:	e000      	b.n	801a4fc <ee_number+0x44>
 801a4fa:	2320      	movs	r3, #32
 801a4fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801a500:	2300      	movs	r3, #0
 801a502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801a506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a508:	f003 0302 	and.w	r3, r3, #2
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d00b      	beq.n	801a528 <ee_number+0x70>
  {
    if (num < 0)
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	2b00      	cmp	r3, #0
 801a514:	da08      	bge.n	801a528 <ee_number+0x70>
    {
      sign = '-';
 801a516:	232d      	movs	r3, #45	; 0x2d
 801a518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	425b      	negs	r3, r3
 801a520:	607b      	str	r3, [r7, #4]
      size--;
 801a522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a524:	3b01      	subs	r3, #1
 801a526:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801a528:	2300      	movs	r3, #0
 801a52a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d120      	bne.n	801a574 <ee_number+0xbc>
    tmp[i++] = '0';
 801a532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a534:	1c5a      	adds	r2, r3, #1
 801a536:	657a      	str	r2, [r7, #84]	; 0x54
 801a538:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801a53c:	4413      	add	r3, r2
 801a53e:	2230      	movs	r2, #48	; 0x30
 801a540:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a544:	e019      	b.n	801a57a <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	683a      	ldr	r2, [r7, #0]
 801a54a:	fbb3 f1f2 	udiv	r1, r3, r2
 801a54e:	fb02 f201 	mul.w	r2, r2, r1
 801a552:	1a9b      	subs	r3, r3, r2
 801a554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a556:	441a      	add	r2, r3
 801a558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a55a:	1c59      	adds	r1, r3, #1
 801a55c:	6579      	str	r1, [r7, #84]	; 0x54
 801a55e:	7812      	ldrb	r2, [r2, #0]
 801a560:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801a564:	440b      	add	r3, r1
 801a566:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a56a:	687a      	ldr	r2, [r7, #4]
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a572:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d1e5      	bne.n	801a546 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 801a57a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a57e:	429a      	cmp	r2, r3
 801a580:	dd01      	ble.n	801a586 <ee_number+0xce>
 801a582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a584:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801a586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a58a:	1ad3      	subs	r3, r2, r3
 801a58c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a58e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a590:	f003 0301 	and.w	r3, r3, #1
 801a594:	2b00      	cmp	r3, #0
 801a596:	d112      	bne.n	801a5be <ee_number+0x106>
 801a598:	e00c      	b.n	801a5b4 <ee_number+0xfc>
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	1c5a      	adds	r2, r3, #1
 801a59e:	60fa      	str	r2, [r7, #12]
 801a5a0:	2220      	movs	r2, #32
 801a5a2:	701a      	strb	r2, [r3, #0]
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	3b01      	subs	r3, #1
 801a5a8:	60bb      	str	r3, [r7, #8]
 801a5aa:	68bb      	ldr	r3, [r7, #8]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d101      	bne.n	801a5b4 <ee_number+0xfc>
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	e068      	b.n	801a686 <ee_number+0x1ce>
 801a5b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a5b6:	1e5a      	subs	r2, r3, #1
 801a5b8:	66ba      	str	r2, [r7, #104]	; 0x68
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	dced      	bgt.n	801a59a <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 801a5be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d01b      	beq.n	801a5fe <ee_number+0x146>
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	1c5a      	adds	r2, r3, #1
 801a5ca:	60fa      	str	r2, [r7, #12]
 801a5cc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801a5d0:	701a      	strb	r2, [r3, #0]
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	3b01      	subs	r3, #1
 801a5d6:	60bb      	str	r3, [r7, #8]
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d10f      	bne.n	801a5fe <ee_number+0x146>
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	e051      	b.n	801a686 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	1c5a      	adds	r2, r3, #1
 801a5e6:	60fa      	str	r2, [r7, #12]
 801a5e8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801a5ec:	701a      	strb	r2, [r3, #0]
 801a5ee:	68bb      	ldr	r3, [r7, #8]
 801a5f0:	3b01      	subs	r3, #1
 801a5f2:	60bb      	str	r3, [r7, #8]
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d101      	bne.n	801a5fe <ee_number+0x146>
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	e043      	b.n	801a686 <ee_number+0x1ce>
 801a5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a600:	1e5a      	subs	r2, r3, #1
 801a602:	66ba      	str	r2, [r7, #104]	; 0x68
 801a604:	2b00      	cmp	r3, #0
 801a606:	dcec      	bgt.n	801a5e2 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a608:	e00c      	b.n	801a624 <ee_number+0x16c>
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	1c5a      	adds	r2, r3, #1
 801a60e:	60fa      	str	r2, [r7, #12]
 801a610:	2230      	movs	r2, #48	; 0x30
 801a612:	701a      	strb	r2, [r3, #0]
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	3b01      	subs	r3, #1
 801a618:	60bb      	str	r3, [r7, #8]
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d101      	bne.n	801a624 <ee_number+0x16c>
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	e030      	b.n	801a686 <ee_number+0x1ce>
 801a624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a626:	1e5a      	subs	r2, r3, #1
 801a628:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a62a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a62c:	429a      	cmp	r2, r3
 801a62e:	dbec      	blt.n	801a60a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a630:	e010      	b.n	801a654 <ee_number+0x19c>
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	1c5a      	adds	r2, r3, #1
 801a636:	60fa      	str	r2, [r7, #12]
 801a638:	f107 0110 	add.w	r1, r7, #16
 801a63c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a63e:	440a      	add	r2, r1
 801a640:	7812      	ldrb	r2, [r2, #0]
 801a642:	701a      	strb	r2, [r3, #0]
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	3b01      	subs	r3, #1
 801a648:	60bb      	str	r3, [r7, #8]
 801a64a:	68bb      	ldr	r3, [r7, #8]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d101      	bne.n	801a654 <ee_number+0x19c>
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	e018      	b.n	801a686 <ee_number+0x1ce>
 801a654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a656:	1e5a      	subs	r2, r3, #1
 801a658:	657a      	str	r2, [r7, #84]	; 0x54
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	dce9      	bgt.n	801a632 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801a65e:	e00c      	b.n	801a67a <ee_number+0x1c2>
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	1c5a      	adds	r2, r3, #1
 801a664:	60fa      	str	r2, [r7, #12]
 801a666:	2220      	movs	r2, #32
 801a668:	701a      	strb	r2, [r3, #0]
 801a66a:	68bb      	ldr	r3, [r7, #8]
 801a66c:	3b01      	subs	r3, #1
 801a66e:	60bb      	str	r3, [r7, #8]
 801a670:	68bb      	ldr	r3, [r7, #8]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d101      	bne.n	801a67a <ee_number+0x1c2>
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	e005      	b.n	801a686 <ee_number+0x1ce>
 801a67a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a67c:	1e5a      	subs	r2, r3, #1
 801a67e:	66ba      	str	r2, [r7, #104]	; 0x68
 801a680:	2b00      	cmp	r3, #0
 801a682:	dced      	bgt.n	801a660 <ee_number+0x1a8>

  return str;
 801a684:	68fb      	ldr	r3, [r7, #12]
}
 801a686:	4618      	mov	r0, r3
 801a688:	3764      	adds	r7, #100	; 0x64
 801a68a:	46bd      	mov	sp, r7
 801a68c:	bc80      	pop	{r7}
 801a68e:	4770      	bx	lr
 801a690:	20000124 	.word	0x20000124
 801a694:	20000128 	.word	0x20000128

0801a698 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b092      	sub	sp, #72	; 0x48
 801a69c:	af04      	add	r7, sp, #16
 801a69e:	60f8      	str	r0, [r7, #12]
 801a6a0:	60b9      	str	r1, [r7, #8]
 801a6a2:	607a      	str	r2, [r7, #4]
 801a6a4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	dc01      	bgt.n	801a6b0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	e142      	b.n	801a936 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a6b4:	e12a      	b.n	801a90c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	1ad2      	subs	r2, r2, r3
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	3b01      	subs	r3, #1
 801a6c0:	429a      	cmp	r2, r3
 801a6c2:	f280 8131 	bge.w	801a928 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	781b      	ldrb	r3, [r3, #0]
 801a6ca:	2b25      	cmp	r3, #37	; 0x25
 801a6cc:	d006      	beq.n	801a6dc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a6ce:	687a      	ldr	r2, [r7, #4]
 801a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d2:	1c59      	adds	r1, r3, #1
 801a6d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a6d6:	7812      	ldrb	r2, [r2, #0]
 801a6d8:	701a      	strb	r2, [r3, #0]
      continue;
 801a6da:	e114      	b.n	801a906 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801a6dc:	2300      	movs	r3, #0
 801a6de:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	3301      	adds	r3, #1
 801a6e4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	781b      	ldrb	r3, [r3, #0]
 801a6ea:	2b30      	cmp	r3, #48	; 0x30
 801a6ec:	d103      	bne.n	801a6f6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a6ee:	6a3b      	ldr	r3, [r7, #32]
 801a6f0:	f043 0301 	orr.w	r3, r3, #1
 801a6f4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 801a6fa:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	781b      	ldrb	r3, [r3, #0]
 801a700:	2b2f      	cmp	r3, #47	; 0x2f
 801a702:	d908      	bls.n	801a716 <tiny_vsnprintf_like+0x7e>
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	781b      	ldrb	r3, [r3, #0]
 801a708:	2b39      	cmp	r3, #57	; 0x39
 801a70a:	d804      	bhi.n	801a716 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a70c:	1d3b      	adds	r3, r7, #4
 801a70e:	4618      	mov	r0, r3
 801a710:	f7ff feac 	bl	801a46c <ee_skip_atoi>
 801a714:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801a716:	f04f 33ff 	mov.w	r3, #4294967295
 801a71a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801a71c:	f04f 33ff 	mov.w	r3, #4294967295
 801a720:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801a722:	230a      	movs	r3, #10
 801a724:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	3b58      	subs	r3, #88	; 0x58
 801a72c:	2b20      	cmp	r3, #32
 801a72e:	f200 8094 	bhi.w	801a85a <tiny_vsnprintf_like+0x1c2>
 801a732:	a201      	add	r2, pc, #4	; (adr r2, 801a738 <tiny_vsnprintf_like+0xa0>)
 801a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a738:	0801a843 	.word	0x0801a843
 801a73c:	0801a85b 	.word	0x0801a85b
 801a740:	0801a85b 	.word	0x0801a85b
 801a744:	0801a85b 	.word	0x0801a85b
 801a748:	0801a85b 	.word	0x0801a85b
 801a74c:	0801a85b 	.word	0x0801a85b
 801a750:	0801a85b 	.word	0x0801a85b
 801a754:	0801a85b 	.word	0x0801a85b
 801a758:	0801a85b 	.word	0x0801a85b
 801a75c:	0801a85b 	.word	0x0801a85b
 801a760:	0801a85b 	.word	0x0801a85b
 801a764:	0801a7c7 	.word	0x0801a7c7
 801a768:	0801a851 	.word	0x0801a851
 801a76c:	0801a85b 	.word	0x0801a85b
 801a770:	0801a85b 	.word	0x0801a85b
 801a774:	0801a85b 	.word	0x0801a85b
 801a778:	0801a85b 	.word	0x0801a85b
 801a77c:	0801a851 	.word	0x0801a851
 801a780:	0801a85b 	.word	0x0801a85b
 801a784:	0801a85b 	.word	0x0801a85b
 801a788:	0801a85b 	.word	0x0801a85b
 801a78c:	0801a85b 	.word	0x0801a85b
 801a790:	0801a85b 	.word	0x0801a85b
 801a794:	0801a85b 	.word	0x0801a85b
 801a798:	0801a85b 	.word	0x0801a85b
 801a79c:	0801a85b 	.word	0x0801a85b
 801a7a0:	0801a85b 	.word	0x0801a85b
 801a7a4:	0801a7e7 	.word	0x0801a7e7
 801a7a8:	0801a85b 	.word	0x0801a85b
 801a7ac:	0801a8a7 	.word	0x0801a8a7
 801a7b0:	0801a85b 	.word	0x0801a85b
 801a7b4:	0801a85b 	.word	0x0801a85b
 801a7b8:	0801a84b 	.word	0x0801a84b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7be:	1c5a      	adds	r2, r3, #1
 801a7c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a7c2:	2220      	movs	r2, #32
 801a7c4:	701a      	strb	r2, [r3, #0]
 801a7c6:	69fb      	ldr	r3, [r7, #28]
 801a7c8:	3b01      	subs	r3, #1
 801a7ca:	61fb      	str	r3, [r7, #28]
 801a7cc:	69fb      	ldr	r3, [r7, #28]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	dcf4      	bgt.n	801a7bc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a7d2:	683b      	ldr	r3, [r7, #0]
 801a7d4:	1d1a      	adds	r2, r3, #4
 801a7d6:	603a      	str	r2, [r7, #0]
 801a7d8:	6819      	ldr	r1, [r3, #0]
 801a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7dc:	1c5a      	adds	r2, r3, #1
 801a7de:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a7e0:	b2ca      	uxtb	r2, r1
 801a7e2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a7e4:	e08f      	b.n	801a906 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a7e6:	683b      	ldr	r3, [r7, #0]
 801a7e8:	1d1a      	adds	r2, r3, #4
 801a7ea:	603a      	str	r2, [r7, #0]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d101      	bne.n	801a7fa <tiny_vsnprintf_like+0x162>
 801a7f6:	4b52      	ldr	r3, [pc, #328]	; (801a940 <tiny_vsnprintf_like+0x2a8>)
 801a7f8:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a7fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a7fc:	f7e5 fcbc 	bl	8000178 <strlen>
 801a800:	4603      	mov	r3, r0
 801a802:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a804:	e004      	b.n	801a810 <tiny_vsnprintf_like+0x178>
 801a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a808:	1c5a      	adds	r2, r3, #1
 801a80a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a80c:	2220      	movs	r2, #32
 801a80e:	701a      	strb	r2, [r3, #0]
 801a810:	69fb      	ldr	r3, [r7, #28]
 801a812:	1e5a      	subs	r2, r3, #1
 801a814:	61fa      	str	r2, [r7, #28]
 801a816:	693a      	ldr	r2, [r7, #16]
 801a818:	429a      	cmp	r2, r3
 801a81a:	dbf4      	blt.n	801a806 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a81c:	2300      	movs	r3, #0
 801a81e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a820:	e00a      	b.n	801a838 <tiny_vsnprintf_like+0x1a0>
 801a822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a824:	1c53      	adds	r3, r2, #1
 801a826:	627b      	str	r3, [r7, #36]	; 0x24
 801a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a82a:	1c59      	adds	r1, r3, #1
 801a82c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a82e:	7812      	ldrb	r2, [r2, #0]
 801a830:	701a      	strb	r2, [r3, #0]
 801a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a834:	3301      	adds	r3, #1
 801a836:	62bb      	str	r3, [r7, #40]	; 0x28
 801a838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a83a:	693b      	ldr	r3, [r7, #16]
 801a83c:	429a      	cmp	r2, r3
 801a83e:	dbf0      	blt.n	801a822 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a840:	e061      	b.n	801a906 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801a842:	6a3b      	ldr	r3, [r7, #32]
 801a844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a848:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a84a:	2310      	movs	r3, #16
 801a84c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a84e:	e02d      	b.n	801a8ac <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a850:	6a3b      	ldr	r3, [r7, #32]
 801a852:	f043 0302 	orr.w	r3, r3, #2
 801a856:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a858:	e025      	b.n	801a8a6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	781b      	ldrb	r3, [r3, #0]
 801a85e:	2b25      	cmp	r3, #37	; 0x25
 801a860:	d004      	beq.n	801a86c <tiny_vsnprintf_like+0x1d4>
 801a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a864:	1c5a      	adds	r2, r3, #1
 801a866:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a868:	2225      	movs	r2, #37	; 0x25
 801a86a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	1ad2      	subs	r2, r2, r3
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	3b01      	subs	r3, #1
 801a876:	429a      	cmp	r2, r3
 801a878:	da17      	bge.n	801a8aa <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	781b      	ldrb	r3, [r3, #0]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d006      	beq.n	801a890 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a882:	687a      	ldr	r2, [r7, #4]
 801a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a886:	1c59      	adds	r1, r3, #1
 801a888:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a88a:	7812      	ldrb	r2, [r2, #0]
 801a88c:	701a      	strb	r2, [r3, #0]
 801a88e:	e002      	b.n	801a896 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	3b01      	subs	r3, #1
 801a894:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	1ad2      	subs	r2, r2, r3
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	db2f      	blt.n	801a904 <tiny_vsnprintf_like+0x26c>
 801a8a4:	e002      	b.n	801a8ac <tiny_vsnprintf_like+0x214>
        break;
 801a8a6:	bf00      	nop
 801a8a8:	e000      	b.n	801a8ac <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a8aa:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a8ac:	697b      	ldr	r3, [r7, #20]
 801a8ae:	2b6c      	cmp	r3, #108	; 0x6c
 801a8b0:	d105      	bne.n	801a8be <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	1d1a      	adds	r2, r3, #4
 801a8b6:	603a      	str	r2, [r7, #0]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	637b      	str	r3, [r7, #52]	; 0x34
 801a8bc:	e00f      	b.n	801a8de <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a8be:	6a3b      	ldr	r3, [r7, #32]
 801a8c0:	f003 0302 	and.w	r3, r3, #2
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d005      	beq.n	801a8d4 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	1d1a      	adds	r2, r3, #4
 801a8cc:	603a      	str	r2, [r7, #0]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	637b      	str	r3, [r7, #52]	; 0x34
 801a8d2:	e004      	b.n	801a8de <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a8d4:	683b      	ldr	r3, [r7, #0]
 801a8d6:	1d1a      	adds	r2, r3, #4
 801a8d8:	603a      	str	r2, [r7, #0]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	1e5a      	subs	r2, r3, #1
 801a8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	1acb      	subs	r3, r1, r3
 801a8e8:	1ad1      	subs	r1, r2, r3
 801a8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8ec:	6a3b      	ldr	r3, [r7, #32]
 801a8ee:	9302      	str	r3, [sp, #8]
 801a8f0:	69bb      	ldr	r3, [r7, #24]
 801a8f2:	9301      	str	r3, [sp, #4]
 801a8f4:	69fb      	ldr	r3, [r7, #28]
 801a8f6:	9300      	str	r3, [sp, #0]
 801a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8fc:	f7ff fddc 	bl	801a4b8 <ee_number>
 801a900:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a902:	e000      	b.n	801a906 <tiny_vsnprintf_like+0x26e>
        continue;
 801a904:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	3301      	adds	r3, #1
 801a90a:	607b      	str	r3, [r7, #4]
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	781b      	ldrb	r3, [r3, #0]
 801a910:	2b00      	cmp	r3, #0
 801a912:	f47f aed0 	bne.w	801a6b6 <tiny_vsnprintf_like+0x1e>
 801a916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	1ad2      	subs	r2, r2, r3
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	3b01      	subs	r3, #1
 801a920:	429a      	cmp	r2, r3
 801a922:	f6bf aec8 	bge.w	801a6b6 <tiny_vsnprintf_like+0x1e>
 801a926:	e000      	b.n	801a92a <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a928:	bf00      	nop
  }

  *str = '\0';
 801a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a92c:	2200      	movs	r2, #0
 801a92e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	1ad3      	subs	r3, r2, r3
}
 801a936:	4618      	mov	r0, r3
 801a938:	3738      	adds	r7, #56	; 0x38
 801a93a:	46bd      	mov	sp, r7
 801a93c:	bd80      	pop	{r7, pc}
 801a93e:	bf00      	nop
 801a940:	0801bfa8 	.word	0x0801bfa8

0801a944 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a944:	b580      	push	{r7, lr}
 801a946:	b08c      	sub	sp, #48	; 0x30
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a94c:	4b67      	ldr	r3, [pc, #412]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a952:	4b66      	ldr	r3, [pc, #408]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801a954:	681a      	ldr	r2, [r3, #0]
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	4013      	ands	r3, r2
 801a95a:	4a64      	ldr	r2, [pc, #400]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801a95c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a95e:	e083      	b.n	801aa68 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801a960:	2300      	movs	r3, #0
 801a962:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a964:	e002      	b.n	801a96c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a968:	3301      	adds	r3, #1
 801a96a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a96c:	4a60      	ldr	r2, [pc, #384]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a970:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a974:	4b5f      	ldr	r3, [pc, #380]	; (801aaf4 <UTIL_SEQ_Run+0x1b0>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	401a      	ands	r2, r3
 801a97a:	4b5c      	ldr	r3, [pc, #368]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	4013      	ands	r3, r2
 801a980:	2b00      	cmp	r3, #0
 801a982:	d0f0      	beq.n	801a966 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801a984:	4a5a      	ldr	r2, [pc, #360]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a988:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a98c:	4b59      	ldr	r3, [pc, #356]	; (801aaf4 <UTIL_SEQ_Run+0x1b0>)
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	401a      	ands	r2, r3
 801a992:	4b56      	ldr	r3, [pc, #344]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	4013      	ands	r3, r2
 801a998:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a99a:	4a55      	ldr	r2, [pc, #340]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a99e:	00db      	lsls	r3, r3, #3
 801a9a0:	4413      	add	r3, r2
 801a9a2:	685a      	ldr	r2, [r3, #4]
 801a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9a6:	4013      	ands	r3, r2
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d106      	bne.n	801a9ba <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a9ac:	4a50      	ldr	r2, [pc, #320]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9b0:	00db      	lsls	r3, r3, #3
 801a9b2:	4413      	add	r3, r2
 801a9b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a9b8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a9ba:	4a4d      	ldr	r2, [pc, #308]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9be:	00db      	lsls	r3, r3, #3
 801a9c0:	4413      	add	r3, r2
 801a9c2:	685a      	ldr	r2, [r3, #4]
 801a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c6:	4013      	ands	r3, r2
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f000 f8f9 	bl	801abc0 <SEQ_BitPosition>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	461a      	mov	r2, r3
 801a9d2:	4b49      	ldr	r3, [pc, #292]	; (801aaf8 <UTIL_SEQ_Run+0x1b4>)
 801a9d4:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a9d6:	4a46      	ldr	r2, [pc, #280]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9da:	00db      	lsls	r3, r3, #3
 801a9dc:	4413      	add	r3, r2
 801a9de:	685a      	ldr	r2, [r3, #4]
 801a9e0:	4b45      	ldr	r3, [pc, #276]	; (801aaf8 <UTIL_SEQ_Run+0x1b4>)
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	2101      	movs	r1, #1
 801a9e6:	fa01 f303 	lsl.w	r3, r1, r3
 801a9ea:	43db      	mvns	r3, r3
 801a9ec:	401a      	ands	r2, r3
 801a9ee:	4940      	ldr	r1, [pc, #256]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f2:	00db      	lsls	r3, r3, #3
 801a9f4:	440b      	add	r3, r1
 801a9f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9f8:	f3ef 8310 	mrs	r3, PRIMASK
 801a9fc:	61bb      	str	r3, [r7, #24]
  return(result);
 801a9fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801aa00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa02:	b672      	cpsid	i
}
 801aa04:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801aa06:	4b3c      	ldr	r3, [pc, #240]	; (801aaf8 <UTIL_SEQ_Run+0x1b4>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	2201      	movs	r2, #1
 801aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa10:	43da      	mvns	r2, r3
 801aa12:	4b3a      	ldr	r3, [pc, #232]	; (801aafc <UTIL_SEQ_Run+0x1b8>)
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	4013      	ands	r3, r2
 801aa18:	4a38      	ldr	r2, [pc, #224]	; (801aafc <UTIL_SEQ_Run+0x1b8>)
 801aa1a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aa1c:	2302      	movs	r3, #2
 801aa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa20:	e013      	b.n	801aa4a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa24:	3b01      	subs	r3, #1
 801aa26:	4a32      	ldr	r2, [pc, #200]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801aa28:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801aa2c:	4b32      	ldr	r3, [pc, #200]	; (801aaf8 <UTIL_SEQ_Run+0x1b4>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	2201      	movs	r2, #1
 801aa32:	fa02 f303 	lsl.w	r3, r2, r3
 801aa36:	43da      	mvns	r2, r3
 801aa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa3a:	3b01      	subs	r3, #1
 801aa3c:	400a      	ands	r2, r1
 801aa3e:	492c      	ldr	r1, [pc, #176]	; (801aaf0 <UTIL_SEQ_Run+0x1ac>)
 801aa40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa46:	3b01      	subs	r3, #1
 801aa48:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d1e8      	bne.n	801aa22 <UTIL_SEQ_Run+0xde>
 801aa50:	6a3b      	ldr	r3, [r7, #32]
 801aa52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	f383 8810 	msr	PRIMASK, r3
}
 801aa5a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801aa5c:	4b26      	ldr	r3, [pc, #152]	; (801aaf8 <UTIL_SEQ_Run+0x1b4>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	4a27      	ldr	r2, [pc, #156]	; (801ab00 <UTIL_SEQ_Run+0x1bc>)
 801aa62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa66:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801aa68:	4b24      	ldr	r3, [pc, #144]	; (801aafc <UTIL_SEQ_Run+0x1b8>)
 801aa6a:	681a      	ldr	r2, [r3, #0]
 801aa6c:	4b21      	ldr	r3, [pc, #132]	; (801aaf4 <UTIL_SEQ_Run+0x1b0>)
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	401a      	ands	r2, r3
 801aa72:	4b1e      	ldr	r3, [pc, #120]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	4013      	ands	r3, r2
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d007      	beq.n	801aa8c <UTIL_SEQ_Run+0x148>
 801aa7c:	4b21      	ldr	r3, [pc, #132]	; (801ab04 <UTIL_SEQ_Run+0x1c0>)
 801aa7e:	681a      	ldr	r2, [r3, #0]
 801aa80:	4b21      	ldr	r3, [pc, #132]	; (801ab08 <UTIL_SEQ_Run+0x1c4>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	4013      	ands	r3, r2
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	f43f af6a 	beq.w	801a960 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801aa8c:	4b1a      	ldr	r3, [pc, #104]	; (801aaf8 <UTIL_SEQ_Run+0x1b4>)
 801aa8e:	f04f 32ff 	mov.w	r2, #4294967295
 801aa92:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801aa94:	f000 f888 	bl	801aba8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa98:	f3ef 8310 	mrs	r3, PRIMASK
 801aa9c:	613b      	str	r3, [r7, #16]
  return(result);
 801aa9e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801aaa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aaa2:	b672      	cpsid	i
}
 801aaa4:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801aaa6:	4b15      	ldr	r3, [pc, #84]	; (801aafc <UTIL_SEQ_Run+0x1b8>)
 801aaa8:	681a      	ldr	r2, [r3, #0]
 801aaaa:	4b12      	ldr	r3, [pc, #72]	; (801aaf4 <UTIL_SEQ_Run+0x1b0>)
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	401a      	ands	r2, r3
 801aab0:	4b0e      	ldr	r3, [pc, #56]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	4013      	ands	r3, r2
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d108      	bne.n	801aacc <UTIL_SEQ_Run+0x188>
 801aaba:	4b12      	ldr	r3, [pc, #72]	; (801ab04 <UTIL_SEQ_Run+0x1c0>)
 801aabc:	681a      	ldr	r2, [r3, #0]
 801aabe:	4b12      	ldr	r3, [pc, #72]	; (801ab08 <UTIL_SEQ_Run+0x1c4>)
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	4013      	ands	r3, r2
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d101      	bne.n	801aacc <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801aac8:	f7e6 fdfe 	bl	80016c8 <UTIL_SEQ_Idle>
 801aacc:	69fb      	ldr	r3, [r7, #28]
 801aace:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	f383 8810 	msr	PRIMASK, r3
}
 801aad6:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801aad8:	f000 f86c 	bl	801abb4 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801aadc:	4a03      	ldr	r2, [pc, #12]	; (801aaec <UTIL_SEQ_Run+0x1a8>)
 801aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aae0:	6013      	str	r3, [r2, #0]

  return;
 801aae2:	bf00      	nop
}
 801aae4:	3730      	adds	r7, #48	; 0x30
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}
 801aaea:	bf00      	nop
 801aaec:	20000130 	.word	0x20000130
 801aaf0:	20001250 	.word	0x20001250
 801aaf4:	2000012c 	.word	0x2000012c
 801aaf8:	200011cc 	.word	0x200011cc
 801aafc:	200011c0 	.word	0x200011c0
 801ab00:	200011d0 	.word	0x200011d0
 801ab04:	200011c4 	.word	0x200011c4
 801ab08:	200011c8 	.word	0x200011c8

0801ab0c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b088      	sub	sp, #32
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	60f8      	str	r0, [r7, #12]
 801ab14:	60b9      	str	r1, [r7, #8]
 801ab16:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab18:	f3ef 8310 	mrs	r3, PRIMASK
 801ab1c:	617b      	str	r3, [r7, #20]
  return(result);
 801ab1e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801ab20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab22:	b672      	cpsid	i
}
 801ab24:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ab26:	68f8      	ldr	r0, [r7, #12]
 801ab28:	f000 f84a 	bl	801abc0 <SEQ_BitPosition>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	4619      	mov	r1, r3
 801ab30:	4a06      	ldr	r2, [pc, #24]	; (801ab4c <UTIL_SEQ_RegTask+0x40>)
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ab38:	69fb      	ldr	r3, [r7, #28]
 801ab3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab3c:	69bb      	ldr	r3, [r7, #24]
 801ab3e:	f383 8810 	msr	PRIMASK, r3
}
 801ab42:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801ab44:	bf00      	nop
}
 801ab46:	3720      	adds	r7, #32
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}
 801ab4c:	200011d0 	.word	0x200011d0

0801ab50 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ab50:	b480      	push	{r7}
 801ab52:	b087      	sub	sp, #28
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
 801ab58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab5a:	f3ef 8310 	mrs	r3, PRIMASK
 801ab5e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab60:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ab62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab64:	b672      	cpsid	i
}
 801ab66:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ab68:	4b0d      	ldr	r3, [pc, #52]	; (801aba0 <UTIL_SEQ_SetTask+0x50>)
 801ab6a:	681a      	ldr	r2, [r3, #0]
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	4313      	orrs	r3, r2
 801ab70:	4a0b      	ldr	r2, [pc, #44]	; (801aba0 <UTIL_SEQ_SetTask+0x50>)
 801ab72:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ab74:	4a0b      	ldr	r2, [pc, #44]	; (801aba4 <UTIL_SEQ_SetTask+0x54>)
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	431a      	orrs	r2, r3
 801ab80:	4908      	ldr	r1, [pc, #32]	; (801aba4 <UTIL_SEQ_SetTask+0x54>)
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab8c:	693b      	ldr	r3, [r7, #16]
 801ab8e:	f383 8810 	msr	PRIMASK, r3
}
 801ab92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ab94:	bf00      	nop
}
 801ab96:	371c      	adds	r7, #28
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bc80      	pop	{r7}
 801ab9c:	4770      	bx	lr
 801ab9e:	bf00      	nop
 801aba0:	200011c0 	.word	0x200011c0
 801aba4:	20001250 	.word	0x20001250

0801aba8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801aba8:	b480      	push	{r7}
 801abaa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801abac:	bf00      	nop
}
 801abae:	46bd      	mov	sp, r7
 801abb0:	bc80      	pop	{r7}
 801abb2:	4770      	bx	lr

0801abb4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801abb4:	b480      	push	{r7}
 801abb6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801abb8:	bf00      	nop
}
 801abba:	46bd      	mov	sp, r7
 801abbc:	bc80      	pop	{r7}
 801abbe:	4770      	bx	lr

0801abc0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b085      	sub	sp, #20
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801abc8:	2300      	movs	r3, #0
 801abca:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	0c1b      	lsrs	r3, r3, #16
 801abd0:	041b      	lsls	r3, r3, #16
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d104      	bne.n	801abe0 <SEQ_BitPosition+0x20>
 801abd6:	2310      	movs	r3, #16
 801abd8:	73fb      	strb	r3, [r7, #15]
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	041b      	lsls	r3, r3, #16
 801abde:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d105      	bne.n	801abf6 <SEQ_BitPosition+0x36>
 801abea:	7bfb      	ldrb	r3, [r7, #15]
 801abec:	3308      	adds	r3, #8
 801abee:	73fb      	strb	r3, [r7, #15]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	021b      	lsls	r3, r3, #8
 801abf4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d105      	bne.n	801ac0c <SEQ_BitPosition+0x4c>
 801ac00:	7bfb      	ldrb	r3, [r7, #15]
 801ac02:	3304      	adds	r3, #4
 801ac04:	73fb      	strb	r3, [r7, #15]
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	011b      	lsls	r3, r3, #4
 801ac0a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	0f1b      	lsrs	r3, r3, #28
 801ac10:	4a06      	ldr	r2, [pc, #24]	; (801ac2c <SEQ_BitPosition+0x6c>)
 801ac12:	5cd2      	ldrb	r2, [r2, r3]
 801ac14:	7bfb      	ldrb	r3, [r7, #15]
 801ac16:	4413      	add	r3, r2
 801ac18:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ac1a:	7bfb      	ldrb	r3, [r7, #15]
 801ac1c:	f1c3 031f 	rsb	r3, r3, #31
 801ac20:	b2db      	uxtb	r3, r3
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3714      	adds	r7, #20
 801ac26:	46bd      	mov	sp, r7
 801ac28:	bc80      	pop	{r7}
 801ac2a:	4770      	bx	lr
 801ac2c:	0801c604 	.word	0x0801c604

0801ac30 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ac34:	4b04      	ldr	r3, [pc, #16]	; (801ac48 <UTIL_TIMER_Init+0x18>)
 801ac36:	2200      	movs	r2, #0
 801ac38:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ac3a:	4b04      	ldr	r3, [pc, #16]	; (801ac4c <UTIL_TIMER_Init+0x1c>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	4798      	blx	r3
 801ac40:	4603      	mov	r3, r0
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	bd80      	pop	{r7, pc}
 801ac46:	bf00      	nop
 801ac48:	20001260 	.word	0x20001260
 801ac4c:	0801c068 	.word	0x0801c068

0801ac50 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b084      	sub	sp, #16
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	60f8      	str	r0, [r7, #12]
 801ac58:	60b9      	str	r1, [r7, #8]
 801ac5a:	603b      	str	r3, [r7, #0]
 801ac5c:	4613      	mov	r3, r2
 801ac5e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d023      	beq.n	801acae <UTIL_TIMER_Create+0x5e>
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d020      	beq.n	801acae <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801ac72:	4b11      	ldr	r3, [pc, #68]	; (801acb8 <UTIL_TIMER_Create+0x68>)
 801ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac76:	68b8      	ldr	r0, [r7, #8]
 801ac78:	4798      	blx	r3
 801ac7a:	4602      	mov	r2, r0
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	2200      	movs	r2, #0
 801ac84:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	2200      	movs	r2, #0
 801ac8a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	683a      	ldr	r2, [r7, #0]
 801ac96:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	69ba      	ldr	r2, [r7, #24]
 801ac9c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	79fa      	ldrb	r2, [r7, #7]
 801aca2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	2200      	movs	r2, #0
 801aca8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801acaa:	2300      	movs	r3, #0
 801acac:	e000      	b.n	801acb0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801acae:	2301      	movs	r3, #1
  }
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3710      	adds	r7, #16
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	0801c068 	.word	0x0801c068

0801acbc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b08a      	sub	sp, #40	; 0x28
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801acc4:	2300      	movs	r3, #0
 801acc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d056      	beq.n	801ad7e <UTIL_TIMER_Start+0xc2>
 801acd0:	6878      	ldr	r0, [r7, #4]
 801acd2:	f000 f9a9 	bl	801b028 <TimerExists>
 801acd6:	4603      	mov	r3, r0
 801acd8:	f083 0301 	eor.w	r3, r3, #1
 801acdc:	b2db      	uxtb	r3, r3
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d04d      	beq.n	801ad7e <UTIL_TIMER_Start+0xc2>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	7a5b      	ldrb	r3, [r3, #9]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d149      	bne.n	801ad7e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acea:	f3ef 8310 	mrs	r3, PRIMASK
 801acee:	613b      	str	r3, [r7, #16]
  return(result);
 801acf0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801acf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801acf4:	b672      	cpsid	i
}
 801acf6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	685b      	ldr	r3, [r3, #4]
 801acfc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801acfe:	4b24      	ldr	r3, [pc, #144]	; (801ad90 <UTIL_TIMER_Start+0xd4>)
 801ad00:	6a1b      	ldr	r3, [r3, #32]
 801ad02:	4798      	blx	r3
 801ad04:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ad06:	6a3a      	ldr	r2, [r7, #32]
 801ad08:	69bb      	ldr	r3, [r7, #24]
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	d201      	bcs.n	801ad12 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ad0e:	69bb      	ldr	r3, [r7, #24]
 801ad10:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	6a3a      	ldr	r2, [r7, #32]
 801ad16:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2201      	movs	r2, #1
 801ad22:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2200      	movs	r2, #0
 801ad28:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ad2a:	4b1a      	ldr	r3, [pc, #104]	; (801ad94 <UTIL_TIMER_Start+0xd8>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d106      	bne.n	801ad40 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ad32:	4b17      	ldr	r3, [pc, #92]	; (801ad90 <UTIL_TIMER_Start+0xd4>)
 801ad34:	691b      	ldr	r3, [r3, #16]
 801ad36:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ad38:	6878      	ldr	r0, [r7, #4]
 801ad3a:	f000 f9eb 	bl	801b114 <TimerInsertNewHeadTimer>
 801ad3e:	e017      	b.n	801ad70 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ad40:	4b13      	ldr	r3, [pc, #76]	; (801ad90 <UTIL_TIMER_Start+0xd4>)
 801ad42:	699b      	ldr	r3, [r3, #24]
 801ad44:	4798      	blx	r3
 801ad46:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681a      	ldr	r2, [r3, #0]
 801ad4c:	697b      	ldr	r3, [r7, #20]
 801ad4e:	441a      	add	r2, r3
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	681a      	ldr	r2, [r3, #0]
 801ad58:	4b0e      	ldr	r3, [pc, #56]	; (801ad94 <UTIL_TIMER_Start+0xd8>)
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d203      	bcs.n	801ad6a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ad62:	6878      	ldr	r0, [r7, #4]
 801ad64:	f000 f9d6 	bl	801b114 <TimerInsertNewHeadTimer>
 801ad68:	e002      	b.n	801ad70 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ad6a:	6878      	ldr	r0, [r7, #4]
 801ad6c:	f000 f9a2 	bl	801b0b4 <TimerInsertTimer>
 801ad70:	69fb      	ldr	r3, [r7, #28]
 801ad72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	f383 8810 	msr	PRIMASK, r3
}
 801ad7a:	bf00      	nop
  {
 801ad7c:	e002      	b.n	801ad84 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ad7e:	2301      	movs	r3, #1
 801ad80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801ad84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3728      	adds	r7, #40	; 0x28
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}
 801ad90:	0801c068 	.word	0x0801c068
 801ad94:	20001260 	.word	0x20001260

0801ad98 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b088      	sub	sp, #32
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ada0:	2300      	movs	r3, #0
 801ada2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d05b      	beq.n	801ae62 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adaa:	f3ef 8310 	mrs	r3, PRIMASK
 801adae:	60fb      	str	r3, [r7, #12]
  return(result);
 801adb0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801adb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801adb4:	b672      	cpsid	i
}
 801adb6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801adb8:	4b2d      	ldr	r3, [pc, #180]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801adbe:	4b2c      	ldr	r3, [pc, #176]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	2201      	movs	r2, #1
 801adc8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801adca:	4b29      	ldr	r3, [pc, #164]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d041      	beq.n	801ae56 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2200      	movs	r2, #0
 801add6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801add8:	4b25      	ldr	r3, [pc, #148]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	687a      	ldr	r2, [r7, #4]
 801adde:	429a      	cmp	r2, r3
 801ade0:	d134      	bne.n	801ae4c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ade2:	4b23      	ldr	r3, [pc, #140]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	2200      	movs	r2, #0
 801ade8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801adea:	4b21      	ldr	r3, [pc, #132]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	695b      	ldr	r3, [r3, #20]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d00a      	beq.n	801ae0a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801adf4:	4b1e      	ldr	r3, [pc, #120]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	695b      	ldr	r3, [r3, #20]
 801adfa:	4a1d      	ldr	r2, [pc, #116]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801adfc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801adfe:	4b1c      	ldr	r3, [pc, #112]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4618      	mov	r0, r3
 801ae04:	f000 f92c 	bl	801b060 <TimerSetTimeout>
 801ae08:	e023      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ae0a:	4b1a      	ldr	r3, [pc, #104]	; (801ae74 <UTIL_TIMER_Stop+0xdc>)
 801ae0c:	68db      	ldr	r3, [r3, #12]
 801ae0e:	4798      	blx	r3
            TimerListHead = NULL;
 801ae10:	4b17      	ldr	r3, [pc, #92]	; (801ae70 <UTIL_TIMER_Stop+0xd8>)
 801ae12:	2200      	movs	r2, #0
 801ae14:	601a      	str	r2, [r3, #0]
 801ae16:	e01c      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ae18:	697a      	ldr	r2, [r7, #20]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d110      	bne.n	801ae42 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ae20:	697b      	ldr	r3, [r7, #20]
 801ae22:	695b      	ldr	r3, [r3, #20]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d006      	beq.n	801ae36 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ae28:	697b      	ldr	r3, [r7, #20]
 801ae2a:	695b      	ldr	r3, [r3, #20]
 801ae2c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ae2e:	69bb      	ldr	r3, [r7, #24]
 801ae30:	697a      	ldr	r2, [r7, #20]
 801ae32:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ae34:	e00d      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ae36:	2300      	movs	r3, #0
 801ae38:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ae3a:	69bb      	ldr	r3, [r7, #24]
 801ae3c:	697a      	ldr	r2, [r7, #20]
 801ae3e:	615a      	str	r2, [r3, #20]
            break;
 801ae40:	e007      	b.n	801ae52 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ae42:	697b      	ldr	r3, [r7, #20]
 801ae44:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ae46:	697b      	ldr	r3, [r7, #20]
 801ae48:	695b      	ldr	r3, [r3, #20]
 801ae4a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ae4c:	697b      	ldr	r3, [r7, #20]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d1e2      	bne.n	801ae18 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ae52:	2300      	movs	r3, #0
 801ae54:	77fb      	strb	r3, [r7, #31]
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	f383 8810 	msr	PRIMASK, r3
}
 801ae60:	e001      	b.n	801ae66 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ae62:	2301      	movs	r3, #1
 801ae64:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801ae66:	7ffb      	ldrb	r3, [r7, #31]
}
 801ae68:	4618      	mov	r0, r3
 801ae6a:	3720      	adds	r7, #32
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bd80      	pop	{r7, pc}
 801ae70:	20001260 	.word	0x20001260
 801ae74:	0801c068 	.word	0x0801c068

0801ae78 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ae82:	2300      	movs	r3, #0
 801ae84:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d102      	bne.n	801ae92 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	73fb      	strb	r3, [r7, #15]
 801ae90:	e014      	b.n	801aebc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ae92:	4b0d      	ldr	r3, [pc, #52]	; (801aec8 <UTIL_TIMER_SetPeriod+0x50>)
 801ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae96:	6838      	ldr	r0, [r7, #0]
 801ae98:	4798      	blx	r3
 801ae9a:	4602      	mov	r2, r0
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f000 f8c1 	bl	801b028 <TimerExists>
 801aea6:	4603      	mov	r3, r0
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d007      	beq.n	801aebc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f7ff ff73 	bl	801ad98 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801aeb2:	6878      	ldr	r0, [r7, #4]
 801aeb4:	f7ff ff02 	bl	801acbc <UTIL_TIMER_Start>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 801aebe:	4618      	mov	r0, r3
 801aec0:	3710      	adds	r7, #16
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	0801c068 	.word	0x0801c068

0801aecc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801aecc:	b590      	push	{r4, r7, lr}
 801aece:	b089      	sub	sp, #36	; 0x24
 801aed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aed2:	f3ef 8310 	mrs	r3, PRIMASK
 801aed6:	60bb      	str	r3, [r7, #8]
  return(result);
 801aed8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801aeda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801aedc:	b672      	cpsid	i
}
 801aede:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801aee0:	4b38      	ldr	r3, [pc, #224]	; (801afc4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aee2:	695b      	ldr	r3, [r3, #20]
 801aee4:	4798      	blx	r3
 801aee6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801aee8:	4b36      	ldr	r3, [pc, #216]	; (801afc4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aeea:	691b      	ldr	r3, [r3, #16]
 801aeec:	4798      	blx	r3
 801aeee:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801aef0:	693a      	ldr	r2, [r7, #16]
 801aef2:	697b      	ldr	r3, [r7, #20]
 801aef4:	1ad3      	subs	r3, r2, r3
 801aef6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801aef8:	4b33      	ldr	r3, [pc, #204]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d037      	beq.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801af00:	4b31      	ldr	r3, [pc, #196]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801af06:	69fb      	ldr	r3, [r7, #28]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	68fa      	ldr	r2, [r7, #12]
 801af0c:	429a      	cmp	r2, r3
 801af0e:	d206      	bcs.n	801af1e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	1ad2      	subs	r2, r2, r3
 801af18:	69fb      	ldr	r3, [r7, #28]
 801af1a:	601a      	str	r2, [r3, #0]
 801af1c:	e002      	b.n	801af24 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	2200      	movs	r2, #0
 801af22:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	695b      	ldr	r3, [r3, #20]
 801af28:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801af2a:	69fb      	ldr	r3, [r7, #28]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d1ea      	bne.n	801af06 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801af30:	e01e      	b.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801af32:	4b25      	ldr	r3, [pc, #148]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801af38:	4b23      	ldr	r3, [pc, #140]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	695b      	ldr	r3, [r3, #20]
 801af3e:	4a22      	ldr	r2, [pc, #136]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af40:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801af42:	69fb      	ldr	r3, [r7, #28]
 801af44:	2200      	movs	r2, #0
 801af46:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801af48:	69fb      	ldr	r3, [r7, #28]
 801af4a:	2200      	movs	r2, #0
 801af4c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801af4e:	69fb      	ldr	r3, [r7, #28]
 801af50:	68db      	ldr	r3, [r3, #12]
 801af52:	69fa      	ldr	r2, [r7, #28]
 801af54:	6912      	ldr	r2, [r2, #16]
 801af56:	4610      	mov	r0, r2
 801af58:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801af5a:	69fb      	ldr	r3, [r7, #28]
 801af5c:	7adb      	ldrb	r3, [r3, #11]
 801af5e:	2b01      	cmp	r3, #1
 801af60:	d106      	bne.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	7a9b      	ldrb	r3, [r3, #10]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d102      	bne.n	801af70 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801af6a:	69f8      	ldr	r0, [r7, #28]
 801af6c:	f7ff fea6 	bl	801acbc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801af70:	4b15      	ldr	r3, [pc, #84]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d00d      	beq.n	801af94 <UTIL_TIMER_IRQ_Handler+0xc8>
 801af78:	4b13      	ldr	r3, [pc, #76]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d0d7      	beq.n	801af32 <UTIL_TIMER_IRQ_Handler+0x66>
 801af82:	4b11      	ldr	r3, [pc, #68]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	681c      	ldr	r4, [r3, #0]
 801af88:	4b0e      	ldr	r3, [pc, #56]	; (801afc4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801af8a:	699b      	ldr	r3, [r3, #24]
 801af8c:	4798      	blx	r3
 801af8e:	4603      	mov	r3, r0
 801af90:	429c      	cmp	r4, r3
 801af92:	d3ce      	bcc.n	801af32 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801af94:	4b0c      	ldr	r3, [pc, #48]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d009      	beq.n	801afb0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801af9c:	4b0a      	ldr	r3, [pc, #40]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	7a1b      	ldrb	r3, [r3, #8]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d104      	bne.n	801afb0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801afa6:	4b08      	ldr	r3, [pc, #32]	; (801afc8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	4618      	mov	r0, r3
 801afac:	f000 f858 	bl	801b060 <TimerSetTimeout>
 801afb0:	69bb      	ldr	r3, [r7, #24]
 801afb2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f383 8810 	msr	PRIMASK, r3
}
 801afba:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801afbc:	bf00      	nop
 801afbe:	3724      	adds	r7, #36	; 0x24
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bd90      	pop	{r4, r7, pc}
 801afc4:	0801c068 	.word	0x0801c068
 801afc8:	20001260 	.word	0x20001260

0801afcc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801afd2:	4b06      	ldr	r3, [pc, #24]	; (801afec <UTIL_TIMER_GetCurrentTime+0x20>)
 801afd4:	69db      	ldr	r3, [r3, #28]
 801afd6:	4798      	blx	r3
 801afd8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801afda:	4b04      	ldr	r3, [pc, #16]	; (801afec <UTIL_TIMER_GetCurrentTime+0x20>)
 801afdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afde:	6878      	ldr	r0, [r7, #4]
 801afe0:	4798      	blx	r3
 801afe2:	4603      	mov	r3, r0
}
 801afe4:	4618      	mov	r0, r3
 801afe6:	3708      	adds	r7, #8
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}
 801afec:	0801c068 	.word	0x0801c068

0801aff0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b084      	sub	sp, #16
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801aff8:	4b0a      	ldr	r3, [pc, #40]	; (801b024 <UTIL_TIMER_GetElapsedTime+0x34>)
 801affa:	69db      	ldr	r3, [r3, #28]
 801affc:	4798      	blx	r3
 801affe:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b000:	4b08      	ldr	r3, [pc, #32]	; (801b024 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b004:	6878      	ldr	r0, [r7, #4]
 801b006:	4798      	blx	r3
 801b008:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b00a:	4b06      	ldr	r3, [pc, #24]	; (801b024 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b00e:	68f9      	ldr	r1, [r7, #12]
 801b010:	68ba      	ldr	r2, [r7, #8]
 801b012:	1a8a      	subs	r2, r1, r2
 801b014:	4610      	mov	r0, r2
 801b016:	4798      	blx	r3
 801b018:	4603      	mov	r3, r0
}
 801b01a:	4618      	mov	r0, r3
 801b01c:	3710      	adds	r7, #16
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	0801c068 	.word	0x0801c068

0801b028 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b028:	b480      	push	{r7}
 801b02a:	b085      	sub	sp, #20
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b030:	4b0a      	ldr	r3, [pc, #40]	; (801b05c <TimerExists+0x34>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b036:	e008      	b.n	801b04a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b038:	68fa      	ldr	r2, [r7, #12]
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	429a      	cmp	r2, r3
 801b03e:	d101      	bne.n	801b044 <TimerExists+0x1c>
    {
      return true;
 801b040:	2301      	movs	r3, #1
 801b042:	e006      	b.n	801b052 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	695b      	ldr	r3, [r3, #20]
 801b048:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d1f3      	bne.n	801b038 <TimerExists+0x10>
  }
  return false;
 801b050:	2300      	movs	r3, #0
}
 801b052:	4618      	mov	r0, r3
 801b054:	3714      	adds	r7, #20
 801b056:	46bd      	mov	sp, r7
 801b058:	bc80      	pop	{r7}
 801b05a:	4770      	bx	lr
 801b05c:	20001260 	.word	0x20001260

0801b060 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b060:	b590      	push	{r4, r7, lr}
 801b062:	b085      	sub	sp, #20
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b068:	4b11      	ldr	r3, [pc, #68]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b06a:	6a1b      	ldr	r3, [r3, #32]
 801b06c:	4798      	blx	r3
 801b06e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	2201      	movs	r2, #1
 801b074:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681c      	ldr	r4, [r3, #0]
 801b07a:	4b0d      	ldr	r3, [pc, #52]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b07c:	699b      	ldr	r3, [r3, #24]
 801b07e:	4798      	blx	r3
 801b080:	4602      	mov	r2, r0
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	4413      	add	r3, r2
 801b086:	429c      	cmp	r4, r3
 801b088:	d207      	bcs.n	801b09a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b08a:	4b09      	ldr	r3, [pc, #36]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b08c:	699b      	ldr	r3, [r3, #24]
 801b08e:	4798      	blx	r3
 801b090:	4602      	mov	r2, r0
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	441a      	add	r2, r3
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b09a:	4b05      	ldr	r3, [pc, #20]	; (801b0b0 <TimerSetTimeout+0x50>)
 801b09c:	689b      	ldr	r3, [r3, #8]
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	6812      	ldr	r2, [r2, #0]
 801b0a2:	4610      	mov	r0, r2
 801b0a4:	4798      	blx	r3
}
 801b0a6:	bf00      	nop
 801b0a8:	3714      	adds	r7, #20
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	bd90      	pop	{r4, r7, pc}
 801b0ae:	bf00      	nop
 801b0b0:	0801c068 	.word	0x0801c068

0801b0b4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b0b4:	b480      	push	{r7}
 801b0b6:	b085      	sub	sp, #20
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b0bc:	4b14      	ldr	r3, [pc, #80]	; (801b110 <TimerInsertTimer+0x5c>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b0c2:	4b13      	ldr	r3, [pc, #76]	; (801b110 <TimerInsertTimer+0x5c>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	695b      	ldr	r3, [r3, #20]
 801b0c8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b0ca:	e012      	b.n	801b0f2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	681a      	ldr	r2, [r3, #0]
 801b0d0:	68bb      	ldr	r3, [r7, #8]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d905      	bls.n	801b0e4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b0dc:	68bb      	ldr	r3, [r7, #8]
 801b0de:	695b      	ldr	r3, [r3, #20]
 801b0e0:	60bb      	str	r3, [r7, #8]
 801b0e2:	e006      	b.n	801b0f2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	687a      	ldr	r2, [r7, #4]
 801b0e8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	68ba      	ldr	r2, [r7, #8]
 801b0ee:	615a      	str	r2, [r3, #20]
        return;
 801b0f0:	e009      	b.n	801b106 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	695b      	ldr	r3, [r3, #20]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d1e8      	bne.n	801b0cc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	687a      	ldr	r2, [r7, #4]
 801b0fe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2200      	movs	r2, #0
 801b104:	615a      	str	r2, [r3, #20]
}
 801b106:	3714      	adds	r7, #20
 801b108:	46bd      	mov	sp, r7
 801b10a:	bc80      	pop	{r7}
 801b10c:	4770      	bx	lr
 801b10e:	bf00      	nop
 801b110:	20001260 	.word	0x20001260

0801b114 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b084      	sub	sp, #16
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b11c:	4b0b      	ldr	r3, [pc, #44]	; (801b14c <TimerInsertNewHeadTimer+0x38>)
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d002      	beq.n	801b12e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	2200      	movs	r2, #0
 801b12c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	68fa      	ldr	r2, [r7, #12]
 801b132:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b134:	4a05      	ldr	r2, [pc, #20]	; (801b14c <TimerInsertNewHeadTimer+0x38>)
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b13a:	4b04      	ldr	r3, [pc, #16]	; (801b14c <TimerInsertNewHeadTimer+0x38>)
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	4618      	mov	r0, r3
 801b140:	f7ff ff8e 	bl	801b060 <TimerSetTimeout>
}
 801b144:	bf00      	nop
 801b146:	3710      	adds	r7, #16
 801b148:	46bd      	mov	sp, r7
 801b14a:	bd80      	pop	{r7, pc}
 801b14c:	20001260 	.word	0x20001260

0801b150 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b150:	b580      	push	{r7, lr}
 801b152:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b154:	2218      	movs	r2, #24
 801b156:	2100      	movs	r1, #0
 801b158:	4807      	ldr	r0, [pc, #28]	; (801b178 <UTIL_ADV_TRACE_Init+0x28>)
 801b15a:	f7ff f80e 	bl	801a17a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b15e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b162:	2100      	movs	r1, #0
 801b164:	4805      	ldr	r0, [pc, #20]	; (801b17c <UTIL_ADV_TRACE_Init+0x2c>)
 801b166:	f7ff f808 	bl	801a17a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b16a:	4b05      	ldr	r3, [pc, #20]	; (801b180 <UTIL_ADV_TRACE_Init+0x30>)
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	4805      	ldr	r0, [pc, #20]	; (801b184 <UTIL_ADV_TRACE_Init+0x34>)
 801b170:	4798      	blx	r3
 801b172:	4603      	mov	r3, r0
}
 801b174:	4618      	mov	r0, r3
 801b176:	bd80      	pop	{r7, pc}
 801b178:	20001264 	.word	0x20001264
 801b17c:	2000127c 	.word	0x2000127c
 801b180:	0801c0a8 	.word	0x0801c0a8
 801b184:	0801b3f5 	.word	0x0801b3f5

0801b188 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b188:	b480      	push	{r7}
 801b18a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b18c:	4b06      	ldr	r3, [pc, #24]	; (801b1a8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b18e:	8a5a      	ldrh	r2, [r3, #18]
 801b190:	4b05      	ldr	r3, [pc, #20]	; (801b1a8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b192:	8a1b      	ldrh	r3, [r3, #16]
 801b194:	429a      	cmp	r2, r3
 801b196:	d101      	bne.n	801b19c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b198:	2301      	movs	r3, #1
 801b19a:	e000      	b.n	801b19e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b19c:	2300      	movs	r3, #0
}
 801b19e:	4618      	mov	r0, r3
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bc80      	pop	{r7}
 801b1a4:	4770      	bx	lr
 801b1a6:	bf00      	nop
 801b1a8:	20001264 	.word	0x20001264

0801b1ac <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b1ac:	b408      	push	{r3}
 801b1ae:	b580      	push	{r7, lr}
 801b1b0:	b08d      	sub	sp, #52	; 0x34
 801b1b2:	af00      	add	r7, sp, #0
 801b1b4:	60f8      	str	r0, [r7, #12]
 801b1b6:	60b9      	str	r1, [r7, #8]
 801b1b8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b1be:	2300      	movs	r3, #0
 801b1c0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b1c2:	4b38      	ldr	r3, [pc, #224]	; (801b2a4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b1c4:	7a1b      	ldrb	r3, [r3, #8]
 801b1c6:	461a      	mov	r2, r3
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	4293      	cmp	r3, r2
 801b1cc:	d902      	bls.n	801b1d4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b1ce:	f06f 0304 	mvn.w	r3, #4
 801b1d2:	e05f      	b.n	801b294 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b1d4:	4b33      	ldr	r3, [pc, #204]	; (801b2a4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b1d6:	68da      	ldr	r2, [r3, #12]
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	4013      	ands	r3, r2
 801b1dc:	68ba      	ldr	r2, [r7, #8]
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	d002      	beq.n	801b1e8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b1e2:	f06f 0305 	mvn.w	r3, #5
 801b1e6:	e055      	b.n	801b294 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b1e8:	4b2e      	ldr	r3, [pc, #184]	; (801b2a4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b1ea:	685b      	ldr	r3, [r3, #4]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d00a      	beq.n	801b206 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d007      	beq.n	801b206 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b1f6:	4b2b      	ldr	r3, [pc, #172]	; (801b2a4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b1f8:	685b      	ldr	r3, [r3, #4]
 801b1fa:	f107 0116 	add.w	r1, r7, #22
 801b1fe:	f107 0218 	add.w	r2, r7, #24
 801b202:	4610      	mov	r0, r2
 801b204:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b20a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b20e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b210:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b214:	4824      	ldr	r0, [pc, #144]	; (801b2a8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b216:	f7ff fa3f 	bl	801a698 <tiny_vsnprintf_like>
 801b21a:	4603      	mov	r3, r0
 801b21c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801b21e:	f000 f9f3 	bl	801b608 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b222:	8afa      	ldrh	r2, [r7, #22]
 801b224:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b226:	4413      	add	r3, r2
 801b228:	b29b      	uxth	r3, r3
 801b22a:	f107 0214 	add.w	r2, r7, #20
 801b22e:	4611      	mov	r1, r2
 801b230:	4618      	mov	r0, r3
 801b232:	f000 f96b 	bl	801b50c <TRACE_AllocateBufer>
 801b236:	4603      	mov	r3, r0
 801b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b23c:	d026      	beq.n	801b28c <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b23e:	2300      	movs	r3, #0
 801b240:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801b242:	e00f      	b.n	801b264 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b244:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b246:	8aba      	ldrh	r2, [r7, #20]
 801b248:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801b24c:	440b      	add	r3, r1
 801b24e:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b252:	4b16      	ldr	r3, [pc, #88]	; (801b2ac <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801b254:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b256:	8abb      	ldrh	r3, [r7, #20]
 801b258:	3301      	adds	r3, #1
 801b25a:	b29b      	uxth	r3, r3
 801b25c:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b25e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b260:	3301      	adds	r3, #1
 801b262:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801b264:	8afb      	ldrh	r3, [r7, #22]
 801b266:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b268:	429a      	cmp	r2, r3
 801b26a:	d3eb      	bcc.n	801b244 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b26c:	8abb      	ldrh	r3, [r7, #20]
 801b26e:	461a      	mov	r2, r3
 801b270:	4b0e      	ldr	r3, [pc, #56]	; (801b2ac <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801b272:	18d0      	adds	r0, r2, r3
 801b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b278:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b27c:	f7ff fa0c 	bl	801a698 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b280:	f000 f9e0 	bl	801b644 <TRACE_UnLock>

    return TRACE_Send();
 801b284:	f000 f832 	bl	801b2ec <TRACE_Send>
 801b288:	4603      	mov	r3, r0
 801b28a:	e003      	b.n	801b294 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b28c:	f000 f9da 	bl	801b644 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b290:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b294:	4618      	mov	r0, r3
 801b296:	3734      	adds	r7, #52	; 0x34
 801b298:	46bd      	mov	sp, r7
 801b29a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b29e:	b001      	add	sp, #4
 801b2a0:	4770      	bx	lr
 801b2a2:	bf00      	nop
 801b2a4:	20001264 	.word	0x20001264
 801b2a8:	2000167c 	.word	0x2000167c
 801b2ac:	2000127c 	.word	0x2000127c

0801b2b0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b2b0:	b480      	push	{r7}
 801b2b2:	b083      	sub	sp, #12
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b2b8:	4a03      	ldr	r2, [pc, #12]	; (801b2c8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	6053      	str	r3, [r2, #4]
}
 801b2be:	bf00      	nop
 801b2c0:	370c      	adds	r7, #12
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bc80      	pop	{r7}
 801b2c6:	4770      	bx	lr
 801b2c8:	20001264 	.word	0x20001264

0801b2cc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b2cc:	b480      	push	{r7}
 801b2ce:	b083      	sub	sp, #12
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	4603      	mov	r3, r0
 801b2d4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b2d6:	4a04      	ldr	r2, [pc, #16]	; (801b2e8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b2d8:	79fb      	ldrb	r3, [r7, #7]
 801b2da:	7213      	strb	r3, [r2, #8]
}
 801b2dc:	bf00      	nop
 801b2de:	370c      	adds	r7, #12
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bc80      	pop	{r7}
 801b2e4:	4770      	bx	lr
 801b2e6:	bf00      	nop
 801b2e8:	20001264 	.word	0x20001264

0801b2ec <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	b088      	sub	sp, #32
 801b2f0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b2f6:	2300      	movs	r3, #0
 801b2f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b2fe:	613b      	str	r3, [r7, #16]
  return(result);
 801b300:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b304:	b672      	cpsid	i
}
 801b306:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b308:	f000 f9ba 	bl	801b680 <TRACE_IsLocked>
 801b30c:	4603      	mov	r3, r0
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d15d      	bne.n	801b3ce <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b312:	f000 f979 	bl	801b608 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b316:	4b34      	ldr	r3, [pc, #208]	; (801b3e8 <TRACE_Send+0xfc>)
 801b318:	8a1a      	ldrh	r2, [r3, #16]
 801b31a:	4b33      	ldr	r3, [pc, #204]	; (801b3e8 <TRACE_Send+0xfc>)
 801b31c:	8a5b      	ldrh	r3, [r3, #18]
 801b31e:	429a      	cmp	r2, r3
 801b320:	d04d      	beq.n	801b3be <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b322:	4b31      	ldr	r3, [pc, #196]	; (801b3e8 <TRACE_Send+0xfc>)
 801b324:	789b      	ldrb	r3, [r3, #2]
 801b326:	2b01      	cmp	r3, #1
 801b328:	d117      	bne.n	801b35a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b32a:	4b2f      	ldr	r3, [pc, #188]	; (801b3e8 <TRACE_Send+0xfc>)
 801b32c:	881a      	ldrh	r2, [r3, #0]
 801b32e:	4b2e      	ldr	r3, [pc, #184]	; (801b3e8 <TRACE_Send+0xfc>)
 801b330:	8a1b      	ldrh	r3, [r3, #16]
 801b332:	1ad3      	subs	r3, r2, r3
 801b334:	b29a      	uxth	r2, r3
 801b336:	4b2c      	ldr	r3, [pc, #176]	; (801b3e8 <TRACE_Send+0xfc>)
 801b338:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b33a:	4b2b      	ldr	r3, [pc, #172]	; (801b3e8 <TRACE_Send+0xfc>)
 801b33c:	2202      	movs	r2, #2
 801b33e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b340:	4b29      	ldr	r3, [pc, #164]	; (801b3e8 <TRACE_Send+0xfc>)
 801b342:	2200      	movs	r2, #0
 801b344:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b346:	4b28      	ldr	r3, [pc, #160]	; (801b3e8 <TRACE_Send+0xfc>)
 801b348:	8a9b      	ldrh	r3, [r3, #20]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d105      	bne.n	801b35a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b34e:	4b26      	ldr	r3, [pc, #152]	; (801b3e8 <TRACE_Send+0xfc>)
 801b350:	2200      	movs	r2, #0
 801b352:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b354:	4b24      	ldr	r3, [pc, #144]	; (801b3e8 <TRACE_Send+0xfc>)
 801b356:	2200      	movs	r2, #0
 801b358:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b35a:	4b23      	ldr	r3, [pc, #140]	; (801b3e8 <TRACE_Send+0xfc>)
 801b35c:	789b      	ldrb	r3, [r3, #2]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d115      	bne.n	801b38e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b362:	4b21      	ldr	r3, [pc, #132]	; (801b3e8 <TRACE_Send+0xfc>)
 801b364:	8a5a      	ldrh	r2, [r3, #18]
 801b366:	4b20      	ldr	r3, [pc, #128]	; (801b3e8 <TRACE_Send+0xfc>)
 801b368:	8a1b      	ldrh	r3, [r3, #16]
 801b36a:	429a      	cmp	r2, r3
 801b36c:	d908      	bls.n	801b380 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b36e:	4b1e      	ldr	r3, [pc, #120]	; (801b3e8 <TRACE_Send+0xfc>)
 801b370:	8a5a      	ldrh	r2, [r3, #18]
 801b372:	4b1d      	ldr	r3, [pc, #116]	; (801b3e8 <TRACE_Send+0xfc>)
 801b374:	8a1b      	ldrh	r3, [r3, #16]
 801b376:	1ad3      	subs	r3, r2, r3
 801b378:	b29a      	uxth	r2, r3
 801b37a:	4b1b      	ldr	r3, [pc, #108]	; (801b3e8 <TRACE_Send+0xfc>)
 801b37c:	829a      	strh	r2, [r3, #20]
 801b37e:	e006      	b.n	801b38e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b380:	4b19      	ldr	r3, [pc, #100]	; (801b3e8 <TRACE_Send+0xfc>)
 801b382:	8a1b      	ldrh	r3, [r3, #16]
 801b384:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b388:	b29a      	uxth	r2, r3
 801b38a:	4b17      	ldr	r3, [pc, #92]	; (801b3e8 <TRACE_Send+0xfc>)
 801b38c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b38e:	4b16      	ldr	r3, [pc, #88]	; (801b3e8 <TRACE_Send+0xfc>)
 801b390:	8a1b      	ldrh	r3, [r3, #16]
 801b392:	461a      	mov	r2, r3
 801b394:	4b15      	ldr	r3, [pc, #84]	; (801b3ec <TRACE_Send+0x100>)
 801b396:	4413      	add	r3, r2
 801b398:	61bb      	str	r3, [r7, #24]
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	f383 8810 	msr	PRIMASK, r3
}
 801b3a4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b3a6:	f7e6 fa99 	bl	80018dc <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b3aa:	4b11      	ldr	r3, [pc, #68]	; (801b3f0 <TRACE_Send+0x104>)
 801b3ac:	68db      	ldr	r3, [r3, #12]
 801b3ae:	4a0e      	ldr	r2, [pc, #56]	; (801b3e8 <TRACE_Send+0xfc>)
 801b3b0:	8a92      	ldrh	r2, [r2, #20]
 801b3b2:	4611      	mov	r1, r2
 801b3b4:	69b8      	ldr	r0, [r7, #24]
 801b3b6:	4798      	blx	r3
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	77fb      	strb	r3, [r7, #31]
 801b3bc:	e00d      	b.n	801b3da <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b3be:	f000 f941 	bl	801b644 <TRACE_UnLock>
 801b3c2:	697b      	ldr	r3, [r7, #20]
 801b3c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3c6:	68bb      	ldr	r3, [r7, #8]
 801b3c8:	f383 8810 	msr	PRIMASK, r3
}
 801b3cc:	e005      	b.n	801b3da <TRACE_Send+0xee>
 801b3ce:	697b      	ldr	r3, [r7, #20]
 801b3d0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	f383 8810 	msr	PRIMASK, r3
}
 801b3d8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b3da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b3de:	4618      	mov	r0, r3
 801b3e0:	3720      	adds	r7, #32
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	bd80      	pop	{r7, pc}
 801b3e6:	bf00      	nop
 801b3e8:	20001264 	.word	0x20001264
 801b3ec:	2000127c 	.word	0x2000127c
 801b3f0:	0801c0a8 	.word	0x0801c0a8

0801b3f4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b088      	sub	sp, #32
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b400:	f3ef 8310 	mrs	r3, PRIMASK
 801b404:	617b      	str	r3, [r7, #20]
  return(result);
 801b406:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b408:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b40a:	b672      	cpsid	i
}
 801b40c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b40e:	4b3c      	ldr	r3, [pc, #240]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b410:	789b      	ldrb	r3, [r3, #2]
 801b412:	2b02      	cmp	r3, #2
 801b414:	d106      	bne.n	801b424 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b416:	4b3a      	ldr	r3, [pc, #232]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b418:	2200      	movs	r2, #0
 801b41a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b41c:	4b38      	ldr	r3, [pc, #224]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b41e:	2200      	movs	r2, #0
 801b420:	821a      	strh	r2, [r3, #16]
 801b422:	e00a      	b.n	801b43a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b424:	4b36      	ldr	r3, [pc, #216]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b426:	8a1a      	ldrh	r2, [r3, #16]
 801b428:	4b35      	ldr	r3, [pc, #212]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b42a:	8a9b      	ldrh	r3, [r3, #20]
 801b42c:	4413      	add	r3, r2
 801b42e:	b29b      	uxth	r3, r3
 801b430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b434:	b29a      	uxth	r2, r3
 801b436:	4b32      	ldr	r3, [pc, #200]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b438:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b43a:	4b31      	ldr	r3, [pc, #196]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b43c:	8a1a      	ldrh	r2, [r3, #16]
 801b43e:	4b30      	ldr	r3, [pc, #192]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b440:	8a5b      	ldrh	r3, [r3, #18]
 801b442:	429a      	cmp	r2, r3
 801b444:	d04d      	beq.n	801b4e2 <TRACE_TxCpltCallback+0xee>
 801b446:	4b2e      	ldr	r3, [pc, #184]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b448:	8adb      	ldrh	r3, [r3, #22]
 801b44a:	2b01      	cmp	r3, #1
 801b44c:	d149      	bne.n	801b4e2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b44e:	4b2c      	ldr	r3, [pc, #176]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b450:	789b      	ldrb	r3, [r3, #2]
 801b452:	2b01      	cmp	r3, #1
 801b454:	d117      	bne.n	801b486 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b456:	4b2a      	ldr	r3, [pc, #168]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b458:	881a      	ldrh	r2, [r3, #0]
 801b45a:	4b29      	ldr	r3, [pc, #164]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b45c:	8a1b      	ldrh	r3, [r3, #16]
 801b45e:	1ad3      	subs	r3, r2, r3
 801b460:	b29a      	uxth	r2, r3
 801b462:	4b27      	ldr	r3, [pc, #156]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b464:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b466:	4b26      	ldr	r3, [pc, #152]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b468:	2202      	movs	r2, #2
 801b46a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b46c:	4b24      	ldr	r3, [pc, #144]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b46e:	2200      	movs	r2, #0
 801b470:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b472:	4b23      	ldr	r3, [pc, #140]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b474:	8a9b      	ldrh	r3, [r3, #20]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d105      	bne.n	801b486 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b47a:	4b21      	ldr	r3, [pc, #132]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b47c:	2200      	movs	r2, #0
 801b47e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b480:	4b1f      	ldr	r3, [pc, #124]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b482:	2200      	movs	r2, #0
 801b484:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b486:	4b1e      	ldr	r3, [pc, #120]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b488:	789b      	ldrb	r3, [r3, #2]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d115      	bne.n	801b4ba <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b48e:	4b1c      	ldr	r3, [pc, #112]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b490:	8a5a      	ldrh	r2, [r3, #18]
 801b492:	4b1b      	ldr	r3, [pc, #108]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b494:	8a1b      	ldrh	r3, [r3, #16]
 801b496:	429a      	cmp	r2, r3
 801b498:	d908      	bls.n	801b4ac <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b49a:	4b19      	ldr	r3, [pc, #100]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b49c:	8a5a      	ldrh	r2, [r3, #18]
 801b49e:	4b18      	ldr	r3, [pc, #96]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b4a0:	8a1b      	ldrh	r3, [r3, #16]
 801b4a2:	1ad3      	subs	r3, r2, r3
 801b4a4:	b29a      	uxth	r2, r3
 801b4a6:	4b16      	ldr	r3, [pc, #88]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b4a8:	829a      	strh	r2, [r3, #20]
 801b4aa:	e006      	b.n	801b4ba <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b4ac:	4b14      	ldr	r3, [pc, #80]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b4ae:	8a1b      	ldrh	r3, [r3, #16]
 801b4b0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b4b4:	b29a      	uxth	r2, r3
 801b4b6:	4b12      	ldr	r3, [pc, #72]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b4b8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b4ba:	4b11      	ldr	r3, [pc, #68]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b4bc:	8a1b      	ldrh	r3, [r3, #16]
 801b4be:	461a      	mov	r2, r3
 801b4c0:	4b10      	ldr	r3, [pc, #64]	; (801b504 <TRACE_TxCpltCallback+0x110>)
 801b4c2:	4413      	add	r3, r2
 801b4c4:	61fb      	str	r3, [r7, #28]
 801b4c6:	69bb      	ldr	r3, [r7, #24]
 801b4c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4ca:	693b      	ldr	r3, [r7, #16]
 801b4cc:	f383 8810 	msr	PRIMASK, r3
}
 801b4d0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b4d2:	4b0d      	ldr	r3, [pc, #52]	; (801b508 <TRACE_TxCpltCallback+0x114>)
 801b4d4:	68db      	ldr	r3, [r3, #12]
 801b4d6:	4a0a      	ldr	r2, [pc, #40]	; (801b500 <TRACE_TxCpltCallback+0x10c>)
 801b4d8:	8a92      	ldrh	r2, [r2, #20]
 801b4da:	4611      	mov	r1, r2
 801b4dc:	69f8      	ldr	r0, [r7, #28]
 801b4de:	4798      	blx	r3
 801b4e0:	e00a      	b.n	801b4f8 <TRACE_TxCpltCallback+0x104>
 801b4e2:	69bb      	ldr	r3, [r7, #24]
 801b4e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	f383 8810 	msr	PRIMASK, r3
}
 801b4ec:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b4ee:	f7e6 f9fd 	bl	80018ec <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b4f2:	f000 f8a7 	bl	801b644 <TRACE_UnLock>
  }
}
 801b4f6:	bf00      	nop
 801b4f8:	bf00      	nop
 801b4fa:	3720      	adds	r7, #32
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	20001264 	.word	0x20001264
 801b504:	2000127c 	.word	0x2000127c
 801b508:	0801c0a8 	.word	0x0801c0a8

0801b50c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b50c:	b480      	push	{r7}
 801b50e:	b087      	sub	sp, #28
 801b510:	af00      	add	r7, sp, #0
 801b512:	4603      	mov	r3, r0
 801b514:	6039      	str	r1, [r7, #0]
 801b516:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b51c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b51e:	f3ef 8310 	mrs	r3, PRIMASK
 801b522:	60fb      	str	r3, [r7, #12]
  return(result);
 801b524:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b528:	b672      	cpsid	i
}
 801b52a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b52c:	4b35      	ldr	r3, [pc, #212]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b52e:	8a5a      	ldrh	r2, [r3, #18]
 801b530:	4b34      	ldr	r3, [pc, #208]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b532:	8a1b      	ldrh	r3, [r3, #16]
 801b534:	429a      	cmp	r2, r3
 801b536:	d11b      	bne.n	801b570 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b538:	4b32      	ldr	r3, [pc, #200]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b53a:	8a5b      	ldrh	r3, [r3, #18]
 801b53c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b540:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b542:	88fa      	ldrh	r2, [r7, #6]
 801b544:	8afb      	ldrh	r3, [r7, #22]
 801b546:	429a      	cmp	r2, r3
 801b548:	d33a      	bcc.n	801b5c0 <TRACE_AllocateBufer+0xb4>
 801b54a:	4b2e      	ldr	r3, [pc, #184]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b54c:	8a1b      	ldrh	r3, [r3, #16]
 801b54e:	88fa      	ldrh	r2, [r7, #6]
 801b550:	429a      	cmp	r2, r3
 801b552:	d235      	bcs.n	801b5c0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b554:	4b2b      	ldr	r3, [pc, #172]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b556:	2201      	movs	r2, #1
 801b558:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b55a:	4b2a      	ldr	r3, [pc, #168]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b55c:	8a5a      	ldrh	r2, [r3, #18]
 801b55e:	4b29      	ldr	r3, [pc, #164]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b560:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b562:	4b28      	ldr	r3, [pc, #160]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b564:	8a1b      	ldrh	r3, [r3, #16]
 801b566:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b568:	4b26      	ldr	r3, [pc, #152]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b56a:	2200      	movs	r2, #0
 801b56c:	825a      	strh	r2, [r3, #18]
 801b56e:	e027      	b.n	801b5c0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b570:	4b24      	ldr	r3, [pc, #144]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b572:	8a5a      	ldrh	r2, [r3, #18]
 801b574:	4b23      	ldr	r3, [pc, #140]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b576:	8a1b      	ldrh	r3, [r3, #16]
 801b578:	429a      	cmp	r2, r3
 801b57a:	d91b      	bls.n	801b5b4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b57c:	4b21      	ldr	r3, [pc, #132]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b57e:	8a5b      	ldrh	r3, [r3, #18]
 801b580:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801b584:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b586:	88fa      	ldrh	r2, [r7, #6]
 801b588:	8afb      	ldrh	r3, [r7, #22]
 801b58a:	429a      	cmp	r2, r3
 801b58c:	d318      	bcc.n	801b5c0 <TRACE_AllocateBufer+0xb4>
 801b58e:	4b1d      	ldr	r3, [pc, #116]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b590:	8a1b      	ldrh	r3, [r3, #16]
 801b592:	88fa      	ldrh	r2, [r7, #6]
 801b594:	429a      	cmp	r2, r3
 801b596:	d213      	bcs.n	801b5c0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b598:	4b1a      	ldr	r3, [pc, #104]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b59a:	2201      	movs	r2, #1
 801b59c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b59e:	4b19      	ldr	r3, [pc, #100]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5a0:	8a5a      	ldrh	r2, [r3, #18]
 801b5a2:	4b18      	ldr	r3, [pc, #96]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5a4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b5a6:	4b17      	ldr	r3, [pc, #92]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5a8:	8a1b      	ldrh	r3, [r3, #16]
 801b5aa:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b5ac:	4b15      	ldr	r3, [pc, #84]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	825a      	strh	r2, [r3, #18]
 801b5b2:	e005      	b.n	801b5c0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b5b4:	4b13      	ldr	r3, [pc, #76]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5b6:	8a1a      	ldrh	r2, [r3, #16]
 801b5b8:	4b12      	ldr	r3, [pc, #72]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5ba:	8a5b      	ldrh	r3, [r3, #18]
 801b5bc:	1ad3      	subs	r3, r2, r3
 801b5be:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b5c0:	8afa      	ldrh	r2, [r7, #22]
 801b5c2:	88fb      	ldrh	r3, [r7, #6]
 801b5c4:	429a      	cmp	r2, r3
 801b5c6:	d90f      	bls.n	801b5e8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b5c8:	4b0e      	ldr	r3, [pc, #56]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5ca:	8a5a      	ldrh	r2, [r3, #18]
 801b5cc:	683b      	ldr	r3, [r7, #0]
 801b5ce:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b5d0:	4b0c      	ldr	r3, [pc, #48]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5d2:	8a5a      	ldrh	r2, [r3, #18]
 801b5d4:	88fb      	ldrh	r3, [r7, #6]
 801b5d6:	4413      	add	r3, r2
 801b5d8:	b29b      	uxth	r3, r3
 801b5da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b5de:	b29a      	uxth	r2, r3
 801b5e0:	4b08      	ldr	r3, [pc, #32]	; (801b604 <TRACE_AllocateBufer+0xf8>)
 801b5e2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	82bb      	strh	r3, [r7, #20]
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ec:	68bb      	ldr	r3, [r7, #8]
 801b5ee:	f383 8810 	msr	PRIMASK, r3
}
 801b5f2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b5f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	371c      	adds	r7, #28
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bc80      	pop	{r7}
 801b600:	4770      	bx	lr
 801b602:	bf00      	nop
 801b604:	20001264 	.word	0x20001264

0801b608 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b608:	b480      	push	{r7}
 801b60a:	b085      	sub	sp, #20
 801b60c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b60e:	f3ef 8310 	mrs	r3, PRIMASK
 801b612:	607b      	str	r3, [r7, #4]
  return(result);
 801b614:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b616:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b618:	b672      	cpsid	i
}
 801b61a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b61c:	4b08      	ldr	r3, [pc, #32]	; (801b640 <TRACE_Lock+0x38>)
 801b61e:	8adb      	ldrh	r3, [r3, #22]
 801b620:	3301      	adds	r3, #1
 801b622:	b29a      	uxth	r2, r3
 801b624:	4b06      	ldr	r3, [pc, #24]	; (801b640 <TRACE_Lock+0x38>)
 801b626:	82da      	strh	r2, [r3, #22]
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	f383 8810 	msr	PRIMASK, r3
}
 801b632:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b634:	bf00      	nop
 801b636:	3714      	adds	r7, #20
 801b638:	46bd      	mov	sp, r7
 801b63a:	bc80      	pop	{r7}
 801b63c:	4770      	bx	lr
 801b63e:	bf00      	nop
 801b640:	20001264 	.word	0x20001264

0801b644 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b644:	b480      	push	{r7}
 801b646:	b085      	sub	sp, #20
 801b648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b64a:	f3ef 8310 	mrs	r3, PRIMASK
 801b64e:	607b      	str	r3, [r7, #4]
  return(result);
 801b650:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b652:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b654:	b672      	cpsid	i
}
 801b656:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b658:	4b08      	ldr	r3, [pc, #32]	; (801b67c <TRACE_UnLock+0x38>)
 801b65a:	8adb      	ldrh	r3, [r3, #22]
 801b65c:	3b01      	subs	r3, #1
 801b65e:	b29a      	uxth	r2, r3
 801b660:	4b06      	ldr	r3, [pc, #24]	; (801b67c <TRACE_UnLock+0x38>)
 801b662:	82da      	strh	r2, [r3, #22]
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	f383 8810 	msr	PRIMASK, r3
}
 801b66e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b670:	bf00      	nop
 801b672:	3714      	adds	r7, #20
 801b674:	46bd      	mov	sp, r7
 801b676:	bc80      	pop	{r7}
 801b678:	4770      	bx	lr
 801b67a:	bf00      	nop
 801b67c:	20001264 	.word	0x20001264

0801b680 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b680:	b480      	push	{r7}
 801b682:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b684:	4b05      	ldr	r3, [pc, #20]	; (801b69c <TRACE_IsLocked+0x1c>)
 801b686:	8adb      	ldrh	r3, [r3, #22]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	bf14      	ite	ne
 801b68c:	2301      	movne	r3, #1
 801b68e:	2300      	moveq	r3, #0
 801b690:	b2db      	uxtb	r3, r3
}
 801b692:	4618      	mov	r0, r3
 801b694:	46bd      	mov	sp, r7
 801b696:	bc80      	pop	{r7}
 801b698:	4770      	bx	lr
 801b69a:	bf00      	nop
 801b69c:	20001264 	.word	0x20001264

0801b6a0 <__libc_init_array>:
 801b6a0:	b570      	push	{r4, r5, r6, lr}
 801b6a2:	4d0d      	ldr	r5, [pc, #52]	; (801b6d8 <__libc_init_array+0x38>)
 801b6a4:	4c0d      	ldr	r4, [pc, #52]	; (801b6dc <__libc_init_array+0x3c>)
 801b6a6:	1b64      	subs	r4, r4, r5
 801b6a8:	10a4      	asrs	r4, r4, #2
 801b6aa:	2600      	movs	r6, #0
 801b6ac:	42a6      	cmp	r6, r4
 801b6ae:	d109      	bne.n	801b6c4 <__libc_init_array+0x24>
 801b6b0:	4d0b      	ldr	r5, [pc, #44]	; (801b6e0 <__libc_init_array+0x40>)
 801b6b2:	4c0c      	ldr	r4, [pc, #48]	; (801b6e4 <__libc_init_array+0x44>)
 801b6b4:	f000 f8a0 	bl	801b7f8 <_init>
 801b6b8:	1b64      	subs	r4, r4, r5
 801b6ba:	10a4      	asrs	r4, r4, #2
 801b6bc:	2600      	movs	r6, #0
 801b6be:	42a6      	cmp	r6, r4
 801b6c0:	d105      	bne.n	801b6ce <__libc_init_array+0x2e>
 801b6c2:	bd70      	pop	{r4, r5, r6, pc}
 801b6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6c8:	4798      	blx	r3
 801b6ca:	3601      	adds	r6, #1
 801b6cc:	e7ee      	b.n	801b6ac <__libc_init_array+0xc>
 801b6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6d2:	4798      	blx	r3
 801b6d4:	3601      	adds	r6, #1
 801b6d6:	e7f2      	b.n	801b6be <__libc_init_array+0x1e>
 801b6d8:	0801c61c 	.word	0x0801c61c
 801b6dc:	0801c61c 	.word	0x0801c61c
 801b6e0:	0801c61c 	.word	0x0801c61c
 801b6e4:	0801c620 	.word	0x0801c620

0801b6e8 <memset>:
 801b6e8:	4402      	add	r2, r0
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d100      	bne.n	801b6f2 <memset+0xa>
 801b6f0:	4770      	bx	lr
 801b6f2:	f803 1b01 	strb.w	r1, [r3], #1
 801b6f6:	e7f9      	b.n	801b6ec <memset+0x4>

0801b6f8 <floor>:
 801b6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6fc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b700:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b704:	2e13      	cmp	r6, #19
 801b706:	4602      	mov	r2, r0
 801b708:	460b      	mov	r3, r1
 801b70a:	4607      	mov	r7, r0
 801b70c:	460c      	mov	r4, r1
 801b70e:	4605      	mov	r5, r0
 801b710:	dc34      	bgt.n	801b77c <floor+0x84>
 801b712:	2e00      	cmp	r6, #0
 801b714:	da15      	bge.n	801b742 <floor+0x4a>
 801b716:	a334      	add	r3, pc, #208	; (adr r3, 801b7e8 <floor+0xf0>)
 801b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b71c:	f7e4 fd3a 	bl	8000194 <__adddf3>
 801b720:	2200      	movs	r2, #0
 801b722:	2300      	movs	r3, #0
 801b724:	f7e4 ff6a 	bl	80005fc <__aeabi_dcmpgt>
 801b728:	b140      	cbz	r0, 801b73c <floor+0x44>
 801b72a:	2c00      	cmp	r4, #0
 801b72c:	da59      	bge.n	801b7e2 <floor+0xea>
 801b72e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b732:	ea57 0503 	orrs.w	r5, r7, r3
 801b736:	d001      	beq.n	801b73c <floor+0x44>
 801b738:	4c2d      	ldr	r4, [pc, #180]	; (801b7f0 <floor+0xf8>)
 801b73a:	2500      	movs	r5, #0
 801b73c:	4623      	mov	r3, r4
 801b73e:	462f      	mov	r7, r5
 801b740:	e025      	b.n	801b78e <floor+0x96>
 801b742:	4a2c      	ldr	r2, [pc, #176]	; (801b7f4 <floor+0xfc>)
 801b744:	fa42 f806 	asr.w	r8, r2, r6
 801b748:	ea01 0208 	and.w	r2, r1, r8
 801b74c:	4302      	orrs	r2, r0
 801b74e:	d01e      	beq.n	801b78e <floor+0x96>
 801b750:	a325      	add	r3, pc, #148	; (adr r3, 801b7e8 <floor+0xf0>)
 801b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b756:	f7e4 fd1d 	bl	8000194 <__adddf3>
 801b75a:	2200      	movs	r2, #0
 801b75c:	2300      	movs	r3, #0
 801b75e:	f7e4 ff4d 	bl	80005fc <__aeabi_dcmpgt>
 801b762:	2800      	cmp	r0, #0
 801b764:	d0ea      	beq.n	801b73c <floor+0x44>
 801b766:	2c00      	cmp	r4, #0
 801b768:	bfbe      	ittt	lt
 801b76a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b76e:	fa43 f606 	asrlt.w	r6, r3, r6
 801b772:	19a4      	addlt	r4, r4, r6
 801b774:	ea24 0408 	bic.w	r4, r4, r8
 801b778:	2500      	movs	r5, #0
 801b77a:	e7df      	b.n	801b73c <floor+0x44>
 801b77c:	2e33      	cmp	r6, #51	; 0x33
 801b77e:	dd0a      	ble.n	801b796 <floor+0x9e>
 801b780:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b784:	d103      	bne.n	801b78e <floor+0x96>
 801b786:	f7e4 fd05 	bl	8000194 <__adddf3>
 801b78a:	4607      	mov	r7, r0
 801b78c:	460b      	mov	r3, r1
 801b78e:	4638      	mov	r0, r7
 801b790:	4619      	mov	r1, r3
 801b792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b796:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b79a:	f04f 32ff 	mov.w	r2, #4294967295
 801b79e:	fa22 f808 	lsr.w	r8, r2, r8
 801b7a2:	ea18 0f00 	tst.w	r8, r0
 801b7a6:	d0f2      	beq.n	801b78e <floor+0x96>
 801b7a8:	a30f      	add	r3, pc, #60	; (adr r3, 801b7e8 <floor+0xf0>)
 801b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ae:	f7e4 fcf1 	bl	8000194 <__adddf3>
 801b7b2:	2200      	movs	r2, #0
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	f7e4 ff21 	bl	80005fc <__aeabi_dcmpgt>
 801b7ba:	2800      	cmp	r0, #0
 801b7bc:	d0be      	beq.n	801b73c <floor+0x44>
 801b7be:	2c00      	cmp	r4, #0
 801b7c0:	da02      	bge.n	801b7c8 <floor+0xd0>
 801b7c2:	2e14      	cmp	r6, #20
 801b7c4:	d103      	bne.n	801b7ce <floor+0xd6>
 801b7c6:	3401      	adds	r4, #1
 801b7c8:	ea25 0508 	bic.w	r5, r5, r8
 801b7cc:	e7b6      	b.n	801b73c <floor+0x44>
 801b7ce:	2301      	movs	r3, #1
 801b7d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b7d4:	fa03 f606 	lsl.w	r6, r3, r6
 801b7d8:	4435      	add	r5, r6
 801b7da:	42bd      	cmp	r5, r7
 801b7dc:	bf38      	it	cc
 801b7de:	18e4      	addcc	r4, r4, r3
 801b7e0:	e7f2      	b.n	801b7c8 <floor+0xd0>
 801b7e2:	2500      	movs	r5, #0
 801b7e4:	462c      	mov	r4, r5
 801b7e6:	e7a9      	b.n	801b73c <floor+0x44>
 801b7e8:	8800759c 	.word	0x8800759c
 801b7ec:	7e37e43c 	.word	0x7e37e43c
 801b7f0:	bff00000 	.word	0xbff00000
 801b7f4:	000fffff 	.word	0x000fffff

0801b7f8 <_init>:
 801b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7fa:	bf00      	nop
 801b7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7fe:	bc08      	pop	{r3}
 801b800:	469e      	mov	lr, r3
 801b802:	4770      	bx	lr

0801b804 <_fini>:
 801b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b806:	bf00      	nop
 801b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b80a:	bc08      	pop	{r3}
 801b80c:	469e      	mov	lr, r3
 801b80e:	4770      	bx	lr
